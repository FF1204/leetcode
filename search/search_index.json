{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"readme/","text":"\u9898\u76ee\u6c47\u603b \u00b6 1. Leetcode \u00b6 \u661f\u6807 \u96be\u5ea6 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u9898\u76ee L \u7b80\u5355 \u54c8\u5e0c\u8868 1. \u4e24\u6570\u4e4b\u548c L \u4e2d\u7b49 \u65e0 2. \u4e24\u6570\u76f8\u52a0 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 L \u56f0\u96be \u4e2d\u4f4d\u6570 4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 L \u4e2d\u7b49 \u56de\u6587 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 M \u4e2d\u7b49 \u6570\u5b66 6. Z \u5b57\u5f62\u53d8\u6362 M \u7b80\u5355 \u65e0 7. \u6574\u6570\u53cd\u8f6c M \u4e2d\u7b49 \u65e0 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) L \u7b80\u5355 \u56de\u6587 9. \u56de\u6587\u6570 M \u4e2d\u7b49 \u65e0 12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57 M \u7b80\u5355 \u65e0 14. \u6700\u957f\u516c\u5171\u524d\u7f00 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 15. \u4e09\u6570\u4e4b\u548c L \u4e2d\u7b49 \u9012\u5f52 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 L \u4e2d\u7b49 \u65e0 18. \u56db\u6570\u4e4b\u548c M \u4e2d\u7b49 \u94fe\u8868 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 L \u56f0\u96be \u5806 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 L \u4e2d\u7b49 \u94fe\u8868 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 L \u56f0\u96be \u94fe\u8868 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 L \u56f0\u96be \u54c8\u5e0c\u8868 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 M \u4e2d\u7b49 \u65e0 36. \u6709\u6548\u7684\u6570\u72ec L \u4e2d\u7b49 \u6df1\u641c 39. \u7ec4\u5408\u603b\u548c L \u4e2d\u7b49 \u6df1\u641c 40. \u7ec4\u5408\u603b\u548c II L \u56f0\u96be \u6df1\u641c 42. \u63a5\u96e8\u6c34 M \u7b80\u5355 \u52a8\u6001\u89c4\u5212 53. \u6700\u5927\u5b50\u5e8f\u548c M \u4e2d\u7b49 \u65e0 55. \u8df3\u8dc3\u6e38\u620f M \u4e2d\u7b49 \u65e0 56. \u5408\u5e76\u533a\u95f4 M \u7b80\u5355 \u65e0 58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 62. \u4e0d\u540c\u8def\u5f84 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 64. \u6700\u5c0f\u8def\u5f84\u548c M \u7b80\u5355 \u65e0 66. \u52a0\u4e00 M \u7b80\u5355 \u65e0 67. \u4e8c\u8fdb\u5236\u6c42\u548c M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 L \u4e2d\u7b49 \u94fe\u8868 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II L \u7b80\u5355 \u94fe\u8868 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 M \u7b80\u5355 \u65e0 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 H \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 91. \u89e3\u7801\u65b9\u6cd5 H \u56f0\u96be \u52a8\u6001\u89c4\u5212 639. \u89e3\u7801\u65b9\u6cd5 2 L \u4e2d\u7b49 \u6df1\u641c 93. \u590d\u539fIP\u5730\u5740 M \u4e2d\u7b49 \u4e8c\u53c9\u6811 102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 L \u4e2d\u7b49 \u6700\u77ed\u8def\u5f84 127. \u5355\u8bcd\u63a5\u9f99 H \u56f0\u96be \u5e76\u67e5\u96c6 128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 M \u4e2d\u7b49 \u4e8c\u53c9\u6811 129. \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c L \u4e2d\u7b49 \u6df1\u641c 131. \u5206\u5272\u56de\u6587\u4e32 M \u4e2d\u7b49 \u8d2a\u5fc3 134. \u52a0\u6cb9\u7ad9 M \u7b80\u5355 \u5f02\u6216 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 L \u4e2d\u7b49 \u94fe\u8868 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 M \u4e2d\u7b49 \u94fe\u8868 144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 M \u56f0\u96be \u94fe\u8868 145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 L \u4e2d\u7b49 \u65e0 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c H \u56f0\u96be \u65e0 164. \u6700\u5927\u95f4\u8ddd L \u7b80\u5355 \u6469\u5c14\u6295\u7968 169. \u591a\u6570\u5143\u7d20 M \u7b80\u5355 \u65e0 171. Excel\u8868\u5217\u5e8f\u53f7 L \u4e2d\u7b49 \u6570\u5b66 179. \u6700\u5927\u6570 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 L \u7b80\u5355 \u52a8\u6001\u89c4\u5212 198. \u6253\u5bb6\u52ab\u820d L \u4e2d\u7b49 \u5e76\u67e5\u96c6 200. \u5c9b\u5c7f\u6570\u91cf M \u4e2d\u7b49 \u4e0e 201. \u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e M \u7b80\u5355 \u94fe\u8868 203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 M \u7b80\u5355 \u6570\u5b66 204. \u8ba1\u6570\u8d28\u6570 M \u7b80\u5355 \u54c8\u5e0c\u8868 205. \u540c\u6784\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u56fe\u73af 207. \u8bfe\u7a0b\u8868 L \u56f0\u96be \u524d\u7f00\u6811 212. \u5355\u8bcd\u641c\u7d22 II L \u4e2d\u7b49 \u5feb\u901f\u6392\u5e8f 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 221. \u6700\u5927\u6b63\u65b9\u5f62 L \u56f0\u96be \u6ce2\u5170\u8868\u8fbe\u5f0f 224. \u57fa\u672c\u8ba1\u7b97\u5668 L \u4e2d\u7b49 \u6469\u5c14\u6295\u7968 229. \u6c42\u4f17\u6570 II M \u7b80\u5355 \u6570\u5b66 231. 2\u7684\u5e42 H \u56f0\u96be \u53cc\u5411\u961f\u5217 239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c M \u7b80\u5355 \u54c8\u5e0c\u8868 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd L \u7b80\u5355 \u6570\u5b66 263. \u4e11\u6570 L \u4e2d\u7b49 \u6570\u5b66 264. \u4e11\u6570 II L \u4e2d\u7b49 \u6811\u72b6\u6570\u7ec4 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 L \u4e2d\u7b49 \u6570\u5b66 313. \u8d85\u7ea7\u4e11\u6570 L \u56f0\u96be \u6811\u72b6\u6570\u7ec4 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 H \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 322. \u96f6\u94b1\u5151\u6362 H \u56f0\u96be \u6811\u72b6\u6570\u7ec4 327. \u533a\u95f4\u548c\u7684\u4e2a\u6570 H \u56f0\u96be \u524d\u7f00\u6811 336. \u56de\u6587\u5bf9 M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 378. \u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 L \u4e2d\u7b49 \u6392\u5e8f 386. \u5b57\u5178\u5e8f\u6392\u6570 L \u4e2d\u7b49 \u6570\u5b66 402. \u79fb\u6389K\u4f4d\u6570\u5b57 L \u4e2d\u7b49 \u65e0 406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 L \u7b80\u5355 \u65e0 414. \u7b2c\u4e09\u5927\u7684\u6570 M \u7b80\u5355 \u65e0 415. \u5b57\u7b26\u4e32\u76f8\u52a0 M \u4e2d\u7b49 \u6392\u5e8f 451. \u6839\u636e\u5b57\u7b26\u51fa\u73b0\u9891\u7387\u6392\u5e8f M \u4e2d\u7b49 \u54c8\u5e0c\u8868 454. \u56db\u6570\u76f8\u52a0 II L \u4e2d\u7b49 \u5355\u8c03\u6808 456. 132\u6a21\u5f0f L \u7b80\u5355 \u65e0 463. \u5c9b\u5c7f\u7684\u5468\u957f L \u4e2d\u7b49 \u65e0 468. \u9a8c\u8bc1IP\u5730\u5740 L \u56f0\u96be \u524d\u7f00\u6811 472. \u8fde\u63a5\u8bcd L \u4e2d\u7b49 \u65e0 495. \u63d0\u83ab\u653b\u51fb M \u7b80\u5355 \u6570\u5b66 504. \u4e03\u8fdb\u5236\u6570 L \u4e2d\u7b49 \u4e8c\u53c9\u6811 515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 L \u7b80\u5355 \u65e0 541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II L \u4e2d\u7b49 \u5e76\u67e5\u96c6 547. \u670b\u53cb\u5708 L \u7b80\u5355 \u65e0 605. \u79cd\u82b1\u95ee\u9898 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 L \u4e2d\u7b49 \u65e0 621. \u4efb\u52a1\u8c03\u5ea6\u5668 H \u4e2d\u7b49 \u65e0 649. Dota2 \u53c2\u8bae\u9662 L \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 658. \u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20 L \u4e2d\u7b49 \u5e76\u67e5\u96c6 684. \u5197\u4f59\u8fde\u63a5 L \u56f0\u96be \u5e76\u67e5\u96c6 685. \u5197\u4f59\u8fde\u63a5 II H \u4e2d\u7b49 \u5e76\u67e5\u96c6 714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39 L \u4e2d\u7b49 \u65e0 739. \u6bcf\u65e5\u6e29\u5ea6 L \u4e2d\u7b49 dijkstra 743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 L \u7b80\u5355 \u5806 767. \u91cd\u6784\u5b57\u7b26\u4e32 L \u56f0\u96be \u65e0 768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II L \u4e2d\u7b49 \u65e0 769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 H \u4e2d\u7b49 \u65e0 775. \u5168\u5c40\u5012\u7f6e\u4e0e\u5c40\u90e8\u5012\u7f6e H \u4e2d\u7b49 \u65e0 779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570 L \u4e2d\u7b49 \u6240\u6709\u8def\u5f84 797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 L \u4e2d\u7b49 \u65e0 838. \u63a8\u591a\u7c73\u8bfa L \u56f0\u96be \u5e76\u67e5\u96c6 839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4 L \u4e2d\u7b49 \u65e0 848. \u5b57\u6bcd\u79fb\u4f4d L \u56f0\u96be \u9012\u5f52 854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u8d2a\u5fc3\u6cd5 870. \u4f18\u52bf\u6d17\u724c M \u7b80\u5355 \u4e8c\u53c9\u6811 872. \u53f6\u5b50\u76f8\u4f3c\u7684\u6811 L \u4e2d\u7b49 \u65e0 881. \u6551\u751f\u8247 L \u7b80\u5355 \u65e0 890. \u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f L \u4e2d\u7b49 \u65e0 915. \u5206\u5272\u6570\u7ec4 L \u4e2d\u7b49 \u6808 921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 L \u56f0\u96be \u5e76\u67e5\u96c6 924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad M \u56f0\u96be \u65e0 927. \u4e09\u7b49\u5206 M \u7b80\u5355 \u8d2a\u5fc3 944. \u5220\u5217\u9020\u5e8f L \u4e2d\u7b49 \u6808 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 L \u4e2d\u7b49 \u5feb\u901f\u6392\u5e8f 973. \u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 974. \u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4 L \u4e2d\u7b49 \u65e0 1004. \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1008. \u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811 L \u7b80\u5355 \u4f4d 1009. \u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801 L \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b L \u4e2d\u7b49 \u5b57\u7b26\u4e32 1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32 L \u4e2d\u7b49 \u5b57\u7b26\u4e32 1023. \u9a7c\u5cf0\u5f0f\u5339\u914d L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1026. \u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c L \u56f0\u96be \u4e8c\u53c9\u6811 1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811 L \u4e2d\u7b49 \u524d\u7f00\u548c 1031. \u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c L \u4e2d\u7b49 \u65e0 1048. \u6700\u957f\u5b57\u7b26\u4e32\u94fe L \u4e2d\u7b49 \u54c8\u5e0c\u8868 1090. \u53d7\u6807\u7b7e\u5f71\u54cd\u7684\u6700\u5927\u503c L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 H \u56f0\u96be \u5f85\u505a 1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20 L \u4e2d\u7b49 \u65e0 1169. \u67e5\u8be2\u65e0\u6548\u4ea4\u6613 L \u7b80\u5355 \u65e0 1170. \u6bd4\u8f83\u5b57\u7b26\u4e32\u6700\u5c0f\u5b57\u6bcd\u51fa\u73b0\u9891\u6b21 L \u56f0\u96be \u65e0 1178. \u731c\u5b57\u8c1c L \u56f0\u96be \u62d3\u6251\u6392\u5e8f 1203. \u9879\u76ee\u7ba1\u7406 L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 L \u56f0\u96be \u54c8\u5e0c\u8868 1224. \u6700\u5927\u76f8\u7b49\u9891\u7387 L \u4e2d\u7b49 \u6df1\u641c 1239. \u4e32\u8054\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6 H \u4e2d\u7b49 \u5f85\u505a 1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 L \u4e2d\u7b49 \u65e0 1314. \u77e9\u9635\u533a\u57df\u548c L \u4e2d\u7b49 \u5f85\u505a 1315. \u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\u548c L \u4e2d\u7b49 \u65e0 1333. \u9910\u5385\u8fc7\u6ee4\u5668 L \u4e2d\u7b49 \u6700\u77ed\u8def\u5f84 1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02 L \u4e2d\u7b49 \u6570\u5b66 1344. \u65f6\u949f\u6307\u9488\u7684\u5939\u89d2 L \u7b80\u5355 \u4f4d 1356. \u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b 1 \u7684\u6570\u76ee\u6392\u5e8f L \u7b80\u5355 \u6570\u5b66 1360. \u65e5\u671f\u4e4b\u95f4\u9694\u51e0\u5929 L \u7b80\u5355 \u65e0 1370. \u4e0a\u5347\u4e0b\u964d\u5b57\u7b26\u4e32 H \u4e2d\u7b49 \u4e8c\u53c9\u6811 1372. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u957f\u4ea4\u9519\u8def\u5f84 H \u4e2d\u7b49 \u65e0 1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4 H \u7b80\u5355 \u65e0 1380. \u77e9\u9635\u4e2d\u7684\u5e78\u8fd0\u6570 H \u4e2d\u7b49 \u6808 1381. \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808 L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861 H \u4e2d\u7b49 \u65e0 1386. \u5b89\u6392\u7535\u5f71\u9662\u5ea7\u4f4d L \u7b80\u5355 \u65e0 1399. \u7edf\u8ba1\u6700\u5927\u7ec4\u7684\u6570\u76ee L \u7b80\u5355 \u6570\u5b66 1403. \u975e\u9012\u589e\u987a\u5e8f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 L \u4e2d\u7b49 \u6570\u5b66 1404. \u5c06\u4e8c\u8fdb\u5236\u8868\u793a\u51cf\u5230 1 \u7684\u6b65\u9aa4\u6570 L \u4e2d\u7b49 \u6570\u5b66 1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u65e0 1409. \u67e5\u8be2\u5e26\u952e\u7684\u6392\u5217 L \u4e2d\u7b49 \u65e0 1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 1418. \u70b9\u83dc\u5c55\u793a\u8868 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1423. \u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1424. \u5bf9\u89d2\u7ebf\u904d\u5386 II L \u4e2d\u7b49 \u65e0 1452. \u6536\u85cf\u6e05\u5355 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1465. \u5207\u5272\u540e\u9762\u79ef\u6700\u5927\u7684\u86cb\u7cd5 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1466. \u91cd\u65b0\u89c4\u5212\u8def\u7ebf 2. lintcode \u00b6 \u96be\u5ea6 \u9898\u76ee \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u7b80\u5355 368. \u8868\u8fbe\u5f0f\u6c42\u503c \u7b80\u5355 370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u7b80\u5355 423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 \u6808 \u7b80\u5355 424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","title":"\u9898\u76ee\u6c47\u603b"},{"location":"readme/#_1","text":"","title":"\u9898\u76ee\u6c47\u603b"},{"location":"readme/#1-leetcode","text":"\u661f\u6807 \u96be\u5ea6 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u9898\u76ee L \u7b80\u5355 \u54c8\u5e0c\u8868 1. \u4e24\u6570\u4e4b\u548c L \u4e2d\u7b49 \u65e0 2. \u4e24\u6570\u76f8\u52a0 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 L \u56f0\u96be \u4e2d\u4f4d\u6570 4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 L \u4e2d\u7b49 \u56de\u6587 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 M \u4e2d\u7b49 \u6570\u5b66 6. Z \u5b57\u5f62\u53d8\u6362 M \u7b80\u5355 \u65e0 7. \u6574\u6570\u53cd\u8f6c M \u4e2d\u7b49 \u65e0 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) L \u7b80\u5355 \u56de\u6587 9. \u56de\u6587\u6570 M \u4e2d\u7b49 \u65e0 12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57 M \u7b80\u5355 \u65e0 14. \u6700\u957f\u516c\u5171\u524d\u7f00 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 15. \u4e09\u6570\u4e4b\u548c L \u4e2d\u7b49 \u9012\u5f52 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 L \u4e2d\u7b49 \u65e0 18. \u56db\u6570\u4e4b\u548c M \u4e2d\u7b49 \u94fe\u8868 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 L \u56f0\u96be \u5806 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 L \u4e2d\u7b49 \u94fe\u8868 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 L \u56f0\u96be \u94fe\u8868 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 L \u56f0\u96be \u54c8\u5e0c\u8868 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 M \u4e2d\u7b49 \u65e0 36. \u6709\u6548\u7684\u6570\u72ec L \u4e2d\u7b49 \u6df1\u641c 39. \u7ec4\u5408\u603b\u548c L \u4e2d\u7b49 \u6df1\u641c 40. \u7ec4\u5408\u603b\u548c II L \u56f0\u96be \u6df1\u641c 42. \u63a5\u96e8\u6c34 M \u7b80\u5355 \u52a8\u6001\u89c4\u5212 53. \u6700\u5927\u5b50\u5e8f\u548c M \u4e2d\u7b49 \u65e0 55. \u8df3\u8dc3\u6e38\u620f M \u4e2d\u7b49 \u65e0 56. \u5408\u5e76\u533a\u95f4 M \u7b80\u5355 \u65e0 58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 62. \u4e0d\u540c\u8def\u5f84 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 64. \u6700\u5c0f\u8def\u5f84\u548c M \u7b80\u5355 \u65e0 66. \u52a0\u4e00 M \u7b80\u5355 \u65e0 67. \u4e8c\u8fdb\u5236\u6c42\u548c M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 L \u4e2d\u7b49 \u94fe\u8868 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II L \u7b80\u5355 \u94fe\u8868 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 M \u7b80\u5355 \u65e0 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 H \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 91. \u89e3\u7801\u65b9\u6cd5 H \u56f0\u96be \u52a8\u6001\u89c4\u5212 639. \u89e3\u7801\u65b9\u6cd5 2 L \u4e2d\u7b49 \u6df1\u641c 93. \u590d\u539fIP\u5730\u5740 M \u4e2d\u7b49 \u4e8c\u53c9\u6811 102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 L \u4e2d\u7b49 \u6700\u77ed\u8def\u5f84 127. \u5355\u8bcd\u63a5\u9f99 H \u56f0\u96be \u5e76\u67e5\u96c6 128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 M \u4e2d\u7b49 \u4e8c\u53c9\u6811 129. \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c L \u4e2d\u7b49 \u6df1\u641c 131. \u5206\u5272\u56de\u6587\u4e32 M \u4e2d\u7b49 \u8d2a\u5fc3 134. \u52a0\u6cb9\u7ad9 M \u7b80\u5355 \u5f02\u6216 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 L \u4e2d\u7b49 \u94fe\u8868 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 M \u4e2d\u7b49 \u94fe\u8868 144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 M \u56f0\u96be \u94fe\u8868 145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 L \u4e2d\u7b49 \u65e0 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c H \u56f0\u96be \u65e0 164. \u6700\u5927\u95f4\u8ddd L \u7b80\u5355 \u6469\u5c14\u6295\u7968 169. \u591a\u6570\u5143\u7d20 M \u7b80\u5355 \u65e0 171. Excel\u8868\u5217\u5e8f\u53f7 L \u4e2d\u7b49 \u6570\u5b66 179. \u6700\u5927\u6570 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 L \u7b80\u5355 \u52a8\u6001\u89c4\u5212 198. \u6253\u5bb6\u52ab\u820d L \u4e2d\u7b49 \u5e76\u67e5\u96c6 200. \u5c9b\u5c7f\u6570\u91cf M \u4e2d\u7b49 \u4e0e 201. \u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e M \u7b80\u5355 \u94fe\u8868 203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 M \u7b80\u5355 \u6570\u5b66 204. \u8ba1\u6570\u8d28\u6570 M \u7b80\u5355 \u54c8\u5e0c\u8868 205. \u540c\u6784\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u56fe\u73af 207. \u8bfe\u7a0b\u8868 L \u56f0\u96be \u524d\u7f00\u6811 212. \u5355\u8bcd\u641c\u7d22 II L \u4e2d\u7b49 \u5feb\u901f\u6392\u5e8f 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 221. \u6700\u5927\u6b63\u65b9\u5f62 L \u56f0\u96be \u6ce2\u5170\u8868\u8fbe\u5f0f 224. \u57fa\u672c\u8ba1\u7b97\u5668 L \u4e2d\u7b49 \u6469\u5c14\u6295\u7968 229. \u6c42\u4f17\u6570 II M \u7b80\u5355 \u6570\u5b66 231. 2\u7684\u5e42 H \u56f0\u96be \u53cc\u5411\u961f\u5217 239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c M \u7b80\u5355 \u54c8\u5e0c\u8868 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd L \u7b80\u5355 \u6570\u5b66 263. \u4e11\u6570 L \u4e2d\u7b49 \u6570\u5b66 264. \u4e11\u6570 II L \u4e2d\u7b49 \u6811\u72b6\u6570\u7ec4 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 L \u4e2d\u7b49 \u6570\u5b66 313. \u8d85\u7ea7\u4e11\u6570 L \u56f0\u96be \u6811\u72b6\u6570\u7ec4 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 H \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 322. \u96f6\u94b1\u5151\u6362 H \u56f0\u96be \u6811\u72b6\u6570\u7ec4 327. \u533a\u95f4\u548c\u7684\u4e2a\u6570 H \u56f0\u96be \u524d\u7f00\u6811 336. \u56de\u6587\u5bf9 M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 378. \u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 L \u4e2d\u7b49 \u6392\u5e8f 386. \u5b57\u5178\u5e8f\u6392\u6570 L \u4e2d\u7b49 \u6570\u5b66 402. \u79fb\u6389K\u4f4d\u6570\u5b57 L \u4e2d\u7b49 \u65e0 406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 L \u7b80\u5355 \u65e0 414. \u7b2c\u4e09\u5927\u7684\u6570 M \u7b80\u5355 \u65e0 415. \u5b57\u7b26\u4e32\u76f8\u52a0 M \u4e2d\u7b49 \u6392\u5e8f 451. \u6839\u636e\u5b57\u7b26\u51fa\u73b0\u9891\u7387\u6392\u5e8f M \u4e2d\u7b49 \u54c8\u5e0c\u8868 454. \u56db\u6570\u76f8\u52a0 II L \u4e2d\u7b49 \u5355\u8c03\u6808 456. 132\u6a21\u5f0f L \u7b80\u5355 \u65e0 463. \u5c9b\u5c7f\u7684\u5468\u957f L \u4e2d\u7b49 \u65e0 468. \u9a8c\u8bc1IP\u5730\u5740 L \u56f0\u96be \u524d\u7f00\u6811 472. \u8fde\u63a5\u8bcd L \u4e2d\u7b49 \u65e0 495. \u63d0\u83ab\u653b\u51fb M \u7b80\u5355 \u6570\u5b66 504. \u4e03\u8fdb\u5236\u6570 L \u4e2d\u7b49 \u4e8c\u53c9\u6811 515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 L \u7b80\u5355 \u65e0 541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II L \u4e2d\u7b49 \u5e76\u67e5\u96c6 547. \u670b\u53cb\u5708 L \u7b80\u5355 \u65e0 605. \u79cd\u82b1\u95ee\u9898 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 L \u4e2d\u7b49 \u65e0 621. \u4efb\u52a1\u8c03\u5ea6\u5668 H \u4e2d\u7b49 \u65e0 649. Dota2 \u53c2\u8bae\u9662 L \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 658. \u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20 L \u4e2d\u7b49 \u5e76\u67e5\u96c6 684. \u5197\u4f59\u8fde\u63a5 L \u56f0\u96be \u5e76\u67e5\u96c6 685. \u5197\u4f59\u8fde\u63a5 II H \u4e2d\u7b49 \u5e76\u67e5\u96c6 714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39 L \u4e2d\u7b49 \u65e0 739. \u6bcf\u65e5\u6e29\u5ea6 L \u4e2d\u7b49 dijkstra 743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 L \u7b80\u5355 \u5806 767. \u91cd\u6784\u5b57\u7b26\u4e32 L \u56f0\u96be \u65e0 768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II L \u4e2d\u7b49 \u65e0 769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 H \u4e2d\u7b49 \u65e0 775. \u5168\u5c40\u5012\u7f6e\u4e0e\u5c40\u90e8\u5012\u7f6e H \u4e2d\u7b49 \u65e0 779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570 L \u4e2d\u7b49 \u6240\u6709\u8def\u5f84 797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 L \u4e2d\u7b49 \u65e0 838. \u63a8\u591a\u7c73\u8bfa L \u56f0\u96be \u5e76\u67e5\u96c6 839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4 L \u4e2d\u7b49 \u65e0 848. \u5b57\u6bcd\u79fb\u4f4d L \u56f0\u96be \u9012\u5f52 854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u8d2a\u5fc3\u6cd5 870. \u4f18\u52bf\u6d17\u724c M \u7b80\u5355 \u4e8c\u53c9\u6811 872. \u53f6\u5b50\u76f8\u4f3c\u7684\u6811 L \u4e2d\u7b49 \u65e0 881. \u6551\u751f\u8247 L \u7b80\u5355 \u65e0 890. \u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f L \u4e2d\u7b49 \u65e0 915. \u5206\u5272\u6570\u7ec4 L \u4e2d\u7b49 \u6808 921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 L \u56f0\u96be \u5e76\u67e5\u96c6 924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad M \u56f0\u96be \u65e0 927. \u4e09\u7b49\u5206 M \u7b80\u5355 \u8d2a\u5fc3 944. \u5220\u5217\u9020\u5e8f L \u4e2d\u7b49 \u6808 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 L \u4e2d\u7b49 \u5feb\u901f\u6392\u5e8f 973. \u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 974. \u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4 L \u4e2d\u7b49 \u65e0 1004. \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1008. \u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811 L \u7b80\u5355 \u4f4d 1009. \u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801 L \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b L \u4e2d\u7b49 \u5b57\u7b26\u4e32 1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32 L \u4e2d\u7b49 \u5b57\u7b26\u4e32 1023. \u9a7c\u5cf0\u5f0f\u5339\u914d L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1026. \u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c L \u56f0\u96be \u4e8c\u53c9\u6811 1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811 L \u4e2d\u7b49 \u524d\u7f00\u548c 1031. \u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c L \u4e2d\u7b49 \u65e0 1048. \u6700\u957f\u5b57\u7b26\u4e32\u94fe L \u4e2d\u7b49 \u54c8\u5e0c\u8868 1090. \u53d7\u6807\u7b7e\u5f71\u54cd\u7684\u6700\u5927\u503c L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 H \u56f0\u96be \u5f85\u505a 1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20 L \u4e2d\u7b49 \u65e0 1169. \u67e5\u8be2\u65e0\u6548\u4ea4\u6613 L \u7b80\u5355 \u65e0 1170. \u6bd4\u8f83\u5b57\u7b26\u4e32\u6700\u5c0f\u5b57\u6bcd\u51fa\u73b0\u9891\u6b21 L \u56f0\u96be \u65e0 1178. \u731c\u5b57\u8c1c L \u56f0\u96be \u62d3\u6251\u6392\u5e8f 1203. \u9879\u76ee\u7ba1\u7406 L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 L \u56f0\u96be \u54c8\u5e0c\u8868 1224. \u6700\u5927\u76f8\u7b49\u9891\u7387 L \u4e2d\u7b49 \u6df1\u641c 1239. \u4e32\u8054\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6 H \u4e2d\u7b49 \u5f85\u505a 1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 L \u4e2d\u7b49 \u65e0 1314. \u77e9\u9635\u533a\u57df\u548c L \u4e2d\u7b49 \u5f85\u505a 1315. \u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\u548c L \u4e2d\u7b49 \u65e0 1333. \u9910\u5385\u8fc7\u6ee4\u5668 L \u4e2d\u7b49 \u6700\u77ed\u8def\u5f84 1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02 L \u4e2d\u7b49 \u6570\u5b66 1344. \u65f6\u949f\u6307\u9488\u7684\u5939\u89d2 L \u7b80\u5355 \u4f4d 1356. \u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b 1 \u7684\u6570\u76ee\u6392\u5e8f L \u7b80\u5355 \u6570\u5b66 1360. \u65e5\u671f\u4e4b\u95f4\u9694\u51e0\u5929 L \u7b80\u5355 \u65e0 1370. \u4e0a\u5347\u4e0b\u964d\u5b57\u7b26\u4e32 H \u4e2d\u7b49 \u4e8c\u53c9\u6811 1372. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u957f\u4ea4\u9519\u8def\u5f84 H \u4e2d\u7b49 \u65e0 1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4 H \u7b80\u5355 \u65e0 1380. \u77e9\u9635\u4e2d\u7684\u5e78\u8fd0\u6570 H \u4e2d\u7b49 \u6808 1381. \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808 L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861 H \u4e2d\u7b49 \u65e0 1386. \u5b89\u6392\u7535\u5f71\u9662\u5ea7\u4f4d L \u7b80\u5355 \u65e0 1399. \u7edf\u8ba1\u6700\u5927\u7ec4\u7684\u6570\u76ee L \u7b80\u5355 \u6570\u5b66 1403. \u975e\u9012\u589e\u987a\u5e8f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 L \u4e2d\u7b49 \u6570\u5b66 1404. \u5c06\u4e8c\u8fdb\u5236\u8868\u793a\u51cf\u5230 1 \u7684\u6b65\u9aa4\u6570 L \u4e2d\u7b49 \u6570\u5b66 1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u65e0 1409. \u67e5\u8be2\u5e26\u952e\u7684\u6392\u5217 L \u4e2d\u7b49 \u65e0 1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 1418. \u70b9\u83dc\u5c55\u793a\u8868 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1423. \u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1424. \u5bf9\u89d2\u7ebf\u904d\u5386 II L \u4e2d\u7b49 \u65e0 1452. \u6536\u85cf\u6e05\u5355 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1465. \u5207\u5272\u540e\u9762\u79ef\u6700\u5927\u7684\u86cb\u7cd5 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1466. \u91cd\u65b0\u89c4\u5212\u8def\u7ebf","title":"1. Leetcode"},{"location":"readme/#2-lintcode","text":"\u96be\u5ea6 \u9898\u76ee \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u7b80\u5355 368. \u8868\u8fbe\u5f0f\u6c42\u503c \u7b80\u5355 370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u7b80\u5355 423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 \u6808 \u7b80\u5355 424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","title":"2. lintcode"},{"location":"leetcode/1/readme/","text":"1. \u4e24\u6570\u4e4b\u548c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u91cd\u590d\u5229\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u540c\u6837\u7684\u5143\u7d20\u3002 \u793a\u4f8b \u7ed9\u5b9a nums = [ 2 , 7 , 11 , 15 ], target = 9 \u56e0\u4e3a nums [ 0 ] + nums [ 1 ] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [ 0 , 1 ] 2. \u89e3\u9898\u601d\u8def \u00b6 2.1 O(n^2) \u00b6 \u4e24\u6b21\u904d\u5386\uff0c\u6c42\u89e3\u51fa\u6bcf\u4e24\u4e2a\u6570\u7684\u548c\u4e0etarget\u6bd4\u8f83\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u7ed3\u679c\u3002 2.2 O(n) \u00b6 \u5229\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u4f4d\u7f6e\u548c\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u628a nums \u4f9d\u6b21\u5b58\u50a8\u5230\u54c8\u5e0c\u8868\uff0c\u6bcf\u6b21\u5b58\u50a8\u7684\u65f6\u5019\uff0c\u5148\u5224\u65ad target - nums[i] \u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c \u5982\u679c\u5728\uff0c\u8bf4\u660e\u4e4b\u524d\u5b58\u50a8\u8fc7 target - nums[i] , \u8fd4\u56de\uff1b\u5426\u5219\uff0c\u5b58\u5230\u54c8\u5e0c\u8868\u4e2d map[nums[i] = i . 3. \u9898\u89e3 \u00b6 3.1 C++ \u00b6 #include <iostream> #include <vector> #include <string> #include <map> using namespace std ; class Solution { public : vector < int > twoSum ( vector < int >& nums , int target ) { vector < int > ans ( 2 , - 1 ); map < int , int > hashMap ; for ( int i = 0 ; i < nums . size (); i ++ ) { // pairs = (nums[i], target - nums[i]) // \u5982\u679cpairs[1]\u5728hashMap\u4e2d,\u8bf4\u660epairs[0]\u5df2\u7ecf\u88ab\u6dfb\u52a0\u8fc7\u4e86\uff0cpairs[0]\u5e94\u8be5\u5728pairs[1]\u524d\u9762 if ( hashMap . count ( target - nums [ i ]) > 0 ) { ans [ 0 ] = hashMap [ target - nums [ i ] ]; ans [ 1 ] = i ; return ans ; } // \u5982\u679c\u6ca1\u6709\uff0c\u5b58\u5230hashMap\u4e2d hashMap [ nums [ i ] ] = i ; } // \u5982\u679c\u90fd\u5b58\u5230hashMap\u4e2d\u8fd8\u662f\u6ca1\u6709\u5728\u5faa\u73af\u4e2dreturn, \u8bf4\u660e\u6ca1\u6709 return ans ; } }; 3.2 Python \u00b6 class Solution : def twoSum ( self , nums : List [ int ], target : int ) -> List [ int ]: ans = [ - 1 , - 1 ] hashMap = {} for i , val in enumerate ( nums ): if target - val in hashMap : ans [ 0 ] = hashMap [ target - val ] ans [ 1 ] = i return ans hashMap [ val ] = i return ans","title":"[1. \u4e24\u6570\u4e4b\u548c](https://leetcode-cn.com/problems/two-sum/submissions/)"},{"location":"leetcode/1/readme/#1","text":"","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"leetcode/1/readme/#1_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u91cd\u590d\u5229\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u540c\u6837\u7684\u5143\u7d20\u3002 \u793a\u4f8b \u7ed9\u5b9a nums = [ 2 , 7 , 11 , 15 ], target = 9 \u56e0\u4e3a nums [ 0 ] + nums [ 1 ] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [ 0 , 1 ]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1/readme/#21-on2","text":"\u4e24\u6b21\u904d\u5386\uff0c\u6c42\u89e3\u51fa\u6bcf\u4e24\u4e2a\u6570\u7684\u548c\u4e0etarget\u6bd4\u8f83\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u7ed3\u679c\u3002","title":"2.1 O(n^2)"},{"location":"leetcode/1/readme/#22-on","text":"\u5229\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u4f4d\u7f6e\u548c\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u628a nums \u4f9d\u6b21\u5b58\u50a8\u5230\u54c8\u5e0c\u8868\uff0c\u6bcf\u6b21\u5b58\u50a8\u7684\u65f6\u5019\uff0c\u5148\u5224\u65ad target - nums[i] \u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c \u5982\u679c\u5728\uff0c\u8bf4\u660e\u4e4b\u524d\u5b58\u50a8\u8fc7 target - nums[i] , \u8fd4\u56de\uff1b\u5426\u5219\uff0c\u5b58\u5230\u54c8\u5e0c\u8868\u4e2d map[nums[i] = i .","title":"2.2 O(n)"},{"location":"leetcode/1/readme/#3","text":"","title":"3. \u9898\u89e3"},{"location":"leetcode/1/readme/#31-c","text":"#include <iostream> #include <vector> #include <string> #include <map> using namespace std ; class Solution { public : vector < int > twoSum ( vector < int >& nums , int target ) { vector < int > ans ( 2 , - 1 ); map < int , int > hashMap ; for ( int i = 0 ; i < nums . size (); i ++ ) { // pairs = (nums[i], target - nums[i]) // \u5982\u679cpairs[1]\u5728hashMap\u4e2d,\u8bf4\u660epairs[0]\u5df2\u7ecf\u88ab\u6dfb\u52a0\u8fc7\u4e86\uff0cpairs[0]\u5e94\u8be5\u5728pairs[1]\u524d\u9762 if ( hashMap . count ( target - nums [ i ]) > 0 ) { ans [ 0 ] = hashMap [ target - nums [ i ] ]; ans [ 1 ] = i ; return ans ; } // \u5982\u679c\u6ca1\u6709\uff0c\u5b58\u5230hashMap\u4e2d hashMap [ nums [ i ] ] = i ; } // \u5982\u679c\u90fd\u5b58\u5230hashMap\u4e2d\u8fd8\u662f\u6ca1\u6709\u5728\u5faa\u73af\u4e2dreturn, \u8bf4\u660e\u6ca1\u6709 return ans ; } };","title":"3.1 C++"},{"location":"leetcode/1/readme/#32-python","text":"class Solution : def twoSum ( self , nums : List [ int ], target : int ) -> List [ int ]: ans = [ - 1 , - 1 ] hashMap = {} for i , val in enumerate ( nums ): if target - val in hashMap : ans [ 0 ] = hashMap [ target - val ] ans [ 1 ] = i return ans hashMap [ val ] = i return ans","title":"3.2 Python"},{"location":"leetcode/1004/readme/","text":"1004. \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u82e5\u5e72 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4 A\uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u5c06 K \u4e2a\u503c\u4ece 0 \u53d8\u6210 1 \u3002 \u8fd4\u56de\u4ec5\u5305\u542b 1 \u7684\u6700\u957f\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aA = [1,1,1,0,0,0,1,1,1,1,0], K = 2 \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a [1,1,1,0,0,1,1,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 6\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aA = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3 \u8f93\u51fa\uff1a10 \u89e3\u91ca\uff1a [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 10\u3002 \u63d0\u793a\uff1a 1 2 3 1 <= A.length <= 20000 0 <= K <= A.length A[i] \u4e3a 0 \u6216 1 2. \u89e3\u9898\u601d\u8def \u00b6 #define max(a, b) ((a) > (b) ? (a) : (b)) int longestOnes ( int * A , int ASize , int K ){ int start = 0 ; int ans = 0 ; int max_count = 0 ; // [start, end] \u5185\u6709 max_count \u4e2a1 for ( int end = 0 ; end < ASize ; end ++ ) { if ( A [ end ] == 1 ) { max_count += 1 ; } // \u5f530\u7684\u4e2a\u6570\u5927\u4e8eK\u7684\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5411\u53f3\u6ed1\u52a8 if ( end - start + 1 - max_count > K ) { if ( A [ start ] == 1 ) { max_count -= 1 ; } start ++ ; } ans = max ( ans , end - start + 1 ); } return ans ; }","title":"[1004. \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III](https://leetcode-cn.com/problems/max-consecutive-ones-iii/)"},{"location":"leetcode/1004/readme/#1004-1-iii","text":"","title":"1004. \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III"},{"location":"leetcode/1004/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531\u82e5\u5e72 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4 A\uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u5c06 K \u4e2a\u503c\u4ece 0 \u53d8\u6210 1 \u3002 \u8fd4\u56de\u4ec5\u5305\u542b 1 \u7684\u6700\u957f\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aA = [1,1,1,0,0,0,1,1,1,1,0], K = 2 \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a [1,1,1,0,0,1,1,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 6\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aA = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3 \u8f93\u51fa\uff1a10 \u89e3\u91ca\uff1a [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 10\u3002 \u63d0\u793a\uff1a 1 2 3 1 <= A.length <= 20000 0 <= K <= A.length A[i] \u4e3a 0 \u6216 1","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1004/readme/#2","text":"#define max(a, b) ((a) > (b) ? (a) : (b)) int longestOnes ( int * A , int ASize , int K ){ int start = 0 ; int ans = 0 ; int max_count = 0 ; // [start, end] \u5185\u6709 max_count \u4e2a1 for ( int end = 0 ; end < ASize ; end ++ ) { if ( A [ end ] == 1 ) { max_count += 1 ; } // \u5f530\u7684\u4e2a\u6570\u5927\u4e8eK\u7684\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5411\u53f3\u6ed1\u52a8 if ( end - start + 1 - max_count > K ) { if ( A [ start ] == 1 ) { max_count -= 1 ; } start ++ ; } ans = max ( ans , end - start + 1 ); } return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1008/readme/","text":"1008. \u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u8fd4\u56de\u4e0e\u7ed9\u5b9a\u5148\u5e8f\u904d\u5386 preorder \u76f8\u5339\u914d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08binary search tree\uff09\u7684\u6839\u7ed3\u70b9\u3002 (\u56de\u60f3\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u90fd\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u5219\uff0c\u5bf9\u4e8e node.left \u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b < node.val\uff0c\u800c node.right \u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b > node.val\u3002\u6b64\u5916\uff0c\u5148\u5e8f\u904d\u5386\u9996\u5148\u663e\u793a\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u904d\u5386 node.left\uff0c\u63a5\u7740\u904d\u5386 node.right\u3002\uff09 \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1a[8,5,1,7,10,12] \u8f93\u51fa\uff1a[8,5,10,1,7,null,12] \u63d0\u793a\uff1a 1 2 1 <= preorder.length <= 100 \u5148\u5e8f preorder \u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u6392\u5e8f\u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c \u518d\u7ed3\u5408\u5148\u5e8f\u904d\u5386\u5e8f\u5217\u751f\u6210\u4e8c\u53c9\u6811\u3002 \u7b2c\u4e8c\u79cd\u601d\u8def\uff0c \u76f4\u63a5\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u6784\u9020\u3002 \u5148\u5e8f\u904d\u5386\u5e8f\u5217\u4e00\u5b9a\u662f\u6839\u5728\u6700\u524d\u9762\uff0c \u786e\u5b9a\u4e86\u6839\uff0c\u6240\u6709\u5c0f\u4e8e\u6839\u7684\u5e94\u8be5\u90fd\u5728\u5de6\u5b50\u6811\uff0c\u6240\u6709\u5927\u4e8e\u6839\u7684\u5e94\u8be5\u90fd\u5728\u53f3\u5b50\u6811\u3002 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct TreeNode * bstFromPreorder2 ( int * preorder , int start , int end ){ int i ; int left_start = - 1 ; int left_end = - 2 ; int right_start = - 1 ; int right_end = - 2 ; // \u7a7a\u6570\u7ec4\u8fd4\u56de if ( preorder == NULL ) { return NULL ; } // \u957f\u5ea6\u4e3a0\u8fd4\u56de if ( end - start + 1 <= 0 ) { return NULL ; } // \u7b2c\u4e00\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\uff0c\u6240\u6709\u6bd4\u5b83\u5c0f\u7684\u4e3a\u505a\u5b50\u6811\uff0c\u6240\u6709\u6bd4\u5b83\u5927\u7684\u4e3a\u53f3\u5b50\u6811 struct TreeNode * root ; root = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ start ]; i = start + 1 ; left_start = start + 1 ; while ( i <= end ) { if ( preorder [ i ] > preorder [ start ]) { left_end = i - 1 ; right_start = i ; right_end = end ; break ; } // \u5982\u679c\u6ca1\u6709\u53f3\u5b50\u6811 if ( i == end ) { left_end = end ; break ; } i ++ ; } root -> left = bstFromPreorder2 ( preorder , left_start , left_end ); root -> right = bstFromPreorder2 ( preorder , right_start , right_end ); return root ; } struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ){ return bstFromPreorder2 ( preorder , 0 , preorderSize - 1 ); }","title":"[1008. \u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811](https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal/)"},{"location":"leetcode/1008/readme/#1008","text":"","title":"1008. \u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811"},{"location":"leetcode/1008/readme/#1","text":"\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u5148\u5e8f\u904d\u5386 preorder \u76f8\u5339\u914d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08binary search tree\uff09\u7684\u6839\u7ed3\u70b9\u3002 (\u56de\u60f3\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u90fd\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u5219\uff0c\u5bf9\u4e8e node.left \u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b < node.val\uff0c\u800c node.right \u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b > node.val\u3002\u6b64\u5916\uff0c\u5148\u5e8f\u904d\u5386\u9996\u5148\u663e\u793a\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u904d\u5386 node.left\uff0c\u63a5\u7740\u904d\u5386 node.right\u3002\uff09 \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1a[8,5,1,7,10,12] \u8f93\u51fa\uff1a[8,5,10,1,7,null,12] \u63d0\u793a\uff1a 1 2 1 <= preorder.length <= 100 \u5148\u5e8f preorder \u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1008/readme/#2","text":"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u6392\u5e8f\u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c \u518d\u7ed3\u5408\u5148\u5e8f\u904d\u5386\u5e8f\u5217\u751f\u6210\u4e8c\u53c9\u6811\u3002 \u7b2c\u4e8c\u79cd\u601d\u8def\uff0c \u76f4\u63a5\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u6784\u9020\u3002 \u5148\u5e8f\u904d\u5386\u5e8f\u5217\u4e00\u5b9a\u662f\u6839\u5728\u6700\u524d\u9762\uff0c \u786e\u5b9a\u4e86\u6839\uff0c\u6240\u6709\u5c0f\u4e8e\u6839\u7684\u5e94\u8be5\u90fd\u5728\u5de6\u5b50\u6811\uff0c\u6240\u6709\u5927\u4e8e\u6839\u7684\u5e94\u8be5\u90fd\u5728\u53f3\u5b50\u6811\u3002 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct TreeNode * bstFromPreorder2 ( int * preorder , int start , int end ){ int i ; int left_start = - 1 ; int left_end = - 2 ; int right_start = - 1 ; int right_end = - 2 ; // \u7a7a\u6570\u7ec4\u8fd4\u56de if ( preorder == NULL ) { return NULL ; } // \u957f\u5ea6\u4e3a0\u8fd4\u56de if ( end - start + 1 <= 0 ) { return NULL ; } // \u7b2c\u4e00\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\uff0c\u6240\u6709\u6bd4\u5b83\u5c0f\u7684\u4e3a\u505a\u5b50\u6811\uff0c\u6240\u6709\u6bd4\u5b83\u5927\u7684\u4e3a\u53f3\u5b50\u6811 struct TreeNode * root ; root = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); root -> val = preorder [ start ]; i = start + 1 ; left_start = start + 1 ; while ( i <= end ) { if ( preorder [ i ] > preorder [ start ]) { left_end = i - 1 ; right_start = i ; right_end = end ; break ; } // \u5982\u679c\u6ca1\u6709\u53f3\u5b50\u6811 if ( i == end ) { left_end = end ; break ; } i ++ ; } root -> left = bstFromPreorder2 ( preorder , left_start , left_end ); root -> right = bstFromPreorder2 ( preorder , right_start , right_end ); return root ; } struct TreeNode * bstFromPreorder ( int * preorder , int preorderSize ){ return bstFromPreorder2 ( preorder , 0 , preorderSize - 1 ); }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1009/readme/","text":"1009. \u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6bcf\u4e2a\u975e\u8d1f\u6574\u6570 N \u90fd\u6709\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u3002\u4f8b\u5982\uff0c 5 \u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236 \"101\"\uff0c11 \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236 \"1011\" \u8868\u793a\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6ce8\u610f\uff0c\u9664 N = 0 \u5916\uff0c\u4efb\u4f55\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u90fd\u4e0d\u542b\u524d\u5bfc\u96f6\u3002 \u4e8c\u8fdb\u5236\u7684\u53cd\u7801\u8868\u793a\u662f\u5c06\u6bcf\u4e2a 1 \u6539\u4e3a 0 \u4e14\u6bcf\u4e2a 0 \u53d8\u4e3a 1\u3002\u4f8b\u5982\uff0c\u4e8c\u8fdb\u5236\u6570 \"101\" \u7684\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"010\"\u3002 \u7ed9\u4f60\u4e00\u4e2a\u5341\u8fdb\u5236\u6570 N\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u53cd\u7801\u6240\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1a5 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a5 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"101\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"010\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 2 \u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1a7 \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a7 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"111\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"000\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 0 \u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1a10 \u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a10 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"1010\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"0101\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 5 \u3002 \u63d0\u793a\uff1a 1 2 0 <= N < 10^9 \u672c\u9898\u4e0e 476\uff1ahttps://leetcode-cn.com/problems/number-complement/ \u76f8\u540c 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution ( object ): def bitwiseComplement ( self , N ): \"\"\" :type N: int :rtype: int \"\"\" s = list ( bin ( N )[ 2 :] ) for i in range ( len ( s ) ): if s [ i ] == '0' : s [ i ] = '1' elif s [ i ] == '1' : s [ i ] = '0' ss = '' . join ( s ) ans = int ( ss , 2 ) return ans","title":"[1009. \u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801](https://leetcode-cn.com/problems/complement-of-base-10-integer/)"},{"location":"leetcode/1009/readme/#1009","text":"","title":"1009. \u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801"},{"location":"leetcode/1009/readme/#1","text":"\u6bcf\u4e2a\u975e\u8d1f\u6574\u6570 N \u90fd\u6709\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u3002\u4f8b\u5982\uff0c 5 \u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236 \"101\"\uff0c11 \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236 \"1011\" \u8868\u793a\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6ce8\u610f\uff0c\u9664 N = 0 \u5916\uff0c\u4efb\u4f55\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u90fd\u4e0d\u542b\u524d\u5bfc\u96f6\u3002 \u4e8c\u8fdb\u5236\u7684\u53cd\u7801\u8868\u793a\u662f\u5c06\u6bcf\u4e2a 1 \u6539\u4e3a 0 \u4e14\u6bcf\u4e2a 0 \u53d8\u4e3a 1\u3002\u4f8b\u5982\uff0c\u4e8c\u8fdb\u5236\u6570 \"101\" \u7684\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"010\"\u3002 \u7ed9\u4f60\u4e00\u4e2a\u5341\u8fdb\u5236\u6570 N\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u53cd\u7801\u6240\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1a5 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a5 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"101\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"010\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 2 \u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1a7 \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a7 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"111\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"000\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 0 \u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1a10 \u8f93\u51fa\uff1a5 \u89e3\u91ca\uff1a10 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"1010\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"0101\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 5 \u3002 \u63d0\u793a\uff1a 1 2 0 <= N < 10^9 \u672c\u9898\u4e0e 476\uff1ahttps://leetcode-cn.com/problems/number-complement/ \u76f8\u540c","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1009/readme/#2","text":"class Solution ( object ): def bitwiseComplement ( self , N ): \"\"\" :type N: int :rtype: int \"\"\" s = list ( bin ( N )[ 2 :] ) for i in range ( len ( s ) ): if s [ i ] == '0' : s [ i ] = '1' elif s [ i ] == '1' : s [ i ] = '0' ss = '' . join ( s ) ans = int ( ss , 2 ) return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1011/readme/","text":"1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b \u00b6 1. \u89e3\u9898\u601d\u8def \u00b6 \u4f20\u9001\u5e26\u4e0a\u7684\u5305\u88f9\u5fc5\u987b\u5728 D \u5929\u5185\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u3002 \u4f20\u9001\u5e26\u4e0a\u7684\u7b2c i \u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u4e3a weights[i]\u3002\u6bcf\u4e00\u5929\uff0c\u6211\u4eec\u90fd\u4f1a\u6309\u7ed9\u51fa\u91cd\u91cf\u7684\u987a\u5e8f\u5f80\u4f20\u9001\u5e26\u4e0a\u88c5\u8f7d\u5305\u88f9\u3002\u6211\u4eec\u88c5\u8f7d\u7684\u91cd\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u8239\u7684\u6700\u5927\u8fd0\u8f7d\u91cd\u91cf\u3002 \u8fd4\u56de\u80fd\u5728 D \u5929\u5185\u5c06\u4f20\u9001\u5e26\u4e0a\u7684\u6240\u6709\u5305\u88f9\u9001\u8fbe\u7684\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u80fd\u529b\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1aweights = [1,2,3,4,5,6,7,8,9,10], D = 5 \u8f93\u51fa\uff1a15 \u89e3\u91ca\uff1a \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 15 \u5c31\u80fd\u591f\u5728 5 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c 1 \u5929\uff1a1, 2, 3, 4, 5 \u7b2c 2 \u5929\uff1a6, 7 \u7b2c 3 \u5929\uff1a8 \u7b2c 4 \u5929\uff1a9 \u7b2c 5 \u5929\uff1a10 \u8bf7\u6ce8\u610f\uff0c\u8d27\u7269\u5fc5\u987b\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\u88c5\u8fd0\uff0c\u56e0\u6b64\u4f7f\u7528\u8f7d\u91cd\u80fd\u529b\u4e3a 14 \u7684\u8239\u8236\u5e76\u5c06\u5305\u88c5\u5206\u6210 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) \u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aweights = [3,2,2,4,1,4], D = 3 \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 6 \u5c31\u80fd\u591f\u5728 3 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c 1 \u5929\uff1a3, 2 \u7b2c 2 \u5929\uff1a2, 4 \u7b2c 3 \u5929\uff1a1, 4 \u793a\u4f8b 3\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aweights = [1,2,3,1,1], D = 4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a \u7b2c 1 \u5929\uff1a1 \u7b2c 2 \u5929\uff1a2 \u7b2c 3 \u5929\uff1a3 \u7b2c 4 \u5929\uff1a1, 1 \u63d0\u793a\uff1a 1 2 1 <= D <= weights.length <= 50000 1 <= weights[i] <= 500 2. \u89e3\u9898\u601d\u8def \u00b6 \u6700\u540e\u8981\u6c42\u7684\u662f\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u91cf\uff0c \u8bbe\u4e3ak, \u5219 k \u6700\u5c0f\u4e3a weights[0], \u6700\u5927\u4e3a sum(weights), \u5bf9\u8fd9\u4e2a\u8303\u56f4\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u503c\u3002 // \u8fd0\u8f7d\u91cf\u4e3aK\u7684\u8239\u662f\u5426\u53ef\u4ee5\u5728D\u5929\u4e4b\u5185\u8fd0\u9001\u5b8c\u8d27\u7269 int canShip ( int * weights , int weightsSize , int D , int k ) { int i = 0 ; int sum = 0 ; while ( i < weightsSize ) { sum += weights [ i ]; if ( sum > k ) { D -- ; sum = 0 ; i = i - 1 ; } i ++ ; } if ( sum > 0 ) { D -- ; } if ( D >= 0 ) return 1 ; return 0 ; } int shipWithinDays ( int * weights , int weightsSize , int D ){ int mink , maxk ; int maxw = weights [ 0 ]; int sumw = 0 ; int i ; int k ; for ( i = 0 ; i < weightsSize ; i ++ ) { if ( weights [ i ] > maxw ) { maxw = weights [ i ]; } sumw += weights [ i ]; } mink = maxw ; maxk = sumw ; while ( mink < maxk ) { k = ( mink + maxk ) / 2 ; if ( canShip ( weights , weightsSize , D , k )) { maxk = k ; } else { mink = k + 1 ; } } return mink ; }","title":"[1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b](https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/)"},{"location":"leetcode/1011/readme/#1011-d","text":"","title":"1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b"},{"location":"leetcode/1011/readme/#1","text":"\u4f20\u9001\u5e26\u4e0a\u7684\u5305\u88f9\u5fc5\u987b\u5728 D \u5929\u5185\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u3002 \u4f20\u9001\u5e26\u4e0a\u7684\u7b2c i \u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u4e3a weights[i]\u3002\u6bcf\u4e00\u5929\uff0c\u6211\u4eec\u90fd\u4f1a\u6309\u7ed9\u51fa\u91cd\u91cf\u7684\u987a\u5e8f\u5f80\u4f20\u9001\u5e26\u4e0a\u88c5\u8f7d\u5305\u88f9\u3002\u6211\u4eec\u88c5\u8f7d\u7684\u91cd\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u8239\u7684\u6700\u5927\u8fd0\u8f7d\u91cd\u91cf\u3002 \u8fd4\u56de\u80fd\u5728 D \u5929\u5185\u5c06\u4f20\u9001\u5e26\u4e0a\u7684\u6240\u6709\u5305\u88f9\u9001\u8fbe\u7684\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u80fd\u529b\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1aweights = [1,2,3,4,5,6,7,8,9,10], D = 5 \u8f93\u51fa\uff1a15 \u89e3\u91ca\uff1a \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 15 \u5c31\u80fd\u591f\u5728 5 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c 1 \u5929\uff1a1, 2, 3, 4, 5 \u7b2c 2 \u5929\uff1a6, 7 \u7b2c 3 \u5929\uff1a8 \u7b2c 4 \u5929\uff1a9 \u7b2c 5 \u5929\uff1a10 \u8bf7\u6ce8\u610f\uff0c\u8d27\u7269\u5fc5\u987b\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\u88c5\u8fd0\uff0c\u56e0\u6b64\u4f7f\u7528\u8f7d\u91cd\u80fd\u529b\u4e3a 14 \u7684\u8239\u8236\u5e76\u5c06\u5305\u88c5\u5206\u6210 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) \u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aweights = [3,2,2,4,1,4], D = 3 \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 6 \u5c31\u80fd\u591f\u5728 3 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c 1 \u5929\uff1a3, 2 \u7b2c 2 \u5929\uff1a2, 4 \u7b2c 3 \u5929\uff1a1, 4 \u793a\u4f8b 3\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aweights = [1,2,3,1,1], D = 4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a \u7b2c 1 \u5929\uff1a1 \u7b2c 2 \u5929\uff1a2 \u7b2c 3 \u5929\uff1a3 \u7b2c 4 \u5929\uff1a1, 1 \u63d0\u793a\uff1a 1 2 1 <= D <= weights.length <= 50000 1 <= weights[i] <= 500","title":"1. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1011/readme/#2","text":"\u6700\u540e\u8981\u6c42\u7684\u662f\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u91cf\uff0c \u8bbe\u4e3ak, \u5219 k \u6700\u5c0f\u4e3a weights[0], \u6700\u5927\u4e3a sum(weights), \u5bf9\u8fd9\u4e2a\u8303\u56f4\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u503c\u3002 // \u8fd0\u8f7d\u91cf\u4e3aK\u7684\u8239\u662f\u5426\u53ef\u4ee5\u5728D\u5929\u4e4b\u5185\u8fd0\u9001\u5b8c\u8d27\u7269 int canShip ( int * weights , int weightsSize , int D , int k ) { int i = 0 ; int sum = 0 ; while ( i < weightsSize ) { sum += weights [ i ]; if ( sum > k ) { D -- ; sum = 0 ; i = i - 1 ; } i ++ ; } if ( sum > 0 ) { D -- ; } if ( D >= 0 ) return 1 ; return 0 ; } int shipWithinDays ( int * weights , int weightsSize , int D ){ int mink , maxk ; int maxw = weights [ 0 ]; int sumw = 0 ; int i ; int k ; for ( i = 0 ; i < weightsSize ; i ++ ) { if ( weights [ i ] > maxw ) { maxw = weights [ i ]; } sumw += weights [ i ]; } mink = maxw ; maxk = sumw ; while ( mink < maxk ) { k = ( mink + maxk ) / 2 ; if ( canShip ( weights , weightsSize , D , k )) { maxk = k ; } else { mink = k + 1 ; } } return mink ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1016/readme/","text":"1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 S\uff08\u4e00\u4e2a\u4ec5\u7531\u82e5\u5e72 '0' \u548c '1' \u6784\u6210\u7684\u5b57\u7b26\u4e32\uff09\u548c\u4e00\u4e2a\u6b63\u6574\u6570 N\uff0c\u5982\u679c\u5bf9\u4e8e\u4ece 1 \u5230 N \u7684\u6bcf\u4e2a\u6574\u6570 X\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u90fd\u662f S \u7684\u5b50\u4e32\uff0c\u5c31\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1aS = \"0110\", N = 3 \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aS = \"0110\", N = 4 \u8f93\u51fa\uff1afalse \u63d0\u793a\uff1a 1 2 1 <= S.length <= 1000 1 <= N <= 10^9 2. \u89e3\u9898\u601d\u8def \u00b6 \u5b57\u7b26\u4e32\u67e5\u627e #define PN 100 int next [ PN ]; int nextEnd = 0 ; // \u8ba1\u7b97\u6a21\u5f0f\u4e32\u7684 next \u6570\u7ec4 void computeNext ( const char * pattern ) { int i ; int j = - 1 ; const int n = strlen ( pattern ); next [ 0 ] = j ; for ( i = 1 ; i < n ; i ++ ) { while ( j > - 1 && pattern [ j + 1 ] != pattern [ i ]) { j = next [ j ]; } if ( pattern [ i ] == pattern [ j + 1 ]) { j ++ ; } next [ i ] = j ; } nextEnd = n ; } int kmp ( const char * string , const char * pattern ) { int i ; int j = - 1 ; const int n = strlen ( string ); const int m = strlen ( pattern ); if ( m == 0 && n == 0 ) return 0 ; if ( m == 0 ) return 0 ; computeNext ( pattern ); for ( i = 0 ; i < n ; i ++ ) { while ( j > - 1 && pattern [ j + 1 ] != string [ i ]) { j = next [ j ]; } if ( string [ i ] == pattern [ j + 1 ]) { j ++ ; } if ( j == m - 1 ) { return i - j ; } } return - 1 ; } bool find ( char * S , int i ) { const int n = strlen ( S ); char num [ 32 ]; char tmp ; int k = 0 ; while ( i ) { num [ k ++ ] = ( char )( i & 1 ) + '0' ; i = i >> 1 ; } num [ k ] = '\\0' ; int a = 0 ; int b = k - 1 ; while ( a < b ) { tmp = num [ a ]; num [ a ] = num [ b ]; num [ b ] = tmp ; a ++ ; b -- ; } int result ; result = kmp ( S , num ); if ( result == - 1 ) { return false ; } return true ; } bool queryString ( char * S , int N ){ int i ; for ( i = 1 ; i <= N ; i ++ ) { if ( ! find ( S , i )) { return false ; } } return true ; }","title":"[1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32](https://leetcode-cn.com/problems/binary-string-with-substrings-representing-1-to-n/)"},{"location":"leetcode/1016/readme/#1016-1-n","text":"","title":"1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32"},{"location":"leetcode/1016/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 S\uff08\u4e00\u4e2a\u4ec5\u7531\u82e5\u5e72 '0' \u548c '1' \u6784\u6210\u7684\u5b57\u7b26\u4e32\uff09\u548c\u4e00\u4e2a\u6b63\u6574\u6570 N\uff0c\u5982\u679c\u5bf9\u4e8e\u4ece 1 \u5230 N \u7684\u6bcf\u4e2a\u6574\u6570 X\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u90fd\u662f S \u7684\u5b50\u4e32\uff0c\u5c31\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1aS = \"0110\", N = 3 \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aS = \"0110\", N = 4 \u8f93\u51fa\uff1afalse \u63d0\u793a\uff1a 1 2 1 <= S.length <= 1000 1 <= N <= 10^9","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1016/readme/#2","text":"\u5b57\u7b26\u4e32\u67e5\u627e #define PN 100 int next [ PN ]; int nextEnd = 0 ; // \u8ba1\u7b97\u6a21\u5f0f\u4e32\u7684 next \u6570\u7ec4 void computeNext ( const char * pattern ) { int i ; int j = - 1 ; const int n = strlen ( pattern ); next [ 0 ] = j ; for ( i = 1 ; i < n ; i ++ ) { while ( j > - 1 && pattern [ j + 1 ] != pattern [ i ]) { j = next [ j ]; } if ( pattern [ i ] == pattern [ j + 1 ]) { j ++ ; } next [ i ] = j ; } nextEnd = n ; } int kmp ( const char * string , const char * pattern ) { int i ; int j = - 1 ; const int n = strlen ( string ); const int m = strlen ( pattern ); if ( m == 0 && n == 0 ) return 0 ; if ( m == 0 ) return 0 ; computeNext ( pattern ); for ( i = 0 ; i < n ; i ++ ) { while ( j > - 1 && pattern [ j + 1 ] != string [ i ]) { j = next [ j ]; } if ( string [ i ] == pattern [ j + 1 ]) { j ++ ; } if ( j == m - 1 ) { return i - j ; } } return - 1 ; } bool find ( char * S , int i ) { const int n = strlen ( S ); char num [ 32 ]; char tmp ; int k = 0 ; while ( i ) { num [ k ++ ] = ( char )( i & 1 ) + '0' ; i = i >> 1 ; } num [ k ] = '\\0' ; int a = 0 ; int b = k - 1 ; while ( a < b ) { tmp = num [ a ]; num [ a ] = num [ b ]; num [ b ] = tmp ; a ++ ; b -- ; } int result ; result = kmp ( S , num ); if ( result == - 1 ) { return false ; } return true ; } bool queryString ( char * S , int N ){ int i ; for ( i = 1 ; i <= N ; i ++ ) { if ( ! find ( S , i )) { return false ; } } return true ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1023/readme/","text":"1023. \u9a7c\u5cf0\u5f0f\u5339\u914d \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u5c0f\u5199\u5b57\u6bcd\u63d2\u5165\u6a21\u5f0f\u4e32 pattern \u5f97\u5230\u5f85\u67e5\u8be2\u9879 query\uff0c\u90a3\u4e48\u5f85\u67e5\u8be2\u9879\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u4e32\u5339\u914d\u3002\uff08\u6211\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6bcf\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u63d2\u5165 0 \u4e2a\u5b57\u7b26\u3002\uff09 \u7ed9\u5b9a\u5f85\u67e5\u8be2\u5217\u8868 queries\uff0c\u548c\u6a21\u5f0f\u4e32 pattern\uff0c\u8fd4\u56de\u7531\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u7b54\u6848\u5217\u8868 answer\u3002\u53ea\u6709\u5728\u5f85\u67e5\u9879 queries[i] \u4e0e\u6a21\u5f0f\u4e32 pattern \u5339\u914d\u65f6\uff0c answer[i] \u624d\u4e3a true\uff0c\u5426\u5219\u4e3a false\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 \u8f93\u5165\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\" \u8f93\u51fa\uff1a[true,false,true,true,false] \u793a\u4f8b\uff1a \"FooBar\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"oo\" + \"B\" + \"ar\"\u3002 \"FootBall\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"oot\" + \"B\" + \"all\". \"FrameBuffer\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"rame\" + \"B\" + \"uffer\". \u793a\u4f8b 2\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\" \u8f93\u51fa\uff1a[true,false,true,false,false] \u89e3\u91ca\uff1a \"FooBar\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"o\" + \"Ba\" + \"r\". \"FootBall\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"ot\" + \"Ba\" + \"ll\". \u793a\u4f8b 3\uff1a 1 2 3 4 \u8f93\u51fa\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\" \u8f93\u5165\uff1a[false,true,false,false,false] \u89e3\u91ca\uff1a \"FooBarTest\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\". 2. \u89e3\u9898\u601d\u8def \u00b6 #define N 1001 bool isMatch ( char * s , char * pattern ) { int n = strlen ( s ); int m = strlen ( pattern ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( s [ i ] == pattern [ j ]) { i ++ ; j ++ ; } else if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { i ++ ; } else { return false ; } } if ( j < m ) { return false ; } if ( i < n ) { while ( i < n ) { if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { return false ; } i ++ ; } } return true ; } bool * camelMatch ( char ** queries , int queriesSize , char * pattern , int * returnSize ){ bool * ans ; bool ansOne ; int i ; int ansEnd = 0 ; ans = ( bool * ) malloc ( sizeof ( bool ) * N ); for ( i = 0 ; i < queriesSize ; i ++ ) { if ( isMatch ( queries [ i ], pattern )) { ans [ ansEnd ++ ] = true ; } else { ans [ ansEnd ++ ] = false ; } } ( * returnSize ) = ansEnd ; return ans ; }","title":"[1023. \u9a7c\u5cf0\u5f0f\u5339\u914d](https://leetcode-cn.com/problems/camelcase-matching/)"},{"location":"leetcode/1023/readme/#1023","text":"","title":"1023. \u9a7c\u5cf0\u5f0f\u5339\u914d"},{"location":"leetcode/1023/readme/#1","text":"\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u5c0f\u5199\u5b57\u6bcd\u63d2\u5165\u6a21\u5f0f\u4e32 pattern \u5f97\u5230\u5f85\u67e5\u8be2\u9879 query\uff0c\u90a3\u4e48\u5f85\u67e5\u8be2\u9879\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u4e32\u5339\u914d\u3002\uff08\u6211\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6bcf\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u63d2\u5165 0 \u4e2a\u5b57\u7b26\u3002\uff09 \u7ed9\u5b9a\u5f85\u67e5\u8be2\u5217\u8868 queries\uff0c\u548c\u6a21\u5f0f\u4e32 pattern\uff0c\u8fd4\u56de\u7531\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u7b54\u6848\u5217\u8868 answer\u3002\u53ea\u6709\u5728\u5f85\u67e5\u9879 queries[i] \u4e0e\u6a21\u5f0f\u4e32 pattern \u5339\u914d\u65f6\uff0c answer[i] \u624d\u4e3a true\uff0c\u5426\u5219\u4e3a false\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 \u8f93\u5165\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\" \u8f93\u51fa\uff1a[true,false,true,true,false] \u793a\u4f8b\uff1a \"FooBar\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"oo\" + \"B\" + \"ar\"\u3002 \"FootBall\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"oot\" + \"B\" + \"all\". \"FrameBuffer\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"rame\" + \"B\" + \"uffer\". \u793a\u4f8b 2\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\" \u8f93\u51fa\uff1a[true,false,true,false,false] \u89e3\u91ca\uff1a \"FooBar\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"o\" + \"Ba\" + \"r\". \"FootBall\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"ot\" + \"Ba\" + \"ll\". \u793a\u4f8b 3\uff1a 1 2 3 4 \u8f93\u51fa\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\" \u8f93\u5165\uff1a[false,true,false,false,false] \u89e3\u91ca\uff1a \"FooBarTest\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1023/readme/#2","text":"#define N 1001 bool isMatch ( char * s , char * pattern ) { int n = strlen ( s ); int m = strlen ( pattern ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( s [ i ] == pattern [ j ]) { i ++ ; j ++ ; } else if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { i ++ ; } else { return false ; } } if ( j < m ) { return false ; } if ( i < n ) { while ( i < n ) { if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { return false ; } i ++ ; } } return true ; } bool * camelMatch ( char ** queries , int queriesSize , char * pattern , int * returnSize ){ bool * ans ; bool ansOne ; int i ; int ansEnd = 0 ; ans = ( bool * ) malloc ( sizeof ( bool ) * N ); for ( i = 0 ; i < queriesSize ; i ++ ) { if ( isMatch ( queries [ i ], pattern )) { ans [ ansEnd ++ ] = true ; } else { ans [ ansEnd ++ ] = false ; } } ( * returnSize ) = ansEnd ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1026/readme/","text":"1026. \u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u627e\u51fa\u5b58\u5728\u4e8e\u4e0d\u540c\u8282\u70b9 A \u548c B \u4e4b\u95f4\u7684\u6700\u5927\u503c V\uff0c\u5176\u4e2d V = |A.val - B.val|\uff0c\u4e14 A \u662f B \u7684\u7956\u5148\u3002 \uff08\u5982\u679c A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u4e4b\u4e00\u4e3a B\uff0c\u6216\u8005 A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u662f B \u7684\u7956\u5148\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a A \u662f B \u7684\u7956\u5148\uff09 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1a[8,3,10,1,6,null,14,null,null,4,7,13] \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u6211\u4eec\u6709\u5927\u91cf\u7684\u8282\u70b9\u4e0e\u5176\u7956\u5148\u7684\u5dee\u503c\uff0c\u5176\u4e2d\u4e00\u4e9b\u5982\u4e0b\uff1a |8 - 3| = 5 |3 - 7| = 4 |8 - 1| = 7 |10 - 13| = 3 \u5728\u6240\u6709\u53ef\u80fd\u7684\u5dee\u503c\u4e2d\uff0c\u6700\u5927\u503c 7 \u7531 |8 - 1| = 7 \u5f97\u51fa\u3002 \u63d0\u793a\uff1a 1 2 \u6811\u4e2d\u7684\u8282\u70b9\u6570\u5728 2 \u5230 5000 \u4e4b\u95f4\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e 0 \u5230 100000 \u4e4b\u95f4\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c \u5728\u904d\u5386\u7684\u65f6\u5019\u8ba1\u7b97\u7236\u5b50\u5b50\u5b59\u8282\u70b9\u4e4b\u95f4\u7684\u5dee\u503c\uff0c \u8bb0\u5f55\u4e0b\u5dee\u503c\u6700\u5927\u7684\u90a3\u4e2a\u3002 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ #define N 5000 int road [ N ]; int roadEnd = 0 ; int ans = 0 ; int abs2 ( int a , int b ) { if ( a > b ) { return a - b ; } else { return b - a ; } } // \u8ba1\u7b97\u65b0\u5165\u6808\u7684\u5143\u7d20\u548c\u6808\u5185\u5176\u4ed6\u5143\u7d20\u7684\u5dee\u7684\u7edd\u5bf9\u503c // \u5e76\u66f4\u65b0 ans void compute ( int * road , int roadEnd ) { int i , diff ; for ( i = 0 ; i < roadEnd - 1 ; i ++ ) { diff = abs2 ( road [ i ], road [ roadEnd - 1 ]); if ( diff > ans ) { ans = diff ; } } printf ( \"%d \" , ans ); } void dfs ( struct TreeNode * root , int * road , int * roadEnd ) { road [( * roadEnd ) ++ ] = root -> val ; compute ( road , * roadEnd ); if ( root -> left ) { dfs ( root -> left , road , roadEnd ); } if ( root -> right ) { dfs ( root -> right , road , roadEnd ); } ( * roadEnd ) -- ; return ; } int maxAncestorDiff ( struct TreeNode * root ){ if ( root == NULL ) { return 0 ; } roadEnd = 0 ; ans = 0 ; dfs ( root , road , & roadEnd ); return ans ; }","title":"[1026. \u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c](https://leetcode-cn.com/problems/maximum-difference-between-node-and-ancestor/)"},{"location":"leetcode/1026/readme/#1026","text":"","title":"1026. \u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c"},{"location":"leetcode/1026/readme/#1","text":"\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u627e\u51fa\u5b58\u5728\u4e8e\u4e0d\u540c\u8282\u70b9 A \u548c B \u4e4b\u95f4\u7684\u6700\u5927\u503c V\uff0c\u5176\u4e2d V = |A.val - B.val|\uff0c\u4e14 A \u662f B \u7684\u7956\u5148\u3002 \uff08\u5982\u679c A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u4e4b\u4e00\u4e3a B\uff0c\u6216\u8005 A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u662f B \u7684\u7956\u5148\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a A \u662f B \u7684\u7956\u5148\uff09 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1a[8,3,10,1,6,null,14,null,null,4,7,13] \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u6211\u4eec\u6709\u5927\u91cf\u7684\u8282\u70b9\u4e0e\u5176\u7956\u5148\u7684\u5dee\u503c\uff0c\u5176\u4e2d\u4e00\u4e9b\u5982\u4e0b\uff1a |8 - 3| = 5 |3 - 7| = 4 |8 - 1| = 7 |10 - 13| = 3 \u5728\u6240\u6709\u53ef\u80fd\u7684\u5dee\u503c\u4e2d\uff0c\u6700\u5927\u503c 7 \u7531 |8 - 1| = 7 \u5f97\u51fa\u3002 \u63d0\u793a\uff1a 1 2 \u6811\u4e2d\u7684\u8282\u70b9\u6570\u5728 2 \u5230 5000 \u4e4b\u95f4\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e 0 \u5230 100000 \u4e4b\u95f4\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1026/readme/#2","text":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c \u5728\u904d\u5386\u7684\u65f6\u5019\u8ba1\u7b97\u7236\u5b50\u5b50\u5b59\u8282\u70b9\u4e4b\u95f4\u7684\u5dee\u503c\uff0c \u8bb0\u5f55\u4e0b\u5dee\u503c\u6700\u5927\u7684\u90a3\u4e2a\u3002 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ #define N 5000 int road [ N ]; int roadEnd = 0 ; int ans = 0 ; int abs2 ( int a , int b ) { if ( a > b ) { return a - b ; } else { return b - a ; } } // \u8ba1\u7b97\u65b0\u5165\u6808\u7684\u5143\u7d20\u548c\u6808\u5185\u5176\u4ed6\u5143\u7d20\u7684\u5dee\u7684\u7edd\u5bf9\u503c // \u5e76\u66f4\u65b0 ans void compute ( int * road , int roadEnd ) { int i , diff ; for ( i = 0 ; i < roadEnd - 1 ; i ++ ) { diff = abs2 ( road [ i ], road [ roadEnd - 1 ]); if ( diff > ans ) { ans = diff ; } } printf ( \"%d \" , ans ); } void dfs ( struct TreeNode * root , int * road , int * roadEnd ) { road [( * roadEnd ) ++ ] = root -> val ; compute ( road , * roadEnd ); if ( root -> left ) { dfs ( root -> left , road , roadEnd ); } if ( root -> right ) { dfs ( root -> right , road , roadEnd ); } ( * roadEnd ) -- ; return ; } int maxAncestorDiff ( struct TreeNode * root ){ if ( root == NULL ) { return 0 ; } roadEnd = 0 ; ans = 0 ; dfs ( root , road , & roadEnd ); return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1028/readme/","text":"1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6211\u4eec\u4ece\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \u5f00\u59cb\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u5728\u904d\u5386\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5904\uff0c\u6211\u4eec\u8f93\u51fa D \u6761\u77ed\u5212\u7ebf\uff08\u5176\u4e2d D \u662f\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\uff09\uff0c\u7136\u540e\u8f93\u51fa\u8be5\u8282\u70b9\u7684\u503c\u3002\uff08\u5982\u679c\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D\uff0c\u5219\u5176\u76f4\u63a5\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D + 1\u3002\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a 0\uff09\u3002 \u5982\u679c\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u4fdd\u8bc1\u8be5\u5b50\u8282\u70b9\u4e3a\u5de6\u5b50\u8282\u70b9\u3002 \u7ed9\u51fa\u904d\u5386\u8f93\u51fa S\uff0c\u8fd8\u539f\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9 root\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a\"1-2--3--4-5--6--7\" \u8f93\u51fa\uff1a[1,2,5,3,4,6,7] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1a\"1-2--3---4-5--6---7\" \u8f93\u51fa\uff1a[1,2,5,3,null,6,null,4,null,7] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1a\"1-401--349---90--88\" \u8f93\u51fa\uff1a[1,401,null,349,88,90] \u63d0\u793a\uff1a 1 2 \u539f\u59cb\u6811\u4e2d\u7684\u8282\u70b9\u6570\u4ecb\u4e8e 1 \u548c 1000 \u4e4b\u95f4\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e 1 \u548c 10 ^ 9 \u4e4b\u95f4\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 #define N 1002 struct TreeNode * nodeStack [ N ]; int nodeStackEnd = 0 ; int levelStack [ N ]; int levelStackEnd = 0 ; // \u8fd4\u56de\u89e3\u6790\u51fa\u6765\u7684 number, level, \u548c\u4e0b\u4e00\u6b21\u5f00\u59cb\u7684\u4f4d\u7f6e int parse ( char * S , int i , int * level , int * next ) { int l = 0 ; int num = 0 ; int j ; int n = strlen ( S ); j = i ; while ( j < n && S [ j ] == '-' ) { l ++ ; j ++ ; } while ( j < n && S [ j ] >= '0' && S [ j ] <= '9' ) { num = num * 10 + S [ j ] - '0' ; j ++ ; } ( * next ) = j ; ( * level ) = l ; return num ; } struct TreeNode * recoverFromPreorder ( char * S ){ int i = 0 ; int j ; int d ; // \u77ed\u6a2a\u7ebf\u7684\u6570\u91cf int next ; int num ; struct TreeNode * root ; struct TreeNode * newNode ; struct TreeNode * curNode ; int number ; int level = 0 ; int curLevel = 0 ; int n = strlen ( S ); if ( S == NULL || n == 0 ) { return NULL ; } j = 0 ; num = 0 ; while ( j < n && S [ j ] >= '0' && S [ j ] <= '9' ) { num = num * 10 + S [ j ] - '0' ; j ++ ; } root = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); root -> left = NULL ; root -> right = NULL ; root -> val = num ; if ( n == j ) { return root ; } nodeStack [ nodeStackEnd ++ ] = root ; levelStack [ levelStackEnd ++ ] = 0 ; curLevel = 0 ; for ( i = j ; i < strlen ( S ); i ++ ) { level = 0 ; next = 0 ; number = parse ( S , i , & level , & next ); if ( level == curLevel + 1 ) { // \u8bf4\u660e\u662f\u6808\u9876\u5143\u7d20\u7684\u5de6\u5b50\u6811 newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> val = number ; newNode -> left = NULL ; newNode -> right = NULL ; nodeStack [ nodeStackEnd - 1 ] -> left = newNode ; nodeStack [ nodeStackEnd ++ ] = newNode ; levelStack [ levelStackEnd ++ ] = level ; } else if ( level < curLevel + 1 ) { while ( levelStackEnd > 0 && levelStack [ levelStackEnd - 1 ] >= level ) { levelStackEnd -- ; nodeStackEnd -- ; } curNode = nodeStack [ nodeStackEnd - 1 ]; newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> left = NULL ; newNode -> right = NULL ; newNode -> val = number ; curNode -> right = newNode ; nodeStack [ nodeStackEnd ++ ] = newNode ; levelStack [ levelStackEnd ++ ] = level ; } else { } i = next - 1 ; curLevel = level ; } return root ; }","title":"[1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811](https://leetcode-cn.com/problems/recover-a-tree-from-preorder-traversal/)"},{"location":"leetcode/1028/readme/#1028","text":"","title":"1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811"},{"location":"leetcode/1028/readme/#1","text":"\u6211\u4eec\u4ece\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \u5f00\u59cb\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u5728\u904d\u5386\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5904\uff0c\u6211\u4eec\u8f93\u51fa D \u6761\u77ed\u5212\u7ebf\uff08\u5176\u4e2d D \u662f\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\uff09\uff0c\u7136\u540e\u8f93\u51fa\u8be5\u8282\u70b9\u7684\u503c\u3002\uff08\u5982\u679c\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D\uff0c\u5219\u5176\u76f4\u63a5\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D + 1\u3002\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a 0\uff09\u3002 \u5982\u679c\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u4fdd\u8bc1\u8be5\u5b50\u8282\u70b9\u4e3a\u5de6\u5b50\u8282\u70b9\u3002 \u7ed9\u51fa\u904d\u5386\u8f93\u51fa S\uff0c\u8fd8\u539f\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9 root\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a\"1-2--3--4-5--6--7\" \u8f93\u51fa\uff1a[1,2,5,3,4,6,7] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1a\"1-2--3---4-5--6---7\" \u8f93\u51fa\uff1a[1,2,5,3,null,6,null,4,null,7] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1a\"1-401--349---90--88\" \u8f93\u51fa\uff1a[1,401,null,349,88,90] \u63d0\u793a\uff1a 1 2 \u539f\u59cb\u6811\u4e2d\u7684\u8282\u70b9\u6570\u4ecb\u4e8e 1 \u548c 1000 \u4e4b\u95f4\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e 1 \u548c 10 ^ 9 \u4e4b\u95f4\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1028/readme/#2","text":"#define N 1002 struct TreeNode * nodeStack [ N ]; int nodeStackEnd = 0 ; int levelStack [ N ]; int levelStackEnd = 0 ; // \u8fd4\u56de\u89e3\u6790\u51fa\u6765\u7684 number, level, \u548c\u4e0b\u4e00\u6b21\u5f00\u59cb\u7684\u4f4d\u7f6e int parse ( char * S , int i , int * level , int * next ) { int l = 0 ; int num = 0 ; int j ; int n = strlen ( S ); j = i ; while ( j < n && S [ j ] == '-' ) { l ++ ; j ++ ; } while ( j < n && S [ j ] >= '0' && S [ j ] <= '9' ) { num = num * 10 + S [ j ] - '0' ; j ++ ; } ( * next ) = j ; ( * level ) = l ; return num ; } struct TreeNode * recoverFromPreorder ( char * S ){ int i = 0 ; int j ; int d ; // \u77ed\u6a2a\u7ebf\u7684\u6570\u91cf int next ; int num ; struct TreeNode * root ; struct TreeNode * newNode ; struct TreeNode * curNode ; int number ; int level = 0 ; int curLevel = 0 ; int n = strlen ( S ); if ( S == NULL || n == 0 ) { return NULL ; } j = 0 ; num = 0 ; while ( j < n && S [ j ] >= '0' && S [ j ] <= '9' ) { num = num * 10 + S [ j ] - '0' ; j ++ ; } root = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); root -> left = NULL ; root -> right = NULL ; root -> val = num ; if ( n == j ) { return root ; } nodeStack [ nodeStackEnd ++ ] = root ; levelStack [ levelStackEnd ++ ] = 0 ; curLevel = 0 ; for ( i = j ; i < strlen ( S ); i ++ ) { level = 0 ; next = 0 ; number = parse ( S , i , & level , & next ); if ( level == curLevel + 1 ) { // \u8bf4\u660e\u662f\u6808\u9876\u5143\u7d20\u7684\u5de6\u5b50\u6811 newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> val = number ; newNode -> left = NULL ; newNode -> right = NULL ; nodeStack [ nodeStackEnd - 1 ] -> left = newNode ; nodeStack [ nodeStackEnd ++ ] = newNode ; levelStack [ levelStackEnd ++ ] = level ; } else if ( level < curLevel + 1 ) { while ( levelStackEnd > 0 && levelStack [ levelStackEnd - 1 ] >= level ) { levelStackEnd -- ; nodeStackEnd -- ; } curNode = nodeStack [ nodeStackEnd - 1 ]; newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> left = NULL ; newNode -> right = NULL ; newNode -> val = number ; curNode -> right = newNode ; nodeStack [ nodeStackEnd ++ ] = newNode ; levelStack [ levelStackEnd ++ ] = level ; } else { } i = next - 1 ; curLevel = level ; } return root ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1031/readme/","text":"1031. \u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u51fa\u975e\u8d1f\u6574\u6570\u6570\u7ec4 A \uff0c\u8fd4\u56de\u4e24\u4e2a\u975e\u91cd\u53e0\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u548c\uff0c\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u5206\u522b\u4e3a L \u548c M\u3002\uff08\u8fd9\u91cc\u9700\u8981\u6f84\u6e05\u7684\u662f\uff0c\u957f\u4e3a L \u7684\u5b50\u6570\u7ec4\u53ef\u4ee5\u51fa\u73b0\u5728\u957f\u4e3a M \u7684\u5b50\u6570\u7ec4\u4e4b\u524d\u6216\u4e4b\u540e\u3002\uff09 \u4ece\u5f62\u5f0f\u4e0a\u770b\uff0c\u8fd4\u56de\u6700\u5927\u7684 V\uff0c\u800c V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) \u5e76\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u4e4b\u4e00\uff1a 0 <= i < i + L - 1 < j < j + M - 1 < A.length, \u6216 0 <= j < j + M - 1 < i < i + L - 1 < A.length. \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aA = [0,6,5,2,2,5,1,9,4], L = 1, M = 2 \u8f93\u51fa\uff1a20 \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[9] \u957f\u5ea6\u4e3a 1\uff0c[6,5] \u957f\u5ea6\u4e3a 2\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aA = [3,8,1,3,2,1,8,9,0], L = 3, M = 2 \u8f93\u51fa\uff1a29 \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[3,8,1] \u957f\u5ea6\u4e3a 3\uff0c[8,9] \u957f\u5ea6\u4e3a 2\u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1aA = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[5,6,0,9] \u957f\u5ea6\u4e3a 4\uff0c[0,3,8] \u957f\u5ea6\u4e3a 3\u3002 \u63d0\u793a\uff1a 1 2 3 4 L >= 1 M >= 1 L + M <= A.length <= 1000 0 <= A[i] <= 1000 2. \u89e3\u9898\u601d\u8def \u00b6 \u5148\u6c42\u51fa\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u7136\u540e\u56fa\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c \u6c42\u53e6\u4e00\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u548c\uff0c \u904d\u5386\u6bcf\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u7ec4\uff0c\u5373\u53ef\u627e\u51fa\u6240\u6709\u6700\u5927\u7684\u89e3\uff0c\u6700\u540e\u53d6\u6700\u5927\u7684\u90a3\u4e2a\u3002 \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\u7684\u786e\u5b9a\u3002 #define MAX(a, b) ((a) > (b)) ? (a) : (b) int getMSum ( int * A , int * aSum , int ASize , int i , int L , int M ) { int lefts = 0 ; int lefte = i - 1 ; int rights = i + L ; int righte = ASize - 1 ; int maxv = - 1 ; int j , tmp ; if ( lefte - lefts + 1 >= M ) { for ( j = lefts ; j <= lefte - M + 1 ; j ++ ) { tmp = aSum [ j + M ] - aSum [ j ]; maxv = MAX ( maxv , tmp ); } } if ( righte - rights + 1 >= M ) { for ( j = rights ; j <= righte - M + 1 ; j ++ ) { tmp = aSum [ j + M ] - aSum [ j ]; maxv = MAX ( maxv , tmp ); } } return maxv ; } int maxSumTwoNoOverlap ( int * A , int ASize , int L , int M ){ int * aSum ; int lSum = 0 ; int mSum = 0 ; int sum = 0 ; int ans = 0 ; int i , j ; if ( A == NULL || ASize == 0 ) { return 0 ; } /* \u6c42\u524d\u7f00\u548c */ aSum = ( int * ) malloc ( sizeof ( int ) * ( ASize + 1 )); aSum [ 0 ] = 0 ; for ( i = 0 ; i < ASize ; i ++ ) { aSum [ i + 1 ] = aSum [ i ] + A [ i ]; } /* \u786e\u5b9aL\uff0c\u5bfb\u627e\u53ef\u80fd\u7684\u6700\u5927\u7684M */ for ( i = 0 ; i <= ASize - L ; i ++ ) { lSum = aSum [ i + L ] - aSum [ i ]; mSum = getMSum ( A , aSum , ASize , i , L , M ); sum = lSum + mSum ; ans = MAX ( ans , sum ); } return ans ; }","title":"[1031. \u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c](https://leetcode-cn.com/problems/maximum-sum-of-two-non-overlapping-subarrays/)"},{"location":"leetcode/1031/readme/#1031","text":"","title":"1031. \u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"leetcode/1031/readme/#1","text":"\u7ed9\u51fa\u975e\u8d1f\u6574\u6570\u6570\u7ec4 A \uff0c\u8fd4\u56de\u4e24\u4e2a\u975e\u91cd\u53e0\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u548c\uff0c\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u5206\u522b\u4e3a L \u548c M\u3002\uff08\u8fd9\u91cc\u9700\u8981\u6f84\u6e05\u7684\u662f\uff0c\u957f\u4e3a L \u7684\u5b50\u6570\u7ec4\u53ef\u4ee5\u51fa\u73b0\u5728\u957f\u4e3a M \u7684\u5b50\u6570\u7ec4\u4e4b\u524d\u6216\u4e4b\u540e\u3002\uff09 \u4ece\u5f62\u5f0f\u4e0a\u770b\uff0c\u8fd4\u56de\u6700\u5927\u7684 V\uff0c\u800c V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) \u5e76\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u4e4b\u4e00\uff1a 0 <= i < i + L - 1 < j < j + M - 1 < A.length, \u6216 0 <= j < j + M - 1 < i < i + L - 1 < A.length. \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aA = [0,6,5,2,2,5,1,9,4], L = 1, M = 2 \u8f93\u51fa\uff1a20 \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[9] \u957f\u5ea6\u4e3a 1\uff0c[6,5] \u957f\u5ea6\u4e3a 2\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aA = [3,8,1,3,2,1,8,9,0], L = 3, M = 2 \u8f93\u51fa\uff1a29 \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[3,8,1] \u957f\u5ea6\u4e3a 3\uff0c[8,9] \u957f\u5ea6\u4e3a 2\u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1aA = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[5,6,0,9] \u957f\u5ea6\u4e3a 4\uff0c[0,3,8] \u957f\u5ea6\u4e3a 3\u3002 \u63d0\u793a\uff1a 1 2 3 4 L >= 1 M >= 1 L + M <= A.length <= 1000 0 <= A[i] <= 1000","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1031/readme/#2","text":"\u5148\u6c42\u51fa\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u7136\u540e\u56fa\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c \u6c42\u53e6\u4e00\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u548c\uff0c \u904d\u5386\u6bcf\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u7ec4\uff0c\u5373\u53ef\u627e\u51fa\u6240\u6709\u6700\u5927\u7684\u89e3\uff0c\u6700\u540e\u53d6\u6700\u5927\u7684\u90a3\u4e2a\u3002 \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\u7684\u786e\u5b9a\u3002 #define MAX(a, b) ((a) > (b)) ? (a) : (b) int getMSum ( int * A , int * aSum , int ASize , int i , int L , int M ) { int lefts = 0 ; int lefte = i - 1 ; int rights = i + L ; int righte = ASize - 1 ; int maxv = - 1 ; int j , tmp ; if ( lefte - lefts + 1 >= M ) { for ( j = lefts ; j <= lefte - M + 1 ; j ++ ) { tmp = aSum [ j + M ] - aSum [ j ]; maxv = MAX ( maxv , tmp ); } } if ( righte - rights + 1 >= M ) { for ( j = rights ; j <= righte - M + 1 ; j ++ ) { tmp = aSum [ j + M ] - aSum [ j ]; maxv = MAX ( maxv , tmp ); } } return maxv ; } int maxSumTwoNoOverlap ( int * A , int ASize , int L , int M ){ int * aSum ; int lSum = 0 ; int mSum = 0 ; int sum = 0 ; int ans = 0 ; int i , j ; if ( A == NULL || ASize == 0 ) { return 0 ; } /* \u6c42\u524d\u7f00\u548c */ aSum = ( int * ) malloc ( sizeof ( int ) * ( ASize + 1 )); aSum [ 0 ] = 0 ; for ( i = 0 ; i < ASize ; i ++ ) { aSum [ i + 1 ] = aSum [ i ] + A [ i ]; } /* \u786e\u5b9aL\uff0c\u5bfb\u627e\u53ef\u80fd\u7684\u6700\u5927\u7684M */ for ( i = 0 ; i <= ASize - L ; i ++ ) { lSum = aSum [ i + L ] - aSum [ i ]; mSum = getMSum ( A , aSum , ASize , i , L , M ); sum = lSum + mSum ; ans = MAX ( ans , sum ); } return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1048/readme/","text":"1048. \u6700\u957f\u5b57\u7b26\u4e32\u94fe \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u51fa\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u90fd\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002 \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728 word1 \u7684\u4efb\u4f55\u5730\u65b9\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u4f7f\u5176\u53d8\u6210 word2\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a word1 \u662f word2 \u7684\u524d\u8eab\u3002\u4f8b\u5982\uff0c\"abc\" \u662f \"abac\" \u7684\u524d\u8eab\u3002 \u8bcd\u94fe\u662f\u5355\u8bcd [word_1, word_2, ..., word_k] \u7ec4\u6210\u7684\u5e8f\u5217\uff0ck >= 1\uff0c\u5176\u4e2d word_1 \u662f word_2 \u7684\u524d\u8eab\uff0cword_2 \u662f word_3 \u7684\u524d\u8eab\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u4ece\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868 words \u4e2d\u9009\u62e9\u5355\u8bcd\u7ec4\u6210\u8bcd\u94fe\uff0c\u8fd4\u56de\u8bcd\u94fe\u7684\u6700\u957f\u53ef\u80fd\u957f\u5ea6\u3002 \u793a\u4f8b\uff1a 1 2 3 \u8f93\u5165\uff1a[\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u5355\u8bcd\u94fe\u4e4b\u4e00\u4e3a \"a\",\"ba\",\"bda\",\"bdca\"\u3002 \u63d0\u793a\uff1a 1 2 3 1 <= words.length <= 1000 1 <= words[i].length <= 16 words[i] \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5982\u679c\u5f53\u524d\u6863\u6b21\u7684\u957f\u5ea6\u662f m, \u90a3\u4e48\u4e0b\u4e00\u4e2a\u53ef\u80fd\u662f\u8bcd\u94fe\u7684\u5355\u8bcd\u957f\u5ea6\u662f m + 1, \u641c\u7d22\u6240\u6709\u957f\u5ea6\u662f m + 1\u7684\u5355\u8bcd\uff0c \u8bb0\u5f55\u6700\u5927\u503c\u3002 class Solution ( object ): def longestStrChain ( self , words ): \"\"\" :type words: List[str] :rtype: int \"\"\" def is_prefix ( word , word2 ): if len ( word ) + 1 != len ( word2 ): return False count = 1 # \u6700\u591a\u51fa\u73b0\u4e00\u6b21\u5b57\u7b26\u4e0d\u5339\u914d i = 0 j = 0 while i < len ( word ) and j < len ( word2 ): if word [ i ] == word2 [ j ]: i += 1 j += 1 elif count > 0 : count -= 1 j += 1 else : return False return True dic = {} minl = 16 maxl = 1 for word in words : l = len ( word ) minl = min ([ minl , l ]) maxl = max ([ maxl , l ]) if l not in dic : dic [ l ] = [[ word , 1 ]] else : dic [ l ] . append ([ word , 1 ]) l = minl longest = 1 while l <= maxl : if l in dic and l + 1 in dic : for word in dic [ l ]: for i in range ( len ( dic [ l + 1 ])): ans = is_prefix ( word [ 0 ], dic [ l + 1 ][ i ][ 0 ]) #print(\"{0} is {1} ? {2}\".format(word[0], dic[l+1][i][0], ans)) if ans : dic [ l + 1 ][ i ][ 1 ] = word [ 1 ] + 1 longest = max ([ longest , dic [ l + 1 ][ i ][ 1 ]]) l += 1 return longest","title":"[1048. \u6700\u957f\u5b57\u7b26\u4e32\u94fe](https://leetcode-cn.com/problems/longest-string-chain/)"},{"location":"leetcode/1048/readme/#1048","text":"","title":"1048. \u6700\u957f\u5b57\u7b26\u4e32\u94fe"},{"location":"leetcode/1048/readme/#1","text":"\u7ed9\u51fa\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u90fd\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002 \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728 word1 \u7684\u4efb\u4f55\u5730\u65b9\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u4f7f\u5176\u53d8\u6210 word2\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a word1 \u662f word2 \u7684\u524d\u8eab\u3002\u4f8b\u5982\uff0c\"abc\" \u662f \"abac\" \u7684\u524d\u8eab\u3002 \u8bcd\u94fe\u662f\u5355\u8bcd [word_1, word_2, ..., word_k] \u7ec4\u6210\u7684\u5e8f\u5217\uff0ck >= 1\uff0c\u5176\u4e2d word_1 \u662f word_2 \u7684\u524d\u8eab\uff0cword_2 \u662f word_3 \u7684\u524d\u8eab\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u4ece\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868 words \u4e2d\u9009\u62e9\u5355\u8bcd\u7ec4\u6210\u8bcd\u94fe\uff0c\u8fd4\u56de\u8bcd\u94fe\u7684\u6700\u957f\u53ef\u80fd\u957f\u5ea6\u3002 \u793a\u4f8b\uff1a 1 2 3 \u8f93\u5165\uff1a[\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u5355\u8bcd\u94fe\u4e4b\u4e00\u4e3a \"a\",\"ba\",\"bda\",\"bdca\"\u3002 \u63d0\u793a\uff1a 1 2 3 1 <= words.length <= 1000 1 <= words[i].length <= 16 words[i] \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1048/readme/#2","text":"\u5982\u679c\u5f53\u524d\u6863\u6b21\u7684\u957f\u5ea6\u662f m, \u90a3\u4e48\u4e0b\u4e00\u4e2a\u53ef\u80fd\u662f\u8bcd\u94fe\u7684\u5355\u8bcd\u957f\u5ea6\u662f m + 1, \u641c\u7d22\u6240\u6709\u957f\u5ea6\u662f m + 1\u7684\u5355\u8bcd\uff0c \u8bb0\u5f55\u6700\u5927\u503c\u3002 class Solution ( object ): def longestStrChain ( self , words ): \"\"\" :type words: List[str] :rtype: int \"\"\" def is_prefix ( word , word2 ): if len ( word ) + 1 != len ( word2 ): return False count = 1 # \u6700\u591a\u51fa\u73b0\u4e00\u6b21\u5b57\u7b26\u4e0d\u5339\u914d i = 0 j = 0 while i < len ( word ) and j < len ( word2 ): if word [ i ] == word2 [ j ]: i += 1 j += 1 elif count > 0 : count -= 1 j += 1 else : return False return True dic = {} minl = 16 maxl = 1 for word in words : l = len ( word ) minl = min ([ minl , l ]) maxl = max ([ maxl , l ]) if l not in dic : dic [ l ] = [[ word , 1 ]] else : dic [ l ] . append ([ word , 1 ]) l = minl longest = 1 while l <= maxl : if l in dic and l + 1 in dic : for word in dic [ l ]: for i in range ( len ( dic [ l + 1 ])): ans = is_prefix ( word [ 0 ], dic [ l + 1 ][ i ][ 0 ]) #print(\"{0} is {1} ? {2}\".format(word[0], dic[l+1][i][0], ans)) if ans : dic [ l + 1 ][ i ][ 1 ] = word [ 1 ] + 1 longest = max ([ longest , dic [ l + 1 ][ i ][ 1 ]]) l += 1 return longest","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1090/readme/","text":"1090. \u53d7\u6807\u7b7e\u5f71\u54cd\u7684\u6700\u5927\u503c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6211\u4eec\u6709\u4e00\u4e2a\u9879\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u7b2c i \u9879\u7684\u503c\u4e3a values[i]\uff0c\u6807\u7b7e\u4e3a labels[i]\u3002 \u6211\u4eec\u4ece\u8fd9\u4e9b\u9879\u4e2d\u9009\u51fa\u4e00\u4e2a\u5b50\u96c6 S\uff0c\u8fd9\u6837\u4e00\u6765\uff1a |S| <= num_wanted \u5bf9\u4e8e\u4efb\u610f\u7684\u6807\u7b7e L\uff0c\u5b50\u96c6 S \u4e2d\u6807\u7b7e\u4e3a L \u7684\u9879\u7684\u6570\u76ee\u603b\u6ee1\u8db3 <= use_limit\u3002 \u8fd4\u56de\u5b50\u96c6 S \u7684\u6700\u5927\u53ef\u80fd\u7684 \u548c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1 \u8f93\u51fa\uff1a9 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e09\u9879\u548c\u7b2c\u4e94\u9879\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2 \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u4e09\u9879\u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1 \u8f93\u51fa\uff1a16 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\u548c\u7b2c\u56db\u9879\u3002 \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2 \u8f93\u51fa\uff1a24 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u56db\u9879\u3002 \u63d0\u793a\uff1a 1 2 3 1 <= values.length == labels.length <= 20000 0 <= values[i], labels[i] <= 20000 1 <= num_wanted, use_limit <= values.length 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution ( object ): def largestValsFromLabels ( self , values , labels , num_wanted , use_limit ): \"\"\" :type values: List[int] :type labels: List[int] :type num_wanted: int :type use_limit: int :rtype: int \"\"\" dic = {} for label , value in zip ( labels , values ): if label not in dic : dic [ label ] = [ value ] else : dic [ label ] . append ( value ) a = [] for key , value in dic . iteritems (): value = sorted ( value , reverse = True ) a . extend ( value [ 0 : use_limit ]) a = sorted ( a , reverse = True ) s = sum ( a [ 0 : num_wanted ]) return s","title":"[1090. \u53d7\u6807\u7b7e\u5f71\u54cd\u7684\u6700\u5927\u503c](https://leetcode-cn.com/problems/largest-values-from-labels/)"},{"location":"leetcode/1090/readme/#1090","text":"","title":"1090. \u53d7\u6807\u7b7e\u5f71\u54cd\u7684\u6700\u5927\u503c"},{"location":"leetcode/1090/readme/#1","text":"\u6211\u4eec\u6709\u4e00\u4e2a\u9879\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u7b2c i \u9879\u7684\u503c\u4e3a values[i]\uff0c\u6807\u7b7e\u4e3a labels[i]\u3002 \u6211\u4eec\u4ece\u8fd9\u4e9b\u9879\u4e2d\u9009\u51fa\u4e00\u4e2a\u5b50\u96c6 S\uff0c\u8fd9\u6837\u4e00\u6765\uff1a |S| <= num_wanted \u5bf9\u4e8e\u4efb\u610f\u7684\u6807\u7b7e L\uff0c\u5b50\u96c6 S \u4e2d\u6807\u7b7e\u4e3a L \u7684\u9879\u7684\u6570\u76ee\u603b\u6ee1\u8db3 <= use_limit\u3002 \u8fd4\u56de\u5b50\u96c6 S \u7684\u6700\u5927\u53ef\u80fd\u7684 \u548c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1 \u8f93\u51fa\uff1a9 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e09\u9879\u548c\u7b2c\u4e94\u9879\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2 \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u4e09\u9879\u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1 \u8f93\u51fa\uff1a16 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\u548c\u7b2c\u56db\u9879\u3002 \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1avalues = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2 \u8f93\u51fa\uff1a24 \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u56db\u9879\u3002 \u63d0\u793a\uff1a 1 2 3 1 <= values.length == labels.length <= 20000 0 <= values[i], labels[i] <= 20000 1 <= num_wanted, use_limit <= values.length","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1090/readme/#2","text":"class Solution ( object ): def largestValsFromLabels ( self , values , labels , num_wanted , use_limit ): \"\"\" :type values: List[int] :type labels: List[int] :type num_wanted: int :type use_limit: int :rtype: int \"\"\" dic = {} for label , value in zip ( labels , values ): if label not in dic : dic [ label ] = [ value ] else : dic [ label ] . append ( value ) a = [] for key , value in dic . iteritems (): value = sorted ( value , reverse = True ) a . extend ( value [ 0 : use_limit ]) a = sorted ( a , reverse = True ) s = sum ( a [ 0 : num_wanted ]) return s","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1143/1143/index.py.html","text":"1143.py \u00b6 class Solution : def longestCommonSubsequence ( self , text1 : str , text2 : str ) -> int : n1 = len ( text1 ) n2 = len ( text2 ) if n1 == 0 or n2 == 0 : return 0 dp = [ [ 0 for _ in range ( n2 + 1 )] for _ in range ( n1 + 1 ) ] for i in range ( 1 , n1 + 1 ): for j in range ( 1 , n2 + 1 ): if text1 [ i - 1 ] == text2 [ j - 1 ]: dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 else : dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i ][ j - 1 ] ) return dp [ n1 ][ n2 ] s = Solution () text1 = \"abcde\" text2 = \"ace\" expected = 3 ans = s . longestCommonSubsequence ( text1 , text2 ) assert ans == expected end = 10","title":"1143.py"},{"location":"leetcode/1143/1143/index.py.html#1143py","text":"class Solution : def longestCommonSubsequence ( self , text1 : str , text2 : str ) -> int : n1 = len ( text1 ) n2 = len ( text2 ) if n1 == 0 or n2 == 0 : return 0 dp = [ [ 0 for _ in range ( n2 + 1 )] for _ in range ( n1 + 1 ) ] for i in range ( 1 , n1 + 1 ): for j in range ( 1 , n2 + 1 ): if text1 [ i - 1 ] == text2 [ j - 1 ]: dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 else : dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i ][ j - 1 ] ) return dp [ n1 ][ n2 ] s = Solution () text1 = \"abcde\" text2 = \"ace\" expected = 3 ans = s . longestCommonSubsequence ( text1 , text2 ) assert ans == expected end = 10","title":"1143.py"},{"location":"leetcode/1143/readme/","text":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 text1 \u548c text2\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 \u5b50\u5e8f\u5217 \u662f\u6307\u8fd9\u6837\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff1a\u5b83\u662f\u7531\u539f\u5b57\u7b26\u4e32\u5728\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\u4efb\u4f55\u5b57\u7b26\uff09\u540e\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\uff0c\"ace\" \u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\uff0c\u4f46 \"aec\" \u4e0d\u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\u3002\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u300c\u516c\u5171\u5b50\u5e8f\u5217\u300d\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6240\u5171\u540c\u62e5\u6709\u7684\u5b50\u5e8f\u5217\u3002 \u82e5\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ca1\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5219\u8fd4\u56de 0\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165\uff1atext1 = \"abcde\", text2 = \"ace\" \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u662f \"ace\"\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165\uff1atext1 = \"abc\", text2 = \"abc\" \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u662f \"abc\"\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165\uff1atext1 = \"abc\", text2 = \"def\" \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ca1\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002 \u63d0\u793a: 1 2 3 1 <= text1.length <= 1000 1 <= text2.length <= 1000 \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u7b26\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 dp[i][j] \u8868\u793a\u4f7f\u7528 string1 \u524d i \u4e2a\u5b57\u7b26\uff0c string2 \u524d j \u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 dp[i][j] = dp[i-1][j-1], if string1[i] == string2[j] = max(dp[i-1][j], dp[i][j-1]), if string1[i] == string2[j] 3. AC\u4ee3\u7801 \u00b6 Python","title":"[1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217](https://leetcode-cn.com/problems/longest-common-subsequence/)"},{"location":"leetcode/1143/readme/#1143","text":"","title":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217"},{"location":"leetcode/1143/readme/#1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 text1 \u548c text2\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 \u5b50\u5e8f\u5217 \u662f\u6307\u8fd9\u6837\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff1a\u5b83\u662f\u7531\u539f\u5b57\u7b26\u4e32\u5728\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\u4efb\u4f55\u5b57\u7b26\uff09\u540e\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\uff0c\"ace\" \u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\uff0c\u4f46 \"aec\" \u4e0d\u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\u3002\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u300c\u516c\u5171\u5b50\u5e8f\u5217\u300d\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6240\u5171\u540c\u62e5\u6709\u7684\u5b50\u5e8f\u5217\u3002 \u82e5\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ca1\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5219\u8fd4\u56de 0\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165\uff1atext1 = \"abcde\", text2 = \"ace\" \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u662f \"ace\"\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165\uff1atext1 = \"abc\", text2 = \"abc\" \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u662f \"abc\"\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165\uff1atext1 = \"abc\", text2 = \"def\" \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ca1\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002 \u63d0\u793a: 1 2 3 1 <= text1.length <= 1000 1 <= text2.length <= 1000 \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u7b26\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1143/readme/#2","text":"dp[i][j] \u8868\u793a\u4f7f\u7528 string1 \u524d i \u4e2a\u5b57\u7b26\uff0c string2 \u524d j \u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 dp[i][j] = dp[i-1][j-1], if string1[i] == string2[j] = max(dp[i-1][j], dp[i][j-1]), if string1[i] == string2[j]","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1143/readme/#3-ac","text":"Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/1157/readme/","text":"1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5b9e\u73b0\u4e00\u4e2a MajorityChecker \u7684\u7c7b\uff0c\u5b83\u5e94\u8be5\u5177\u6709\u4e0b\u8ff0\u51e0\u4e2a API\uff1a MajorityChecker(int[] arr) \u4f1a\u7528\u7ed9\u5b9a\u7684\u6570\u7ec4 arr \u6765\u6784\u9020\u4e00\u4e2a MajorityChecker \u7684\u5b9e\u4f8b\u3002 int query(int left, int right, int threshold) \u6709\u8fd9\u4e48\u51e0\u4e2a\u53c2\u6570\uff1a 0 <= left <= right < arr.length \u8868\u793a\u6570\u7ec4 arr \u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 2 * threshold > right - left + 1\uff0c\u4e5f\u5c31\u662f\u8bf4\u9608\u503c threshold \u59cb\u7ec8\u6bd4\u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u4e00\u534a\u8fd8\u8981\u5927\u3002 \u6bcf\u6b21\u67e5\u8be2 query(...) \u4f1a\u8fd4\u56de\u5728 arr[left], arr[left+1], ..., arr[right] \u4e2d\u81f3\u5c11\u51fa\u73b0\u9608\u503c\u6b21\u6570 threshold \u7684\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u5c31\u8fd4\u56de -1\u3002 \u793a\u4f8b\uff1a 1 2 3 4 MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]); majorityChecker.query(0,5,4); // \u8fd4\u56de 1 majorityChecker.query(0,3,3); // \u8fd4\u56de -1 majorityChecker.query(2,3,2); // \u8fd4\u56de 2 \u63d0\u793a\uff1a 1 2 3 4 5 1 <= arr.length <= 20000 1 <= arr[i] <= 20000 \u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c0 <= left <= right < len(arr) \u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c2 * threshold > right - left + 1 \u67e5\u8be2\u6b21\u6570\u6700\u591a\u4e3a 10000 1. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u7684\u6027\u8d28","title":"[1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20](https://leetcode-cn.com/problems/online-majority-element-in-subarray/)"},{"location":"leetcode/1157/readme/#1157","text":"","title":"1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20"},{"location":"leetcode/1157/readme/#1","text":"\u5b9e\u73b0\u4e00\u4e2a MajorityChecker \u7684\u7c7b\uff0c\u5b83\u5e94\u8be5\u5177\u6709\u4e0b\u8ff0\u51e0\u4e2a API\uff1a MajorityChecker(int[] arr) \u4f1a\u7528\u7ed9\u5b9a\u7684\u6570\u7ec4 arr \u6765\u6784\u9020\u4e00\u4e2a MajorityChecker \u7684\u5b9e\u4f8b\u3002 int query(int left, int right, int threshold) \u6709\u8fd9\u4e48\u51e0\u4e2a\u53c2\u6570\uff1a 0 <= left <= right < arr.length \u8868\u793a\u6570\u7ec4 arr \u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 2 * threshold > right - left + 1\uff0c\u4e5f\u5c31\u662f\u8bf4\u9608\u503c threshold \u59cb\u7ec8\u6bd4\u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u4e00\u534a\u8fd8\u8981\u5927\u3002 \u6bcf\u6b21\u67e5\u8be2 query(...) \u4f1a\u8fd4\u56de\u5728 arr[left], arr[left+1], ..., arr[right] \u4e2d\u81f3\u5c11\u51fa\u73b0\u9608\u503c\u6b21\u6570 threshold \u7684\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u5c31\u8fd4\u56de -1\u3002 \u793a\u4f8b\uff1a 1 2 3 4 MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]); majorityChecker.query(0,5,4); // \u8fd4\u56de 1 majorityChecker.query(0,3,3); // \u8fd4\u56de -1 majorityChecker.query(2,3,2); // \u8fd4\u56de 2 \u63d0\u793a\uff1a 1 2 3 4 5 1 <= arr.length <= 20000 1 <= arr[i] <= 20000 \u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c0 <= left <= right < len(arr) \u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c2 * threshold > right - left + 1 \u67e5\u8be2\u6b21\u6570\u6700\u591a\u4e3a 10000","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1157/readme/#1_1","text":"\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u7684\u6027\u8d28","title":"1. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1169/readme/","text":"1169. \u67e5\u8be2\u65e0\u6548\u4ea4\u6613 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5982\u679c\u51fa\u73b0\u4e0b\u8ff0\u4e24\u79cd\u60c5\u51b5\uff0c\u4ea4\u6613 \u53ef\u80fd\u65e0\u6548\uff1a \u4ea4\u6613\u91d1\u989d\u8d85\u8fc7 \u00a51000 \u6216\u8005\uff0c\u5b83\u548c\u53e6\u4e00\u4e2a\u57ce\u5e02\u4e2d\u540c\u540d\u7684\u53e6\u4e00\u7b14\u4ea4\u6613\u76f8\u9694\u4e0d\u8d85\u8fc7 60 \u5206\u949f\uff08\u5305\u542b 60 \u5206\u949f\u6574\uff09 \u6bcf\u4e2a\u4ea4\u6613\u5b57\u7b26\u4e32 transactions[i] \u7531\u4e00\u4e9b\u7528\u9017\u53f7\u5206\u9694\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u4e9b\u503c\u5206\u522b\u8868\u793a\u4ea4\u6613\u7684\u540d\u79f0\uff0c\u65f6\u95f4\uff08\u4ee5\u5206\u949f\u8ba1\uff09\uff0c\u91d1\u989d\u4ee5\u53ca\u57ce\u5e02\u3002 \u7ed9\u4f60\u4e00\u4efd\u4ea4\u6613\u6e05\u5355 transactions\uff0c\u8fd4\u56de\u53ef\u80fd\u65e0\u6548\u7684\u4ea4\u6613\u5217\u8868\u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"] \u8f93\u51fa\uff1a[\"alice,20,800,mtv\",\"alice,50,100,beijing\"] \u89e3\u91ca\uff1a\u7b2c\u4e00\u7b14\u4ea4\u6613\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u7b14\u4ea4\u6613\u548c\u5b83\u95f4\u9694\u4e0d\u8d85\u8fc7 60 \u5206\u949f\u3001\u540d\u79f0\u76f8\u540c\u4e14\u53d1\u751f\u5728\u4e0d\u540c\u7684\u57ce\u5e02\u3002\u540c\u6837\uff0c\u7b2c\u4e8c\u7b14\u4ea4\u6613\u4e5f\u662f\u65e0\u6548\u7684\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"] \u8f93\u51fa\uff1a[\"alice,50,1200,mtv\"] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"] \u8f93\u51fa\uff1a[\"bob,50,1200,mtv\"] \u63d0\u793a\uff1a 1 2 3 4 5 transactions.length <= 1000 \u6bcf\u7b14\u4ea4\u6613 transactions[i] \u6309 \"{name},{time},{amount},{city}\" \u7684\u683c\u5f0f\u8fdb\u884c\u8bb0\u5f55 \u6bcf\u4e2a\u4ea4\u6613\u540d\u79f0 {name} \u548c\u57ce\u5e02 {city} \u90fd\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0c\u957f\u5ea6\u5728 1 \u5230 10 \u4e4b\u95f4 \u6bcf\u4e2a\u4ea4\u6613\u65f6\u95f4 {time} \u7531\u4e00\u4e9b\u6570\u5b57\u7ec4\u6210\uff0c\u8868\u793a\u4e00\u4e2a 0 \u5230 1000 \u4e4b\u95f4\u7684\u6574\u6570 \u6bcf\u7b14\u4ea4\u6613\u91d1\u989d {amount} \u7531\u4e00\u4e9b\u6570\u5b57\u7ec4\u6210\uff0c\u8868\u793a\u4e00\u4e2a 0 \u5230 2000 \u4e4b\u95f4\u7684\u6574\u6570 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution : def findInvalid ( self , trans ): n = len ( trans ) ans = set () for i in range ( n - 1 ): for j in range ( i + 1 , n ): a1 , b1 , c1 , d1 = trans [ i ] . split ( \",\" , 3 ) a2 , b2 , c2 , d2 = trans [ j ] . split ( \",\" , 3 ) if abs ( int ( b1 ) - int ( b2 )) <= 60 and d1 != d2 : if trans [ i ] not in ans : ans . add ( trans [ i ]) if trans [ j ] not in ans : ans . add ( trans [ j ]) return ans def invalidTransactions ( self , transactions ): ans = set () dic = {} for line in transactions : a , b , c , d = line . split ( \",\" , 3 ) if a in dic : dic [ a ] . append ( line ) else : dic [ a ] = [ line ] if int ( c ) > 1000 : ans . add ( line ) #print(dic) for key , value in dic . items (): invilds = self . findInvalid ( value ) if invilds : ans = ans | invilds return ans","title":"[1169. \u67e5\u8be2\u65e0\u6548\u4ea4\u6613](https://leetcode-cn.com/problems/invalid-transactions/)"},{"location":"leetcode/1169/readme/#1169","text":"","title":"1169. \u67e5\u8be2\u65e0\u6548\u4ea4\u6613"},{"location":"leetcode/1169/readme/#1","text":"\u5982\u679c\u51fa\u73b0\u4e0b\u8ff0\u4e24\u79cd\u60c5\u51b5\uff0c\u4ea4\u6613 \u53ef\u80fd\u65e0\u6548\uff1a \u4ea4\u6613\u91d1\u989d\u8d85\u8fc7 \u00a51000 \u6216\u8005\uff0c\u5b83\u548c\u53e6\u4e00\u4e2a\u57ce\u5e02\u4e2d\u540c\u540d\u7684\u53e6\u4e00\u7b14\u4ea4\u6613\u76f8\u9694\u4e0d\u8d85\u8fc7 60 \u5206\u949f\uff08\u5305\u542b 60 \u5206\u949f\u6574\uff09 \u6bcf\u4e2a\u4ea4\u6613\u5b57\u7b26\u4e32 transactions[i] \u7531\u4e00\u4e9b\u7528\u9017\u53f7\u5206\u9694\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u4e9b\u503c\u5206\u522b\u8868\u793a\u4ea4\u6613\u7684\u540d\u79f0\uff0c\u65f6\u95f4\uff08\u4ee5\u5206\u949f\u8ba1\uff09\uff0c\u91d1\u989d\u4ee5\u53ca\u57ce\u5e02\u3002 \u7ed9\u4f60\u4e00\u4efd\u4ea4\u6613\u6e05\u5355 transactions\uff0c\u8fd4\u56de\u53ef\u80fd\u65e0\u6548\u7684\u4ea4\u6613\u5217\u8868\u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"] \u8f93\u51fa\uff1a[\"alice,20,800,mtv\",\"alice,50,100,beijing\"] \u89e3\u91ca\uff1a\u7b2c\u4e00\u7b14\u4ea4\u6613\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u7b14\u4ea4\u6613\u548c\u5b83\u95f4\u9694\u4e0d\u8d85\u8fc7 60 \u5206\u949f\u3001\u540d\u79f0\u76f8\u540c\u4e14\u53d1\u751f\u5728\u4e0d\u540c\u7684\u57ce\u5e02\u3002\u540c\u6837\uff0c\u7b2c\u4e8c\u7b14\u4ea4\u6613\u4e5f\u662f\u65e0\u6548\u7684\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"] \u8f93\u51fa\uff1a[\"alice,50,1200,mtv\"] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"] \u8f93\u51fa\uff1a[\"bob,50,1200,mtv\"] \u63d0\u793a\uff1a 1 2 3 4 5 transactions.length <= 1000 \u6bcf\u7b14\u4ea4\u6613 transactions[i] \u6309 \"{name},{time},{amount},{city}\" \u7684\u683c\u5f0f\u8fdb\u884c\u8bb0\u5f55 \u6bcf\u4e2a\u4ea4\u6613\u540d\u79f0 {name} \u548c\u57ce\u5e02 {city} \u90fd\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0c\u957f\u5ea6\u5728 1 \u5230 10 \u4e4b\u95f4 \u6bcf\u4e2a\u4ea4\u6613\u65f6\u95f4 {time} \u7531\u4e00\u4e9b\u6570\u5b57\u7ec4\u6210\uff0c\u8868\u793a\u4e00\u4e2a 0 \u5230 1000 \u4e4b\u95f4\u7684\u6574\u6570 \u6bcf\u7b14\u4ea4\u6613\u91d1\u989d {amount} \u7531\u4e00\u4e9b\u6570\u5b57\u7ec4\u6210\uff0c\u8868\u793a\u4e00\u4e2a 0 \u5230 2000 \u4e4b\u95f4\u7684\u6574\u6570","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1169/readme/#2","text":"class Solution : def findInvalid ( self , trans ): n = len ( trans ) ans = set () for i in range ( n - 1 ): for j in range ( i + 1 , n ): a1 , b1 , c1 , d1 = trans [ i ] . split ( \",\" , 3 ) a2 , b2 , c2 , d2 = trans [ j ] . split ( \",\" , 3 ) if abs ( int ( b1 ) - int ( b2 )) <= 60 and d1 != d2 : if trans [ i ] not in ans : ans . add ( trans [ i ]) if trans [ j ] not in ans : ans . add ( trans [ j ]) return ans def invalidTransactions ( self , transactions ): ans = set () dic = {} for line in transactions : a , b , c , d = line . split ( \",\" , 3 ) if a in dic : dic [ a ] . append ( line ) else : dic [ a ] = [ line ] if int ( c ) > 1000 : ans . add ( line ) #print(dic) for key , value in dic . items (): invilds = self . findInvalid ( value ) if invilds : ans = ans | invilds return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1170/readme/","text":"1170. \u6bd4\u8f83\u5b57\u7b26\u4e32\u6700\u5c0f\u5b57\u6bcd\u51fa\u73b0\u9891\u6b21 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 f(s)\uff0c\u5176\u4e2d\u4f20\u5165\u53c2\u6570 s \u662f\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\uff1b\u8be5\u51fd\u6570\u7684\u529f\u80fd\u662f\u7edf\u8ba1 s \u4e2d\uff08\u6309\u5b57\u5178\u5e8f\u6bd4\u8f83\uff09\u6700\u5c0f\u5b57\u6bcd\u7684\u51fa\u73b0\u9891\u6b21\u3002 \u4f8b\u5982\uff0c\u82e5 s = \"dcce\"\uff0c\u90a3\u4e48 f(s) = 2\uff0c\u56e0\u4e3a\u6700\u5c0f\u7684\u5b57\u6bcd\u662f \"c\"\uff0c\u5b83\u51fa\u73b0\u4e86 2 \u6b21\u3002 \u73b0\u5728\uff0c\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u5f85\u67e5\u8868 queries \u548c\u8bcd\u6c47\u8868 words\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 answer \u4f5c\u4e3a\u7b54\u6848\uff0c\u5176\u4e2d\u6bcf\u4e2a answer[i] \u662f\u6ee1\u8db3 f(queries[i]) < f(W) \u7684\u8bcd\u7684\u6570\u76ee\uff0cW \u662f\u8bcd\u6c47\u8868 words \u4e2d\u7684\u8bcd\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aqueries = [\"cbd\"], words = [\"zaaaz\"] \u8f93\u51fa\uff1a[1] \u89e3\u91ca\uff1a\u67e5\u8be2 f(\"cbd\") = 1\uff0c\u800c f(\"zaaaz\") = 3 \u6240\u4ee5 f(\"cbd\") < f(\"zaaaz\")\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aqueries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"] \u8f93\u51fa\uff1a[1,2] \u89e3\u91ca\uff1a\u7b2c\u4e00\u4e2a\u67e5\u8be2 f(\"bbb\") < f(\"aaaa\")\uff0c\u7b2c\u4e8c\u4e2a\u67e5\u8be2 f(\"aaa\") \u548c f(\"aaaa\") \u90fd > f(\"cc\")\u3002 \u63d0\u793a\uff1a 1 2 3 4 1 <= queries.length <= 2000 1 <= words.length <= 2000 1 <= queries[i].length, words[i].length <= 10 queries[i][j], words[i][j] \u90fd\u662f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd 2. \u89e3\u9898\u601d\u8def \u00b6 int f ( char * s ) { int i ; int n = strlen ( s ); int count = 1 ; char c = s [ 0 ]; for ( i = 1 ; i < n ; i ++ ) { if ( s [ i ] < c ) { c = s [ i ]; count = 1 ; } else if ( c == s [ i ]) { count ++ ; } } return count ; } int * numSmallerByFrequency ( char ** queries , int queriesSize , char ** words , int wordsSize , int * returnSize ){ int i , j ; int count ; int n ; int * wordCount ; int ans ; int * ansArray ; wordCount = ( int * ) malloc ( sizeof ( int ) * wordsSize ); ansArray = ( int * ) malloc ( sizeof ( int ) * queriesSize ); for ( i = 0 ; i < wordsSize ; i ++ ) { wordCount [ i ] = f ( words [ i ]); } for ( i = 0 ; i < queriesSize ; i ++ ) { count = f ( queries [ i ]); ans = 0 ; for ( j = 0 ; j < wordsSize ; j ++ ) { if ( count < wordCount [ j ]) { ans ++ ; } } ansArray [ i ] = ans ; } ( * returnSize ) = queriesSize ; free ( wordCount ); return ansArray ; }","title":"[1170. \u6bd4\u8f83\u5b57\u7b26\u4e32\u6700\u5c0f\u5b57\u6bcd\u51fa\u73b0\u9891\u6b21](https://leetcode-cn.com/problems/compare-strings-by-frequency-of-the-smallest-character/)"},{"location":"leetcode/1170/readme/#1170","text":"","title":"1170. \u6bd4\u8f83\u5b57\u7b26\u4e32\u6700\u5c0f\u5b57\u6bcd\u51fa\u73b0\u9891\u6b21"},{"location":"leetcode/1170/readme/#1","text":"\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 f(s)\uff0c\u5176\u4e2d\u4f20\u5165\u53c2\u6570 s \u662f\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\uff1b\u8be5\u51fd\u6570\u7684\u529f\u80fd\u662f\u7edf\u8ba1 s \u4e2d\uff08\u6309\u5b57\u5178\u5e8f\u6bd4\u8f83\uff09\u6700\u5c0f\u5b57\u6bcd\u7684\u51fa\u73b0\u9891\u6b21\u3002 \u4f8b\u5982\uff0c\u82e5 s = \"dcce\"\uff0c\u90a3\u4e48 f(s) = 2\uff0c\u56e0\u4e3a\u6700\u5c0f\u7684\u5b57\u6bcd\u662f \"c\"\uff0c\u5b83\u51fa\u73b0\u4e86 2 \u6b21\u3002 \u73b0\u5728\uff0c\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u5f85\u67e5\u8868 queries \u548c\u8bcd\u6c47\u8868 words\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 answer \u4f5c\u4e3a\u7b54\u6848\uff0c\u5176\u4e2d\u6bcf\u4e2a answer[i] \u662f\u6ee1\u8db3 f(queries[i]) < f(W) \u7684\u8bcd\u7684\u6570\u76ee\uff0cW \u662f\u8bcd\u6c47\u8868 words \u4e2d\u7684\u8bcd\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aqueries = [\"cbd\"], words = [\"zaaaz\"] \u8f93\u51fa\uff1a[1] \u89e3\u91ca\uff1a\u67e5\u8be2 f(\"cbd\") = 1\uff0c\u800c f(\"zaaaz\") = 3 \u6240\u4ee5 f(\"cbd\") < f(\"zaaaz\")\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aqueries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"] \u8f93\u51fa\uff1a[1,2] \u89e3\u91ca\uff1a\u7b2c\u4e00\u4e2a\u67e5\u8be2 f(\"bbb\") < f(\"aaaa\")\uff0c\u7b2c\u4e8c\u4e2a\u67e5\u8be2 f(\"aaa\") \u548c f(\"aaaa\") \u90fd > f(\"cc\")\u3002 \u63d0\u793a\uff1a 1 2 3 4 1 <= queries.length <= 2000 1 <= words.length <= 2000 1 <= queries[i].length, words[i].length <= 10 queries[i][j], words[i][j] \u90fd\u662f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1170/readme/#2","text":"int f ( char * s ) { int i ; int n = strlen ( s ); int count = 1 ; char c = s [ 0 ]; for ( i = 1 ; i < n ; i ++ ) { if ( s [ i ] < c ) { c = s [ i ]; count = 1 ; } else if ( c == s [ i ]) { count ++ ; } } return count ; } int * numSmallerByFrequency ( char ** queries , int queriesSize , char ** words , int wordsSize , int * returnSize ){ int i , j ; int count ; int n ; int * wordCount ; int ans ; int * ansArray ; wordCount = ( int * ) malloc ( sizeof ( int ) * wordsSize ); ansArray = ( int * ) malloc ( sizeof ( int ) * queriesSize ); for ( i = 0 ; i < wordsSize ; i ++ ) { wordCount [ i ] = f ( words [ i ]); } for ( i = 0 ; i < queriesSize ; i ++ ) { count = f ( queries [ i ]); ans = 0 ; for ( j = 0 ; j < wordsSize ; j ++ ) { if ( count < wordCount [ j ]) { ans ++ ; } } ansArray [ i ] = ans ; } ( * returnSize ) = queriesSize ; free ( wordCount ); return ansArray ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1178/readme/","text":"1178. \u731c\u5b57\u8c1c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5916\u56fd\u53cb\u4eba\u4eff\u7167\u4e2d\u56fd\u5b57\u8c1c\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u82f1\u6587\u7248\u731c\u5b57\u8c1c\u5c0f\u6e38\u620f\uff0c\u8bf7\u4f60\u6765\u731c\u731c\u770b\u5427\u3002 \u5b57\u8c1c\u7684\u8ff7\u9762 puzzle \u6309\u5b57\u7b26\u4e32\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5982\u679c\u4e00\u4e2a\u5355\u8bcd word \u7b26\u5408\u4e0b\u9762\u4e24\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u7b97\u4f5c\u8c1c\u5e95\uff1a \u5355\u8bcd word \u4e2d\u5305\u542b\u8c1c\u9762 puzzle \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u3002 \u5355\u8bcd word \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u90fd\u53ef\u4ee5\u5728\u8c1c\u9762 puzzle \u4e2d\u627e\u5230\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5b57\u8c1c\u7684\u8c1c\u9762\u662f \"abcdefg\"\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f5c\u4e3a\u8c1c\u5e95\u7684\u5355\u8bcd\u6709 \"faced\", \"cabbage\", \u548c \"baggage\"\uff1b\u800c \"beefed\"\uff08\u4e0d\u542b\u5b57\u6bcd \"a\"\uff09\u4ee5\u53ca \"based\"\uff08\u5176\u4e2d\u7684 \"s\" \u6ca1\u6709\u51fa\u73b0\u5728\u8c1c\u9762\u4e2d\uff09\u3002 \u8fd4\u56de\u4e00\u4e2a\u7b54\u6848\u6570\u7ec4 answer\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 answer[i] \u662f\u5728\u7ed9\u51fa\u7684\u5355\u8bcd\u5217\u8868 words \u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u8c1c\u8ff7\u9762 puzzles[i] \u6240\u5bf9\u5e94\u7684\u8c1c\u5e95\u7684\u5355\u8bcd\u6570\u76ee\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1a words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"] \u8f93\u51fa\uff1a[1,1,3,2,4,0] \u89e3\u91ca\uff1a 1 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"aboveyz\" \u7684\u8c1c\u5e95 : \"aaaa\" 1 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"abrodyz\" \u7684\u8c1c\u5e95 : \"aaaa\" 3 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"abslute\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\", \"able\" 2 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"absoryz\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\" 4 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"actresz\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\", \"actt\", \"access\" \u6ca1\u6709\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"gaswxyz\" \u7684\u8c1c\u5e95\uff0c\u56e0\u4e3a\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u90fd\u4e0d\u542b\u5b57\u6bcd 'g'\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= words.length <= 10^5 4 <= words[i].length <= 50 1 <= puzzles.length <= 10^4 puzzles[i].length == 7 words[i][j], puzzles[i][j] \u90fd\u662f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u6bcf\u4e2a puzzles[i] \u6240\u5305\u542b\u7684\u5b57\u7b26\u90fd\u4e0d\u91cd\u590d\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution ( object ): def findNumOfValidWords ( self , words , puzzles ): \"\"\" :type words: List[str] :type puzzles: List[str] :rtype: List[int] \"\"\" def convert ( word ): b = 0 for c in word : b = b | ( 1 << ( ord ( c ) - ord ( 'a' ) ) ) return b dic = {} for word in words : word = \"\" . join ( set ( word ) ) v = convert ( word ) if v not in dic : dic [ v ] = 1 else : dic [ v ] += 1 ans = [ 0 ] * len ( puzzles ) for i , puzzle in enumerate ( puzzles ): first = convert ( puzzle [ 0 ]) pv = convert ( puzzle ) j = pv while j > 0 : if ( first & j != 0 ) and j in dic : ans [ i ] += dic [ j ] j = ( j - 1 ) & pv return ans","title":"[1178. \u731c\u5b57\u8c1c](https://leetcode-cn.com/problems/number-of-valid-words-for-each-puzzle/)"},{"location":"leetcode/1178/readme/#1178","text":"","title":"1178. \u731c\u5b57\u8c1c"},{"location":"leetcode/1178/readme/#1","text":"\u5916\u56fd\u53cb\u4eba\u4eff\u7167\u4e2d\u56fd\u5b57\u8c1c\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u82f1\u6587\u7248\u731c\u5b57\u8c1c\u5c0f\u6e38\u620f\uff0c\u8bf7\u4f60\u6765\u731c\u731c\u770b\u5427\u3002 \u5b57\u8c1c\u7684\u8ff7\u9762 puzzle \u6309\u5b57\u7b26\u4e32\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5982\u679c\u4e00\u4e2a\u5355\u8bcd word \u7b26\u5408\u4e0b\u9762\u4e24\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u7b97\u4f5c\u8c1c\u5e95\uff1a \u5355\u8bcd word \u4e2d\u5305\u542b\u8c1c\u9762 puzzle \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u3002 \u5355\u8bcd word \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u90fd\u53ef\u4ee5\u5728\u8c1c\u9762 puzzle \u4e2d\u627e\u5230\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5b57\u8c1c\u7684\u8c1c\u9762\u662f \"abcdefg\"\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f5c\u4e3a\u8c1c\u5e95\u7684\u5355\u8bcd\u6709 \"faced\", \"cabbage\", \u548c \"baggage\"\uff1b\u800c \"beefed\"\uff08\u4e0d\u542b\u5b57\u6bcd \"a\"\uff09\u4ee5\u53ca \"based\"\uff08\u5176\u4e2d\u7684 \"s\" \u6ca1\u6709\u51fa\u73b0\u5728\u8c1c\u9762\u4e2d\uff09\u3002 \u8fd4\u56de\u4e00\u4e2a\u7b54\u6848\u6570\u7ec4 answer\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20 answer[i] \u662f\u5728\u7ed9\u51fa\u7684\u5355\u8bcd\u5217\u8868 words \u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u8c1c\u8ff7\u9762 puzzles[i] \u6240\u5bf9\u5e94\u7684\u8c1c\u5e95\u7684\u5355\u8bcd\u6570\u76ee\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1a words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"] \u8f93\u51fa\uff1a[1,1,3,2,4,0] \u89e3\u91ca\uff1a 1 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"aboveyz\" \u7684\u8c1c\u5e95 : \"aaaa\" 1 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"abrodyz\" \u7684\u8c1c\u5e95 : \"aaaa\" 3 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"abslute\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\", \"able\" 2 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"absoryz\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\" 4 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"actresz\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\", \"actt\", \"access\" \u6ca1\u6709\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"gaswxyz\" \u7684\u8c1c\u5e95\uff0c\u56e0\u4e3a\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u90fd\u4e0d\u542b\u5b57\u6bcd 'g'\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= words.length <= 10^5 4 <= words[i].length <= 50 1 <= puzzles.length <= 10^4 puzzles[i].length == 7 words[i][j], puzzles[i][j] \u90fd\u662f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u6bcf\u4e2a puzzles[i] \u6240\u5305\u542b\u7684\u5b57\u7b26\u90fd\u4e0d\u91cd\u590d\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1178/readme/#2","text":"class Solution ( object ): def findNumOfValidWords ( self , words , puzzles ): \"\"\" :type words: List[str] :type puzzles: List[str] :rtype: List[int] \"\"\" def convert ( word ): b = 0 for c in word : b = b | ( 1 << ( ord ( c ) - ord ( 'a' ) ) ) return b dic = {} for word in words : word = \"\" . join ( set ( word ) ) v = convert ( word ) if v not in dic : dic [ v ] = 1 else : dic [ v ] += 1 ans = [ 0 ] * len ( puzzles ) for i , puzzle in enumerate ( puzzles ): first = convert ( puzzle [ 0 ]) pv = convert ( puzzle ) j = pv while j > 0 : if ( first & j != 0 ) and j in dic : ans [ i ] += dic [ j ] j = ( j - 1 ) & pv return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1203/1203/index.py.html","text":"1203.py \u00b6 from typing import List class Solution : def sortItems ( self , n : int , m : int , group : List [ int ], beforeItems : List [ List [ int ]]) -> List [ int ]: def createGraphItem ( groupIndex , group , beforeItems ): \"\"\" \u4e3a\u6bcf\u4e2a\u5206\u7ec4\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u56fe \"\"\" items = {} for i in range ( n ): if group [ i ] == groupIndex : items [ i ] = [] for i in range ( n ): if group [ i ] == groupIndex : for item in beforeItems [ i ]: if group [ item ] == groupIndex : items [ item ] . append ( i ) return items def Topology ( graph ): \"\"\" graph: [dict] \u90bb\u63a5\u8868\u8868\u793a\u7684\u56fe\uff0c keys \u4e3a\u70b9\u7684\u96c6\u5408\uff0c dic[key]\u662f\u4e00\u4e2aList return: \u62d3\u6251\u6392\u5e8f\u7ed3\u679c \"\"\" def dfs ( u ): color [ u ] = 1 for v in graph [ u ]: if color [ v ] == 1 : return False if color [ v ] == 0 : if not dfs ( v ): return False color [ u ] = 2 ans . insert ( 0 , u ) return True size = len ( graph ) color = {} for key in graph . keys (): color [ key ] = 0 ans = [] for u in graph . keys (): if color [ u ] == 0 : if not dfs ( u ): return [] return ans # -1 \u6620\u5c04\u6210 \u6700\u5927\u7684\u7ec4+1+\u5f53\u524d\u7d22\u5f15 groupMax = max ( group ) for i in range ( n ): if group [ i ] == - 1 : group [ i ] = i + groupMax + 1 # \u6784\u9020\u5206\u7ec4\u4f9d\u8d56\u5173\u7cfb\u7684\u90bb\u63a5\u8868 groupGraph = {} for i in range ( n ): if group [ i ] not in groupGraph : groupGraph [ group [ i ] ] = [] for i in range ( n ): for item in beforeItems [ i ]: if group [ item ] != group [ i ]: groupGraph [ group [ item ] ] . append ( group [ i ]) # \u83b7\u5f97\u62d3\u6251\u6392\u5e8f orderedGroups = Topology ( groupGraph ) if not orderedGroups : return [] # \u5bf9\u5404\u4e2a\u7ec4\u5185\u8fdb\u884c\u62d3\u6251\u6392\u5e8f ans = [] for groupIndex in orderedGroups : if groupIndex > groupMax : ans . append ( groupIndex - groupMax - 1 ) continue graphItem = createGraphItem ( groupIndex , group , beforeItems ) tmp = Topology ( graphItem ) if not tmp : return [] ans . extend ( tmp ) return ans n = 30000 m = 13931 group = [ 2 , 0 , - 1 , 3 , 0 ] beforeItems = [[ 2 , 1 , 3 ],[ 2 , 4 ],[],[],[]] s = Solution () ans = s . sortItems ( n , m , group , beforeItems ) end = 10 # \u8d85\u65f6\uff0c \u672a\u901a\u8fc7\u6240\u6709\u7528\u4f8b","title":"1203.py"},{"location":"leetcode/1203/1203/index.py.html#1203py","text":"from typing import List class Solution : def sortItems ( self , n : int , m : int , group : List [ int ], beforeItems : List [ List [ int ]]) -> List [ int ]: def createGraphItem ( groupIndex , group , beforeItems ): \"\"\" \u4e3a\u6bcf\u4e2a\u5206\u7ec4\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u56fe \"\"\" items = {} for i in range ( n ): if group [ i ] == groupIndex : items [ i ] = [] for i in range ( n ): if group [ i ] == groupIndex : for item in beforeItems [ i ]: if group [ item ] == groupIndex : items [ item ] . append ( i ) return items def Topology ( graph ): \"\"\" graph: [dict] \u90bb\u63a5\u8868\u8868\u793a\u7684\u56fe\uff0c keys \u4e3a\u70b9\u7684\u96c6\u5408\uff0c dic[key]\u662f\u4e00\u4e2aList return: \u62d3\u6251\u6392\u5e8f\u7ed3\u679c \"\"\" def dfs ( u ): color [ u ] = 1 for v in graph [ u ]: if color [ v ] == 1 : return False if color [ v ] == 0 : if not dfs ( v ): return False color [ u ] = 2 ans . insert ( 0 , u ) return True size = len ( graph ) color = {} for key in graph . keys (): color [ key ] = 0 ans = [] for u in graph . keys (): if color [ u ] == 0 : if not dfs ( u ): return [] return ans # -1 \u6620\u5c04\u6210 \u6700\u5927\u7684\u7ec4+1+\u5f53\u524d\u7d22\u5f15 groupMax = max ( group ) for i in range ( n ): if group [ i ] == - 1 : group [ i ] = i + groupMax + 1 # \u6784\u9020\u5206\u7ec4\u4f9d\u8d56\u5173\u7cfb\u7684\u90bb\u63a5\u8868 groupGraph = {} for i in range ( n ): if group [ i ] not in groupGraph : groupGraph [ group [ i ] ] = [] for i in range ( n ): for item in beforeItems [ i ]: if group [ item ] != group [ i ]: groupGraph [ group [ item ] ] . append ( group [ i ]) # \u83b7\u5f97\u62d3\u6251\u6392\u5e8f orderedGroups = Topology ( groupGraph ) if not orderedGroups : return [] # \u5bf9\u5404\u4e2a\u7ec4\u5185\u8fdb\u884c\u62d3\u6251\u6392\u5e8f ans = [] for groupIndex in orderedGroups : if groupIndex > groupMax : ans . append ( groupIndex - groupMax - 1 ) continue graphItem = createGraphItem ( groupIndex , group , beforeItems ) tmp = Topology ( graphItem ) if not tmp : return [] ans . extend ( tmp ) return ans n = 30000 m = 13931 group = [ 2 , 0 , - 1 , 3 , 0 ] beforeItems = [[ 2 , 1 , 3 ],[ 2 , 4 ],[],[],[]] s = Solution () ans = s . sortItems ( n , m , group , beforeItems ) end = 10 # \u8d85\u65f6\uff0c \u672a\u901a\u8fc7\u6240\u6709\u7528\u4f8b","title":"1203.py"},{"location":"leetcode/1203/readme/","text":"1203. \u9879\u76ee\u7ba1\u7406 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u516c\u53f8\u5171\u6709 n \u4e2a\u9879\u76ee\u548c m \u4e2a\u5c0f\u7ec4\uff0c\u6bcf\u4e2a\u9879\u76ee\u8981\u4e0d\u6ca1\u6709\u5f52\u5c5e\uff0c\u8981\u4e0d\u5c31\u7531\u5176\u4e2d\u7684\u4e00\u4e2a\u5c0f\u7ec4\u8d1f\u8d23\u3002 \u6211\u4eec\u7528 group[i] \u4ee3\u8868\u7b2c i \u4e2a\u9879\u76ee\u6240\u5c5e\u7684\u5c0f\u7ec4\uff0c\u5982\u679c\u8fd9\u4e2a\u9879\u76ee\u76ee\u524d\u65e0\u4eba\u63a5\u624b\uff0c\u90a3\u4e48 group[i] \u5c31\u7b49\u4e8e -1\u3002\uff08\u9879\u76ee\u548c\u5c0f\u7ec4\u90fd\u662f\u4ece\u96f6\u5f00\u59cb\u7f16\u53f7\u7684\uff09 \u8bf7\u4f60\u5e2e\u5fd9\u6309\u8981\u6c42\u5b89\u6392\u8fd9\u4e9b\u9879\u76ee\u7684\u8fdb\u5ea6\uff0c\u5e76\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u9879\u76ee\u5217\u8868\uff1a \u540c\u4e00\u5c0f\u7ec4\u7684\u9879\u76ee\uff0c\u6392\u5e8f\u540e\u5728\u5217\u8868\u4e2d\u5f7c\u6b64\u76f8\u90bb\u3002 \u9879\u76ee\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5217\u8868 beforeItems \u6765\u8868\u793a\uff0c\u5176\u4e2d beforeItems[i] \u8868\u793a\u5728\u8fdb\u884c\u7b2c i \u4e2a\u9879\u76ee\u524d\uff08\u4f4d\u4e8e\u7b2c i \u4e2a\u9879\u76ee\u5de6\u4fa7\uff09\u5e94\u8be5\u5b8c\u6210\u7684\u6240\u6709\u9879\u76ee\u3002 \u7ed3\u679c\u8981\u6c42\uff1a \u5982\u679c\u5b58\u5728\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u9700\u8981\u8fd4\u56de\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u5373\u53ef\u3002 \u5982\u679c\u6ca1\u6709\u5408\u9002\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u8bf7\u8fd4\u56de\u4e00\u4e2a \u7a7a\u5217\u8868\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1an = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]] \u8f93\u51fa\uff1a[6,3,4,1,5,2,0,7] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]] \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u4e0e\u793a\u4f8b 1 \u5927\u81f4\u76f8\u540c\uff0c\u4f46\u662f\u5728\u6392\u5e8f\u540e\u7684\u5217\u8868\u4e2d\uff0c4 \u5fc5\u987b\u653e\u5728 6 \u7684\u524d\u9762\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= m <= n <= 3*10^4 group.length == beforeItems.length == n -1 <= group[i] <= m-1 0 <= beforeItems[i].length <= n-1 0 <= beforeItems[i][j] <= n-1 i != beforeItems[i][j] 2. \u89e3\u9898\u601d\u8def \u00b6 \u627e\u51fa\u7ec4\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f \u627e\u51fa\u7ec4\u5185\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f \u4e24\u8005\u90fd\u53ef\u4ee5\u5b8c\u6210\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u5426\u5219\uff0c\u8f93\u51fa[] Python","title":"[1203. \u9879\u76ee\u7ba1\u7406](https://leetcode-cn.com/problems/sort-items-by-groups-respecting-dependencies)"},{"location":"leetcode/1203/readme/#1203","text":"","title":"1203. \u9879\u76ee\u7ba1\u7406"},{"location":"leetcode/1203/readme/#1","text":"\u516c\u53f8\u5171\u6709 n \u4e2a\u9879\u76ee\u548c m \u4e2a\u5c0f\u7ec4\uff0c\u6bcf\u4e2a\u9879\u76ee\u8981\u4e0d\u6ca1\u6709\u5f52\u5c5e\uff0c\u8981\u4e0d\u5c31\u7531\u5176\u4e2d\u7684\u4e00\u4e2a\u5c0f\u7ec4\u8d1f\u8d23\u3002 \u6211\u4eec\u7528 group[i] \u4ee3\u8868\u7b2c i \u4e2a\u9879\u76ee\u6240\u5c5e\u7684\u5c0f\u7ec4\uff0c\u5982\u679c\u8fd9\u4e2a\u9879\u76ee\u76ee\u524d\u65e0\u4eba\u63a5\u624b\uff0c\u90a3\u4e48 group[i] \u5c31\u7b49\u4e8e -1\u3002\uff08\u9879\u76ee\u548c\u5c0f\u7ec4\u90fd\u662f\u4ece\u96f6\u5f00\u59cb\u7f16\u53f7\u7684\uff09 \u8bf7\u4f60\u5e2e\u5fd9\u6309\u8981\u6c42\u5b89\u6392\u8fd9\u4e9b\u9879\u76ee\u7684\u8fdb\u5ea6\uff0c\u5e76\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u9879\u76ee\u5217\u8868\uff1a \u540c\u4e00\u5c0f\u7ec4\u7684\u9879\u76ee\uff0c\u6392\u5e8f\u540e\u5728\u5217\u8868\u4e2d\u5f7c\u6b64\u76f8\u90bb\u3002 \u9879\u76ee\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5217\u8868 beforeItems \u6765\u8868\u793a\uff0c\u5176\u4e2d beforeItems[i] \u8868\u793a\u5728\u8fdb\u884c\u7b2c i \u4e2a\u9879\u76ee\u524d\uff08\u4f4d\u4e8e\u7b2c i \u4e2a\u9879\u76ee\u5de6\u4fa7\uff09\u5e94\u8be5\u5b8c\u6210\u7684\u6240\u6709\u9879\u76ee\u3002 \u7ed3\u679c\u8981\u6c42\uff1a \u5982\u679c\u5b58\u5728\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u9700\u8981\u8fd4\u56de\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u5373\u53ef\u3002 \u5982\u679c\u6ca1\u6709\u5408\u9002\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u8bf7\u8fd4\u56de\u4e00\u4e2a \u7a7a\u5217\u8868\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1an = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]] \u8f93\u51fa\uff1a[6,3,4,1,5,2,0,7] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]] \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u4e0e\u793a\u4f8b 1 \u5927\u81f4\u76f8\u540c\uff0c\u4f46\u662f\u5728\u6392\u5e8f\u540e\u7684\u5217\u8868\u4e2d\uff0c4 \u5fc5\u987b\u653e\u5728 6 \u7684\u524d\u9762\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= m <= n <= 3*10^4 group.length == beforeItems.length == n -1 <= group[i] <= m-1 0 <= beforeItems[i].length <= n-1 0 <= beforeItems[i][j] <= n-1 i != beforeItems[i][j]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1203/readme/#2","text":"\u627e\u51fa\u7ec4\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f \u627e\u51fa\u7ec4\u5185\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f \u4e24\u8005\u90fd\u53ef\u4ee5\u5b8c\u6210\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u5426\u5219\uff0c\u8f93\u51fa[] Python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/121/readme/","text":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\u4e00\u6b21\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: 1 2 3 4 \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u627e\u5230\u6700\u5c0f\u503c\uff0c\u548c\u6700\u5c0f\u503c\u540e\u9762\u7684\u6700\u5927\u503c\uff0c\u53d6\u5dee\u503c\u6700\u5927\u7684\u90a3\u4e00\u5bf9 class Solution ( object ): def maxProfit ( self , prices ): \"\"\" :type prices: List[int] :rtype: int \"\"\" if not prices : return 0 ans = 0 i = 1 low = prices [ 0 ] high = prices [ 0 ] while i < len ( prices ): if prices [ i ] < low : low = prices [ i ] high = prices [ i ] if prices [ i ] > high : high = prices [ i ] ans = max ( ans , high - low ) i += 1 return ans","title":"[121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/)"},{"location":"leetcode/121/readme/#121","text":"","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},{"location":"leetcode/121/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\u4e00\u6b21\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1: 1 2 3 4 \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/121/readme/#2","text":"\u627e\u5230\u6700\u5c0f\u503c\uff0c\u548c\u6700\u5c0f\u503c\u540e\u9762\u7684\u6700\u5927\u503c\uff0c\u53d6\u5dee\u503c\u6700\u5927\u7684\u90a3\u4e00\u5bf9 class Solution ( object ): def maxProfit ( self , prices ): \"\"\" :type prices: List[int] :rtype: int \"\"\" if not prices : return 0 ans = 0 i = 1 low = prices [ 0 ] high = prices [ 0 ] while i < len ( prices ): if prices [ i ] < low : low = prices [ i ] high = prices [ i ] if prices [ i ] > high : high = prices [ i ] ans = max ( ans , high - low ) i += 1 return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1218/1218/index.py.html","text":"1218.py \u00b6 class Solution : def longestSubsequence ( self , arr : List [ int ], difference : int ) -> int : n = len ( arr ) if n == 0 : return 0 dp = [ 1 for _ in range ( n )] dic = {} dic [ arr [ 0 ]] = 1 for i in range ( 1 , n ): number = arr [ i ] - difference if number in dic : dp [ i ] = dic [ number ] + 1 dic [ arr [ i ]] = dp [ i ] else : dp [ i ] = 1 dic [ arr [ i ]] = 1 return max ( dp )","title":"1218.py"},{"location":"leetcode/1218/1218/index.py.html#1218py","text":"class Solution : def longestSubsequence ( self , arr : List [ int ], difference : int ) -> int : n = len ( arr ) if n == 0 : return 0 dp = [ 1 for _ in range ( n )] dic = {} dic [ arr [ 0 ]] = 1 for i in range ( 1 , n ): number = arr [ i ] - difference if number in dic : dp [ i ] = dic [ number ] + 1 dic [ arr [ i ]] = dp [ i ] else : dp [ i ] = 1 dic [ arr [ i ]] = 1 return max ( dp )","title":"1218.py"},{"location":"leetcode/1218/readme/","text":"1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 difference\uff0c\u8bf7\u4f60\u627e\u51fa arr \u4e2d\u6240\u6709\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u7b49\u4e8e\u7ed9\u5b9a difference \u7684\u7b49\u5dee\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 \u8f93\u5165\uff1aarr = [1,2,3,4], difference = 1 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [1,2,3,4]\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aarr = [1,3,5,7], difference = 1 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f\u4efb\u610f\u5355\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1aarr = [1,5,7,8,5,3,4,2,1], difference = -2 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [7,5,3,1]\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 dp[i] \u8868\u793a\u4ee5 arr[i] \u7ed3\u5c3e\u7684\u6570\u7ec4\u6700\u957f\u7684\u7b49\u5dee\u6570\u5217\u957f\u5ea6 dp[i] = dp[j] + 1, if arr[i] - arr[j] = difference, j in [0, i - 1] = 1, if not find arr[j] \u5bfb\u627e j \u7684\u8fc7\u7a0b\u9700\u8981\u4ece[i-1,0]\u626b\u63cf\uff0c\u8fd9\u6837\u53ea\u80fd\u8fc7\u90e8\u5206\u7528\u4f8b\u3002\u4f7f\u7528\u5b57\u5178\u8bb0\u5f55\uff0c\u53ef\u4ee5\u52a0\u5feb\u901f\u5ea6\u3002 3. AC \u4ee3\u7801 \u00b6 Python","title":"[1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217](https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/)"},{"location":"leetcode/1218/readme/#1218","text":"","title":"1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217"},{"location":"leetcode/1218/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \u548c\u4e00\u4e2a\u6574\u6570 difference\uff0c\u8bf7\u4f60\u627e\u51fa arr \u4e2d\u6240\u6709\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u7b49\u4e8e\u7ed9\u5b9a difference \u7684\u7b49\u5dee\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 \u8f93\u5165\uff1aarr = [1,2,3,4], difference = 1 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [1,2,3,4]\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aarr = [1,3,5,7], difference = 1 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f\u4efb\u610f\u5355\u4e2a\u5143\u7d20\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1aarr = [1,5,7,8,5,3,4,2,1], difference = -2 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [7,5,3,1]\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1218/readme/#2","text":"dp[i] \u8868\u793a\u4ee5 arr[i] \u7ed3\u5c3e\u7684\u6570\u7ec4\u6700\u957f\u7684\u7b49\u5dee\u6570\u5217\u957f\u5ea6 dp[i] = dp[j] + 1, if arr[i] - arr[j] = difference, j in [0, i - 1] = 1, if not find arr[j] \u5bfb\u627e j \u7684\u8fc7\u7a0b\u9700\u8981\u4ece[i-1,0]\u626b\u63cf\uff0c\u8fd9\u6837\u53ea\u80fd\u8fc7\u90e8\u5206\u7528\u4f8b\u3002\u4f7f\u7528\u5b57\u5178\u8bb0\u5f55\uff0c\u53ef\u4ee5\u52a0\u5feb\u901f\u5ea6\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1218/readme/#3-ac","text":"Python","title":"3. AC \u4ee3\u7801"},{"location":"leetcode/122/readme/","text":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: 1 2 3 4 \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u63d0\u793a\uff1a 1 2 1 <= prices.length <= 3 * 10 ^ 4 0 <= prices[i] <= 10 ^ 4 2. \u89e3\u9898\u601d\u8def \u00b6 \u6bcf\u4e00\u4e2a\u76f8\u90bb\u7684\u589e\u957f\u90fd\u53ef\u4ee5\u662f\u6700\u540e\u7684\u5229\u6da6 class Solution ( object ): def maxProfit ( self , prices ): \"\"\" :type prices: List[int] :rtype: int \"\"\" ans = 0 i = 1 while i < len ( prices ): if prices [ i ] > prices [ i - 1 ]: ans += prices [ i ] - prices [ i - 1 ] i += 1 return ans \u8fd8\u53ef\u4ee5\u627e\u5230\u76f8\u90bb\u7684\u6700\u4f4e\u548c\u6700\u9ad8\u70b9\uff0c\u6c42\u5dee\u503c\u548c class Solution ( object ): def maxProfit ( self , prices ): \"\"\" :type prices: List[int] :rtype: int \"\"\" ans = 0 if not prices : return 0 prices . insert ( 0 , prices [ 0 ] + 1 ) prices . append ( prices [ - 1 ] - 1 ) i = 1 while i < len ( prices ) - 1 : # \u6ce8\u610f\u6709\u503c\u76f8\u540c\u7684\u60c5\u51b5 if prices [ i ] <= prices [ i - 1 ] and prices [ i ] <= prices [ i + 1 ]: low = prices [ i ] if prices [ i ] >= prices [ i - 1 ] and prices [ i ] >= prices [ i + 1 ]: ans += prices [ i ] - low low = prices [ i ] i += 1 return ans","title":"[122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)"},{"location":"leetcode/122/readme/#122-ii","text":"","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II"},{"location":"leetcode/122/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1: 1 2 3 4 \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u63d0\u793a\uff1a 1 2 1 <= prices.length <= 3 * 10 ^ 4 0 <= prices[i] <= 10 ^ 4","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/122/readme/#2","text":"\u6bcf\u4e00\u4e2a\u76f8\u90bb\u7684\u589e\u957f\u90fd\u53ef\u4ee5\u662f\u6700\u540e\u7684\u5229\u6da6 class Solution ( object ): def maxProfit ( self , prices ): \"\"\" :type prices: List[int] :rtype: int \"\"\" ans = 0 i = 1 while i < len ( prices ): if prices [ i ] > prices [ i - 1 ]: ans += prices [ i ] - prices [ i - 1 ] i += 1 return ans \u8fd8\u53ef\u4ee5\u627e\u5230\u76f8\u90bb\u7684\u6700\u4f4e\u548c\u6700\u9ad8\u70b9\uff0c\u6c42\u5dee\u503c\u548c class Solution ( object ): def maxProfit ( self , prices ): \"\"\" :type prices: List[int] :rtype: int \"\"\" ans = 0 if not prices : return 0 prices . insert ( 0 , prices [ 0 ] + 1 ) prices . append ( prices [ - 1 ] - 1 ) i = 1 while i < len ( prices ) - 1 : # \u6ce8\u610f\u6709\u503c\u76f8\u540c\u7684\u60c5\u51b5 if prices [ i ] <= prices [ i - 1 ] and prices [ i ] <= prices [ i + 1 ]: low = prices [ i ] if prices [ i ] >= prices [ i - 1 ] and prices [ i ] >= prices [ i + 1 ]: ans += prices [ i ] - low low = prices [ i ] i += 1 return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1224/readme/","text":"1224. \u6700\u5927\u76f8\u7b49\u9891\u7387 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u4ece\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u80fd\u6ee1\u8db3\u4e0b\u9762\u8981\u6c42\u7684 \u6700\u957f \u524d\u7f00\uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6\uff1a \u4ece\u524d\u7f00\u4e2d \u5220\u9664\u4e00\u4e2a \u5143\u7d20\u540e\uff0c\u4f7f\u5f97\u6240\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u3002 \u5982\u679c\u5220\u9664\u8fd9\u4e2a\u5143\u7d20\u540e\u6ca1\u6709\u5269\u4f59\u5143\u7d20\u5b58\u5728\uff0c\u4ecd\u53ef\u8ba4\u4e3a\u6bcf\u4e2a\u6570\u5b57\u90fd\u5177\u6709\u76f8\u540c\u7684\u51fa\u73b0\u6b21\u6570\uff08\u4e5f\u5c31\u662f 0 \u6b21\uff09\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums = [2,2,1,1,5,3,3,5] \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a\u5bf9\u4e8e\u957f\u5ea6\u4e3a 7 \u7684\u5b50\u6570\u7ec4 [2,2,1,1,5,3,3]\uff0c\u5982\u679c\u6211\u4eec\u4ece\u4e2d\u5220\u53bb nums[4]=5\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 [2,2,1,1,3,3]\uff0c\u91cc\u9762\u6bcf\u4e2a\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1anums = [1,1,1,2,2,2,3,3,3,4,4,4,5] \u8f93\u51fa\uff1a13 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums = [1,1,1,2,2,2] \u8f93\u51fa\uff1a5 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1anums = [10,2,8,9,3,8,1,5,2,3,7,6] \u8f93\u51fa\uff1a8 \u63d0\u793a\uff1a 1 2 2 <= nums.length <= 10^5 1 <= nums[i] <= 10^5 2. \u89e3\u9898\u601d\u8def \u00b6 \u601d\u8def\uff1a 1. \u7ef4\u62a4\u4e24\u4e2amap, \u4e00\u4e2a\u662fnum \u2192 count, \u8bb0\u5f55\u6bcf\u79cd\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u662fcount \u2192 num, \u8868\u793a\u51fa\u73b0\u6b21\u6570\u4e3acount\u7684\u6570\u5b57\u90fd\u6709\u54ea\u4e9b\u3002 2. \u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u8ba1\u7b97\u51fa\u4e24\u4e2amap, \u7136\u540e\u4ece\u540e\u5411\u524d\u904d\u5386\u4e00\u904d\u3002 3. \u5bf9\u4e8e\u6bcf\u4e00\u4e2ai, \u68c0\u67e5nums[0:i+1]\u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u5982\u679c\u6ee1\u8db3\uff0c\u8fd4\u56de i + 1, \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5220\u9664nums[i], \u66f4\u65b0\u4e24\u4e2amap. \u8be5\u601d\u8def\u6709\u4e24\u4e2a\u5173\u952e\u903b\u8f91\uff1a 1. \u5982\u4f55\u901a\u8fc7\u4e24\u4e2amap\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u9898\u76ee\u8981\u6c42 2. \u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\uff0c\u5982\u4f55\u66f4\u65b0\u4e24\u4e2amap class Solution ( object ): def maxEqualFreq ( self , nums ): \"\"\" :type nums: List[int] :rtype: int \"\"\" def check ( num2count , count2num , current ): \"\"\" \u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u90fd\u76f8\u540c \"\"\" # count \u51fa\u73b03\u79cd\u4ee5\u4e0a\u7684\u60c5\u51b5\uff0c\u5220\u9664\u4e00\u4e2a\u81f3\u5c11\u8fd8\u67092\u79cd\u60c5\u51b5 if len ( count2num ) > 2 : return False # \u5982\u679c\u6240\u6709\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e00\u6b21\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\u51fa\u73b0\u7684\u6b21\u6570\u76f8\u7b49 if len ( count2num ) == 1 and count2num . keys ()[ 0 ] == 1 : return True # \u5982\u679c\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u76f8\u540c\u6b21\u6570\uff0c\u4e14\u53ea\u6709\u4e00\u79cd\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u4e4b\u540e\u5269\u4e0b\u7684\u51fa\u73b0\u6b21\u6570\u8fd8\u4e00\u6837 if len ( count2num ) == 1 and len ( num2count ) == 1 : return True # \u5426\u5219\uff0c\u6240\u6709\u7684\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u76f8\u7b49\u4e14\u4e0d\u662f\u90fd\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u65e0\u6cd5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u76f8\u7b49 if len ( count2num ) <= 1 : return False key1 , key2 = count2num . keys () if key1 > key2 : key1 , key2 = key2 , key1 # \u5982\u679c\u53ea\u6709\u4e24\u79cd\u51fa\u73b0\u9891\u7387\uff0c\u5176\u4e2d\u51fa\u73b0\u4e00\u6b21\u7684\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u53bb\u6389\u8be5\u6570\u5b57\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u51fa\u73b0\u9891\u7387\u90fd\u76f8\u7b49 if len ( count2num [ key1 ]) == 1 and key1 == 1 : return True # \u5982\u679c\u53ea\u6709\u4e24\u79cd\u51fa\u73b0\u9891\u7387\u4e14\u53ea\u5dee1\uff0c \u51fa\u73b0\u9891\u7387\u5927\u7684\u53ea\u6709\u4e00\u79cd\u6570\u5b57\uff0c\u90a3\u4e48\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u8be5\u6570\u5b57\uff0c\u8fd9\u6837\u5269\u4e0b\u7684\u6240\u6709\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u76f8\u540c if key2 - key1 == 1 and len ( count2num [ key2 ]) == 1 : return True return False num2count = {} count2num = {} # \u7edf\u8ba1\u6bcf\u79cd\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570 for i , num in enumerate ( nums ): if num not in num2count : num2count [ num ] = 1 else : num2count [ num ] += 1 # \u8bb0\u5f55\u6bcf\u79cd\u51fa\u73b0\u6b21\u6570\u90fd\u6709\u54ea\u4e9b\u6570\u5b57 for key , value in num2count . iteritems (): if value not in count2num : count2num [ value ] = [ key ] else : count2num [ value ] . append ( key ) # \u68c0\u67e5\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u7136\u540e\u53bb\u6389 i for i in reversed ( range ( len ( nums ))): if check ( num2count , count2num , nums [ i ]) == True : return i + 1 # \u5220\u9664 nums[i], \u66f4\u65b0\u4e24\u4e2a map if nums [ i ] in num2count : count = num2count [ nums [ i ] ] if count > 1 : num2count [ nums [ i ] ] -= 1 else : del num2count [ nums [ i ] ] if len ( count2num [ count ]) == 1 : del count2num [ count ] else : count2num [ count ] . remove ( nums [ i ]) if count > 1 : count = count - 1 if count not in count2num : count2num [ count ] = [ nums [ i ]] else : count2num [ count ] . append ( nums [ i ]) return 0","title":"[1224. \u6700\u5927\u76f8\u7b49\u9891\u7387](https://leetcode-cn.com/problems/maximum-equal-frequency/)"},{"location":"leetcode/1224/readme/#1224","text":"","title":"1224. \u6700\u5927\u76f8\u7b49\u9891\u7387"},{"location":"leetcode/1224/readme/#1","text":"\u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u4ece\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u80fd\u6ee1\u8db3\u4e0b\u9762\u8981\u6c42\u7684 \u6700\u957f \u524d\u7f00\uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6\uff1a \u4ece\u524d\u7f00\u4e2d \u5220\u9664\u4e00\u4e2a \u5143\u7d20\u540e\uff0c\u4f7f\u5f97\u6240\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u3002 \u5982\u679c\u5220\u9664\u8fd9\u4e2a\u5143\u7d20\u540e\u6ca1\u6709\u5269\u4f59\u5143\u7d20\u5b58\u5728\uff0c\u4ecd\u53ef\u8ba4\u4e3a\u6bcf\u4e2a\u6570\u5b57\u90fd\u5177\u6709\u76f8\u540c\u7684\u51fa\u73b0\u6b21\u6570\uff08\u4e5f\u5c31\u662f 0 \u6b21\uff09\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums = [2,2,1,1,5,3,3,5] \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a\u5bf9\u4e8e\u957f\u5ea6\u4e3a 7 \u7684\u5b50\u6570\u7ec4 [2,2,1,1,5,3,3]\uff0c\u5982\u679c\u6211\u4eec\u4ece\u4e2d\u5220\u53bb nums[4]=5\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 [2,2,1,1,3,3]\uff0c\u91cc\u9762\u6bcf\u4e2a\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1anums = [1,1,1,2,2,2,3,3,3,4,4,4,5] \u8f93\u51fa\uff1a13 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums = [1,1,1,2,2,2] \u8f93\u51fa\uff1a5 \u793a\u4f8b 4\uff1a \u8f93\u5165\uff1anums = [10,2,8,9,3,8,1,5,2,3,7,6] \u8f93\u51fa\uff1a8 \u63d0\u793a\uff1a 1 2 2 <= nums.length <= 10^5 1 <= nums[i] <= 10^5","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1224/readme/#2","text":"\u601d\u8def\uff1a 1. \u7ef4\u62a4\u4e24\u4e2amap, \u4e00\u4e2a\u662fnum \u2192 count, \u8bb0\u5f55\u6bcf\u79cd\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u662fcount \u2192 num, \u8868\u793a\u51fa\u73b0\u6b21\u6570\u4e3acount\u7684\u6570\u5b57\u90fd\u6709\u54ea\u4e9b\u3002 2. \u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u8ba1\u7b97\u51fa\u4e24\u4e2amap, \u7136\u540e\u4ece\u540e\u5411\u524d\u904d\u5386\u4e00\u904d\u3002 3. \u5bf9\u4e8e\u6bcf\u4e00\u4e2ai, \u68c0\u67e5nums[0:i+1]\u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u5982\u679c\u6ee1\u8db3\uff0c\u8fd4\u56de i + 1, \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5220\u9664nums[i], \u66f4\u65b0\u4e24\u4e2amap. \u8be5\u601d\u8def\u6709\u4e24\u4e2a\u5173\u952e\u903b\u8f91\uff1a 1. \u5982\u4f55\u901a\u8fc7\u4e24\u4e2amap\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u9898\u76ee\u8981\u6c42 2. \u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\uff0c\u5982\u4f55\u66f4\u65b0\u4e24\u4e2amap class Solution ( object ): def maxEqualFreq ( self , nums ): \"\"\" :type nums: List[int] :rtype: int \"\"\" def check ( num2count , count2num , current ): \"\"\" \u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u90fd\u76f8\u540c \"\"\" # count \u51fa\u73b03\u79cd\u4ee5\u4e0a\u7684\u60c5\u51b5\uff0c\u5220\u9664\u4e00\u4e2a\u81f3\u5c11\u8fd8\u67092\u79cd\u60c5\u51b5 if len ( count2num ) > 2 : return False # \u5982\u679c\u6240\u6709\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e00\u6b21\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\u51fa\u73b0\u7684\u6b21\u6570\u76f8\u7b49 if len ( count2num ) == 1 and count2num . keys ()[ 0 ] == 1 : return True # \u5982\u679c\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u76f8\u540c\u6b21\u6570\uff0c\u4e14\u53ea\u6709\u4e00\u79cd\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u4e4b\u540e\u5269\u4e0b\u7684\u51fa\u73b0\u6b21\u6570\u8fd8\u4e00\u6837 if len ( count2num ) == 1 and len ( num2count ) == 1 : return True # \u5426\u5219\uff0c\u6240\u6709\u7684\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u76f8\u7b49\u4e14\u4e0d\u662f\u90fd\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u65e0\u6cd5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u76f8\u7b49 if len ( count2num ) <= 1 : return False key1 , key2 = count2num . keys () if key1 > key2 : key1 , key2 = key2 , key1 # \u5982\u679c\u53ea\u6709\u4e24\u79cd\u51fa\u73b0\u9891\u7387\uff0c\u5176\u4e2d\u51fa\u73b0\u4e00\u6b21\u7684\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u53bb\u6389\u8be5\u6570\u5b57\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u51fa\u73b0\u9891\u7387\u90fd\u76f8\u7b49 if len ( count2num [ key1 ]) == 1 and key1 == 1 : return True # \u5982\u679c\u53ea\u6709\u4e24\u79cd\u51fa\u73b0\u9891\u7387\u4e14\u53ea\u5dee1\uff0c \u51fa\u73b0\u9891\u7387\u5927\u7684\u53ea\u6709\u4e00\u79cd\u6570\u5b57\uff0c\u90a3\u4e48\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u8be5\u6570\u5b57\uff0c\u8fd9\u6837\u5269\u4e0b\u7684\u6240\u6709\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u76f8\u540c if key2 - key1 == 1 and len ( count2num [ key2 ]) == 1 : return True return False num2count = {} count2num = {} # \u7edf\u8ba1\u6bcf\u79cd\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570 for i , num in enumerate ( nums ): if num not in num2count : num2count [ num ] = 1 else : num2count [ num ] += 1 # \u8bb0\u5f55\u6bcf\u79cd\u51fa\u73b0\u6b21\u6570\u90fd\u6709\u54ea\u4e9b\u6570\u5b57 for key , value in num2count . iteritems (): if value not in count2num : count2num [ value ] = [ key ] else : count2num [ value ] . append ( key ) # \u68c0\u67e5\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u7136\u540e\u53bb\u6389 i for i in reversed ( range ( len ( nums ))): if check ( num2count , count2num , nums [ i ]) == True : return i + 1 # \u5220\u9664 nums[i], \u66f4\u65b0\u4e24\u4e2a map if nums [ i ] in num2count : count = num2count [ nums [ i ] ] if count > 1 : num2count [ nums [ i ] ] -= 1 else : del num2count [ nums [ i ] ] if len ( count2num [ count ]) == 1 : del count2num [ count ] else : count2num [ count ] . remove ( nums [ i ]) if count > 1 : count = count - 1 if count not in count2num : count2num [ count ] = [ nums [ i ]] else : count2num [ count ] . append ( nums [ i ]) return 0","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1239/readme/","text":"1239. \u4e32\u8054\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 arr\uff0c\u5b57\u7b26\u4e32 s \u662f\u5c06 arr \u67d0\u4e00\u5b50\u5e8f\u5217\u5b57\u7b26\u4e32\u8fde\u63a5\u6240\u5f97\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c s \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u90fd\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u53ef\u884c\u89e3\u3002 \u8bf7\u8fd4\u56de\u6240\u6709\u53ef\u884c\u89e3 s \u4e2d\u6700\u957f\u957f\u5ea6\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aarr = [\"un\",\"iq\",\"ue\"] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6240\u6709\u53ef\u80fd\u7684\u4e32\u8054\u7ec4\u5408\u662f \"\",\"un\",\"iq\",\"ue\",\"uniq\" \u548c \"ique\"\uff0c\u6700\u5927\u957f\u5ea6\u4e3a 4\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aarr = [\"cha\",\"r\",\"act\",\"ers\"] \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a\u53ef\u80fd\u7684\u89e3\u7b54\u6709 \"chaers\" \u548c \"acters\"\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aarr = [\"abcdefghijklmnopqrstuvwxyz\"] \u8f93\u51fa\uff1a26 \u63d0\u793a\uff1a 1 2 3 1 <= arr.length <= 16 1 <= arr[i].length <= 26 arr[i] \u4e2d\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd 2. \u89e3\u9898\u601d\u8def \u00b6 #define MAX(a,b) ((a) > (b) ? (a) : (b)) int size = 0 ; // \u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57 int char2int ( char * string ) { int ans = 0 ; while ( * string ) { ans += 1 << ( * string - 'a' ); } return ans ; } // \u8fd4\u56de\u628astring\u4e2d\u5b57\u6bcd\u52a0\u5165\u96c6\u5408set\u4e2d\u7684\u7ed3\u679c int add ( char * string , int set ) { int ans = char2int ( string ); ans = ans | set ; return ans ; } // \u8fd4\u56destring\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u6bcd\u662f\u5426\u5728set\u4e2d\u51fa\u73b0\u8fc7 int notCanPut ( char * string , int set ) { int ans = char2int ( string ); ans = ans & set ; return ans ; } /* * arr[i] \u5f53\u524d\u68c0\u67e5\u7684\u5355\u8bcd * currentSet : \u5f53\u524d\u52a0\u5165\u7684\u96c6\u5408 * oneAns : \u6df1\u5ea6\u641c\u7d22\u5230\u5e95\u4e00\u8d9f\u7684\u7ed3\u679c * ans : \u4fdd\u5b58\u6700\u7ec8\u7684\u7ed3\u679c */ void dfs ( char ** arr , int i , int currentSet , int * oneAns , int * ans ) { // \u5982\u679c\u5230\u8fbe\u4e86\u672b\u5c3e\uff0c\u6bd4\u8f83\u4e00\u8d9f\u7684\u7ed3\u679c\u548c\u6700\u7ec8\u7684\u7ed3\u679c\u5927\u5c0f if ( i == size ) { * ans = MAX ( * ans , * oneAns ); return ; } // \u5982\u679carr[i]\u65e0\u6cd5\u653e\u5165\uff0c\u5219\u641c\u7d22\u4e0b\u4e00\u4e2a\u5355\u8bcd if ( notCanPut ( arr [ i ], currentSet )) { dfs ( arr , i + 1 , currentSet , oneAns , ans ); return ; } // \u5982\u679carr[i]\u53ef\u4ee5\u653e\u5165\uff0c\u90a3\u4e48\u653e\u5165\u548c\u4e0d\u653e\u5165\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u9012\u5f52 int tmpOneAns = * oneAns + strlen ( arr [ i ]); dfs ( arr , i + 1 , add ( arr [ i ], currentSet ), & tmpOneAns , ans ); dfs ( arr , i + 1 , currentSet , oneAns , ans ); return ; } int maxLength ( char ** arr , int arrSize ){ int ans = 0 ; int oneAns = 0 ; int currentSet = 0 ; size = arrSize ; dfs ( arr , 0 , & oneAns , & ans ); return ans ; }","title":"[1239. \u4e32\u8054\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6](https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/)"},{"location":"leetcode/1239/readme/#1239","text":"","title":"1239. \u4e32\u8054\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6"},{"location":"leetcode/1239/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 arr\uff0c\u5b57\u7b26\u4e32 s \u662f\u5c06 arr \u67d0\u4e00\u5b50\u5e8f\u5217\u5b57\u7b26\u4e32\u8fde\u63a5\u6240\u5f97\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c s \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u90fd\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u53ef\u884c\u89e3\u3002 \u8bf7\u8fd4\u56de\u6240\u6709\u53ef\u884c\u89e3 s \u4e2d\u6700\u957f\u957f\u5ea6\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aarr = [\"un\",\"iq\",\"ue\"] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6240\u6709\u53ef\u80fd\u7684\u4e32\u8054\u7ec4\u5408\u662f \"\",\"un\",\"iq\",\"ue\",\"uniq\" \u548c \"ique\"\uff0c\u6700\u5927\u957f\u5ea6\u4e3a 4\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aarr = [\"cha\",\"r\",\"act\",\"ers\"] \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a\u53ef\u80fd\u7684\u89e3\u7b54\u6709 \"chaers\" \u548c \"acters\"\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aarr = [\"abcdefghijklmnopqrstuvwxyz\"] \u8f93\u51fa\uff1a26 \u63d0\u793a\uff1a 1 2 3 1 <= arr.length <= 16 1 <= arr[i].length <= 26 arr[i] \u4e2d\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1239/readme/#2","text":"#define MAX(a,b) ((a) > (b) ? (a) : (b)) int size = 0 ; // \u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57 int char2int ( char * string ) { int ans = 0 ; while ( * string ) { ans += 1 << ( * string - 'a' ); } return ans ; } // \u8fd4\u56de\u628astring\u4e2d\u5b57\u6bcd\u52a0\u5165\u96c6\u5408set\u4e2d\u7684\u7ed3\u679c int add ( char * string , int set ) { int ans = char2int ( string ); ans = ans | set ; return ans ; } // \u8fd4\u56destring\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u6bcd\u662f\u5426\u5728set\u4e2d\u51fa\u73b0\u8fc7 int notCanPut ( char * string , int set ) { int ans = char2int ( string ); ans = ans & set ; return ans ; } /* * arr[i] \u5f53\u524d\u68c0\u67e5\u7684\u5355\u8bcd * currentSet : \u5f53\u524d\u52a0\u5165\u7684\u96c6\u5408 * oneAns : \u6df1\u5ea6\u641c\u7d22\u5230\u5e95\u4e00\u8d9f\u7684\u7ed3\u679c * ans : \u4fdd\u5b58\u6700\u7ec8\u7684\u7ed3\u679c */ void dfs ( char ** arr , int i , int currentSet , int * oneAns , int * ans ) { // \u5982\u679c\u5230\u8fbe\u4e86\u672b\u5c3e\uff0c\u6bd4\u8f83\u4e00\u8d9f\u7684\u7ed3\u679c\u548c\u6700\u7ec8\u7684\u7ed3\u679c\u5927\u5c0f if ( i == size ) { * ans = MAX ( * ans , * oneAns ); return ; } // \u5982\u679carr[i]\u65e0\u6cd5\u653e\u5165\uff0c\u5219\u641c\u7d22\u4e0b\u4e00\u4e2a\u5355\u8bcd if ( notCanPut ( arr [ i ], currentSet )) { dfs ( arr , i + 1 , currentSet , oneAns , ans ); return ; } // \u5982\u679carr[i]\u53ef\u4ee5\u653e\u5165\uff0c\u90a3\u4e48\u653e\u5165\u548c\u4e0d\u653e\u5165\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u9012\u5f52 int tmpOneAns = * oneAns + strlen ( arr [ i ]); dfs ( arr , i + 1 , add ( arr [ i ], currentSet ), & tmpOneAns , ans ); dfs ( arr , i + 1 , currentSet , oneAns , ans ); return ; } int maxLength ( char ** arr , int arrSize ){ int ans = 0 ; int oneAns = 0 ; int currentSet = 0 ; size = arrSize ; dfs ( arr , 0 , & oneAns , & ans ); return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/127/127/index.c.html","text":"127.c \u00b6 void freeMatrix ( int ** matrix , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { free ( matrix [ i ]); } free ( matrix ); return ; } // \u8fd4\u56de a \u4e0e b \u662f\u5426\u53ea\u76f8\u5dee\u4e00\u4e2a\u5b57\u6bcd int isArrival ( char * a , char * b ) { int i ; int count = 0 ; const int m = strlen ( a ); const int n = strlen ( b ); if ( n != m ) { return 0 ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ]) { count ++ ; } } if ( count == 1 ) { return 1 ; } return 0 ; } // \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8fd4\u56de start --> end \u7684\u6700\u77ed\u8def\u5f84 int BFS ( int ** graph , int start , int end , int n ) { int i ; int current ; int road_current ; int * deque ; int dequeHead = 0 ; int dequeEnd = 0 ; int * road ; int roadHead = 0 ; int roadEnd = 0 ; int * color ; int ans ; deque = ( int * ) malloc ( sizeof ( int ) * n ); road = ( int * ) malloc ( sizeof ( int ) * n ); color = ( int * ) malloc ( sizeof ( int ) * n ); memset ( color , 0 , sizeof ( int ) * n ); memset ( deque , 0 , sizeof ( int ) * n ); memset ( road , 0 , sizeof ( int ) * n ); deque [ dequeHead ++ ] = start ; color [ start ] = 1 ; road [ roadHead ++ ] = 0 ; while ( dequeHead - dequeEnd > 0 ) { current = deque [ dequeEnd ++ ]; road_current = road [ roadEnd ++ ]; for ( i = 0 ; i < n ; i ++ ) { if ( graph [ current ][ i ] == 1 && color [ i ] == 0 ) { if ( i == end ) { ans = road_current + 1 ; free ( color ); free ( deque ); free ( road ); return ans ; } deque [ dequeHead ++ ] = i ; color [ i ] = 1 ; road [ roadHead ++ ] = road_current + 1 ; } } } free ( color ); free ( deque ); free ( road ); return 0 ; } int ladderLength ( char * beginWord , char * endWord , char ** wordList , int wordListSize ){ const int n = wordListSize ; int ** graph ; int i , j , start , end ; int ans = 0 ; // \u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u65e0\u5411\u56fe graph = ( int ** ) malloc ( sizeof ( int * ) * ( n + 1 )); for ( i = 0 ; i < n + 1 ; i ++ ) { graph [ i ] = ( int * ) malloc ( sizeof ( int ) * ( n + 1 )); memset ( graph [ i ], 0 , sizeof ( int ) * ( n + 1 )); } // \u6839\u636e\u5355\u8bcd\u751f\u6210\u65e0\u5411\u56fe for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( i != j && isArrival ( wordList [ i ], wordList [ j ])) { graph [ i ][ j ] = 1 ; graph [ j ][ i ] = 1 ; } } } // \u627e\u5230\u8d77\u70b9\u7684\u7d22\u5f15 start = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( strcmp ( wordList [ i ], beginWord ) == 0 ) { start = i ; } } if ( start == - 1 ) { // beginword \u4f5c\u4e3a\u7b2c n \u4e2a\u7ed3\u70b9\u52a0\u5165\u56fe for ( i = 0 ; i < n ; i ++ ) { if ( isArrival ( beginWord , wordList [ i ])) { graph [ n ][ i ] = 1 ; graph [ i ][ n ] = 1 ; ans = 1 ; } } start = n ; } // \u627e\u5230\u7ec8\u70b9\u7684\u7d22\u5f15 end = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( strcmp ( wordList [ i ], endWord ) == 0 ) { end = i ; break ; } } // \u7ec8\u70b9\u4e0d\u5728\u5355\u8bcd\u5217\u8868\u4e2d\uff0c\u8fd4\u56de0 if ( end == - 1 ) { freeMatrix ( graph , n + 1 ); ans = 0 ; return ans ; } // \u8d77\u70b9\u662fn, \u7ec8\u70b9\u662f end, \u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u641c\u7d22\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 ans = BFS ( graph , start , end , n + 1 ); if ( ans == 0 ) { return 0 ; } else { return ans + 1 ; } }","title":"127.c"},{"location":"leetcode/127/127/index.c.html#127c","text":"void freeMatrix ( int ** matrix , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { free ( matrix [ i ]); } free ( matrix ); return ; } // \u8fd4\u56de a \u4e0e b \u662f\u5426\u53ea\u76f8\u5dee\u4e00\u4e2a\u5b57\u6bcd int isArrival ( char * a , char * b ) { int i ; int count = 0 ; const int m = strlen ( a ); const int n = strlen ( b ); if ( n != m ) { return 0 ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ]) { count ++ ; } } if ( count == 1 ) { return 1 ; } return 0 ; } // \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u8fd4\u56de start --> end \u7684\u6700\u77ed\u8def\u5f84 int BFS ( int ** graph , int start , int end , int n ) { int i ; int current ; int road_current ; int * deque ; int dequeHead = 0 ; int dequeEnd = 0 ; int * road ; int roadHead = 0 ; int roadEnd = 0 ; int * color ; int ans ; deque = ( int * ) malloc ( sizeof ( int ) * n ); road = ( int * ) malloc ( sizeof ( int ) * n ); color = ( int * ) malloc ( sizeof ( int ) * n ); memset ( color , 0 , sizeof ( int ) * n ); memset ( deque , 0 , sizeof ( int ) * n ); memset ( road , 0 , sizeof ( int ) * n ); deque [ dequeHead ++ ] = start ; color [ start ] = 1 ; road [ roadHead ++ ] = 0 ; while ( dequeHead - dequeEnd > 0 ) { current = deque [ dequeEnd ++ ]; road_current = road [ roadEnd ++ ]; for ( i = 0 ; i < n ; i ++ ) { if ( graph [ current ][ i ] == 1 && color [ i ] == 0 ) { if ( i == end ) { ans = road_current + 1 ; free ( color ); free ( deque ); free ( road ); return ans ; } deque [ dequeHead ++ ] = i ; color [ i ] = 1 ; road [ roadHead ++ ] = road_current + 1 ; } } } free ( color ); free ( deque ); free ( road ); return 0 ; } int ladderLength ( char * beginWord , char * endWord , char ** wordList , int wordListSize ){ const int n = wordListSize ; int ** graph ; int i , j , start , end ; int ans = 0 ; // \u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u65e0\u5411\u56fe graph = ( int ** ) malloc ( sizeof ( int * ) * ( n + 1 )); for ( i = 0 ; i < n + 1 ; i ++ ) { graph [ i ] = ( int * ) malloc ( sizeof ( int ) * ( n + 1 )); memset ( graph [ i ], 0 , sizeof ( int ) * ( n + 1 )); } // \u6839\u636e\u5355\u8bcd\u751f\u6210\u65e0\u5411\u56fe for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( i != j && isArrival ( wordList [ i ], wordList [ j ])) { graph [ i ][ j ] = 1 ; graph [ j ][ i ] = 1 ; } } } // \u627e\u5230\u8d77\u70b9\u7684\u7d22\u5f15 start = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( strcmp ( wordList [ i ], beginWord ) == 0 ) { start = i ; } } if ( start == - 1 ) { // beginword \u4f5c\u4e3a\u7b2c n \u4e2a\u7ed3\u70b9\u52a0\u5165\u56fe for ( i = 0 ; i < n ; i ++ ) { if ( isArrival ( beginWord , wordList [ i ])) { graph [ n ][ i ] = 1 ; graph [ i ][ n ] = 1 ; ans = 1 ; } } start = n ; } // \u627e\u5230\u7ec8\u70b9\u7684\u7d22\u5f15 end = - 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( strcmp ( wordList [ i ], endWord ) == 0 ) { end = i ; break ; } } // \u7ec8\u70b9\u4e0d\u5728\u5355\u8bcd\u5217\u8868\u4e2d\uff0c\u8fd4\u56de0 if ( end == - 1 ) { freeMatrix ( graph , n + 1 ); ans = 0 ; return ans ; } // \u8d77\u70b9\u662fn, \u7ec8\u70b9\u662f end, \u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u641c\u7d22\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 ans = BFS ( graph , start , end , n + 1 ); if ( ans == 0 ) { return 0 ; } else { return ans + 1 ; } }","title":"127.c"},{"location":"leetcode/127/127/index.cpp.html","text":"127.cpp \u00b6","title":"127.cpp"},{"location":"leetcode/127/127/index.cpp.html#127cpp","text":"","title":"127.cpp"},{"location":"leetcode/127/127/index.py.html","text":"127.py \u00b6","title":"127.py"},{"location":"leetcode/127/127/index.py.html#127py","text":"","title":"127.py"},{"location":"leetcode/127/readme/","text":"127. \u5355\u8bcd\u63a5\u9f99 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178\uff0c\u627e\u5230\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a 1 2 \u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002 \u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u8bf4\u660e: 1 2 3 4 5 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002 \u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 \u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 9 \u8f93\u5165: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] \u8f93\u51fa: 5 \u89e3\u91ca: \u4e00\u4e2a\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u662f \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", \u8fd4\u56de\u5b83\u7684\u957f\u5ea6 5\u3002 \u793a\u4f8b 2: 1 2 3 4 5 6 7 8 \u8f93\u5165: beginWord = \"hit\" endWord = \"cog\" wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] \u8f93\u51fa: 0 \u89e3\u91ca: endWord \"cog\" \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u8f6c\u6362\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u627e\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 3. AC\u4ee3\u7801 \u00b6 C","title":"[127. \u5355\u8bcd\u63a5\u9f99](https://leetcode-cn.com/problems/word-ladder)"},{"location":"leetcode/127/readme/#127","text":"","title":"127. \u5355\u8bcd\u63a5\u9f99"},{"location":"leetcode/127/readme/#1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178\uff0c\u627e\u5230\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a 1 2 \u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002 \u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u8bf4\u660e: 1 2 3 4 5 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002 \u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 \u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 9 \u8f93\u5165: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] \u8f93\u51fa: 5 \u89e3\u91ca: \u4e00\u4e2a\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u662f \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", \u8fd4\u56de\u5b83\u7684\u957f\u5ea6 5\u3002 \u793a\u4f8b 2: 1 2 3 4 5 6 7 8 \u8f93\u5165: beginWord = \"hit\" endWord = \"cog\" wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] \u8f93\u51fa: 0 \u89e3\u91ca: endWord \"cog\" \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u8f6c\u6362\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/127/readme/#2","text":"\u627e\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/127/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/128/readme/","text":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u793a\u4f8b: \u8f93\u5165: [100, 4, 200, 1, 3, 2] \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u8fde\u7eed\u5e8f\u5217\u662f [1, 2, 3, 4]\u3002\u5b83\u7684\u957f\u5ea6\u4e3a 4\u3002 2. \u89e3\u9898\u601d\u8def \u00b6","title":"[128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217](https://leetcode-cn.com/problems/longest-consecutive-sequence)"},{"location":"leetcode/128/readme/#128","text":"","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217"},{"location":"leetcode/128/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u793a\u4f8b: \u8f93\u5165: [100, 4, 200, 1, 3, 2] \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u8fde\u7eed\u5e8f\u5217\u662f [1, 2, 3, 4]\u3002\u5b83\u7684\u957f\u5ea6\u4e3a 4\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/128/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/131/131/index.c.html","text":"131.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_ANS 1000 char *** ans ; int ansEnd ; int * colsSize = NULL ; int colsEnd = 0 ; char * sg ; int size ; // \u91ca\u653e\u5b57\u7b26\u4e32\u6570\u7ec4\u6240\u5360\u7528\u7684\u7a7a\u95f4 void freeStrings ( char ** strings , int size ) { for ( int i = 0 ; i < size ; i ++ ) { free ( strings [ i ]); } free ( strings ); } // \u6df1\u5ea6\u62f7\u8d1d string[start : end] char * strDeepCopy ( char * string , int start , int end ) { char * newString = ( char * ) malloc ( sizeof ( char ) * ( end - start + 2 )); int newStringEnd = 0 ; for ( int i = start ; i <= end ; i ++ ) { newString [ newStringEnd ++ ] = string [ i ]; } newString [ newStringEnd ] = '\\0' ; return newString ; } // \u6df1\u5ea6\u62f7\u8d1d\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 char ** deepCopy ( char ** strings , int size ) { char ** ans = ( char ** ) malloc ( sizeof ( char * ) * size ); for ( int i = 0 ; i < size ; i ++ ) { ans [ i ] = strDeepCopy ( strings [ i ], 0 , strlen ( strings [ i ]) - 1 ); } return ans ; } int isHuiWen ( char * string , int start , int end ) { while ( start <= end ) { if ( sg [ start ] != string [ end ]) { return false ; } start ++ , end -- ; } return true ; } void dfs ( int start , int end , char ** line , int * lineEnd ) { if ( end == size ) { if ( start == end ) { ans [ ansEnd ++ ] = deepCopy ( line , * lineEnd ); colsSize [ colsEnd ++ ] = * lineEnd ; } return ; } // \u5982\u679c[start, end] \u662f\u56de\u6587\uff0c\u4ece\u8fd9\u91cc\u5207\u5272\u4e00\u4e0b if ( isHuiWen ( sg , start , end )) { line [( * lineEnd ) ++ ] = strDeepCopy ( sg , start , end ); dfs ( end + 1 , end + 1 , line , lineEnd ); ( * lineEnd ) -- ; } // \u4e0d\u5207\u5272\uff0c\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22 dfs ( start , end + 1 , line , lineEnd ); return ; } char *** partition ( char * s , int * returnSize , int ** returnColumnSizes ) { ans = NULL ; ansEnd = 0 ; colsSize = NULL ; colsEnd = 0 ; sg = NULL ; if ( s == NULL || strlen ( s ) == 0 ) { * returnSize = 0 ; * returnColumnSizes = colsSize ; return ans ; } size = strlen ( s ); char ** line = ( char ** ) malloc ( sizeof ( char * ) * size ); int lineEnd = 0 ; ans = ( char *** ) malloc ( sizeof ( char ** ) * MAX_ANS ); colsSize = ( int * ) malloc ( sizeof ( int ) * MAX_ANS ); sg = s ; dfs ( 0 , 0 , line , & lineEnd ); * returnSize = ansEnd ; * returnColumnSizes = colsSize ; freeStrings ( line , lineEnd ); return ans ; }","title":"131.c"},{"location":"leetcode/131/131/index.c.html#131c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_ANS 1000 char *** ans ; int ansEnd ; int * colsSize = NULL ; int colsEnd = 0 ; char * sg ; int size ; // \u91ca\u653e\u5b57\u7b26\u4e32\u6570\u7ec4\u6240\u5360\u7528\u7684\u7a7a\u95f4 void freeStrings ( char ** strings , int size ) { for ( int i = 0 ; i < size ; i ++ ) { free ( strings [ i ]); } free ( strings ); } // \u6df1\u5ea6\u62f7\u8d1d string[start : end] char * strDeepCopy ( char * string , int start , int end ) { char * newString = ( char * ) malloc ( sizeof ( char ) * ( end - start + 2 )); int newStringEnd = 0 ; for ( int i = start ; i <= end ; i ++ ) { newString [ newStringEnd ++ ] = string [ i ]; } newString [ newStringEnd ] = '\\0' ; return newString ; } // \u6df1\u5ea6\u62f7\u8d1d\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 char ** deepCopy ( char ** strings , int size ) { char ** ans = ( char ** ) malloc ( sizeof ( char * ) * size ); for ( int i = 0 ; i < size ; i ++ ) { ans [ i ] = strDeepCopy ( strings [ i ], 0 , strlen ( strings [ i ]) - 1 ); } return ans ; } int isHuiWen ( char * string , int start , int end ) { while ( start <= end ) { if ( sg [ start ] != string [ end ]) { return false ; } start ++ , end -- ; } return true ; } void dfs ( int start , int end , char ** line , int * lineEnd ) { if ( end == size ) { if ( start == end ) { ans [ ansEnd ++ ] = deepCopy ( line , * lineEnd ); colsSize [ colsEnd ++ ] = * lineEnd ; } return ; } // \u5982\u679c[start, end] \u662f\u56de\u6587\uff0c\u4ece\u8fd9\u91cc\u5207\u5272\u4e00\u4e0b if ( isHuiWen ( sg , start , end )) { line [( * lineEnd ) ++ ] = strDeepCopy ( sg , start , end ); dfs ( end + 1 , end + 1 , line , lineEnd ); ( * lineEnd ) -- ; } // \u4e0d\u5207\u5272\uff0c\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22 dfs ( start , end + 1 , line , lineEnd ); return ; } char *** partition ( char * s , int * returnSize , int ** returnColumnSizes ) { ans = NULL ; ansEnd = 0 ; colsSize = NULL ; colsEnd = 0 ; sg = NULL ; if ( s == NULL || strlen ( s ) == 0 ) { * returnSize = 0 ; * returnColumnSizes = colsSize ; return ans ; } size = strlen ( s ); char ** line = ( char ** ) malloc ( sizeof ( char * ) * size ); int lineEnd = 0 ; ans = ( char *** ) malloc ( sizeof ( char ** ) * MAX_ANS ); colsSize = ( int * ) malloc ( sizeof ( int ) * MAX_ANS ); sg = s ; dfs ( 0 , 0 , line , & lineEnd ); * returnSize = ansEnd ; * returnColumnSizes = colsSize ; freeStrings ( line , lineEnd ); return ans ; }","title":"131.c"},{"location":"leetcode/131/131/index.cpp.html","text":"131.cpp \u00b6 #include <vector> #include <string> #include <stack> #include <algorithm> #include <deque> using namespace std ; class Solution { public : bool isHuiWen ( string & s , int begin , int end ) { while ( begin < end ) { if ( s [ begin ] != s [ end ]) { return false ; } begin ++ ; end -- ; } return true ; } void dfs ( int begin , int end , string & s , vector < string > & line , vector < vector < string >> & ans ) { if ( end == s . size ()) { // \u6ee1\u8db3\u56de\u6587\u6761\u4ef6\uff0cbegin \u4e00\u5b9a\u7b49\u4e8e end if ( begin == end ) { ans . push_back ( line ); } return ; } // \u5982\u679c\u662f\u56de\u6587\uff0c\u5c31\u4ece\u8fd9\u91cc\u5207\u5272 if ( isHuiWen ( s , begin , end )) { line . push_back ( s . substr ( begin , end - begin + 1 )); dfs ( end + 1 , end + 1 , s , line , ans ); line . pop_back (); } // \u662f\u4e0d\u662f\u56de\u6587\uff0c\u90fd\u53ef\u4ee5\u4e0d\u5207\u5272\uff0c\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22 dfs ( begin , end + 1 , s , line , ans ); return ; } vector < vector < string >> partition ( string s ) { vector < vector < string >> ans ; vector < string > line ; dfs ( 0 , 0 , s , line , ans ); return ans ; } }; int main () { Solution * s = new Solution (); auto ans = s -> partition ( \"aab\" ); return 0 ; }","title":"131.cpp"},{"location":"leetcode/131/131/index.cpp.html#131cpp","text":"#include <vector> #include <string> #include <stack> #include <algorithm> #include <deque> using namespace std ; class Solution { public : bool isHuiWen ( string & s , int begin , int end ) { while ( begin < end ) { if ( s [ begin ] != s [ end ]) { return false ; } begin ++ ; end -- ; } return true ; } void dfs ( int begin , int end , string & s , vector < string > & line , vector < vector < string >> & ans ) { if ( end == s . size ()) { // \u6ee1\u8db3\u56de\u6587\u6761\u4ef6\uff0cbegin \u4e00\u5b9a\u7b49\u4e8e end if ( begin == end ) { ans . push_back ( line ); } return ; } // \u5982\u679c\u662f\u56de\u6587\uff0c\u5c31\u4ece\u8fd9\u91cc\u5207\u5272 if ( isHuiWen ( s , begin , end )) { line . push_back ( s . substr ( begin , end - begin + 1 )); dfs ( end + 1 , end + 1 , s , line , ans ); line . pop_back (); } // \u662f\u4e0d\u662f\u56de\u6587\uff0c\u90fd\u53ef\u4ee5\u4e0d\u5207\u5272\uff0c\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22 dfs ( begin , end + 1 , s , line , ans ); return ; } vector < vector < string >> partition ( string s ) { vector < vector < string >> ans ; vector < string > line ; dfs ( 0 , 0 , s , line , ans ); return ans ; } }; int main () { Solution * s = new Solution (); auto ans = s -> partition ( \"aab\" ); return 0 ; }","title":"131.cpp"},{"location":"leetcode/131/131/index.py.html","text":"131.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Solution : def isHuiWen ( self , s , begin , end ): while begin < end : if s [ begin ] != s [ end ]: return False begin += 1 end -= 1 return True def dfs ( self , begin , end , s , line , ans ): if end == len ( s ): if begin == end : ans . append ( line [:]) return if self . isHuiWen ( s , begin , end ): line . append ( s [ begin : end + 1 ]) self . dfs ( end + 1 , end + 1 , s , line , ans ) line . pop () self . dfs ( begin , end + 1 , s , line , ans ) return def partition ( self , s : str ) -> List [ List [ str ]]: line = [] ans = [] self . dfs ( 0 , 0 , s , line , ans ) return ans s = Solution () ans = s . partition ( \"aab\" ) print ( ans )","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/131/131/index.py.html#131py","text":"# -*- coding:utf-8 -*- from typing import List class Solution : def isHuiWen ( self , s , begin , end ): while begin < end : if s [ begin ] != s [ end ]: return False begin += 1 end -= 1 return True def dfs ( self , begin , end , s , line , ans ): if end == len ( s ): if begin == end : ans . append ( line [:]) return if self . isHuiWen ( s , begin , end ): line . append ( s [ begin : end + 1 ]) self . dfs ( end + 1 , end + 1 , s , line , ans ) line . pop () self . dfs ( begin , end + 1 , s , line , ans ) return def partition ( self , s : str ) -> List [ List [ str ]]: line = [] ans = [] self . dfs ( 0 , 0 , s , line , ans ) return ans s = Solution () ans = s . partition ( \"aab\" ) print ( ans )","title":"131.py"},{"location":"leetcode/131/readme/","text":"131. \u5206\u5272\u56de\u6587\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 \u793a\u4f8b: 1 2 3 4 5 6 \u8f93\u5165: \"aab\" \u8f93\u51fa: [ [\"aa\",\"b\"], [\"a\",\"a\",\"b\"] ] 2. \u89e3\u9898\u601d\u8def \u00b6 \u5728\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u5730\u65b9\u5206\u5272\uff0c\u52a0\u5165\u7ed3\u679c\uff0c\u9012\u5f52\u4e0b\u4e00\u4e2a\u3002 \u5728\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5904\u90fd\u53ef\u4ee5\u4e0d\u5206\u5272 \u9012\u5f52\u5230\u8fbe\u7ed3\u5c3e\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u8bb0\u5f55\u4e00\u4e2a\u7b54\u6848 3. AC \u4ee3\u7801 \u00b6 C C++ Python","title":"[131. \u5206\u5272\u56de\u6587\u4e32](https://leetcode-cn.com/problems/palindrome-partitioning)"},{"location":"leetcode/131/readme/#131","text":"","title":"131. \u5206\u5272\u56de\u6587\u4e32"},{"location":"leetcode/131/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 \u793a\u4f8b: 1 2 3 4 5 6 \u8f93\u5165: \"aab\" \u8f93\u51fa: [ [\"aa\",\"b\"], [\"a\",\"a\",\"b\"] ]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/131/readme/#2","text":"\u5728\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u5730\u65b9\u5206\u5272\uff0c\u52a0\u5165\u7ed3\u679c\uff0c\u9012\u5f52\u4e0b\u4e00\u4e2a\u3002 \u5728\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5904\u90fd\u53ef\u4ee5\u4e0d\u5206\u5272 \u9012\u5f52\u5230\u8fbe\u7ed3\u5c3e\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u8bb0\u5f55\u4e00\u4e2a\u7b54\u6848","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/131/readme/#3-ac","text":"C C++ Python","title":"3. AC \u4ee3\u7801"},{"location":"leetcode/1311/1311/index.c.html","text":"1311.c \u00b6","title":"1311.c"},{"location":"leetcode/1311/1311/index.c.html#1311c","text":"","title":"1311.c"},{"location":"leetcode/1311/1311/index.cpp.html","text":"1311.cpp \u00b6","title":"1311.cpp"},{"location":"leetcode/1311/1311/index.cpp.html#1311cpp","text":"","title":"1311.cpp"},{"location":"leetcode/1311/1311/index.py.html","text":"1311.py \u00b6","title":"1311.py"},{"location":"leetcode/1311/1311/index.py.html#1311py","text":"","title":"1311.py"},{"location":"leetcode/1311/readme/","text":"1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709 n \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a 0 \u5230 n-1 \u7684\u552f\u4e00 id \u3002 \u7ed9\u4f60\u6570\u7ec4 watchedVideos \u548c friends \uff0c\u5176\u4e2d watchedVideos[i] \u548c friends[i] \u5206\u522b\u8868\u793a id = i \u7684\u4eba\u89c2\u770b\u8fc7\u7684\u89c6\u9891\u5217\u8868\u548c\u4ed6\u7684\u597d\u53cb\u5217\u8868\u3002 Level 1 \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4f60\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\uff0clevel 2 \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4f60\u597d\u53cb\u7684\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4e00\u822c\u7684\uff0cLevel \u4e3a k \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4ece\u4f60\u51fa\u53d1\uff0c\u6700\u77ed\u8ddd\u79bb\u4e3a k \u7684\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\u3002 \u7ed9\u5b9a\u4f60\u7684 id \u548c\u4e00\u4e2a level \u503c\uff0c\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u6307\u5b9a level \u7684\u89c6\u9891\uff0c\u5e76\u5c06\u5b83\u4eec\u6309\u89c2\u770b\u9891\u7387\u5347\u5e8f\u8fd4\u56de\u3002\u5982\u679c\u6709\u9891\u7387\u76f8\u540c\u7684\u89c6\u9891\uff0c\u8bf7\u5c06\u5b83\u4eec\u6309\u5b57\u6bcd\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1awatchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1 \u8f93\u51fa\uff1a[\"B\",\"C\"] \u89e3\u91ca\uff1a \u4f60\u7684 id \u4e3a 0\uff08\u7eff\u8272\uff09\uff0c\u4f60\u7684\u670b\u53cb\u5305\u62ec\uff08\u9ec4\u8272\uff09\uff1a id \u4e3a 1 -> watchedVideos = [\"C\"] id \u4e3a 2 -> watchedVideos = [\"B\",\"C\"] \u4f60\u670b\u53cb\u89c2\u770b\u8fc7\u89c6\u9891\u7684\u9891\u7387\u4e3a\uff1a B -> 1 C -> 2 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1awatchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2 \u8f93\u51fa\uff1a[\"D\"] \u89e3\u91ca\uff1a \u4f60\u7684 id \u4e3a 0\uff08\u7eff\u8272\uff09\uff0c\u4f60\u670b\u53cb\u7684\u670b\u53cb\u53ea\u6709\u4e00\u4e2a\u4eba\uff0c\u4ed6\u7684 id \u4e3a 3\uff08\u9ec4\u8272\uff09\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 7 8 9 n == watchedVideos.length == friends.length 2 <= n <= 100 1 <= watchedVideos[i].length <= 100 1 <= watchedVideos[i][j].length <= 8 0 <= friends[i].length < n 0 <= friends[i][j] < n 0 <= id < n 1 <= level < n \u5982\u679c friends[i] \u5305\u542b j \uff0c\u90a3\u4e48 friends[j] \u5305\u542b i","title":"[1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891](https://leetcode-cn.com/problems/get-watched-videos-by-your-friends)"},{"location":"leetcode/1311/readme/#1311","text":"","title":"1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891"},{"location":"leetcode/1311/readme/#1","text":"\u6709 n \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a 0 \u5230 n-1 \u7684\u552f\u4e00 id \u3002 \u7ed9\u4f60\u6570\u7ec4 watchedVideos \u548c friends \uff0c\u5176\u4e2d watchedVideos[i] \u548c friends[i] \u5206\u522b\u8868\u793a id = i \u7684\u4eba\u89c2\u770b\u8fc7\u7684\u89c6\u9891\u5217\u8868\u548c\u4ed6\u7684\u597d\u53cb\u5217\u8868\u3002 Level 1 \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4f60\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\uff0clevel 2 \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4f60\u597d\u53cb\u7684\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4e00\u822c\u7684\uff0cLevel \u4e3a k \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4ece\u4f60\u51fa\u53d1\uff0c\u6700\u77ed\u8ddd\u79bb\u4e3a k \u7684\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\u3002 \u7ed9\u5b9a\u4f60\u7684 id \u548c\u4e00\u4e2a level \u503c\uff0c\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u6307\u5b9a level \u7684\u89c6\u9891\uff0c\u5e76\u5c06\u5b83\u4eec\u6309\u89c2\u770b\u9891\u7387\u5347\u5e8f\u8fd4\u56de\u3002\u5982\u679c\u6709\u9891\u7387\u76f8\u540c\u7684\u89c6\u9891\uff0c\u8bf7\u5c06\u5b83\u4eec\u6309\u5b57\u6bcd\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1awatchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1 \u8f93\u51fa\uff1a[\"B\",\"C\"] \u89e3\u91ca\uff1a \u4f60\u7684 id \u4e3a 0\uff08\u7eff\u8272\uff09\uff0c\u4f60\u7684\u670b\u53cb\u5305\u62ec\uff08\u9ec4\u8272\uff09\uff1a id \u4e3a 1 -> watchedVideos = [\"C\"] id \u4e3a 2 -> watchedVideos = [\"B\",\"C\"] \u4f60\u670b\u53cb\u89c2\u770b\u8fc7\u89c6\u9891\u7684\u9891\u7387\u4e3a\uff1a B -> 1 C -> 2 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1awatchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2 \u8f93\u51fa\uff1a[\"D\"] \u89e3\u91ca\uff1a \u4f60\u7684 id \u4e3a 0\uff08\u7eff\u8272\uff09\uff0c\u4f60\u670b\u53cb\u7684\u670b\u53cb\u53ea\u6709\u4e00\u4e2a\u4eba\uff0c\u4ed6\u7684 id \u4e3a 3\uff08\u9ec4\u8272\uff09\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 7 8 9 n == watchedVideos.length == friends.length 2 <= n <= 100 1 <= watchedVideos[i].length <= 100 1 <= watchedVideos[i][j].length <= 8 0 <= friends[i].length < n 0 <= friends[i][j] < n 0 <= id < n 1 <= level < n \u5982\u679c friends[i] \u5305\u542b j \uff0c\u90a3\u4e48 friends[j] \u5305\u542b i","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1314/readme/","text":"1314. \u77e9\u9635\u533a\u57df\u548c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a m * n \u7684\u77e9\u9635 mat \u548c\u4e00\u4e2a\u6574\u6570 K \uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u77e9\u9635 answer \uff0c\u5176\u4e2d\u6bcf\u4e2a answer[i][j] \u662f\u6240\u6709\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684\u5143\u7d20 mat[r][c] \u7684\u548c\uff1a i - K <= r <= i + K, j - K <= c <= j + K (r, c) \u5728\u77e9\u9635\u5185\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1amat = [[1,2,3],[4,5,6],[7,8,9]], K = 1 \u8f93\u51fa\uff1a[[12,21,16],[27,45,33],[24,39,28]] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1amat = [[1,2,3],[4,5,6],[7,8,9]], K = 2 \u8f93\u51fa\uff1a[[45,45,45],[45,45,45],[45,45,45]] \u63d0\u793a\uff1a 1 2 3 4 m == mat.length n == mat[i].length 1 <= m, n, K <= 100 1 <= mat[i][j] <= 100 2. \u89e3\u9898\u601d\u8def \u00b6 int compute ( int ** matrixSums , int x1 , int y1 , int x2 , int y2 ) { if ( x1 == 0 && y1 == 0 ) return matrixSums [ x2 ][ y2 ]; if ( x1 == 0 ) { return matrixSums [ x2 ][ y2 ] - matrixSums [ x2 ][ y1 - 1 ]; } if ( y1 == 0 ) { return matrixSums [ x2 ][ y2 ] - matrixSums [ x1 - 1 ][ y2 ]; } int ans = matrixSums [ x2 ][ y2 ] - matrixSums [ x2 ][ y1 - 1 ] - matrixSums [ x1 - 1 ][ y2 ] + matrixSums [ x1 - 1 ][ y1 - 1 ]; return ans ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** matrixBlockSum ( int ** mat , int matSize , int * matColSize , int K , int * returnSize , int ** returnColumnSizes ) { int ** ans ; int ansEnd = 0 ; int * colsSize ; int colsSizeEnd = 0 ; if ( mat == NULL || matSize == 0 || matColSize == NULL ) { * returnColumnSizes = & colsSize ; * returnSize = 0 ; return NULL ; } if ( matSize == 1 || matColSize [ 0 ] == 0 ) { * returnColumnSizes = & colsSize ; * returnSize = 0 ; return NULL ; } if ( K == 0 ) { * returnColumnSizes = matColSize ; * returnSize = matSize ; return mat ; } // \u8ba1\u7b97\u77e9\u9635\u548c\u5b58\u50a8\u4e0b\u6765 int ** sums = ( int ** ) malloc ( sizeof ( int * ) * matSize ); for ( int i = 0 ; i < matSize ; i ++ ) { sums [ i ] = ( int * ) malloc ( sizeof ( int ) * matColSize [ i ]); } sums [ 0 ][ 0 ] = mat [ 0 ][ 0 ]; for ( int i = 1 ; i < matSize ; i ++ ) { sums [ i ][ 0 ] = sums [ i - 1 ][ 0 ] + mat [ i ][ 0 ]; } for ( int j = 1 ; j < matColSize [ 0 ]; j ++ ) { sums [ 0 ][ j ] = sums [ 0 ][ j - 1 ] + mat [ 0 ][ j ]; } for ( int i = 1 ; i < matSize ; i ++ ) { for ( int j = 1 ; j < matColSize [ i ]; j ++ ) { sums [ i ][ j ] = sums [ i - 1 ][ j ] + sums [ i ][ j - 1 ] - sums [ i - 1 ][ j - 1 ] + mat [ i ][ j ]; } } colsSize = ( int * ) malloc ( sizeof ( int ) * matSize ); for ( int i = 0 ; i < matSize ; i ++ ) { colsSize [ i ] = matColSize [ i ]; } ans = ( int ** ) malloc ( sizeof ( int * ) * matSize ); for ( int i = 0 ; i < matSize ; i ++ ) { ans [ i ] = ( int * ) malloc ( sizeof ( int ) * matColSize [ i ]); } // \u8ba1\u7b97\u533a\u57df\u548c int x1 , y1 , x2 , y2 ; for ( int i = 0 ; i < matSize ; i ++ ) { for ( int j = 0 ; j < matColSize [ i ]; j ++ ) { x1 = i - K < 0 ? 0 : i - K ; y1 = j - K < 0 ? 0 : j - K ; x2 = i + K >= matSize ? matSize - 1 : i + K ; y2 = j + K >= matColSize [ matSize - 1 ] ? matColSize [ matSize - 1 ] - 1 : j + K ; // (x1,y1) -- (x2, y2) \u77e9\u9635\u7684\u548c ans [ i ][ j ] = compute ( sums , x1 , y1 , x2 , y2 ); } } // \u91ca\u653e\u4e0d\u4f7f\u7528\u7684\u5185\u5b58 for ( int i = 0 ; i < matSize ; i ++ ) { free ( sums [ i ]); } free ( sums ); * returnSize = matSize ; * returnColumnSizes = colsSize ; return ans ; }","title":"[1314. \u77e9\u9635\u533a\u57df\u548c](https://leetcode-cn.com/problems/matrix-block-sum/)"},{"location":"leetcode/1314/readme/#1314","text":"","title":"1314. \u77e9\u9635\u533a\u57df\u548c"},{"location":"leetcode/1314/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a m * n \u7684\u77e9\u9635 mat \u548c\u4e00\u4e2a\u6574\u6570 K \uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u77e9\u9635 answer \uff0c\u5176\u4e2d\u6bcf\u4e2a answer[i][j] \u662f\u6240\u6709\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684\u5143\u7d20 mat[r][c] \u7684\u548c\uff1a i - K <= r <= i + K, j - K <= c <= j + K (r, c) \u5728\u77e9\u9635\u5185\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1amat = [[1,2,3],[4,5,6],[7,8,9]], K = 1 \u8f93\u51fa\uff1a[[12,21,16],[27,45,33],[24,39,28]] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1amat = [[1,2,3],[4,5,6],[7,8,9]], K = 2 \u8f93\u51fa\uff1a[[45,45,45],[45,45,45],[45,45,45]] \u63d0\u793a\uff1a 1 2 3 4 m == mat.length n == mat[i].length 1 <= m, n, K <= 100 1 <= mat[i][j] <= 100","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1314/readme/#2","text":"int compute ( int ** matrixSums , int x1 , int y1 , int x2 , int y2 ) { if ( x1 == 0 && y1 == 0 ) return matrixSums [ x2 ][ y2 ]; if ( x1 == 0 ) { return matrixSums [ x2 ][ y2 ] - matrixSums [ x2 ][ y1 - 1 ]; } if ( y1 == 0 ) { return matrixSums [ x2 ][ y2 ] - matrixSums [ x1 - 1 ][ y2 ]; } int ans = matrixSums [ x2 ][ y2 ] - matrixSums [ x2 ][ y1 - 1 ] - matrixSums [ x1 - 1 ][ y2 ] + matrixSums [ x1 - 1 ][ y1 - 1 ]; return ans ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** matrixBlockSum ( int ** mat , int matSize , int * matColSize , int K , int * returnSize , int ** returnColumnSizes ) { int ** ans ; int ansEnd = 0 ; int * colsSize ; int colsSizeEnd = 0 ; if ( mat == NULL || matSize == 0 || matColSize == NULL ) { * returnColumnSizes = & colsSize ; * returnSize = 0 ; return NULL ; } if ( matSize == 1 || matColSize [ 0 ] == 0 ) { * returnColumnSizes = & colsSize ; * returnSize = 0 ; return NULL ; } if ( K == 0 ) { * returnColumnSizes = matColSize ; * returnSize = matSize ; return mat ; } // \u8ba1\u7b97\u77e9\u9635\u548c\u5b58\u50a8\u4e0b\u6765 int ** sums = ( int ** ) malloc ( sizeof ( int * ) * matSize ); for ( int i = 0 ; i < matSize ; i ++ ) { sums [ i ] = ( int * ) malloc ( sizeof ( int ) * matColSize [ i ]); } sums [ 0 ][ 0 ] = mat [ 0 ][ 0 ]; for ( int i = 1 ; i < matSize ; i ++ ) { sums [ i ][ 0 ] = sums [ i - 1 ][ 0 ] + mat [ i ][ 0 ]; } for ( int j = 1 ; j < matColSize [ 0 ]; j ++ ) { sums [ 0 ][ j ] = sums [ 0 ][ j - 1 ] + mat [ 0 ][ j ]; } for ( int i = 1 ; i < matSize ; i ++ ) { for ( int j = 1 ; j < matColSize [ i ]; j ++ ) { sums [ i ][ j ] = sums [ i - 1 ][ j ] + sums [ i ][ j - 1 ] - sums [ i - 1 ][ j - 1 ] + mat [ i ][ j ]; } } colsSize = ( int * ) malloc ( sizeof ( int ) * matSize ); for ( int i = 0 ; i < matSize ; i ++ ) { colsSize [ i ] = matColSize [ i ]; } ans = ( int ** ) malloc ( sizeof ( int * ) * matSize ); for ( int i = 0 ; i < matSize ; i ++ ) { ans [ i ] = ( int * ) malloc ( sizeof ( int ) * matColSize [ i ]); } // \u8ba1\u7b97\u533a\u57df\u548c int x1 , y1 , x2 , y2 ; for ( int i = 0 ; i < matSize ; i ++ ) { for ( int j = 0 ; j < matColSize [ i ]; j ++ ) { x1 = i - K < 0 ? 0 : i - K ; y1 = j - K < 0 ? 0 : j - K ; x2 = i + K >= matSize ? matSize - 1 : i + K ; y2 = j + K >= matColSize [ matSize - 1 ] ? matColSize [ matSize - 1 ] - 1 : j + K ; // (x1,y1) -- (x2, y2) \u77e9\u9635\u7684\u548c ans [ i ][ j ] = compute ( sums , x1 , y1 , x2 , y2 ); } } // \u91ca\u653e\u4e0d\u4f7f\u7528\u7684\u5185\u5b58 for ( int i = 0 ; i < matSize ; i ++ ) { free ( sums [ i ]); } free ( sums ); * returnSize = matSize ; * returnColumnSizes = colsSize ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1315/readme/","text":"1315. \u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\u548c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u4e4b\u548c\uff1a \u8be5\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u7684\u503c\u4e3a\u5076\u6570\u3002\uff08\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u662f\u6307\u8be5\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u3002\uff09 \u5982\u679c\u4e0d\u5b58\u5728\u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8fd4\u56de 0 \u3002 \u793a\u4f8b\uff1a 1 2 3 \u8f93\u5165\uff1aroot = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] \u8f93\u51fa\uff1a18 \u89e3\u91ca\uff1a\u56fe\u4e2d\u7ea2\u8272\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u7684\u503c\u4e3a\u5076\u6570\uff0c\u84dd\u8272\u8282\u70b9\u4e3a\u8fd9\u4e9b\u7ea2\u8272\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u3002 \u63d0\u793a\uff1a 1 2 \u6811\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728 1 \u5230 10^4 \u4e4b\u95f4\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u5728 1 \u5230 100 \u4e4b\u95f4\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 int computeSum ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; int ans = 0 ; if ( root -> left ) { struct TreeNode * left = root -> left ; if ( left -> left ) ans += left -> left -> val ; if ( left -> right ) ans += left -> right -> val ; } if ( root -> right ) { struct TreeNode * right = root -> right ; if ( right -> left ) ans += right -> left -> val ; if ( right -> right ) ans += right -> right -> val ; } return ans ; } void dfs ( struct TreeNode * root , int * ans ) { if ( root -> val % 2 == 0 ) { * ans += computeSum ( root ); } if ( root -> left ) dfs ( root -> left , ans ); if ( root -> right ) dfs ( root -> right , ans ); return ; } int sumEvenGrandparent ( struct TreeNode * root ){ if ( root == NULL ) return 0 ; if ( root -> left == NULL && root -> right == NULL ) return 0 ; int ans = 0 ; dfs ( root , & ans ); return ans ; }","title":"[1315. \u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\u548c](https://leetcode-cn.com/problems/sum-of-nodes-with-even-valued-grandparent/)"},{"location":"leetcode/1315/readme/#1315","text":"","title":"1315. \u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\u548c"},{"location":"leetcode/1315/readme/#1","text":"\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u4e4b\u548c\uff1a \u8be5\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u7684\u503c\u4e3a\u5076\u6570\u3002\uff08\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u662f\u6307\u8be5\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u3002\uff09 \u5982\u679c\u4e0d\u5b58\u5728\u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8fd4\u56de 0 \u3002 \u793a\u4f8b\uff1a 1 2 3 \u8f93\u5165\uff1aroot = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] \u8f93\u51fa\uff1a18 \u89e3\u91ca\uff1a\u56fe\u4e2d\u7ea2\u8272\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u7684\u503c\u4e3a\u5076\u6570\uff0c\u84dd\u8272\u8282\u70b9\u4e3a\u8fd9\u4e9b\u7ea2\u8272\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u3002 \u63d0\u793a\uff1a 1 2 \u6811\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728 1 \u5230 10^4 \u4e4b\u95f4\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u5728 1 \u5230 100 \u4e4b\u95f4\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1315/readme/#2","text":"int computeSum ( struct TreeNode * root ) { if ( root == NULL ) return 0 ; int ans = 0 ; if ( root -> left ) { struct TreeNode * left = root -> left ; if ( left -> left ) ans += left -> left -> val ; if ( left -> right ) ans += left -> right -> val ; } if ( root -> right ) { struct TreeNode * right = root -> right ; if ( right -> left ) ans += right -> left -> val ; if ( right -> right ) ans += right -> right -> val ; } return ans ; } void dfs ( struct TreeNode * root , int * ans ) { if ( root -> val % 2 == 0 ) { * ans += computeSum ( root ); } if ( root -> left ) dfs ( root -> left , ans ); if ( root -> right ) dfs ( root -> right , ans ); return ; } int sumEvenGrandparent ( struct TreeNode * root ){ if ( root == NULL ) return 0 ; if ( root -> left == NULL && root -> right == NULL ) return 0 ; int ans = 0 ; dfs ( root , & ans ); return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1333/readme/","text":"1333. \u9910\u5385\u8fc7\u6ee4\u5668 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u9910\u9986\u4fe1\u606f\u6570\u7ec4 restaurants\uff0c\u5176\u4e2d restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]\u3002\u4f60\u5fc5\u987b\u4f7f\u7528\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u6ee4\u5668\u6765\u8fc7\u6ee4\u8fd9\u4e9b\u9910\u9986\u4fe1\u606f\u3002 \u5176\u4e2d\u7d20\u98df\u8005\u53cb\u597d\u8fc7\u6ee4\u5668 veganFriendly \u7684\u503c\u53ef\u4ee5\u4e3a true \u6216\u8005 false\uff0c\u5982\u679c\u4e3a true \u5c31\u610f\u5473\u7740\u4f60\u5e94\u8be5\u53ea\u5305\u62ec veganFriendlyi \u4e3a true \u7684\u9910\u9986\uff0c\u4e3a false \u5219\u610f\u5473\u7740\u53ef\u4ee5\u5305\u62ec\u4efb\u4f55\u9910\u9986\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u6700\u5927\u4ef7\u683c maxPrice \u548c\u6700\u5927\u8ddd\u79bb maxDistance \u4e24\u4e2a\u8fc7\u6ee4\u5668\uff0c\u5b83\u4eec\u5206\u522b\u8003\u8651\u9910\u5385\u7684\u4ef7\u683c\u56e0\u7d20\u548c\u8ddd\u79bb\u56e0\u7d20\u7684\u6700\u5927\u503c\u3002 \u8fc7\u6ee4\u540e\u8fd4\u56de\u9910\u9986\u7684 id\uff0c\u6309\u7167 rating \u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u5982\u679c rating \u76f8\u540c\uff0c\u90a3\u4e48\u6309 id \u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u7b80\u5355\u8d77\u89c1\uff0c veganFriendlyi \u548c veganFriendly \u4e3a true \u65f6\u53d6\u503c\u4e3a 1\uff0c\u4e3a false \u65f6\uff0c\u53d6\u503c\u4e3a 0 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10 \u8f93\u51fa\uff1a[3,1,5] \u89e3\u91ca\uff1a \u8fd9\u4e9b\u9910\u9986\u4e3a\uff1a \u9910\u9986 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10] \u9910\u9986 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5] \u9910\u9986 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4] \u9910\u9986 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3] \u9910\u9986 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \u5728\u6309\u7167 veganFriendly = 1, maxPrice = 50 \u548c maxDistance = 10 \u8fdb\u884c\u8fc7\u6ee4\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9910\u9986 3, \u9910\u9986 1 \u548c \u9910\u9986 5\uff08\u6309\u8bc4\u5206\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff09\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10 \u8f93\u51fa\uff1a[4,3,2,1,5] \u89e3\u91ca\uff1a\u9910\u9986\u4e0e\u793a\u4f8b 1 \u76f8\u540c\uff0c\u4f46\u5728 veganFriendly = 0 \u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0b\uff0c\u5e94\u8be5\u8003\u8651\u6240\u6709\u9910\u9986\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3 \u8f93\u51fa\uff1a[4,5] \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= restaurants.length <= 10^4 restaurants[i].length == 5 1 <= idi, ratingi, pricei, distancei <= 10^5 1 <= maxPrice, maxDistance <= 10^5 veganFriendlyi \u548c veganFriendly \u7684\u503c\u4e3a 0 \u6216 1 \u3002 \u6240\u6709 idi \u5404\u4e0d\u76f8\u540c\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution : def filterRestaurants ( self , restaurants : List [ List [ int ]], veganFriendly : int , maxPrice : int , maxDistance : int ) -> List [ int ]: def compare ( a , b ): if a [ 1 ] != b [ 1 ]: return b [ 1 ] - a [ 1 ] return b [ 0 ] - a [ 0 ] ans = [] for res in restaurants : if (( veganFriendly == 1 and res [ 2 ] == veganFriendly ) or veganFriendly == 0 ) and res [ 3 ] <= maxPrice and res [ 4 ] <= maxDistance : ans . append ( res ) ans = sorted ( ans , key = cmp_to_key ( compare )) idx = [] for a in ans : idx . append ( a [ 0 ]) return idx","title":"[1333. \u9910\u5385\u8fc7\u6ee4\u5668](https://leetcode-cn.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/)"},{"location":"leetcode/1333/readme/#1333","text":"","title":"1333. \u9910\u5385\u8fc7\u6ee4\u5668"},{"location":"leetcode/1333/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u9910\u9986\u4fe1\u606f\u6570\u7ec4 restaurants\uff0c\u5176\u4e2d restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]\u3002\u4f60\u5fc5\u987b\u4f7f\u7528\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u6ee4\u5668\u6765\u8fc7\u6ee4\u8fd9\u4e9b\u9910\u9986\u4fe1\u606f\u3002 \u5176\u4e2d\u7d20\u98df\u8005\u53cb\u597d\u8fc7\u6ee4\u5668 veganFriendly \u7684\u503c\u53ef\u4ee5\u4e3a true \u6216\u8005 false\uff0c\u5982\u679c\u4e3a true \u5c31\u610f\u5473\u7740\u4f60\u5e94\u8be5\u53ea\u5305\u62ec veganFriendlyi \u4e3a true \u7684\u9910\u9986\uff0c\u4e3a false \u5219\u610f\u5473\u7740\u53ef\u4ee5\u5305\u62ec\u4efb\u4f55\u9910\u9986\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u6700\u5927\u4ef7\u683c maxPrice \u548c\u6700\u5927\u8ddd\u79bb maxDistance \u4e24\u4e2a\u8fc7\u6ee4\u5668\uff0c\u5b83\u4eec\u5206\u522b\u8003\u8651\u9910\u5385\u7684\u4ef7\u683c\u56e0\u7d20\u548c\u8ddd\u79bb\u56e0\u7d20\u7684\u6700\u5927\u503c\u3002 \u8fc7\u6ee4\u540e\u8fd4\u56de\u9910\u9986\u7684 id\uff0c\u6309\u7167 rating \u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u5982\u679c rating \u76f8\u540c\uff0c\u90a3\u4e48\u6309 id \u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u7b80\u5355\u8d77\u89c1\uff0c veganFriendlyi \u548c veganFriendly \u4e3a true \u65f6\u53d6\u503c\u4e3a 1\uff0c\u4e3a false \u65f6\uff0c\u53d6\u503c\u4e3a 0 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10 \u8f93\u51fa\uff1a[3,1,5] \u89e3\u91ca\uff1a \u8fd9\u4e9b\u9910\u9986\u4e3a\uff1a \u9910\u9986 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10] \u9910\u9986 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5] \u9910\u9986 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4] \u9910\u9986 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3] \u9910\u9986 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \u5728\u6309\u7167 veganFriendly = 1, maxPrice = 50 \u548c maxDistance = 10 \u8fdb\u884c\u8fc7\u6ee4\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9910\u9986 3, \u9910\u9986 1 \u548c \u9910\u9986 5\uff08\u6309\u8bc4\u5206\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff09\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10 \u8f93\u51fa\uff1a[4,3,2,1,5] \u89e3\u91ca\uff1a\u9910\u9986\u4e0e\u793a\u4f8b 1 \u76f8\u540c\uff0c\u4f46\u5728 veganFriendly = 0 \u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0b\uff0c\u5e94\u8be5\u8003\u8651\u6240\u6709\u9910\u9986\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3 \u8f93\u51fa\uff1a[4,5] \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= restaurants.length <= 10^4 restaurants[i].length == 5 1 <= idi, ratingi, pricei, distancei <= 10^5 1 <= maxPrice, maxDistance <= 10^5 veganFriendlyi \u548c veganFriendly \u7684\u503c\u4e3a 0 \u6216 1 \u3002 \u6240\u6709 idi \u5404\u4e0d\u76f8\u540c\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1333/readme/#2","text":"class Solution : def filterRestaurants ( self , restaurants : List [ List [ int ]], veganFriendly : int , maxPrice : int , maxDistance : int ) -> List [ int ]: def compare ( a , b ): if a [ 1 ] != b [ 1 ]: return b [ 1 ] - a [ 1 ] return b [ 0 ] - a [ 0 ] ans = [] for res in restaurants : if (( veganFriendly == 1 and res [ 2 ] == veganFriendly ) or veganFriendly == 0 ) and res [ 3 ] <= maxPrice and res [ 4 ] <= maxDistance : ans . append ( res ) ans = sorted ( ans , key = cmp_to_key ( compare )) idx = [] for a in ans : idx . append ( a [ 0 ]) return idx","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1334/1334/index.py.html","text":"1334.py \u00b6 from typing import List INF = float ( \"inf\" ) class Solution : def FloydWarshall ( self , g ): \"\"\" g : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\u8868\u793a\uff0c\u81ea\u8eab\u8fde\u63a5\u75280\u8868\u793a \u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) for k in range ( n ): for i in range ( n ): for j in range ( n ): if g [ i ][ j ] > g [ i ][ k ] + g [ k ][ j ]: g [ i ][ j ] = g [ i ][ k ] + g [ k ][ j ] return g def findTheCity ( self , n : int , edges : List [ List [ int ]], distanceThreshold : int ) -> int : g = [ [ INF for _ in range ( n )] for _ in range ( n )] for u , v , w in edges : g [ u ][ v ] = w g [ v ][ u ] = w g = self . FloydWarshall ( g ) ans = INF point = - 1 for i in range ( n ): currAns = 0 for j in range ( n ): if i != j and g [ i ][ j ] <= distanceThreshold : currAns += 1 if currAns <= ans : ans = currAns point = i return point s = Solution () # \u7528\u4f8b1 edges = [[ 0 , 1 , 3 ],[ 1 , 2 , 1 ],[ 1 , 3 , 4 ],[ 2 , 3 , 1 ]] n = 4 distanceThreshold = 4 expected = 3 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected # 1. \u7528\u4f8b2 edges = [[ 0 , 1 , 2 ],[ 0 , 4 , 8 ],[ 1 , 2 , 3 ],[ 1 , 4 , 2 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] n = 5 distanceThreshold = 2 expected = 0 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected end = 10","title":"1334.py"},{"location":"leetcode/1334/1334/index.py.html#1334py","text":"from typing import List INF = float ( \"inf\" ) class Solution : def FloydWarshall ( self , g ): \"\"\" g : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\u8868\u793a\uff0c\u81ea\u8eab\u8fde\u63a5\u75280\u8868\u793a \u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) for k in range ( n ): for i in range ( n ): for j in range ( n ): if g [ i ][ j ] > g [ i ][ k ] + g [ k ][ j ]: g [ i ][ j ] = g [ i ][ k ] + g [ k ][ j ] return g def findTheCity ( self , n : int , edges : List [ List [ int ]], distanceThreshold : int ) -> int : g = [ [ INF for _ in range ( n )] for _ in range ( n )] for u , v , w in edges : g [ u ][ v ] = w g [ v ][ u ] = w g = self . FloydWarshall ( g ) ans = INF point = - 1 for i in range ( n ): currAns = 0 for j in range ( n ): if i != j and g [ i ][ j ] <= distanceThreshold : currAns += 1 if currAns <= ans : ans = currAns point = i return point s = Solution () # \u7528\u4f8b1 edges = [[ 0 , 1 , 3 ],[ 1 , 2 , 1 ],[ 1 , 3 , 4 ],[ 2 , 3 , 1 ]] n = 4 distanceThreshold = 4 expected = 3 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected # 1. \u7528\u4f8b2 edges = [[ 0 , 1 , 2 ],[ 0 , 4 , 8 ],[ 1 , 2 , 3 ],[ 1 , 4 , 2 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] n = 5 distanceThreshold = 2 expected = 0 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected end = 10","title":"1334.py"},{"location":"leetcode/1334/1334_2/index.py.html","text":"1334_2.py \u00b6 from typing import List import heapq import numpy as np INF = float ( \"inf\" ) class Solution : def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) # [dis, point] \u8868\u793a s->point \u6700\u77ed\u8ddd\u79bb\u662f dis distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance def Johnson ( self , g ): \"\"\" g: \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u56fe\u4e2d\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\uff0c\u81ea\u8eab\u75280 \"\"\" n = len ( g ) edges = [] for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : edges . append ( [ i , j , g [ i ][ j ]] ) for i in range ( n ): edges . append ([ n , i , 0 ]) # \u8d85\u7ea7\u6e90\u70b9\u5230\u4efb\u610f\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u90fd\u8bbe\u7f6e\u4e3a0 # \u6c42\u8d85\u7ea7\u6e90\u70b9\u5230\u5176\u4ed6\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84 distance = self . BellmanFord ( edges , n , n + 1 ) # \u7528\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5f84\u66f4\u65b0\u8fb9\u7684\u6743\u503c for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : g [ i ][ j ] = g [ i ][ j ] + distance [ i ] - distance [ j ] # \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u89e3 matrix = [] for i in range ( n ): distance = self . dijkstra ( g , i ) matrix . append ( distance ) return matrix def findTheCity ( self , n : int , edges : List [ List [ int ]], distanceThreshold : int ) -> int : g = [ [ INF for _ in range ( n )] for _ in range ( n )] for u , v , w in edges : g [ u ][ v ] = w g [ v ][ u ] = w g = self . Johnson ( g ) ans = INF point = - 1 for i in range ( n ): currAns = 0 for j in range ( n ): if i != j and g [ i ][ j ] <= distanceThreshold : currAns += 1 if currAns <= ans : ans = currAns point = i return point s = Solution () # \u7528\u4f8b1 edges = [[ 0 , 1 , 3 ],[ 1 , 2 , 1 ],[ 1 , 3 , 4 ],[ 2 , 3 , 1 ]] n = 4 distanceThreshold = 4 expected = 3 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected # 1. \u7528\u4f8b2 edges = [[ 0 , 1 , 2 ],[ 0 , 4 , 8 ],[ 1 , 2 , 3 ],[ 1 , 4 , 2 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] n = 5 distanceThreshold = 2 expected = 0 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected end = 10","title":"1334 2.py"},{"location":"leetcode/1334/1334_2/index.py.html#1334_2py","text":"from typing import List import heapq import numpy as np INF = float ( \"inf\" ) class Solution : def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) # [dis, point] \u8868\u793a s->point \u6700\u77ed\u8ddd\u79bb\u662f dis distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance def Johnson ( self , g ): \"\"\" g: \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u56fe\u4e2d\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\uff0c\u81ea\u8eab\u75280 \"\"\" n = len ( g ) edges = [] for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : edges . append ( [ i , j , g [ i ][ j ]] ) for i in range ( n ): edges . append ([ n , i , 0 ]) # \u8d85\u7ea7\u6e90\u70b9\u5230\u4efb\u610f\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u90fd\u8bbe\u7f6e\u4e3a0 # \u6c42\u8d85\u7ea7\u6e90\u70b9\u5230\u5176\u4ed6\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84 distance = self . BellmanFord ( edges , n , n + 1 ) # \u7528\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5f84\u66f4\u65b0\u8fb9\u7684\u6743\u503c for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : g [ i ][ j ] = g [ i ][ j ] + distance [ i ] - distance [ j ] # \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u89e3 matrix = [] for i in range ( n ): distance = self . dijkstra ( g , i ) matrix . append ( distance ) return matrix def findTheCity ( self , n : int , edges : List [ List [ int ]], distanceThreshold : int ) -> int : g = [ [ INF for _ in range ( n )] for _ in range ( n )] for u , v , w in edges : g [ u ][ v ] = w g [ v ][ u ] = w g = self . Johnson ( g ) ans = INF point = - 1 for i in range ( n ): currAns = 0 for j in range ( n ): if i != j and g [ i ][ j ] <= distanceThreshold : currAns += 1 if currAns <= ans : ans = currAns point = i return point s = Solution () # \u7528\u4f8b1 edges = [[ 0 , 1 , 3 ],[ 1 , 2 , 1 ],[ 1 , 3 , 4 ],[ 2 , 3 , 1 ]] n = 4 distanceThreshold = 4 expected = 3 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected # 1. \u7528\u4f8b2 edges = [[ 0 , 1 , 2 ],[ 0 , 4 , 8 ],[ 1 , 2 , 3 ],[ 1 , 4 , 2 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] n = 5 distanceThreshold = 2 expected = 0 ans = s . findTheCity ( n , edges , distanceThreshold ) assert ans == expected end = 10","title":"1334_2.py"},{"location":"leetcode/1334/1334_3/index.py.html","text":"1334_3.py \u00b6","title":"1334 3.py"},{"location":"leetcode/1334/1334_3/index.py.html#1334_3py","text":"","title":"1334_3.py"},{"location":"leetcode/1334/readme/","text":"1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709 n \u4e2a\u57ce\u5e02\uff0c\u6309\u4ece 0 \u5230 n-1 \u7f16\u53f7\u3002\u7ed9\u4f60\u4e00\u4e2a\u8fb9\u6570\u7ec4 edges\uff0c\u5176\u4e2d edges[i] = [fromi, toi, weighti] \u4ee3\u8868 fromi \u548c toi \u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u53cc\u5411\u52a0\u6743\u8fb9\uff0c\u8ddd\u79bb\u9608\u503c\u662f\u4e00\u4e2a\u6574\u6570 distanceThreshold\u3002 \u8fd4\u56de\u80fd\u901a\u8fc7\u67d0\u4e9b\u8def\u5f84\u5230\u8fbe\u5176\u4ed6\u57ce\u5e02\u6570\u76ee\u6700\u5c11\u3001\u4e14\u8def\u5f84\u8ddd\u79bb \u6700\u5927 \u4e3a distanceThreshold \u7684\u57ce\u5e02\u3002\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u57ce\u5e02\uff0c\u5219\u8fd4\u56de\u7f16\u53f7\u6700\u5927\u7684\u57ce\u5e02\u3002 \u6ce8\u610f\uff0c\u8fde\u63a5\u57ce\u5e02 i \u548c j \u7684\u8def\u5f84\u7684\u8ddd\u79bb\u7b49\u4e8e\u6cbf\u8be5\u8def\u5f84\u7684\u6240\u6709\u8fb9\u7684\u6743\u91cd\u4e4b\u548c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1an = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u57ce\u5e02\u5206\u5e03\u56fe\u5982\u4e0a\u3002 \u6bcf\u4e2a\u57ce\u5e02\u9608\u503c\u8ddd\u79bb distanceThreshold = 4 \u5185\u7684\u90bb\u5c45\u57ce\u5e02\u5206\u522b\u662f\uff1a \u57ce\u5e02 0 -> [\u57ce\u5e02 1, \u57ce\u5e02 2] \u57ce\u5e02 1 -> [\u57ce\u5e02 0, \u57ce\u5e02 2, \u57ce\u5e02 3] \u57ce\u5e02 2 -> [\u57ce\u5e02 0, \u57ce\u5e02 1, \u57ce\u5e02 3] \u57ce\u5e02 3 -> [\u57ce\u5e02 1, \u57ce\u5e02 2] \u57ce\u5e02 0 \u548c 3 \u5728\u9608\u503c\u8ddd\u79bb 4 \u4ee5\u5185\u90fd\u6709 2 \u4e2a\u90bb\u5c45\u57ce\u5e02\uff0c\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u8fd4\u56de\u57ce\u5e02 3\uff0c\u56e0\u4e3a\u5b83\u7684\u7f16\u53f7\u6700\u5927\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 8 9 10 \u8f93\u5165\uff1an = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2 \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a\u57ce\u5e02\u5206\u5e03\u56fe\u5982\u4e0a\u3002 \u6bcf\u4e2a\u57ce\u5e02\u9608\u503c\u8ddd\u79bb distanceThreshold = 2 \u5185\u7684\u90bb\u5c45\u57ce\u5e02\u5206\u522b\u662f\uff1a \u57ce\u5e02 0 -> [\u57ce\u5e02 1] \u57ce\u5e02 1 -> [\u57ce\u5e02 0, \u57ce\u5e02 4] \u57ce\u5e02 2 -> [\u57ce\u5e02 3, \u57ce\u5e02 4] \u57ce\u5e02 3 -> [\u57ce\u5e02 2, \u57ce\u5e02 4] \u57ce\u5e02 4 -> [\u57ce\u5e02 1, \u57ce\u5e02 2, \u57ce\u5e02 3] \u57ce\u5e02 0 \u5728\u9608\u503c\u8ddd\u79bb 4 \u4ee5\u5185\u53ea\u6709 1 \u4e2a\u90bb\u5c45\u57ce\u5e02\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 2 <= n <= 100 1 <= edges.length <= n * (n - 1) / 2 edges[i].length == 3 0 <= fromi < toi < n 1 <= weighti, distanceThreshold <= 10^4 \u6240\u6709 (fromi, toi) \u90fd\u662f\u4e0d\u540c\u7684\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u7528\u591a\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u6c42\u5f97\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb \u7edf\u8ba1\u6bcf\u4e2a\u57ce\u5e02\u5230\u5176\u4ed6\u57ce\u5e02 \u8ddd\u79bb\u5c0f\u4e8edistanceThreshold\u7684\u57ce\u5e02\u6570\u91cf \u8fd4\u56de\u6570\u91cf\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u5982\u679c\u6570\u91cf\u6700\u5c11\u7684\u6709\u591a\u4e2a\uff0c\u8fd4\u56de\u7f16\u53f7\u6700\u5927\u7684\u90a3\u4e2a 2.1 \u91cd\u590d\u5e73\u65b9\u6cd5 \u00b6 2.2 FloydWarshall \u7b97\u6cd5 \u00b6 Python 2.3 Jhson \u7b97\u6cd5 \u00b6 Python","title":"[1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02](https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance)"},{"location":"leetcode/1334/readme/#1334","text":"","title":"1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02"},{"location":"leetcode/1334/readme/#1","text":"\u6709 n \u4e2a\u57ce\u5e02\uff0c\u6309\u4ece 0 \u5230 n-1 \u7f16\u53f7\u3002\u7ed9\u4f60\u4e00\u4e2a\u8fb9\u6570\u7ec4 edges\uff0c\u5176\u4e2d edges[i] = [fromi, toi, weighti] \u4ee3\u8868 fromi \u548c toi \u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u53cc\u5411\u52a0\u6743\u8fb9\uff0c\u8ddd\u79bb\u9608\u503c\u662f\u4e00\u4e2a\u6574\u6570 distanceThreshold\u3002 \u8fd4\u56de\u80fd\u901a\u8fc7\u67d0\u4e9b\u8def\u5f84\u5230\u8fbe\u5176\u4ed6\u57ce\u5e02\u6570\u76ee\u6700\u5c11\u3001\u4e14\u8def\u5f84\u8ddd\u79bb \u6700\u5927 \u4e3a distanceThreshold \u7684\u57ce\u5e02\u3002\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u57ce\u5e02\uff0c\u5219\u8fd4\u56de\u7f16\u53f7\u6700\u5927\u7684\u57ce\u5e02\u3002 \u6ce8\u610f\uff0c\u8fde\u63a5\u57ce\u5e02 i \u548c j \u7684\u8def\u5f84\u7684\u8ddd\u79bb\u7b49\u4e8e\u6cbf\u8be5\u8def\u5f84\u7684\u6240\u6709\u8fb9\u7684\u6743\u91cd\u4e4b\u548c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1an = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u57ce\u5e02\u5206\u5e03\u56fe\u5982\u4e0a\u3002 \u6bcf\u4e2a\u57ce\u5e02\u9608\u503c\u8ddd\u79bb distanceThreshold = 4 \u5185\u7684\u90bb\u5c45\u57ce\u5e02\u5206\u522b\u662f\uff1a \u57ce\u5e02 0 -> [\u57ce\u5e02 1, \u57ce\u5e02 2] \u57ce\u5e02 1 -> [\u57ce\u5e02 0, \u57ce\u5e02 2, \u57ce\u5e02 3] \u57ce\u5e02 2 -> [\u57ce\u5e02 0, \u57ce\u5e02 1, \u57ce\u5e02 3] \u57ce\u5e02 3 -> [\u57ce\u5e02 1, \u57ce\u5e02 2] \u57ce\u5e02 0 \u548c 3 \u5728\u9608\u503c\u8ddd\u79bb 4 \u4ee5\u5185\u90fd\u6709 2 \u4e2a\u90bb\u5c45\u57ce\u5e02\uff0c\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u8fd4\u56de\u57ce\u5e02 3\uff0c\u56e0\u4e3a\u5b83\u7684\u7f16\u53f7\u6700\u5927\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 7 8 9 10 \u8f93\u5165\uff1an = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2 \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a\u57ce\u5e02\u5206\u5e03\u56fe\u5982\u4e0a\u3002 \u6bcf\u4e2a\u57ce\u5e02\u9608\u503c\u8ddd\u79bb distanceThreshold = 2 \u5185\u7684\u90bb\u5c45\u57ce\u5e02\u5206\u522b\u662f\uff1a \u57ce\u5e02 0 -> [\u57ce\u5e02 1] \u57ce\u5e02 1 -> [\u57ce\u5e02 0, \u57ce\u5e02 4] \u57ce\u5e02 2 -> [\u57ce\u5e02 3, \u57ce\u5e02 4] \u57ce\u5e02 3 -> [\u57ce\u5e02 2, \u57ce\u5e02 4] \u57ce\u5e02 4 -> [\u57ce\u5e02 1, \u57ce\u5e02 2, \u57ce\u5e02 3] \u57ce\u5e02 0 \u5728\u9608\u503c\u8ddd\u79bb 4 \u4ee5\u5185\u53ea\u6709 1 \u4e2a\u90bb\u5c45\u57ce\u5e02\u3002 \u63d0\u793a\uff1a 1 2 3 4 5 6 2 <= n <= 100 1 <= edges.length <= n * (n - 1) / 2 edges[i].length == 3 0 <= fromi < toi < n 1 <= weighti, distanceThreshold <= 10^4 \u6240\u6709 (fromi, toi) \u90fd\u662f\u4e0d\u540c\u7684\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1334/readme/#2","text":"\u7528\u591a\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u6c42\u5f97\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb \u7edf\u8ba1\u6bcf\u4e2a\u57ce\u5e02\u5230\u5176\u4ed6\u57ce\u5e02 \u8ddd\u79bb\u5c0f\u4e8edistanceThreshold\u7684\u57ce\u5e02\u6570\u91cf \u8fd4\u56de\u6570\u91cf\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u5982\u679c\u6570\u91cf\u6700\u5c11\u7684\u6709\u591a\u4e2a\uff0c\u8fd4\u56de\u7f16\u53f7\u6700\u5927\u7684\u90a3\u4e2a","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1334/readme/#21","text":"","title":"2.1 \u91cd\u590d\u5e73\u65b9\u6cd5"},{"location":"leetcode/1334/readme/#22-floydwarshall","text":"Python","title":"2.2 FloydWarshall \u7b97\u6cd5"},{"location":"leetcode/1334/readme/#23-jhson","text":"Python","title":"2.3 Jhson \u7b97\u6cd5"},{"location":"leetcode/1344/readme/","text":"1344. \u65f6\u949f\u6307\u9488\u7684\u5939\u89d2 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u6570 hour \u548c minutes \u3002\u8bf7\u4f60\u8fd4\u56de\u5728\u65f6\u949f\u4e0a\uff0c\u7531\u7ed9\u5b9a\u65f6\u95f4\u7684\u65f6\u9488\u548c\u5206\u9488\u7ec4\u6210\u7684\u8f83\u5c0f\u89d2\u7684\u89d2\u5ea6\uff0860 \u5355\u4f4d\u5236\uff09\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1ahour = 12, minutes = 30 \u8f93\u51fa\uff1a165 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1ahour = 3, minutes = 30 \u8f93\u51fa\uff1b75 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1ahour = 3, minutes = 15 \u8f93\u51fa\uff1a7.5 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1ahour = 4, minutes = 50 \u8f93\u51fa\uff1a155 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1ahour = 12, minutes = 0 \u8f93\u51fa\uff1a0 \u63d0\u793a\uff1a 1 2 3 1 <= hour <= 12 0 <= minutes <= 59 \u4e0e\u6807\u51c6\u7b54\u6848\u8bef\u5dee\u5728 10^-5 \u4ee5\u5185\u7684\u7ed3\u679c\u90fd\u88ab\u89c6\u4e3a\u6b63\u786e\u7ed3\u679c\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 double angleClock ( int hour , int minutes ){ hour = ( hour == 12 ) ? 0 : hour ; double hrand = hour * ( 360.0 / 12 ); double mrand = minutes * ( 360.0 / 60 ); hrand += minutes * ( 360.0 / ( 12 * 60 )); printf ( \"%f, %f \\n \" , hrand , mrand ); double ans = hrand > mrand ? ( hrand - mrand ) : ( mrand - hrand ); if ( ans > 180 ) return 360.0 - ans ; return ans ; }","title":"[1344. \u65f6\u949f\u6307\u9488\u7684\u5939\u89d2](https://leetcode-cn.com/problems/angle-between-hands-of-a-clock/)"},{"location":"leetcode/1344/readme/#1344","text":"","title":"1344. \u65f6\u949f\u6307\u9488\u7684\u5939\u89d2"},{"location":"leetcode/1344/readme/#1","text":"\u7ed9\u4f60\u4e24\u4e2a\u6570 hour \u548c minutes \u3002\u8bf7\u4f60\u8fd4\u56de\u5728\u65f6\u949f\u4e0a\uff0c\u7531\u7ed9\u5b9a\u65f6\u95f4\u7684\u65f6\u9488\u548c\u5206\u9488\u7ec4\u6210\u7684\u8f83\u5c0f\u89d2\u7684\u89d2\u5ea6\uff0860 \u5355\u4f4d\u5236\uff09\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1ahour = 12, minutes = 30 \u8f93\u51fa\uff1a165 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1ahour = 3, minutes = 30 \u8f93\u51fa\uff1b75 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1ahour = 3, minutes = 15 \u8f93\u51fa\uff1a7.5 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1ahour = 4, minutes = 50 \u8f93\u51fa\uff1a155 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1ahour = 12, minutes = 0 \u8f93\u51fa\uff1a0 \u63d0\u793a\uff1a 1 2 3 1 <= hour <= 12 0 <= minutes <= 59 \u4e0e\u6807\u51c6\u7b54\u6848\u8bef\u5dee\u5728 10^-5 \u4ee5\u5185\u7684\u7ed3\u679c\u90fd\u88ab\u89c6\u4e3a\u6b63\u786e\u7ed3\u679c\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1344/readme/#2","text":"double angleClock ( int hour , int minutes ){ hour = ( hour == 12 ) ? 0 : hour ; double hrand = hour * ( 360.0 / 12 ); double mrand = minutes * ( 360.0 / 60 ); hrand += minutes * ( 360.0 / ( 12 * 60 )); printf ( \"%f, %f \\n \" , hrand , mrand ); double ans = hrand > mrand ? ( hrand - mrand ) : ( mrand - hrand ); if ( ans > 180 ) return 360.0 - ans ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1356/readme/","text":"1356. \u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b 1 \u7684\u6570\u76ee\u6392\u5e8f \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \u3002\u8bf7\u4f60\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6309\u7167\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6570\u5b57 1 \u7684\u6570\u76ee\u5347\u5e8f\u6392\u5e8f\u3002 \u5982\u679c\u5b58\u5728\u591a\u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u6570\u76ee\u76f8\u540c\uff0c\u5219\u5fc5\u987b\u5c06\u5b83\u4eec\u6309\u7167\u6570\u503c\u5927\u5c0f\u5347\u5e8f\u6392\u5217\u3002 \u8bf7\u4f60\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aarr = [0,1,2,3,4,5,6,7,8] \u8f93\u51fa\uff1a[0,1,2,4,8,3,5,6,7] \u89e3\u91ca\uff1a[0] \u662f\u552f\u4e00\u4e00\u4e2a\u6709 0 \u4e2a 1 \u7684\u6570\u3002 [1,2,4,8] \u90fd\u6709 1 \u4e2a 1 \u3002 [3,5,6] \u6709 2 \u4e2a 1 \u3002 [7] \u6709 3 \u4e2a 1 \u3002 \u6309\u7167 1 \u7684\u4e2a\u6570\u6392\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\u6570\u7ec4\u4e3a [0,1,2,4,8,3,5,6,7] \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aarr = [1024,512,256,128,64,32,16,8,4,2,1] \u8f93\u51fa\uff1a[1,2,4,8,16,32,64,128,256,512,1024] \u89e3\u91ca\uff1a\u6570\u7ec4\u4e2d\u6240\u6709\u6574\u6570\u4e8c\u8fdb\u5236\u4e0b\u90fd\u53ea\u6709 1 \u4e2a 1 \uff0c\u6240\u4ee5\u4f60\u9700\u8981\u6309\u7167\u6570\u503c\u5927\u5c0f\u5c06\u5b83\u4eec\u6392\u5e8f\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aarr = [10000,10000] \u8f93\u51fa\uff1a[10000,10000] \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1aarr = [2,3,5,7,11,13,17,19] \u8f93\u51fa\uff1a[2,3,5,17,7,11,13,19] \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1aarr = [10,100,1000,10000] \u8f93\u51fa\uff1a[10,100,10000,1000] 2. \u89e3\u9898\u601d\u8def \u00b6 int Bits ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n = n & ( n - 1 ); } //printf(\"%d : %d\\n\", n, count); return count ; } int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; int aBits = Bits ( a ); int bBits = Bits ( b ); if ( aBits == bBits ) return a - b ; return aBits - bBits ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * sortByBits ( int * arr , int arrSize , int * returnSize ){ qsort ( arr , arrSize , sizeof ( int ), compare ); * returnSize = arrSize ; return arr ; }","title":"[1356. \u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b 1 \u7684\u6570\u76ee\u6392\u5e8f](https://leetcode-cn.com/problems/sort-integers-by-the-number-of-1-bits/)"},{"location":"leetcode/1356/readme/#1356-1","text":"","title":"1356. \u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b 1 \u7684\u6570\u76ee\u6392\u5e8f"},{"location":"leetcode/1356/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \u3002\u8bf7\u4f60\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6309\u7167\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6570\u5b57 1 \u7684\u6570\u76ee\u5347\u5e8f\u6392\u5e8f\u3002 \u5982\u679c\u5b58\u5728\u591a\u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u6570\u76ee\u76f8\u540c\uff0c\u5219\u5fc5\u987b\u5c06\u5b83\u4eec\u6309\u7167\u6570\u503c\u5927\u5c0f\u5347\u5e8f\u6392\u5217\u3002 \u8bf7\u4f60\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aarr = [0,1,2,3,4,5,6,7,8] \u8f93\u51fa\uff1a[0,1,2,4,8,3,5,6,7] \u89e3\u91ca\uff1a[0] \u662f\u552f\u4e00\u4e00\u4e2a\u6709 0 \u4e2a 1 \u7684\u6570\u3002 [1,2,4,8] \u90fd\u6709 1 \u4e2a 1 \u3002 [3,5,6] \u6709 2 \u4e2a 1 \u3002 [7] \u6709 3 \u4e2a 1 \u3002 \u6309\u7167 1 \u7684\u4e2a\u6570\u6392\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\u6570\u7ec4\u4e3a [0,1,2,4,8,3,5,6,7] \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aarr = [1024,512,256,128,64,32,16,8,4,2,1] \u8f93\u51fa\uff1a[1,2,4,8,16,32,64,128,256,512,1024] \u89e3\u91ca\uff1a\u6570\u7ec4\u4e2d\u6240\u6709\u6574\u6570\u4e8c\u8fdb\u5236\u4e0b\u90fd\u53ea\u6709 1 \u4e2a 1 \uff0c\u6240\u4ee5\u4f60\u9700\u8981\u6309\u7167\u6570\u503c\u5927\u5c0f\u5c06\u5b83\u4eec\u6392\u5e8f\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aarr = [10000,10000] \u8f93\u51fa\uff1a[10000,10000] \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1aarr = [2,3,5,7,11,13,17,19] \u8f93\u51fa\uff1a[2,3,5,17,7,11,13,19] \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1aarr = [10,100,1000,10000] \u8f93\u51fa\uff1a[10,100,10000,1000]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1356/readme/#2","text":"int Bits ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n = n & ( n - 1 ); } //printf(\"%d : %d\\n\", n, count); return count ; } int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; int aBits = Bits ( a ); int bBits = Bits ( b ); if ( aBits == bBits ) return a - b ; return aBits - bBits ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * sortByBits ( int * arr , int arrSize , int * returnSize ){ qsort ( arr , arrSize , sizeof ( int ), compare ); * returnSize = arrSize ; return arr ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1360/readme/","text":"1360. \u65e5\u671f\u4e4b\u95f4\u9694\u51e0\u5929 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u8bf7\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u9694\u4e86\u591a\u5c11\u5929\u3002 \u65e5\u671f\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u7ed9\u51fa\uff0c\u683c\u5f0f\u4e3a YYYY-MM-DD\uff0c\u5982\u793a\u4f8b\u6240\u793a\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1adate1 = \"2019-06-29\", date2 = \"2019-06-30\" \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1adate1 = \"2020-01-15\", date2 = \"2019-12-31\" \u8f93\u51fa\uff1a15 \u63d0\u793a\uff1a 1 \u7ed9\u5b9a\u7684\u65e5\u671f\u662f 1971 \u5e74\u5230 2100 \u5e74\u4e4b\u95f4\u7684\u6709\u6548\u65e5\u671f\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 void parse ( char * string , int * year , int * month , int * day ) { int yyyy = ( string [ 0 ] - '0' ) * 1000 + ( string [ 1 ] - '0' ) * 100 + ( string [ 2 ] - '0' ) * 10 + ( string [ 3 ] - '0' ); int mm = ( string [ 5 ] - '0' ) * 10 + ( string [ 6 ] - '0' ); int dd = ( string [ 8 ] - '0' ) * 10 + ( string [ 9 ] - '0' ); * year = yyyy , * month = mm , * day = dd ; return ; } int getMonthDay ( int year , int m ) { int ans = 0 ; switch ( m ){ case 1 : case 3 : case 5 : case 7 : case 8 : case 10 : case 12 : ans = 31 ; break ; case 4 : case 6 : case 9 : case 11 : ans = 30 ; break ; case 2 : if ( year % 400 == 0 || ( year % 100 != 0 && year % 4 == 0 )) ans = 29 ; else ans = 28 ; break ; } return ans ; } int days ( int year , int month , int day ) { int ans = day ; for ( int i = 1 ; i < month ; i ++ ) { ans += getMonthDay ( year , i ); } printf ( \"%d-%d-%d : %d \\n \" , year , month , day , ans ); return ans ; } int daysBetweenDates ( char * date1 , char * date2 ){ int y1 , m1 , d1 ; int y2 , m2 , d2 ; int ans ; parse ( date1 , & y1 , & m1 , & d1 ); parse ( date2 , & y2 , & m2 , & d2 ); if ( y1 >= y2 ) { int dd1 = 0 ; dd1 = days ( y1 , m1 , d1 ); for ( int yy = y1 - 1 ; yy >= y2 ; yy -- ) { dd1 += days ( yy , 12 , 31 ); } int dd2 = days ( y2 , m2 , d2 ); if ( dd1 > dd2 ) ans = dd1 - dd2 ; else ans = dd2 - dd1 ; return ans ; } return daysBetweenDates ( date2 , date1 ); }","title":"[1360. \u65e5\u671f\u4e4b\u95f4\u9694\u51e0\u5929](https://leetcode-cn.com/problems/number-of-days-between-two-dates/)"},{"location":"leetcode/1360/readme/#1360","text":"","title":"1360. \u65e5\u671f\u4e4b\u95f4\u9694\u51e0\u5929"},{"location":"leetcode/1360/readme/#1","text":"\u8bf7\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u9694\u4e86\u591a\u5c11\u5929\u3002 \u65e5\u671f\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u7ed9\u51fa\uff0c\u683c\u5f0f\u4e3a YYYY-MM-DD\uff0c\u5982\u793a\u4f8b\u6240\u793a\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1adate1 = \"2019-06-29\", date2 = \"2019-06-30\" \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1adate1 = \"2020-01-15\", date2 = \"2019-12-31\" \u8f93\u51fa\uff1a15 \u63d0\u793a\uff1a 1 \u7ed9\u5b9a\u7684\u65e5\u671f\u662f 1971 \u5e74\u5230 2100 \u5e74\u4e4b\u95f4\u7684\u6709\u6548\u65e5\u671f\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1360/readme/#2","text":"void parse ( char * string , int * year , int * month , int * day ) { int yyyy = ( string [ 0 ] - '0' ) * 1000 + ( string [ 1 ] - '0' ) * 100 + ( string [ 2 ] - '0' ) * 10 + ( string [ 3 ] - '0' ); int mm = ( string [ 5 ] - '0' ) * 10 + ( string [ 6 ] - '0' ); int dd = ( string [ 8 ] - '0' ) * 10 + ( string [ 9 ] - '0' ); * year = yyyy , * month = mm , * day = dd ; return ; } int getMonthDay ( int year , int m ) { int ans = 0 ; switch ( m ){ case 1 : case 3 : case 5 : case 7 : case 8 : case 10 : case 12 : ans = 31 ; break ; case 4 : case 6 : case 9 : case 11 : ans = 30 ; break ; case 2 : if ( year % 400 == 0 || ( year % 100 != 0 && year % 4 == 0 )) ans = 29 ; else ans = 28 ; break ; } return ans ; } int days ( int year , int month , int day ) { int ans = day ; for ( int i = 1 ; i < month ; i ++ ) { ans += getMonthDay ( year , i ); } printf ( \"%d-%d-%d : %d \\n \" , year , month , day , ans ); return ans ; } int daysBetweenDates ( char * date1 , char * date2 ){ int y1 , m1 , d1 ; int y2 , m2 , d2 ; int ans ; parse ( date1 , & y1 , & m1 , & d1 ); parse ( date2 , & y2 , & m2 , & d2 ); if ( y1 >= y2 ) { int dd1 = 0 ; dd1 = days ( y1 , m1 , d1 ); for ( int yy = y1 - 1 ; yy >= y2 ; yy -- ) { dd1 += days ( yy , 12 , 31 ); } int dd2 = days ( y2 , m2 , d2 ); if ( dd1 > dd2 ) ans = dd1 - dd2 ; else ans = dd2 - dd1 ; return ans ; } return daysBetweenDates ( date2 , date1 ); }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1370/readme/","text":"1370. \u4e0a\u5347\u4e0b\u964d\u5b57\u7b26\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u6839\u636e\u4e0b\u9762\u7684\u7b97\u6cd5\u91cd\u65b0\u6784\u9020\u5b57\u7b26\u4e32\uff1a \u4ece s \u4e2d\u9009\u51fa \u6700\u5c0f \u7684\u5b57\u7b26\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u540e\u9762\u3002 \u4ece s \u5269\u4f59\u5b57\u7b26\u4e2d\u9009\u51fa \u6700\u5c0f \u7684\u5b57\u7b26\uff0c\u4e14\u8be5\u5b57\u7b26\u6bd4\u4e0a\u4e00\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\u5927\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u3002 \u91cd\u590d\u6b65\u9aa4 2 \uff0c\u76f4\u5230\u4f60\u6ca1\u6cd5\u4ece s \u4e2d\u9009\u62e9\u5b57\u7b26\u3002 \u4ece s \u4e2d\u9009\u51fa \u6700\u5927 \u7684\u5b57\u7b26\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u540e\u9762\u3002 \u4ece s \u5269\u4f59\u5b57\u7b26\u4e2d\u9009\u51fa \u6700\u5927 \u7684\u5b57\u7b26\uff0c\u4e14\u8be5\u5b57\u7b26\u6bd4\u4e0a\u4e00\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\u5c0f\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u3002 \u91cd\u590d\u6b65\u9aa4 5 \uff0c\u76f4\u5230\u4f60\u6ca1\u6cd5\u4ece s \u4e2d\u9009\u62e9\u5b57\u7b26\u3002 \u91cd\u590d\u6b65\u9aa4 1 \u5230 6 \uff0c\u76f4\u5230 s \u4e2d\u6240\u6709\u5b57\u7b26\u90fd\u5df2\u7ecf\u88ab\u9009\u8fc7\u3002 \u5728\u4efb\u4f55\u4e00\u6b65\u4e2d\uff0c\u5982\u679c\u6700\u5c0f\u6216\u8005\u6700\u5927\u5b57\u7b26\u4e0d\u6b62\u4e00\u4e2a \uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u3002 \u8bf7\u4f60\u8fd4\u56de\u5c06 s \u4e2d\u5b57\u7b26\u91cd\u65b0\u6392\u5e8f\u540e\u7684 \u7ed3\u679c\u5b57\u7b26\u4e32 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1as = \"aaaabbbbcccc\" \u8f93\u51fa\uff1a\"abccbaabccba\" \u89e3\u91ca\uff1a\u7b2c\u4e00\u8f6e\u7684\u6b65\u9aa4 1\uff0c2\uff0c3 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abc\" \u7b2c\u4e00\u8f6e\u7684\u6b65\u9aa4 4\uff0c5\uff0c6 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccba\" \u7b2c\u4e00\u8f6e\u7ed3\u675f\uff0c\u73b0\u5728 s = \"aabbcc\" \uff0c\u6211\u4eec\u518d\u6b21\u56de\u5230\u6b65\u9aa4 1 \u7b2c\u4e8c\u8f6e\u7684\u6b65\u9aa4 1\uff0c2\uff0c3 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccbaabc\" \u7b2c\u4e8c\u8f6e\u7684\u6b65\u9aa4 4\uff0c5\uff0c6 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccbaabccba\" \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1as = \"rat\" \u8f93\u51fa\uff1a\"art\" \u89e3\u91ca\uff1a\u5355\u8bcd \"rat\" \u5728\u4e0a\u8ff0\u7b97\u6cd5\u91cd\u6392\u5e8f\u4ee5\u540e\u53d8\u6210 \"art\" \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1as = \"leetcode\" \u8f93\u51fa\uff1a\"cdelotee\" \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1as = \"ggggggg\" \u8f93\u51fa\uff1a\"ggggggg\" \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1as = \"spo\" \u8f93\u51fa\uff1a\"ops\" \u63d0\u793a\uff1a 1 2 1 <= s.length <= 500 s \u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 #define MAX_CHAR 128 #define MAX_ANS 501 int map [ MAX_CHAR ]; void init () { for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { map [ i ] = 0 ; } } char * sortString ( char * s ){ if ( s == NULL ) return s ; int n = strlen ( s ); int i ; for ( i = 0 ; i < n ; i ++ ) { map [ s [ i ] ] ++ ; } char * ans = ( char * ) malloc ( sizeof ( char ) * MAX_ANS ); int ansEnd = 0 ; while ( n > 0 ) { for ( i = 0 ; i < MAX_CHAR ; i ++ ) { if ( map [ i ] > 0 ) { ans [ ansEnd ++ ] = ( char ) i ; n -- ; map [ i ] -- ; } } for ( int i = MAX_CHAR - 1 ; i >= 0 ; i -- ) { if ( map [ i ] > 0 ) { ans [ ansEnd ++ ] = ( char ) i ; n -- ; map [ i ] -- ; } } } ans [ ansEnd ++ ] = '\\0' ; return ans ; }","title":"[1370. \u4e0a\u5347\u4e0b\u964d\u5b57\u7b26\u4e32](https://leetcode-cn.com/problems/increasing-decreasing-string/)"},{"location":"leetcode/1370/readme/#1370","text":"","title":"1370. \u4e0a\u5347\u4e0b\u964d\u5b57\u7b26\u4e32"},{"location":"leetcode/1370/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u6839\u636e\u4e0b\u9762\u7684\u7b97\u6cd5\u91cd\u65b0\u6784\u9020\u5b57\u7b26\u4e32\uff1a \u4ece s \u4e2d\u9009\u51fa \u6700\u5c0f \u7684\u5b57\u7b26\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u540e\u9762\u3002 \u4ece s \u5269\u4f59\u5b57\u7b26\u4e2d\u9009\u51fa \u6700\u5c0f \u7684\u5b57\u7b26\uff0c\u4e14\u8be5\u5b57\u7b26\u6bd4\u4e0a\u4e00\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\u5927\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u3002 \u91cd\u590d\u6b65\u9aa4 2 \uff0c\u76f4\u5230\u4f60\u6ca1\u6cd5\u4ece s \u4e2d\u9009\u62e9\u5b57\u7b26\u3002 \u4ece s \u4e2d\u9009\u51fa \u6700\u5927 \u7684\u5b57\u7b26\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u540e\u9762\u3002 \u4ece s \u5269\u4f59\u5b57\u7b26\u4e2d\u9009\u51fa \u6700\u5927 \u7684\u5b57\u7b26\uff0c\u4e14\u8be5\u5b57\u7b26\u6bd4\u4e0a\u4e00\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\u5c0f\uff0c\u5c06\u5b83 \u63a5\u5728 \u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u3002 \u91cd\u590d\u6b65\u9aa4 5 \uff0c\u76f4\u5230\u4f60\u6ca1\u6cd5\u4ece s \u4e2d\u9009\u62e9\u5b57\u7b26\u3002 \u91cd\u590d\u6b65\u9aa4 1 \u5230 6 \uff0c\u76f4\u5230 s \u4e2d\u6240\u6709\u5b57\u7b26\u90fd\u5df2\u7ecf\u88ab\u9009\u8fc7\u3002 \u5728\u4efb\u4f55\u4e00\u6b65\u4e2d\uff0c\u5982\u679c\u6700\u5c0f\u6216\u8005\u6700\u5927\u5b57\u7b26\u4e0d\u6b62\u4e00\u4e2a \uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u3002 \u8bf7\u4f60\u8fd4\u56de\u5c06 s \u4e2d\u5b57\u7b26\u91cd\u65b0\u6392\u5e8f\u540e\u7684 \u7ed3\u679c\u5b57\u7b26\u4e32 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1as = \"aaaabbbbcccc\" \u8f93\u51fa\uff1a\"abccbaabccba\" \u89e3\u91ca\uff1a\u7b2c\u4e00\u8f6e\u7684\u6b65\u9aa4 1\uff0c2\uff0c3 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abc\" \u7b2c\u4e00\u8f6e\u7684\u6b65\u9aa4 4\uff0c5\uff0c6 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccba\" \u7b2c\u4e00\u8f6e\u7ed3\u675f\uff0c\u73b0\u5728 s = \"aabbcc\" \uff0c\u6211\u4eec\u518d\u6b21\u56de\u5230\u6b65\u9aa4 1 \u7b2c\u4e8c\u8f6e\u7684\u6b65\u9aa4 1\uff0c2\uff0c3 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccbaabc\" \u7b2c\u4e8c\u8f6e\u7684\u6b65\u9aa4 4\uff0c5\uff0c6 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccbaabccba\" \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1as = \"rat\" \u8f93\u51fa\uff1a\"art\" \u89e3\u91ca\uff1a\u5355\u8bcd \"rat\" \u5728\u4e0a\u8ff0\u7b97\u6cd5\u91cd\u6392\u5e8f\u4ee5\u540e\u53d8\u6210 \"art\" \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1as = \"leetcode\" \u8f93\u51fa\uff1a\"cdelotee\" \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1as = \"ggggggg\" \u8f93\u51fa\uff1a\"ggggggg\" \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1as = \"spo\" \u8f93\u51fa\uff1a\"ops\" \u63d0\u793a\uff1a 1 2 1 <= s.length <= 500 s \u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1370/readme/#2","text":"#define MAX_CHAR 128 #define MAX_ANS 501 int map [ MAX_CHAR ]; void init () { for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { map [ i ] = 0 ; } } char * sortString ( char * s ){ if ( s == NULL ) return s ; int n = strlen ( s ); int i ; for ( i = 0 ; i < n ; i ++ ) { map [ s [ i ] ] ++ ; } char * ans = ( char * ) malloc ( sizeof ( char ) * MAX_ANS ); int ansEnd = 0 ; while ( n > 0 ) { for ( i = 0 ; i < MAX_CHAR ; i ++ ) { if ( map [ i ] > 0 ) { ans [ ansEnd ++ ] = ( char ) i ; n -- ; map [ i ] -- ; } } for ( int i = MAX_CHAR - 1 ; i >= 0 ; i -- ) { if ( map [ i ] > 0 ) { ans [ ansEnd ++ ] = ( char ) i ; n -- ; map [ i ] -- ; } } } ans [ ansEnd ++ ] = '\\0' ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1376/readme/","text":"1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u516c\u53f8\u91cc\u6709 n \u540d\u5458\u5de5\uff0c\u6bcf\u4e2a\u5458\u5de5\u7684 ID \u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u7f16\u53f7\u4ece 0 \u5230 n - 1\u3002\u516c\u53f8\u7684\u603b\u8d1f\u8d23\u4eba\u901a\u8fc7 headID \u8fdb\u884c\u6807\u8bc6\u3002 \u5728 manager \u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a\u76f4\u5c5e\u8d1f\u8d23\u4eba\uff0c\u5176\u4e2d manager[i] \u662f\u7b2c i \u540d\u5458\u5de5\u7684\u76f4\u5c5e\u8d1f\u8d23\u4eba\u3002\u5bf9\u4e8e\u603b\u8d1f\u8d23\u4eba\uff0cmanager[headID] = -1\u3002\u9898\u76ee\u4fdd\u8bc1\u4ece\u5c5e\u5173\u7cfb\u53ef\u4ee5\u7528\u6811\u7ed3\u6784\u663e\u793a\u3002 \u516c\u53f8\u603b\u8d1f\u8d23\u4eba\u60f3\u8981\u5411\u516c\u53f8\u6240\u6709\u5458\u5de5\u901a\u544a\u4e00\u6761\u7d27\u6025\u6d88\u606f\u3002\u4ed6\u5c06\u4f1a\u9996\u5148\u901a\u77e5\u4ed6\u7684\u76f4\u5c5e\u4e0b\u5c5e\u4eec\uff0c\u7136\u540e\u7531\u8fd9\u4e9b\u4e0b\u5c5e\u901a\u77e5\u4ed6\u4eec\u7684\u4e0b\u5c5e\uff0c\u76f4\u5230\u6240\u6709\u7684\u5458\u5de5\u90fd\u5f97\u77e5\u8fd9\u6761\u7d27\u6025\u6d88\u606f\u3002 \u7b2c i \u540d\u5458\u5de5\u9700\u8981 informTime[i] \u5206\u949f\u6765\u901a\u77e5\u5b83\u7684\u6240\u6709\u76f4\u5c5e\u4e0b\u5c5e\uff08\u4e5f\u5c31\u662f\u8bf4\u5728 informTime[i] \u5206\u949f\u540e\uff0c\u4ed6\u7684\u6240\u6709\u76f4\u5c5e\u4e0b\u5c5e\u90fd\u53ef\u4ee5\u5f00\u59cb\u4f20\u64ad\u8fd9\u4e00\u6d88\u606f\uff09\u3002 \u8fd4\u56de\u901a\u77e5\u6240\u6709\u5458\u5de5\u8fd9\u4e00\u7d27\u6025\u6d88\u606f\u6240\u9700\u8981\u7684 \u5206\u949f\u6570 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1an = 1, headID = 0, manager = [-1], informTime = [0] \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a\u516c\u53f8\u603b\u8d1f\u8d23\u4eba\u662f\u8be5\u516c\u53f8\u7684\u552f\u4e00\u4e00\u540d\u5458\u5de5\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1an = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0] \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1aid = 2 \u7684\u5458\u5de5\u662f\u516c\u53f8\u7684\u603b\u8d1f\u8d23\u4eba\uff0c\u4e5f\u662f\u5176\u4ed6\u6240\u6709\u5458\u5de5\u7684\u76f4\u5c5e\u8d1f\u8d23\u4eba\uff0c\u4ed6\u9700\u8981 1 \u5206\u949f\u6765\u901a\u77e5\u6240\u6709\u5458\u5de5\u3002 \u4e0a\u56fe\u663e\u793a\u4e86\u516c\u53f8\u5458\u5de5\u7684\u6811\u7ed3\u6784\u3002 \u793a\u4f8b 3\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1an = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1] \u8f93\u51fa\uff1a21 \u89e3\u91ca\uff1a\u603b\u8d1f\u8d23\u4eba id = 6\u3002\u4ed6\u5c06\u5728 1 \u5206\u949f\u5185\u901a\u77e5 id = 5 \u7684\u5458\u5de5\u3002 id = 5 \u7684\u5458\u5de5\u5c06\u5728 2 \u5206\u949f\u5185\u901a\u77e5 id = 4 \u7684\u5458\u5de5\u3002 id = 4 \u7684\u5458\u5de5\u5c06\u5728 3 \u5206\u949f\u5185\u901a\u77e5 id = 3 \u7684\u5458\u5de5\u3002 id = 3 \u7684\u5458\u5de5\u5c06\u5728 4 \u5206\u949f\u5185\u901a\u77e5 id = 2 \u7684\u5458\u5de5\u3002 id = 2 \u7684\u5458\u5de5\u5c06\u5728 5 \u5206\u949f\u5185\u901a\u77e5 id = 1 \u7684\u5458\u5de5\u3002 id = 1 \u7684\u5458\u5de5\u5c06\u5728 6 \u5206\u949f\u5185\u901a\u77e5 id = 0 \u7684\u5458\u5de5\u3002 \u6240\u9700\u65f6\u95f4 = 1 + 2 + 3 + 4 + 5 + 6 = 21 \u3002 \u793a\u4f8b 4\uff1a 1 2 3 4 5 \u8f93\u5165\uff1an = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0] \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u7b2c\u4e00\u5206\u949f\u603b\u8d1f\u8d23\u4eba\u901a\u77e5\u5458\u5de5 1 \u548c 2 \u3002 \u7b2c\u4e8c\u5206\u949f\u4ed6\u4eec\u5c06\u4f1a\u901a\u77e5\u5458\u5de5 3, 4, 5 \u548c 6 \u3002 \u7b2c\u4e09\u5206\u949f\u4ed6\u4eec\u5c06\u4f1a\u901a\u77e5\u5269\u4e0b\u7684\u5458\u5de5\u3002 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1an = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914] \u8f93\u51fa\uff1a1076 \u63d0\u793a\uff1a 1 2 3 4 5 6 7 8 9 1 <= n <= 10^5 0 <= headID < n manager.length == n 0 <= manager[i] < n manager[headID] == -1 informTime.length == n 0 <= informTime[i] <= 1000 \u5982\u679c\u5458\u5de5 i \u6ca1\u6709\u4e0b\u5c5e\uff0cinformTime[i] == 0 \u3002 \u9898\u76ee \u4fdd\u8bc1 \u6240\u6709\u5458\u5de5\u90fd\u53ef\u4ee5\u6536\u5230\u901a\u77e5\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u8d85\u65f6\u7684\u66b4\u529b\u89e3\u6cd5\uff1a #define MAXN 100000 int * managerG ; int * informTimeG ; int managerSizeG ; int informTimeSizeG ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int dfs ( int i , int cost ) { if ( informTimeG [ i ] == 0 ) { return cost ; } int ans = 0 ; for ( int j = 0 ; j < managerSizeG ; j ++ ) { if ( managerG [ j ] == i ) { int tmp = dfs ( j , cost + informTimeG [ i ]); ans = max ( ans , tmp ); } } return ans ; } int numOfMinutes ( int n , int headID , int * manager , int managerSize , int * informTime , int informTimeSize ){ if ( n <= 0 || manager == NULL || managerSize <= 0 || informTime == NULL || informTimeSize <= 0 ) return 0 ; int ans = 0 ; managerG = manager ; managerSizeG = managerSize ; informTimeG = informTime ; informTimeSizeG = informTimeSize ; ans = dfs ( headID , 0 ); return ans ; }","title":"[1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4](https://leetcode-cn.com/problems/time-needed-to-inform-all-employees/)"},{"location":"leetcode/1376/readme/#1376","text":"","title":"1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4"},{"location":"leetcode/1376/readme/#1","text":"\u516c\u53f8\u91cc\u6709 n \u540d\u5458\u5de5\uff0c\u6bcf\u4e2a\u5458\u5de5\u7684 ID \u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u7f16\u53f7\u4ece 0 \u5230 n - 1\u3002\u516c\u53f8\u7684\u603b\u8d1f\u8d23\u4eba\u901a\u8fc7 headID \u8fdb\u884c\u6807\u8bc6\u3002 \u5728 manager \u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a\u76f4\u5c5e\u8d1f\u8d23\u4eba\uff0c\u5176\u4e2d manager[i] \u662f\u7b2c i \u540d\u5458\u5de5\u7684\u76f4\u5c5e\u8d1f\u8d23\u4eba\u3002\u5bf9\u4e8e\u603b\u8d1f\u8d23\u4eba\uff0cmanager[headID] = -1\u3002\u9898\u76ee\u4fdd\u8bc1\u4ece\u5c5e\u5173\u7cfb\u53ef\u4ee5\u7528\u6811\u7ed3\u6784\u663e\u793a\u3002 \u516c\u53f8\u603b\u8d1f\u8d23\u4eba\u60f3\u8981\u5411\u516c\u53f8\u6240\u6709\u5458\u5de5\u901a\u544a\u4e00\u6761\u7d27\u6025\u6d88\u606f\u3002\u4ed6\u5c06\u4f1a\u9996\u5148\u901a\u77e5\u4ed6\u7684\u76f4\u5c5e\u4e0b\u5c5e\u4eec\uff0c\u7136\u540e\u7531\u8fd9\u4e9b\u4e0b\u5c5e\u901a\u77e5\u4ed6\u4eec\u7684\u4e0b\u5c5e\uff0c\u76f4\u5230\u6240\u6709\u7684\u5458\u5de5\u90fd\u5f97\u77e5\u8fd9\u6761\u7d27\u6025\u6d88\u606f\u3002 \u7b2c i \u540d\u5458\u5de5\u9700\u8981 informTime[i] \u5206\u949f\u6765\u901a\u77e5\u5b83\u7684\u6240\u6709\u76f4\u5c5e\u4e0b\u5c5e\uff08\u4e5f\u5c31\u662f\u8bf4\u5728 informTime[i] \u5206\u949f\u540e\uff0c\u4ed6\u7684\u6240\u6709\u76f4\u5c5e\u4e0b\u5c5e\u90fd\u53ef\u4ee5\u5f00\u59cb\u4f20\u64ad\u8fd9\u4e00\u6d88\u606f\uff09\u3002 \u8fd4\u56de\u901a\u77e5\u6240\u6709\u5458\u5de5\u8fd9\u4e00\u7d27\u6025\u6d88\u606f\u6240\u9700\u8981\u7684 \u5206\u949f\u6570 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1an = 1, headID = 0, manager = [-1], informTime = [0] \u8f93\u51fa\uff1a0 \u89e3\u91ca\uff1a\u516c\u53f8\u603b\u8d1f\u8d23\u4eba\u662f\u8be5\u516c\u53f8\u7684\u552f\u4e00\u4e00\u540d\u5458\u5de5\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1an = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0] \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1aid = 2 \u7684\u5458\u5de5\u662f\u516c\u53f8\u7684\u603b\u8d1f\u8d23\u4eba\uff0c\u4e5f\u662f\u5176\u4ed6\u6240\u6709\u5458\u5de5\u7684\u76f4\u5c5e\u8d1f\u8d23\u4eba\uff0c\u4ed6\u9700\u8981 1 \u5206\u949f\u6765\u901a\u77e5\u6240\u6709\u5458\u5de5\u3002 \u4e0a\u56fe\u663e\u793a\u4e86\u516c\u53f8\u5458\u5de5\u7684\u6811\u7ed3\u6784\u3002 \u793a\u4f8b 3\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1an = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1] \u8f93\u51fa\uff1a21 \u89e3\u91ca\uff1a\u603b\u8d1f\u8d23\u4eba id = 6\u3002\u4ed6\u5c06\u5728 1 \u5206\u949f\u5185\u901a\u77e5 id = 5 \u7684\u5458\u5de5\u3002 id = 5 \u7684\u5458\u5de5\u5c06\u5728 2 \u5206\u949f\u5185\u901a\u77e5 id = 4 \u7684\u5458\u5de5\u3002 id = 4 \u7684\u5458\u5de5\u5c06\u5728 3 \u5206\u949f\u5185\u901a\u77e5 id = 3 \u7684\u5458\u5de5\u3002 id = 3 \u7684\u5458\u5de5\u5c06\u5728 4 \u5206\u949f\u5185\u901a\u77e5 id = 2 \u7684\u5458\u5de5\u3002 id = 2 \u7684\u5458\u5de5\u5c06\u5728 5 \u5206\u949f\u5185\u901a\u77e5 id = 1 \u7684\u5458\u5de5\u3002 id = 1 \u7684\u5458\u5de5\u5c06\u5728 6 \u5206\u949f\u5185\u901a\u77e5 id = 0 \u7684\u5458\u5de5\u3002 \u6240\u9700\u65f6\u95f4 = 1 + 2 + 3 + 4 + 5 + 6 = 21 \u3002 \u793a\u4f8b 4\uff1a 1 2 3 4 5 \u8f93\u5165\uff1an = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0] \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u7b2c\u4e00\u5206\u949f\u603b\u8d1f\u8d23\u4eba\u901a\u77e5\u5458\u5de5 1 \u548c 2 \u3002 \u7b2c\u4e8c\u5206\u949f\u4ed6\u4eec\u5c06\u4f1a\u901a\u77e5\u5458\u5de5 3, 4, 5 \u548c 6 \u3002 \u7b2c\u4e09\u5206\u949f\u4ed6\u4eec\u5c06\u4f1a\u901a\u77e5\u5269\u4e0b\u7684\u5458\u5de5\u3002 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1an = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914] \u8f93\u51fa\uff1a1076 \u63d0\u793a\uff1a 1 2 3 4 5 6 7 8 9 1 <= n <= 10^5 0 <= headID < n manager.length == n 0 <= manager[i] < n manager[headID] == -1 informTime.length == n 0 <= informTime[i] <= 1000 \u5982\u679c\u5458\u5de5 i \u6ca1\u6709\u4e0b\u5c5e\uff0cinformTime[i] == 0 \u3002 \u9898\u76ee \u4fdd\u8bc1 \u6240\u6709\u5458\u5de5\u90fd\u53ef\u4ee5\u6536\u5230\u901a\u77e5\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1376/readme/#2","text":"\u8d85\u65f6\u7684\u66b4\u529b\u89e3\u6cd5\uff1a #define MAXN 100000 int * managerG ; int * informTimeG ; int managerSizeG ; int informTimeSizeG ; int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int dfs ( int i , int cost ) { if ( informTimeG [ i ] == 0 ) { return cost ; } int ans = 0 ; for ( int j = 0 ; j < managerSizeG ; j ++ ) { if ( managerG [ j ] == i ) { int tmp = dfs ( j , cost + informTimeG [ i ]); ans = max ( ans , tmp ); } } return ans ; } int numOfMinutes ( int n , int headID , int * manager , int managerSize , int * informTime , int informTimeSize ){ if ( n <= 0 || manager == NULL || managerSize <= 0 || informTime == NULL || informTimeSize <= 0 ) return 0 ; int ans = 0 ; managerG = manager ; managerSizeG = managerSize ; informTimeG = informTime ; informTimeSizeG = informTimeSize ; ans = dfs ( headID , 0 ); return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/138/138/index.c.html","text":"138.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for a Node. struct Node { int val ; struct TreeNode * next ; struct TreeNode * random ; }; struct Node * copyRandomList ( struct Node * head ) { if ( head == NULL ) { return NULL ; } struct Node * iter = head ; while ( iter ) { struct Node * newNode = ( struct Node * ) malloc ( sizeof ( struct Node )); newNode -> val = iter -> val ; newNode -> next = iter -> next ; iter -> next = newNode ; iter = newNode -> next ; } iter = head ; while ( iter && iter -> next ) { iter -> next -> random = ( iter -> random == NULL ? NULL : iter -> random -> next ); iter = iter -> next -> next ; } iter = head -> next ; while ( iter && iter -> next ) { iter -> next = iter -> next -> next ; iter = iter -> next ; } return head -> next ; }","title":"138.c"},{"location":"leetcode/138/138/index.c.html#138c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for a Node. struct Node { int val ; struct TreeNode * next ; struct TreeNode * random ; }; struct Node * copyRandomList ( struct Node * head ) { if ( head == NULL ) { return NULL ; } struct Node * iter = head ; while ( iter ) { struct Node * newNode = ( struct Node * ) malloc ( sizeof ( struct Node )); newNode -> val = iter -> val ; newNode -> next = iter -> next ; iter -> next = newNode ; iter = newNode -> next ; } iter = head ; while ( iter && iter -> next ) { iter -> next -> random = ( iter -> random == NULL ? NULL : iter -> random -> next ); iter = iter -> next -> next ; } iter = head -> next ; while ( iter && iter -> next ) { iter -> next = iter -> next -> next ; iter = iter -> next ; } return head -> next ; }","title":"138.c"},{"location":"leetcode/138/138/index.cpp.html","text":"138.cpp \u00b6","title":"138.cpp"},{"location":"leetcode/138/138/index.cpp.html#138cpp","text":"","title":"138.cpp"},{"location":"leetcode/138/138/index.py.html","text":"138.py \u00b6","title":"138.py"},{"location":"leetcode/138/138/index.py.html#138py","text":"","title":"138.py"},{"location":"leetcode/138/readme/","text":"138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002 \u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684 \u6df1\u62f7\u8d1d\u3002 \u6211\u4eec\u7528\u4e00\u4e2a\u7531 n \u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u94fe\u8868\u6765\u8868\u793a\u8f93\u5165/\u8f93\u51fa\u4e2d\u7684\u94fe\u8868\u3002\u6bcf\u4e2a\u8282\u70b9\u7528\u4e00\u4e2a [val, random_index] \u8868\u793a\uff1a 1 2 val\uff1a\u4e00\u4e2a\u8868\u793a Node.val \u7684\u6574\u6570\u3002 random_index\uff1a\u968f\u673a\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7d22\u5f15\uff08\u8303\u56f4\u4ece 0 \u5230 n-1\uff09\uff1b\u5982\u679c\u4e0d\u6307\u5411\u4efb\u4f55\u8282\u70b9\uff0c\u5219\u4e3a null \u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1ahead = [[7,null],[13,0],[11,4],[10,2],[1,0]] \u8f93\u51fa\uff1a[[7,null],[13,0],[11,4],[10,2],[1,0]] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1ahead = [[1,1],[2,1]] \u8f93\u51fa\uff1a[[1,1],[2,1]] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1ahead = [[3,null],[3,0],[3,null]] \u8f93\u51fa\uff1a[[3,null],[3,0],[3,null]] \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1ahead = [] \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u7684\u94fe\u8868\u4e3a\u7a7a\uff08\u7a7a\u6307\u9488\uff09\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002 \u63d0\u793a\uff1a 1 2 3 -10000 <= Node.val <= 10000 Node.random \u4e3a\u7a7a\uff08null\uff09\u6216\u6307\u5411\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u3002 \u8282\u70b9\u6570\u76ee\u4e0d\u8d85\u8fc7 1000 \u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u590d\u5236\u6bcf\u4e2a\u94fe\u8868\u8282\u70b9\u6302\u63a5\u5728\u8be5\u8282\u70b9\u540e\u9762 \u518d\u6b21\u904d\u5386\u94fe\u8868\u8bbe\u7f6e\u65b0\u8282\u70b9\u7684\u968f\u673a\u6307\u9488\u7684\u6307\u5411 \u518d\u6b21\u904d\u5386\u65ad\u5f00\u65e7\u8282\u70b9\uff0c\u628a\u65b0\u8282\u70b9\u8fde\u63a5\u5728\u4e00\u8d77\u8fd4\u56de 3. AC\u4ee3\u7801 \u00b6 C","title":"[138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868](https://leetcode-cn.com/problems/copy-list-with-random-pointer)"},{"location":"leetcode/138/readme/#138","text":"","title":"138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868"},{"location":"leetcode/138/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002 \u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684 \u6df1\u62f7\u8d1d\u3002 \u6211\u4eec\u7528\u4e00\u4e2a\u7531 n \u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u94fe\u8868\u6765\u8868\u793a\u8f93\u5165/\u8f93\u51fa\u4e2d\u7684\u94fe\u8868\u3002\u6bcf\u4e2a\u8282\u70b9\u7528\u4e00\u4e2a [val, random_index] \u8868\u793a\uff1a 1 2 val\uff1a\u4e00\u4e2a\u8868\u793a Node.val \u7684\u6574\u6570\u3002 random_index\uff1a\u968f\u673a\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7d22\u5f15\uff08\u8303\u56f4\u4ece 0 \u5230 n-1\uff09\uff1b\u5982\u679c\u4e0d\u6307\u5411\u4efb\u4f55\u8282\u70b9\uff0c\u5219\u4e3a null \u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1ahead = [[7,null],[13,0],[11,4],[10,2],[1,0]] \u8f93\u51fa\uff1a[[7,null],[13,0],[11,4],[10,2],[1,0]] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1ahead = [[1,1],[2,1]] \u8f93\u51fa\uff1a[[1,1],[2,1]] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1ahead = [[3,null],[3,0],[3,null]] \u8f93\u51fa\uff1a[[3,null],[3,0],[3,null]] \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1ahead = [] \u8f93\u51fa\uff1a[] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u7684\u94fe\u8868\u4e3a\u7a7a\uff08\u7a7a\u6307\u9488\uff09\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002 \u63d0\u793a\uff1a 1 2 3 -10000 <= Node.val <= 10000 Node.random \u4e3a\u7a7a\uff08null\uff09\u6216\u6307\u5411\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u3002 \u8282\u70b9\u6570\u76ee\u4e0d\u8d85\u8fc7 1000 \u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/138/readme/#2","text":"\u590d\u5236\u6bcf\u4e2a\u94fe\u8868\u8282\u70b9\u6302\u63a5\u5728\u8be5\u8282\u70b9\u540e\u9762 \u518d\u6b21\u904d\u5386\u94fe\u8868\u8bbe\u7f6e\u65b0\u8282\u70b9\u7684\u968f\u673a\u6307\u9488\u7684\u6307\u5411 \u518d\u6b21\u904d\u5386\u65ad\u5f00\u65e7\u8282\u70b9\uff0c\u628a\u65b0\u8282\u70b9\u8fde\u63a5\u5728\u4e00\u8d77\u8fd4\u56de","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/138/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/1380/readme/","text":"1380. \u77e9\u9635\u4e2d\u7684\u5e78\u8fd0\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a m * n \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7684\u6570\u5b57 \u5404\u4e0d\u76f8\u540c \u3002\u8bf7\u4f60\u6309 \u4efb\u610f \u987a\u5e8f\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5e78\u8fd0\u6570\u3002 \u5e78\u8fd0\u6570\u662f\u6307\u77e9\u9635\u4e2d\u6ee1\u8db3\u540c\u65f6\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\u7684\u5143\u7d20\uff1a \u5728\u540c\u4e00\u884c\u7684\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5c0f \u5728\u540c\u4e00\u5217\u7684\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5927 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1amatrix = [[3,7,8],[9,11,13],[15,16,17]] \u8f93\u51fa\uff1a[15] \u89e3\u91ca\uff1a15 \u662f\u552f\u4e00\u7684\u5e78\u8fd0\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u5176\u6240\u5728\u884c\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u662f\u6240\u5728\u5217\u4e2d\u7684\u6700\u5927\u503c\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1amatrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]] \u8f93\u51fa\uff1a[12] \u89e3\u91ca\uff1a12 \u662f\u552f\u4e00\u7684\u5e78\u8fd0\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u5176\u6240\u5728\u884c\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u662f\u6240\u5728\u5217\u4e2d\u7684\u6700\u5927\u503c\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1amatrix = [[7,8],[1,2]] \u8f93\u51fa\uff1a[7] \u63d0\u793a\uff1a 1 2 3 4 5 m == mat.length n == mat[i].length 1 <= n, m <= 50 1 <= matrix[i][j] <= 10^5 \u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u4e0d\u540c\u7684 2. \u89e3\u9898\u601d\u8def \u00b6","title":"[1380. \u77e9\u9635\u4e2d\u7684\u5e78\u8fd0\u6570](https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/)"},{"location":"leetcode/1380/readme/#1380","text":"","title":"1380. \u77e9\u9635\u4e2d\u7684\u5e78\u8fd0\u6570"},{"location":"leetcode/1380/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a m * n \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7684\u6570\u5b57 \u5404\u4e0d\u76f8\u540c \u3002\u8bf7\u4f60\u6309 \u4efb\u610f \u987a\u5e8f\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5e78\u8fd0\u6570\u3002 \u5e78\u8fd0\u6570\u662f\u6307\u77e9\u9635\u4e2d\u6ee1\u8db3\u540c\u65f6\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\u7684\u5143\u7d20\uff1a \u5728\u540c\u4e00\u884c\u7684\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5c0f \u5728\u540c\u4e00\u5217\u7684\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5927 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1amatrix = [[3,7,8],[9,11,13],[15,16,17]] \u8f93\u51fa\uff1a[15] \u89e3\u91ca\uff1a15 \u662f\u552f\u4e00\u7684\u5e78\u8fd0\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u5176\u6240\u5728\u884c\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u662f\u6240\u5728\u5217\u4e2d\u7684\u6700\u5927\u503c\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1amatrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]] \u8f93\u51fa\uff1a[12] \u89e3\u91ca\uff1a12 \u662f\u552f\u4e00\u7684\u5e78\u8fd0\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u5176\u6240\u5728\u884c\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u662f\u6240\u5728\u5217\u4e2d\u7684\u6700\u5927\u503c\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1amatrix = [[7,8],[1,2]] \u8f93\u51fa\uff1a[7] \u63d0\u793a\uff1a 1 2 3 4 5 m == mat.length n == mat[i].length 1 <= n, m <= 50 1 <= matrix[i][j] <= 10^5 \u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u4e0d\u540c\u7684","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1380/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1382/readme/","text":"1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u68f5 \u5e73\u8861\u540e \u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u65b0\u751f\u6210\u7684\u6811\u5e94\u8be5\u4e0e\u539f\u6765\u7684\u6811\u6709\u7740\u76f8\u540c\u7684\u8282\u70b9\u503c\u3002 \u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1 \uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u662f \u5e73\u8861\u7684 \u3002 \u5982\u679c\u6709\u591a\u79cd\u6784\u9020\u65b9\u6cd5\uff0c\u8bf7\u4f60\u8fd4\u56de\u4efb\u610f\u4e00\u79cd\u3002 \u793a\u4f8b\uff1a 1 2 3 \u8f93\u5165\uff1aroot = [1,null,2,null,3,null,4,null,null] \u8f93\u51fa\uff1a[2,1,3,null,null,null,4] \u89e3\u91ca\uff1a\u8fd9\u4e0d\u662f\u552f\u4e00\u7684\u6b63\u786e\u7b54\u6848\uff0c[3,1,4,null,2,null,null] \u4e5f\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u6784\u9020\u65b9\u6848\u3002 \u63d0\u793a\uff1a 1 2 \u6811\u8282\u70b9\u7684\u6570\u76ee\u5728 1 \u5230 10^4 \u4e4b\u95f4\u3002 \u6811\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c\uff0c\u4e14\u5728 1 \u5230 10^5 \u4e4b\u95f4\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 #define N 10002 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ void middle ( struct TreeNode * root , int * arr , int * arrEnd ) { if ( root == NULL ) return ; if ( root -> left ) { middle ( root -> left , arr , arrEnd ); } arr [( * arrEnd ) ++ ] = root -> val ; if ( root -> right ) { middle ( root -> right , arr , arrEnd ); } return ; } struct TreeNode * balanceDFS ( int * arr , int start , int end ) { if ( start > end ) return NULL ; if ( start == end ) { struct TreeNode * newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> val = arr [ start ]; newNode -> left = NULL ; newNode -> right = NULL ; return newNode ; } int mid = ( end + start ) / 2 ; struct TreeNode * newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> val = arr [ mid ]; newNode -> left = balanceDFS ( arr , start , mid - 1 ); newNode -> right = balanceDFS ( arr , mid + 1 , end ); return newNode ; } struct TreeNode * balanceBST ( struct TreeNode * root ){ if ( root == NULL ) return root ; int * array = ( int * ) malloc ( sizeof ( int ) * N ); int arrayEnd = 0 ; middle ( root , array , & arrayEnd ); // \u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6392\u5e8f\u597d\u7684\u6570\u7ec4 for ( int i = 0 ; i < arrayEnd ; i ++ ) { printf ( \"%d \" , array [ i ]); } int mid = ( arrayEnd - 1 ) / 2 ; root = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); root -> val = array [ mid ]; root -> left = balanceDFS ( array , 0 , mid - 1 ); root -> right = balanceDFS ( array , mid + 1 , arrayEnd - 1 ); free ( array ); return root ; }","title":"[1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861](https://leetcode-cn.com/problems/balance-a-binary-search-tree/)"},{"location":"leetcode/1382/readme/#1382","text":"","title":"1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861"},{"location":"leetcode/1382/readme/#1","text":"\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u68f5 \u5e73\u8861\u540e \u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u65b0\u751f\u6210\u7684\u6811\u5e94\u8be5\u4e0e\u539f\u6765\u7684\u6811\u6709\u7740\u76f8\u540c\u7684\u8282\u70b9\u503c\u3002 \u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1 \uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u662f \u5e73\u8861\u7684 \u3002 \u5982\u679c\u6709\u591a\u79cd\u6784\u9020\u65b9\u6cd5\uff0c\u8bf7\u4f60\u8fd4\u56de\u4efb\u610f\u4e00\u79cd\u3002 \u793a\u4f8b\uff1a 1 2 3 \u8f93\u5165\uff1aroot = [1,null,2,null,3,null,4,null,null] \u8f93\u51fa\uff1a[2,1,3,null,null,null,4] \u89e3\u91ca\uff1a\u8fd9\u4e0d\u662f\u552f\u4e00\u7684\u6b63\u786e\u7b54\u6848\uff0c[3,1,4,null,2,null,null] \u4e5f\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u6784\u9020\u65b9\u6848\u3002 \u63d0\u793a\uff1a 1 2 \u6811\u8282\u70b9\u7684\u6570\u76ee\u5728 1 \u5230 10^4 \u4e4b\u95f4\u3002 \u6811\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c\uff0c\u4e14\u5728 1 \u5230 10^5 \u4e4b\u95f4\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1382/readme/#2","text":"#define N 10002 /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ void middle ( struct TreeNode * root , int * arr , int * arrEnd ) { if ( root == NULL ) return ; if ( root -> left ) { middle ( root -> left , arr , arrEnd ); } arr [( * arrEnd ) ++ ] = root -> val ; if ( root -> right ) { middle ( root -> right , arr , arrEnd ); } return ; } struct TreeNode * balanceDFS ( int * arr , int start , int end ) { if ( start > end ) return NULL ; if ( start == end ) { struct TreeNode * newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> val = arr [ start ]; newNode -> left = NULL ; newNode -> right = NULL ; return newNode ; } int mid = ( end + start ) / 2 ; struct TreeNode * newNode = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); newNode -> val = arr [ mid ]; newNode -> left = balanceDFS ( arr , start , mid - 1 ); newNode -> right = balanceDFS ( arr , mid + 1 , end ); return newNode ; } struct TreeNode * balanceBST ( struct TreeNode * root ){ if ( root == NULL ) return root ; int * array = ( int * ) malloc ( sizeof ( int ) * N ); int arrayEnd = 0 ; middle ( root , array , & arrayEnd ); // \u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6392\u5e8f\u597d\u7684\u6570\u7ec4 for ( int i = 0 ; i < arrayEnd ; i ++ ) { printf ( \"%d \" , array [ i ]); } int mid = ( arrayEnd - 1 ) / 2 ; root = ( struct TreeNode * ) malloc ( sizeof ( struct TreeNode )); root -> val = array [ mid ]; root -> left = balanceDFS ( array , 0 , mid - 1 ); root -> right = balanceDFS ( array , mid + 1 , arrayEnd - 1 ); free ( array ); return root ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1386/readme/","text":"1386. \u5b89\u6392\u7535\u5f71\u9662\u5ea7\u4f4d \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7535\u5f71\u9662\u7684\u89c2\u5f71\u5385\u4e2d\u6709 n \u884c\u5ea7\u4f4d\uff0c\u884c\u7f16\u53f7\u4ece 1 \u5230 n \uff0c\u4e14\u6bcf\u4e00\u884c\u5185\u603b\u5171\u6709 10 \u4e2a\u5ea7\u4f4d\uff0c\u5217\u7f16\u53f7\u4ece 1 \u5230 10 \u3002 \u7ed9\u4f60\u6570\u7ec4 reservedSeats \uff0c\u5305\u542b\u6240\u6709\u5df2\u7ecf\u88ab\u9884\u7ea6\u4e86\u7684\u5ea7\u4f4d\u3002\u6bd4\u5982\u8bf4\uff0cresearvedSeats[i]=[3,8] \uff0c\u5b83\u8868\u793a\u7b2c 3 \u884c\u7b2c 8 \u4e2a\u5ea7\u4f4d\u88ab\u9884\u7ea6\u4e86\u3002 \u8bf7\u4f60\u8fd4\u56de \u6700\u591a\u80fd\u5b89\u6392\u591a\u5c11\u4e2a 4 \u4eba\u5bb6\u5ead \u30024 \u4eba\u5bb6\u5ead\u8981\u5360\u636e \u540c\u4e00\u884c\u5185\u8fde\u7eed \u7684 4 \u4e2a\u5ea7\u4f4d\u3002\u9694\u7740\u8fc7\u9053\u7684\u5ea7\u4f4d\uff08\u6bd4\u65b9\u8bf4 [3,3] \u548c [3,4]\uff09\u4e0d\u662f\u8fde\u7eed\u7684\u5ea7\u4f4d\uff0c\u4f46\u662f\u5982\u679c\u4f60\u53ef\u4ee5\u5c06 4 \u4eba\u5bb6\u5ead\u62c6\u6210\u8fc7\u9053\u4e24\u8fb9\u5404\u5750 2 \u4eba\uff0c\u8fd9\u6837\u5b50\u662f\u5141\u8bb8\u7684\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1an = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u4e0a\u56fe\u6240\u793a\u662f\u6700\u4f18\u7684\u5b89\u6392\u65b9\u6848\uff0c\u603b\u5171\u53ef\u4ee5\u5b89\u6392 4 \u4e2a\u5bb6\u5ead\u3002\u84dd\u8272\u7684\u53c9\u8868\u793a\u88ab\u9884\u7ea6\u7684\u5ea7\u4f4d\uff0c\u6a59\u8272\u7684\u8fde\u7eed\u5ea7\u4f4d\u8868\u793a\u4e00\u4e2a 4 \u4eba\u5bb6\u5ead\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1an = 2, reservedSeats = [[2,1],[1,8],[2,6]] \u8f93\u51fa\uff1a2 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1an = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]] \u8f93\u51fa\uff1a4 \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= n <= 10^9 1 <= reservedSeats.length <= min(10*n, 10^4) reservedSeats[i].length == 2 1 <= reservedSeats[i][0] <= n 1 <= reservedSeats[i][1] <= 10 \u6240\u6709 reservedSeats[i] \u90fd\u662f\u4e92\u4e0d\u76f8\u540c\u7684\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 int familysInRow ( int * seated ) { if ( seated [ 1 ] == 0 && seated [ 2 ] == 0 && seated [ 3 ] == 0 && seated [ 4 ] == 0 && seated [ 5 ] == 0 && seated [ 6 ] == 0 && seated [ 7 ] == 0 && seated [ 8 ] == 0 ) { return 2 ; } if ( seated [ 1 ] == 0 && seated [ 2 ] == 0 && seated [ 3 ] == 0 && seated [ 4 ] == 0 ) { return 1 ; } if ( seated [ 3 ] == 0 && seated [ 4 ] == 0 && seated [ 5 ] == 0 && seated [ 6 ] == 0 ) { return 1 ; } if ( seated [ 5 ] == 0 && seated [ 6 ] == 0 && seated [ 7 ] == 0 && seated [ 8 ] == 0 ) { return 1 ; } return 0 ; } int compare ( const void * p , const void * q ) { int * a = * ( int ** ) p ; int * b = * ( int ** ) q ; printf ( \"pp:%d, %d \\n \" , a [ 0 ], b [ 0 ]); return a [ 0 ] - b [ 0 ]; } int maxNumberOfFamilies ( int n , int ** reservedSeats , int reservedSeatsSize , int * reservedSeatsColSize ){ int * row = ( int * ) malloc ( sizeof ( int ) * 10 ); int rowEnd = 0 ; int ans = 0 ; qsort ( reservedSeats , reservedSeatsSize , sizeof ( int ) * 2 , compare ); int line = 1 ; int iter = 0 ; int count = 0 ; while ( iter < reservedSeatsSize ) { for ( int i = 0 ; i < 10 ; i ++ ) row [ i ] = 0 ; if ( count > 1 ) { ans += 2 * ( count - 1 ); } count = 0 ; while ( iter < reservedSeatsSize && reservedSeats [ iter ][ 0 ] == line ) { printf ( \" \\n %d,%d \\n \" , reservedSeats [ iter ][ 0 ], iter ); row [ reservedSeats [ iter ][ 1 ] - 1 ] = 1 ; iter ++ ; } ans += familysInRow ( row ); while ( iter < reservedSeatsSize && reservedSeats [ iter ][ 0 ] > line ) { line ++ ; count ++ ; } } if ( n - line > 0 ) { ans += 2 * ( n - line ); } free ( row ); return ans ; }","title":"[1386. \u5b89\u6392\u7535\u5f71\u9662\u5ea7\u4f4d](https://leetcode-cn.com/problems/cinema-seat-allocation/)"},{"location":"leetcode/1386/readme/#1386","text":"","title":"1386. \u5b89\u6392\u7535\u5f71\u9662\u5ea7\u4f4d"},{"location":"leetcode/1386/readme/#1","text":"\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7535\u5f71\u9662\u7684\u89c2\u5f71\u5385\u4e2d\u6709 n \u884c\u5ea7\u4f4d\uff0c\u884c\u7f16\u53f7\u4ece 1 \u5230 n \uff0c\u4e14\u6bcf\u4e00\u884c\u5185\u603b\u5171\u6709 10 \u4e2a\u5ea7\u4f4d\uff0c\u5217\u7f16\u53f7\u4ece 1 \u5230 10 \u3002 \u7ed9\u4f60\u6570\u7ec4 reservedSeats \uff0c\u5305\u542b\u6240\u6709\u5df2\u7ecf\u88ab\u9884\u7ea6\u4e86\u7684\u5ea7\u4f4d\u3002\u6bd4\u5982\u8bf4\uff0cresearvedSeats[i]=[3,8] \uff0c\u5b83\u8868\u793a\u7b2c 3 \u884c\u7b2c 8 \u4e2a\u5ea7\u4f4d\u88ab\u9884\u7ea6\u4e86\u3002 \u8bf7\u4f60\u8fd4\u56de \u6700\u591a\u80fd\u5b89\u6392\u591a\u5c11\u4e2a 4 \u4eba\u5bb6\u5ead \u30024 \u4eba\u5bb6\u5ead\u8981\u5360\u636e \u540c\u4e00\u884c\u5185\u8fde\u7eed \u7684 4 \u4e2a\u5ea7\u4f4d\u3002\u9694\u7740\u8fc7\u9053\u7684\u5ea7\u4f4d\uff08\u6bd4\u65b9\u8bf4 [3,3] \u548c [3,4]\uff09\u4e0d\u662f\u8fde\u7eed\u7684\u5ea7\u4f4d\uff0c\u4f46\u662f\u5982\u679c\u4f60\u53ef\u4ee5\u5c06 4 \u4eba\u5bb6\u5ead\u62c6\u6210\u8fc7\u9053\u4e24\u8fb9\u5404\u5750 2 \u4eba\uff0c\u8fd9\u6837\u5b50\u662f\u5141\u8bb8\u7684\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1an = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u4e0a\u56fe\u6240\u793a\u662f\u6700\u4f18\u7684\u5b89\u6392\u65b9\u6848\uff0c\u603b\u5171\u53ef\u4ee5\u5b89\u6392 4 \u4e2a\u5bb6\u5ead\u3002\u84dd\u8272\u7684\u53c9\u8868\u793a\u88ab\u9884\u7ea6\u7684\u5ea7\u4f4d\uff0c\u6a59\u8272\u7684\u8fde\u7eed\u5ea7\u4f4d\u8868\u793a\u4e00\u4e2a 4 \u4eba\u5bb6\u5ead\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1an = 2, reservedSeats = [[2,1],[1,8],[2,6]] \u8f93\u51fa\uff1a2 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1an = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]] \u8f93\u51fa\uff1a4 \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= n <= 10^9 1 <= reservedSeats.length <= min(10*n, 10^4) reservedSeats[i].length == 2 1 <= reservedSeats[i][0] <= n 1 <= reservedSeats[i][1] <= 10 \u6240\u6709 reservedSeats[i] \u90fd\u662f\u4e92\u4e0d\u76f8\u540c\u7684\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1386/readme/#2","text":"int familysInRow ( int * seated ) { if ( seated [ 1 ] == 0 && seated [ 2 ] == 0 && seated [ 3 ] == 0 && seated [ 4 ] == 0 && seated [ 5 ] == 0 && seated [ 6 ] == 0 && seated [ 7 ] == 0 && seated [ 8 ] == 0 ) { return 2 ; } if ( seated [ 1 ] == 0 && seated [ 2 ] == 0 && seated [ 3 ] == 0 && seated [ 4 ] == 0 ) { return 1 ; } if ( seated [ 3 ] == 0 && seated [ 4 ] == 0 && seated [ 5 ] == 0 && seated [ 6 ] == 0 ) { return 1 ; } if ( seated [ 5 ] == 0 && seated [ 6 ] == 0 && seated [ 7 ] == 0 && seated [ 8 ] == 0 ) { return 1 ; } return 0 ; } int compare ( const void * p , const void * q ) { int * a = * ( int ** ) p ; int * b = * ( int ** ) q ; printf ( \"pp:%d, %d \\n \" , a [ 0 ], b [ 0 ]); return a [ 0 ] - b [ 0 ]; } int maxNumberOfFamilies ( int n , int ** reservedSeats , int reservedSeatsSize , int * reservedSeatsColSize ){ int * row = ( int * ) malloc ( sizeof ( int ) * 10 ); int rowEnd = 0 ; int ans = 0 ; qsort ( reservedSeats , reservedSeatsSize , sizeof ( int ) * 2 , compare ); int line = 1 ; int iter = 0 ; int count = 0 ; while ( iter < reservedSeatsSize ) { for ( int i = 0 ; i < 10 ; i ++ ) row [ i ] = 0 ; if ( count > 1 ) { ans += 2 * ( count - 1 ); } count = 0 ; while ( iter < reservedSeatsSize && reservedSeats [ iter ][ 0 ] == line ) { printf ( \" \\n %d,%d \\n \" , reservedSeats [ iter ][ 0 ], iter ); row [ reservedSeats [ iter ][ 1 ] - 1 ] = 1 ; iter ++ ; } ans += familysInRow ( row ); while ( iter < reservedSeatsSize && reservedSeats [ iter ][ 0 ] > line ) { line ++ ; count ++ ; } } if ( n - line > 0 ) { ans += 2 * ( n - line ); } free ( row ); return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1399/readme/","text":"1399. \u7edf\u8ba1\u6700\u5927\u7ec4\u7684\u6570\u76ee \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \u3002\u8bf7\u4f60\u5148\u6c42\u51fa\u4ece 1 \u5230 n \u7684\u6bcf\u4e2a\u6574\u6570 10 \u8fdb\u5236\u8868\u793a\u4e0b\u7684\u6570\u4f4d\u548c\uff08\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\uff09\uff0c\u7136\u540e\u628a\u6570\u4f4d\u548c\u76f8\u7b49\u7684\u6570\u5b57\u653e\u5230\u540c\u4e00\u4e2a\u7ec4\u4e2d\u3002 \u8bf7\u4f60\u7edf\u8ba1\u6bcf\u4e2a\u7ec4\u4e2d\u7684\u6570\u5b57\u6570\u76ee\uff0c\u5e76\u8fd4\u56de\u6570\u5b57\u6570\u76ee\u5e76\u5217\u6700\u591a\u7684\u7ec4\u6709\u591a\u5c11\u4e2a\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 \u8f93\u5165\uff1an = 13 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u603b\u5171\u6709 9 \u4e2a\u7ec4\uff0c\u5c06 1 \u5230 13 \u6309\u6570\u4f4d\u6c42\u548c\u540e\u8fd9\u4e9b\u7ec4\u5206\u522b\u662f\uff1a [1,10]\uff0c[2,11]\uff0c[3,12]\uff0c[4,13]\uff0c[5]\uff0c[6]\uff0c[7]\uff0c[8]\uff0c[9]\u3002\u603b\u5171\u6709 4 \u4e2a\u7ec4\u62e5\u6709\u7684\u6570\u5b57\u5e76\u5217\u6700\u591a\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u603b\u5171\u6709 2 \u4e2a\u5927\u5c0f\u4e3a 1 \u7684\u7ec4 [1]\uff0c[2]\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1an = 15 \u8f93\u51fa\uff1a6 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1an = 24 \u8f93\u51fa\uff1a5 \u63d0\u793a\uff1a 1 1 <= n <= 10^4 2. \u89e3\u9898\u601d\u8def \u00b6 #define MAXN 1000 #define LINEMAX 2000 int bitSum ( int n ) { int sum = 0 ; while ( n ) { sum += n % 10 ; n = n / 10 ; } return sum ; } int countLargestGroup ( int n ){ int ** map = ( int ** ) malloc ( sizeof ( int * ) * MAXN ); int * colSize = ( int * ) malloc ( sizeof ( int ) * MAXN ); for ( int i = 0 ; i < MAXN ; i ++ ) { map [ i ] = ( int * ) malloc ( sizeof ( int ) * LINEMAX ); colSize [ i ] = 0 ; } for ( int i = 1 ; i <= n ; i ++ ) { int ss = bitSum ( i ); map [ ss ][ colSize [ ss ] ++ ] = i ; } int maxValue = - 1 ; for ( int i = 0 ; i < MAXN ; i ++ ) { if ( colSize [ i ] > maxValue ) { maxValue = colSize [ i ]; } } int ans = 0 ; for ( int i = 0 ; i < MAXN ; i ++ ) { if ( colSize [ i ] == maxValue ) { ans += 1 ; } } return ans ; }","title":"[1399. \u7edf\u8ba1\u6700\u5927\u7ec4\u7684\u6570\u76ee](https://leetcode-cn.com/problems/count-largest-group/)"},{"location":"leetcode/1399/readme/#1399","text":"","title":"1399. \u7edf\u8ba1\u6700\u5927\u7ec4\u7684\u6570\u76ee"},{"location":"leetcode/1399/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \u3002\u8bf7\u4f60\u5148\u6c42\u51fa\u4ece 1 \u5230 n \u7684\u6bcf\u4e2a\u6574\u6570 10 \u8fdb\u5236\u8868\u793a\u4e0b\u7684\u6570\u4f4d\u548c\uff08\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\uff09\uff0c\u7136\u540e\u628a\u6570\u4f4d\u548c\u76f8\u7b49\u7684\u6570\u5b57\u653e\u5230\u540c\u4e00\u4e2a\u7ec4\u4e2d\u3002 \u8bf7\u4f60\u7edf\u8ba1\u6bcf\u4e2a\u7ec4\u4e2d\u7684\u6570\u5b57\u6570\u76ee\uff0c\u5e76\u8fd4\u56de\u6570\u5b57\u6570\u76ee\u5e76\u5217\u6700\u591a\u7684\u7ec4\u6709\u591a\u5c11\u4e2a\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 \u8f93\u5165\uff1an = 13 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u603b\u5171\u6709 9 \u4e2a\u7ec4\uff0c\u5c06 1 \u5230 13 \u6309\u6570\u4f4d\u6c42\u548c\u540e\u8fd9\u4e9b\u7ec4\u5206\u522b\u662f\uff1a [1,10]\uff0c[2,11]\uff0c[3,12]\uff0c[4,13]\uff0c[5]\uff0c[6]\uff0c[7]\uff0c[8]\uff0c[9]\u3002\u603b\u5171\u6709 4 \u4e2a\u7ec4\u62e5\u6709\u7684\u6570\u5b57\u5e76\u5217\u6700\u591a\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u603b\u5171\u6709 2 \u4e2a\u5927\u5c0f\u4e3a 1 \u7684\u7ec4 [1]\uff0c[2]\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1an = 15 \u8f93\u51fa\uff1a6 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1an = 24 \u8f93\u51fa\uff1a5 \u63d0\u793a\uff1a 1 1 <= n <= 10^4","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1399/readme/#2","text":"#define MAXN 1000 #define LINEMAX 2000 int bitSum ( int n ) { int sum = 0 ; while ( n ) { sum += n % 10 ; n = n / 10 ; } return sum ; } int countLargestGroup ( int n ){ int ** map = ( int ** ) malloc ( sizeof ( int * ) * MAXN ); int * colSize = ( int * ) malloc ( sizeof ( int ) * MAXN ); for ( int i = 0 ; i < MAXN ; i ++ ) { map [ i ] = ( int * ) malloc ( sizeof ( int ) * LINEMAX ); colSize [ i ] = 0 ; } for ( int i = 1 ; i <= n ; i ++ ) { int ss = bitSum ( i ); map [ ss ][ colSize [ ss ] ++ ] = i ; } int maxValue = - 1 ; for ( int i = 0 ; i < MAXN ; i ++ ) { if ( colSize [ i ] > maxValue ) { maxValue = colSize [ i ]; } } int ans = 0 ; for ( int i = 0 ; i < MAXN ; i ++ ) { if ( colSize [ i ] == maxValue ) { ans += 1 ; } } return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1403/readme/","text":"1403. \u975e\u9012\u589e\u987a\u5e8f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u4ece\u4e2d\u62bd\u53d6\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u6ee1\u8db3\u8be5\u5b50\u5e8f\u5217\u7684\u5143\u7d20\u4e4b\u548c \u4e25\u683c \u5927\u4e8e\u672a\u5305\u542b\u5728\u8be5\u5b50\u5e8f\u5217\u4e2d\u7684\u5404\u5143\u7d20\u4e4b\u548c\u3002 \u5982\u679c\u5b58\u5728\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u9700\u8fd4\u56de \u957f\u5ea6\u6700\u5c0f \u7684\u5b50\u5e8f\u5217\u3002\u5982\u679c\u4ecd\u7136\u6709\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5219\u8fd4\u56de \u5143\u7d20\u4e4b\u548c\u6700\u5927 \u7684\u5b50\u5e8f\u5217\u3002 \u4e0e\u5b50\u6570\u7ec4\u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u300c\u6570\u7ec4\u7684\u5b50\u5e8f\u5217\u300d\u4e0d\u5f3a\u8c03\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u8fde\u7eed\u6027\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u4ece\u6570\u7ec4\u4e2d\u5206\u79bb\u4e00\u4e9b\uff08\u4e5f\u53ef\u80fd\u4e0d\u5206\u79bb\uff09\u5143\u7d20\u5f97\u5230\u3002 \u6ce8\u610f\uff0c\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u6ee1\u8db3\u6240\u6709\u7ea6\u675f\u6761\u4ef6\u7684\u89e3\u51b3\u65b9\u6848\u662f \u552f\u4e00 \u7684\u3002\u540c\u65f6\uff0c\u8fd4\u56de\u7684\u7b54\u6848\u5e94\u5f53\u6309 \u975e\u9012\u589e\u987a\u5e8f \u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums = [4,3,10,9,8] \u8f93\u51fa\uff1a[10,9] \u89e3\u91ca\uff1a\u5b50\u5e8f\u5217 [10,9] \u548c [10,8] \u662f\u6700\u5c0f\u7684\u3001\u6ee1\u8db3\u5143\u7d20\u4e4b\u548c\u5927\u4e8e\u5176\u4ed6\u5404\u5143\u7d20\u4e4b\u548c\u7684\u5b50\u5e8f\u5217\u3002\u4f46\u662f [10,9] \u7684\u5143\u7d20\u4e4b\u548c\u6700\u5927\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1anums = [4,4,7,6,7] \u8f93\u51fa\uff1a[7,7,6] \u89e3\u91ca\uff1a\u5b50\u5e8f\u5217 [7,7] \u7684\u548c\u4e3a 14 \uff0c\u4e0d\u4e25\u683c\u5927\u4e8e\u5269\u4e0b\u7684\u5176\u4ed6\u5143\u7d20\u4e4b\u548c\uff0814 = 4 + 4 + 6\uff09\u3002\u56e0\u6b64\uff0c[7,6,7] \u662f\u6ee1\u8db3\u9898\u610f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217\u3002\u6ce8\u610f\uff0c\u5143\u7d20\u6309\u975e\u9012\u589e\u987a\u5e8f\u8fd4\u56de\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums = [6] \u8f93\u51fa\uff1a[6] \u63d0\u793a\uff1a 1 2 1 <= nums.length <= 500 1 <= nums[i] <= 100 2. \u89e3\u9898\u601d\u8def \u00b6 int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; return b - a ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * minSubsequence ( int * nums , int numsSize , int * returnSize ) { // \u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c \u6c42\u548c\uff0c\u53d6\u524dX\u4e2a\u5143\u7d20\u5927\u4e8e\u548c\u7684\u4e8c\u5206\u4e4b\u4e00 if ( nums == NULL || numsSize <= 0 ) { * returnSize = 0 ; return NULL ; } int * ans = ( int * ) malloc ( sizeof ( int ) * numsSize ); int ansEnd = 0 ; int sum = 0 ; qsort ( nums , numsSize , sizeof ( int ), compare ); for ( int i = 0 ; i < numsSize ; i ++ ) { sum += nums [ i ]; } int curr = 0 ; int i = 0 ; while ( curr <= sum / 2 && i < numsSize ) { ans [ ansEnd ++ ] = nums [ i ]; curr += nums [ i ]; i ++ ; } * returnSize = ansEnd ; return ans ; }","title":"[1403. \u975e\u9012\u589e\u987a\u5e8f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217](https://leetcode-cn.com/problems/minimum-subsequence-in-non-increasing-order/)"},{"location":"leetcode/1403/readme/#1403","text":"","title":"1403. \u975e\u9012\u589e\u987a\u5e8f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217"},{"location":"leetcode/1403/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u4ece\u4e2d\u62bd\u53d6\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u6ee1\u8db3\u8be5\u5b50\u5e8f\u5217\u7684\u5143\u7d20\u4e4b\u548c \u4e25\u683c \u5927\u4e8e\u672a\u5305\u542b\u5728\u8be5\u5b50\u5e8f\u5217\u4e2d\u7684\u5404\u5143\u7d20\u4e4b\u548c\u3002 \u5982\u679c\u5b58\u5728\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u9700\u8fd4\u56de \u957f\u5ea6\u6700\u5c0f \u7684\u5b50\u5e8f\u5217\u3002\u5982\u679c\u4ecd\u7136\u6709\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5219\u8fd4\u56de \u5143\u7d20\u4e4b\u548c\u6700\u5927 \u7684\u5b50\u5e8f\u5217\u3002 \u4e0e\u5b50\u6570\u7ec4\u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u300c\u6570\u7ec4\u7684\u5b50\u5e8f\u5217\u300d\u4e0d\u5f3a\u8c03\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u8fde\u7eed\u6027\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u4ece\u6570\u7ec4\u4e2d\u5206\u79bb\u4e00\u4e9b\uff08\u4e5f\u53ef\u80fd\u4e0d\u5206\u79bb\uff09\u5143\u7d20\u5f97\u5230\u3002 \u6ce8\u610f\uff0c\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u6ee1\u8db3\u6240\u6709\u7ea6\u675f\u6761\u4ef6\u7684\u89e3\u51b3\u65b9\u6848\u662f \u552f\u4e00 \u7684\u3002\u540c\u65f6\uff0c\u8fd4\u56de\u7684\u7b54\u6848\u5e94\u5f53\u6309 \u975e\u9012\u589e\u987a\u5e8f \u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1anums = [4,3,10,9,8] \u8f93\u51fa\uff1a[10,9] \u89e3\u91ca\uff1a\u5b50\u5e8f\u5217 [10,9] \u548c [10,8] \u662f\u6700\u5c0f\u7684\u3001\u6ee1\u8db3\u5143\u7d20\u4e4b\u548c\u5927\u4e8e\u5176\u4ed6\u5404\u5143\u7d20\u4e4b\u548c\u7684\u5b50\u5e8f\u5217\u3002\u4f46\u662f [10,9] \u7684\u5143\u7d20\u4e4b\u548c\u6700\u5927\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1anums = [4,4,7,6,7] \u8f93\u51fa\uff1a[7,7,6] \u89e3\u91ca\uff1a\u5b50\u5e8f\u5217 [7,7] \u7684\u548c\u4e3a 14 \uff0c\u4e0d\u4e25\u683c\u5927\u4e8e\u5269\u4e0b\u7684\u5176\u4ed6\u5143\u7d20\u4e4b\u548c\uff0814 = 4 + 4 + 6\uff09\u3002\u56e0\u6b64\uff0c[7,6,7] \u662f\u6ee1\u8db3\u9898\u610f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217\u3002\u6ce8\u610f\uff0c\u5143\u7d20\u6309\u975e\u9012\u589e\u987a\u5e8f\u8fd4\u56de\u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1anums = [6] \u8f93\u51fa\uff1a[6] \u63d0\u793a\uff1a 1 2 1 <= nums.length <= 500 1 <= nums[i] <= 100","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1403/readme/#2","text":"int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; return b - a ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * minSubsequence ( int * nums , int numsSize , int * returnSize ) { // \u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c \u6c42\u548c\uff0c\u53d6\u524dX\u4e2a\u5143\u7d20\u5927\u4e8e\u548c\u7684\u4e8c\u5206\u4e4b\u4e00 if ( nums == NULL || numsSize <= 0 ) { * returnSize = 0 ; return NULL ; } int * ans = ( int * ) malloc ( sizeof ( int ) * numsSize ); int ansEnd = 0 ; int sum = 0 ; qsort ( nums , numsSize , sizeof ( int ), compare ); for ( int i = 0 ; i < numsSize ; i ++ ) { sum += nums [ i ]; } int curr = 0 ; int i = 0 ; while ( curr <= sum / 2 && i < numsSize ) { ans [ ansEnd ++ ] = nums [ i ]; curr += nums [ i ]; i ++ ; } * returnSize = ansEnd ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1404/readme/","text":"1404. \u5c06\u4e8c\u8fdb\u5236\u8868\u793a\u51cf\u5230 1 \u7684\u6b65\u9aa4\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8868\u793a\u7684\u6570\u5b57 s \u3002\u8bf7\u4f60\u8fd4\u56de\u6309\u4e0b\u8ff0\u89c4\u5219\u5c06\u5176\u51cf\u5c11\u5230 1 \u6240\u9700\u8981\u7684\u6b65\u9aa4\u6570\uff1a \u5982\u679c\u5f53\u524d\u6570\u5b57\u4e3a\u5076\u6570\uff0c\u5219\u5c06\u5176\u9664\u4ee5 2 \u3002 \u5982\u679c\u5f53\u524d\u6570\u5b57\u4e3a\u5947\u6570\uff0c\u5219\u5c06\u5176\u52a0\u4e0a 1 \u3002 \u9898\u76ee\u4fdd\u8bc1\u4f60\u603b\u662f\u53ef\u4ee5\u6309\u4e0a\u8ff0\u89c4\u5219\u5c06\u6d4b\u8bd5\u7528\u4f8b\u53d8\u4e3a 1 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1as = \"1101\" \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a\"1101\" \u8868\u793a\u5341\u8fdb\u5236\u6570 13 \u3002 Step 1) 13 \u662f\u5947\u6570\uff0c\u52a0 1 \u5f97\u5230 14 Step 2) 14 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 7 Step 3) 7 \u662f\u5947\u6570\uff0c\u52a0 1 \u5f97\u5230 8 Step 4) 8 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 4 Step 5) 4 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 2 Step 6) 2 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 1 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1as = \"10\" \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\"10\" \u8868\u793a\u5341\u8fdb\u5236\u6570 2 \u3002 Step 1) 2 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 1 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1as = \"1\" \u8f93\u51fa\uff1a0 \u63d0\u793a\uff1a 1 2 3 1 <= s.length <= 500 s \u7531\u5b57\u7b26 '0' \u6216 '1' \u7ec4\u6210\u3002 s[0] == '1' 2. \u89e3\u9898\u601d\u8def \u00b6 #define N 500 int numSteps ( char * s ){ if ( s == NULL ) return 0 ; int n = strlen ( s ); char * ss = ( char * ) malloc ( sizeof ( char ) * ( n + N )); int ssEnd = 0 ; // \u9006\u5e8f\u5b58\u50a8 for ( int i = n - 1 ; i >= 0 ; i -- ) { ss [ ssEnd ++ ] = s [ i ]; } ss [ ssEnd ] = '\\0' ; // \u5f00\u59cb\u6a21\u62df\u64cd\u4f5c int count = 0 ; int start = 0 ; int end = n - 1 ; while ( start < end ) { if ( ss [ start ] == '0' ) { start ++ ; } else { int carry = 1 ; int sum = 0 ; for ( int i = start ; i <= end ; i ++ ) { sum = ss [ i ] - '0' + carry ; ss [ i ] = sum % 2 + '0' ; carry = sum / 2 ; } if ( carry ) { end ++ ; ss [ end ] = carry ; ss [ end + 1 ] = '\\0' ; } } count ++ ; } return count ; }","title":"[1404. \u5c06\u4e8c\u8fdb\u5236\u8868\u793a\u51cf\u5230 1 \u7684\u6b65\u9aa4\u6570](https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/)"},{"location":"leetcode/1404/readme/#1404-1","text":"","title":"1404. \u5c06\u4e8c\u8fdb\u5236\u8868\u793a\u51cf\u5230 1 \u7684\u6b65\u9aa4\u6570"},{"location":"leetcode/1404/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8868\u793a\u7684\u6570\u5b57 s \u3002\u8bf7\u4f60\u8fd4\u56de\u6309\u4e0b\u8ff0\u89c4\u5219\u5c06\u5176\u51cf\u5c11\u5230 1 \u6240\u9700\u8981\u7684\u6b65\u9aa4\u6570\uff1a \u5982\u679c\u5f53\u524d\u6570\u5b57\u4e3a\u5076\u6570\uff0c\u5219\u5c06\u5176\u9664\u4ee5 2 \u3002 \u5982\u679c\u5f53\u524d\u6570\u5b57\u4e3a\u5947\u6570\uff0c\u5219\u5c06\u5176\u52a0\u4e0a 1 \u3002 \u9898\u76ee\u4fdd\u8bc1\u4f60\u603b\u662f\u53ef\u4ee5\u6309\u4e0a\u8ff0\u89c4\u5219\u5c06\u6d4b\u8bd5\u7528\u4f8b\u53d8\u4e3a 1 \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165\uff1as = \"1101\" \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a\"1101\" \u8868\u793a\u5341\u8fdb\u5236\u6570 13 \u3002 Step 1) 13 \u662f\u5947\u6570\uff0c\u52a0 1 \u5f97\u5230 14 Step 2) 14 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 7 Step 3) 7 \u662f\u5947\u6570\uff0c\u52a0 1 \u5f97\u5230 8 Step 4) 8 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 4 Step 5) 4 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 2 Step 6) 2 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 1 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1as = \"10\" \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\"10\" \u8868\u793a\u5341\u8fdb\u5236\u6570 2 \u3002 Step 1) 2 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 1 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1as = \"1\" \u8f93\u51fa\uff1a0 \u63d0\u793a\uff1a 1 2 3 1 <= s.length <= 500 s \u7531\u5b57\u7b26 '0' \u6216 '1' \u7ec4\u6210\u3002 s[0] == '1'","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1404/readme/#2","text":"#define N 500 int numSteps ( char * s ){ if ( s == NULL ) return 0 ; int n = strlen ( s ); char * ss = ( char * ) malloc ( sizeof ( char ) * ( n + N )); int ssEnd = 0 ; // \u9006\u5e8f\u5b58\u50a8 for ( int i = n - 1 ; i >= 0 ; i -- ) { ss [ ssEnd ++ ] = s [ i ]; } ss [ ssEnd ] = '\\0' ; // \u5f00\u59cb\u6a21\u62df\u64cd\u4f5c int count = 0 ; int start = 0 ; int end = n - 1 ; while ( start < end ) { if ( ss [ start ] == '0' ) { start ++ ; } else { int carry = 1 ; int sum = 0 ; for ( int i = start ; i <= end ; i ++ ) { sum = ss [ i ] - '0' + carry ; ss [ i ] = sum % 2 + '0' ; carry = sum / 2 ; } if ( carry ) { end ++ ; ss [ end ] = carry ; ss [ end + 1 ] = '\\0' ; } } count ++ ; } return count ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1405/readme/","text":"1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u542b\u6709\u4efb\u4f55 'aaa'\uff0c'bbb' \u6216 'ccc' \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b50\u4e32\uff0c\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u300c\u5feb\u4e50\u5b57\u7b26\u4e32\u300d\u3002 \u7ed9\u4f60\u4e09\u4e2a\u6574\u6570 a\uff0cb \uff0cc\uff0c\u8bf7\u4f60\u8fd4\u56de \u4efb\u610f\u4e00\u4e2a \u6ee1\u8db3\u4e0b\u5217\u5168\u90e8\u6761\u4ef6\u7684\u5b57\u7b26\u4e32 s\uff1a s \u662f\u4e00\u4e2a\u5c3d\u53ef\u80fd\u957f\u7684\u5feb\u4e50\u5b57\u7b26\u4e32\u3002 s \u4e2d \u6700\u591a \u6709a \u4e2a\u5b57\u6bcd 'a'\u3001b \u4e2a\u5b57\u6bcd 'b'\u3001c \u4e2a\u5b57\u6bcd 'c' \u3002 s \u4e2d\u53ea\u542b\u6709 'a'\u3001'b' \u3001'c' \u4e09\u79cd\u5b57\u6bcd\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aa = 1, b = 1, c = 7 \u8f93\u51fa\uff1a\"ccaccbcc\" \u89e3\u91ca\uff1a\"ccbccacc\" \u4e5f\u662f\u4e00\u79cd\u6b63\u786e\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aa = 2, b = 2, c = 1 \u8f93\u51fa\uff1a\"aabbc\" \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1aa = 7, b = 1, c = 0 \u8f93\u51fa\uff1a\"aabaa\" \u89e3\u91ca\uff1a\u8fd9\u662f\u8be5\u6d4b\u8bd5\u7528\u4f8b\u7684\u552f\u4e00\u6b63\u786e\u7b54\u6848\u3002 \u63d0\u793a\uff1a 1 2 0 <= a, b, c <= 100 a + b + c > 0 2. \u89e3\u9898\u601d\u8def \u00b6 #define N 2000 // \u83b7\u53d6\u9664\u4e86except\u4e4b\u5916\u7684\u6700\u5927\u503c\u5f97\u4e0b\u6807 int getMax ( int * map , int except ) { int index = - 1 ; int max = INT_MIN ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( i != except ) { if ( map [ i ] > max ) { max = map [ i ]; index = i ; } } } return index ; } char * longestDiverseString ( int a , int b , int c ){ char * ans = ( char * ) malloc ( sizeof ( char ) * N ); int ansEnd = 0 ; int * map = ( int * ) malloc ( sizeof ( int ) * 3 ); map [ 0 ] = a , map [ 1 ] = b , map [ 2 ] = c ; int except = - 1 ; int index = - 1 ; while ( map [ 0 ] + map [ 1 ] + map [ 2 ]) { index = getMax ( map , except ); // \u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6d88\u8017\u4e00\u4e2a if ( except == - 1 || map [ index ] > map [ except ]) { if ( map [ index ] > 0 ) { ans [ ansEnd ++ ] = index + 'a' ; map [ index ] -- ; } if ( map [ index ] > 0 ) { ans [ ansEnd ++ ] = index + 'a' ; map [ index ] -- ; } } else { if ( map [ index ] > 0 ) { ans [ ansEnd ++ ] = index + 'a' ; map [ index ] -- ; } } except = index ; if ( map [ 0 ] + map [ 1 ] + map [ 2 ] - map [ except ] == 0 ) { ans [ ansEnd ] = '\\0' ; return ans ; } } ans [ ansEnd ] = '\\0' ; free ( map ); return ans ; }","title":"[1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32](https://leetcode-cn.com/problems/longest-happy-string/)"},{"location":"leetcode/1405/readme/#1405","text":"","title":"1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32"},{"location":"leetcode/1405/readme/#1","text":"\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u542b\u6709\u4efb\u4f55 'aaa'\uff0c'bbb' \u6216 'ccc' \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b50\u4e32\uff0c\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u300c\u5feb\u4e50\u5b57\u7b26\u4e32\u300d\u3002 \u7ed9\u4f60\u4e09\u4e2a\u6574\u6570 a\uff0cb \uff0cc\uff0c\u8bf7\u4f60\u8fd4\u56de \u4efb\u610f\u4e00\u4e2a \u6ee1\u8db3\u4e0b\u5217\u5168\u90e8\u6761\u4ef6\u7684\u5b57\u7b26\u4e32 s\uff1a s \u662f\u4e00\u4e2a\u5c3d\u53ef\u80fd\u957f\u7684\u5feb\u4e50\u5b57\u7b26\u4e32\u3002 s \u4e2d \u6700\u591a \u6709a \u4e2a\u5b57\u6bcd 'a'\u3001b \u4e2a\u5b57\u6bcd 'b'\u3001c \u4e2a\u5b57\u6bcd 'c' \u3002 s \u4e2d\u53ea\u542b\u6709 'a'\u3001'b' \u3001'c' \u4e09\u79cd\u5b57\u6bcd\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aa = 1, b = 1, c = 7 \u8f93\u51fa\uff1a\"ccaccbcc\" \u89e3\u91ca\uff1a\"ccbccacc\" \u4e5f\u662f\u4e00\u79cd\u6b63\u786e\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aa = 2, b = 2, c = 1 \u8f93\u51fa\uff1a\"aabbc\" \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1aa = 7, b = 1, c = 0 \u8f93\u51fa\uff1a\"aabaa\" \u89e3\u91ca\uff1a\u8fd9\u662f\u8be5\u6d4b\u8bd5\u7528\u4f8b\u7684\u552f\u4e00\u6b63\u786e\u7b54\u6848\u3002 \u63d0\u793a\uff1a 1 2 0 <= a, b, c <= 100 a + b + c > 0","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1405/readme/#2","text":"#define N 2000 // \u83b7\u53d6\u9664\u4e86except\u4e4b\u5916\u7684\u6700\u5927\u503c\u5f97\u4e0b\u6807 int getMax ( int * map , int except ) { int index = - 1 ; int max = INT_MIN ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( i != except ) { if ( map [ i ] > max ) { max = map [ i ]; index = i ; } } } return index ; } char * longestDiverseString ( int a , int b , int c ){ char * ans = ( char * ) malloc ( sizeof ( char ) * N ); int ansEnd = 0 ; int * map = ( int * ) malloc ( sizeof ( int ) * 3 ); map [ 0 ] = a , map [ 1 ] = b , map [ 2 ] = c ; int except = - 1 ; int index = - 1 ; while ( map [ 0 ] + map [ 1 ] + map [ 2 ]) { index = getMax ( map , except ); // \u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6d88\u8017\u4e00\u4e2a if ( except == - 1 || map [ index ] > map [ except ]) { if ( map [ index ] > 0 ) { ans [ ansEnd ++ ] = index + 'a' ; map [ index ] -- ; } if ( map [ index ] > 0 ) { ans [ ansEnd ++ ] = index + 'a' ; map [ index ] -- ; } } else { if ( map [ index ] > 0 ) { ans [ ansEnd ++ ] = index + 'a' ; map [ index ] -- ; } } except = index ; if ( map [ 0 ] + map [ 1 ] + map [ 2 ] - map [ except ] == 0 ) { ans [ ansEnd ] = '\\0' ; return ans ; } } ans [ ansEnd ] = '\\0' ; free ( map ); return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1409/readme/","text":"1409. \u67e5\u8be2\u5e26\u952e\u7684\u6392\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5f85\u67e5\u6570\u7ec4 queries \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e3a 1 \u5230 m \u4e4b\u95f4\u7684\u6b63\u6574\u6570\u3002 \u8bf7\u4f60\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u5904\u7406\u6240\u6709\u5f85\u67e5\u9879 queries[i]\uff08\u4ece i=0 \u5230 i=queries.length-1\uff09\uff1a \u4e00\u5f00\u59cb\uff0c\u6392\u5217 P=[1,2,3,...,m]\u3002 \u5bf9\u4e8e\u5f53\u524d\u7684 i \uff0c\u8bf7\u4f60\u627e\u51fa\u5f85\u67e5\u9879 queries[i] \u5728\u6392\u5217 P \u4e2d\u7684\u4f4d\u7f6e\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\uff0c\u7136\u540e\u5c06\u5176\u4ece\u539f\u4f4d\u7f6e\u79fb\u52a8\u5230\u6392\u5217 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373\u4e0b\u6807\u4e3a 0 \u5904\uff09\u3002\u6ce8\u610f\uff0c queries[i] \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u5c31\u662f queries[i] \u7684\u67e5\u8be2\u7ed3\u679c\u3002 \u8bf7\u4f60\u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u5f85\u67e5\u6570\u7ec4 queries \u7684\u67e5\u8be2\u7ed3\u679c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 \u8f93\u5165\uff1aqueries = [3,1,2,1], m = 5 \u8f93\u51fa\uff1a[2,1,2,1] \u89e3\u91ca\uff1a\u5f85\u67e5\u6570\u7ec4 queries \u5904\u7406\u5982\u4e0b\uff1a \u5bf9\u4e8e i=0: queries[i]=3, P=[1,2,3,4,5], 3 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 2\uff0c\u63a5\u7740\u6211\u4eec\u628a 3 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[3,1,2,4,5] \u3002 \u5bf9\u4e8e i=1: queries[i]=1, P=[3,1,2,4,5], 1 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 1\uff0c\u63a5\u7740\u6211\u4eec\u628a 1 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[1,3,2,4,5] \u3002 \u5bf9\u4e8e i=2: queries[i]=2, P=[1,3,2,4,5], 2 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 2\uff0c\u63a5\u7740\u6211\u4eec\u628a 2 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[2,1,3,4,5] \u3002 \u5bf9\u4e8e i=3: queries[i]=1, P=[2,1,3,4,5], 1 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 1\uff0c\u63a5\u7740\u6211\u4eec\u628a 1 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[1,2,3,4,5] \u3002 \u56e0\u6b64\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u6570\u7ec4\u4e3a [2,1,2,1] \u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aqueries = [4,1,2,2], m = 4 \u8f93\u51fa\uff1a[3,1,2,0] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aqueries = [7,5,5,8,3], m = 8 \u8f93\u51fa\uff1a[6,5,0,7,5] \u63d0\u793a\uff1a 1 2 3 1 <= m <= 10^3 1 <= queries.length <= m 1 <= queries[i] <= m 2. \u89e3\u9898\u601d\u8def \u00b6 #define MAXN 1001 /** * Note: The returned array must be malloced, assume caller calls free(). */ int * processQueries ( int * queries , int queriesSize , int m , int * returnSize ){ // map \u5b58\u50a8 value : index \u6620\u5c04 int * ans = ( int * ) malloc ( sizeof ( int ) * queriesSize ); int ansEnd = 0 ; int * map = ( int * ) malloc ( sizeof ( int ) * ( m + 1 )); for ( int i = 0 ; i < m ; i ++ ) { map [ i + 1 ] = i ; } for ( int i = 0 ; i < queriesSize ; i ++ ) { int index = map [ queries [ i ] ]; // \u67e5\u8be2value\u7684\u7d22\u5f15 ans [ ansEnd ++ ] = index ; // \u628aindex\u4f4d\u7f6e\u7684\u5143\u7d20\u79fb\u52a8\u5230\u9996\u4f4d\uff0c\u6240\u6709\u4ece[0, index-1]\u4f4d\u7f6e\u7684\u5143\u7d20\u7d22\u5f15+1 for ( int j = 1 ; j <= m ; j ++ ) { if ( map [ j ] < index ) { map [ j ] += 1 ; } } map [ queries [ i ] ] = 0 ; } * returnSize = ansEnd ; return ans ; }","title":"[1409. \u67e5\u8be2\u5e26\u952e\u7684\u6392\u5217](https://leetcode-cn.com/problems/queries-on-a-permutation-with-key/)"},{"location":"leetcode/1409/readme/#1409","text":"","title":"1409. \u67e5\u8be2\u5e26\u952e\u7684\u6392\u5217"},{"location":"leetcode/1409/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5f85\u67e5\u6570\u7ec4 queries \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e3a 1 \u5230 m \u4e4b\u95f4\u7684\u6b63\u6574\u6570\u3002 \u8bf7\u4f60\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u5904\u7406\u6240\u6709\u5f85\u67e5\u9879 queries[i]\uff08\u4ece i=0 \u5230 i=queries.length-1\uff09\uff1a \u4e00\u5f00\u59cb\uff0c\u6392\u5217 P=[1,2,3,...,m]\u3002 \u5bf9\u4e8e\u5f53\u524d\u7684 i \uff0c\u8bf7\u4f60\u627e\u51fa\u5f85\u67e5\u9879 queries[i] \u5728\u6392\u5217 P \u4e2d\u7684\u4f4d\u7f6e\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\uff0c\u7136\u540e\u5c06\u5176\u4ece\u539f\u4f4d\u7f6e\u79fb\u52a8\u5230\u6392\u5217 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373\u4e0b\u6807\u4e3a 0 \u5904\uff09\u3002\u6ce8\u610f\uff0c queries[i] \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u5c31\u662f queries[i] \u7684\u67e5\u8be2\u7ed3\u679c\u3002 \u8bf7\u4f60\u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u5f85\u67e5\u6570\u7ec4 queries \u7684\u67e5\u8be2\u7ed3\u679c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 \u8f93\u5165\uff1aqueries = [3,1,2,1], m = 5 \u8f93\u51fa\uff1a[2,1,2,1] \u89e3\u91ca\uff1a\u5f85\u67e5\u6570\u7ec4 queries \u5904\u7406\u5982\u4e0b\uff1a \u5bf9\u4e8e i=0: queries[i]=3, P=[1,2,3,4,5], 3 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 2\uff0c\u63a5\u7740\u6211\u4eec\u628a 3 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[3,1,2,4,5] \u3002 \u5bf9\u4e8e i=1: queries[i]=1, P=[3,1,2,4,5], 1 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 1\uff0c\u63a5\u7740\u6211\u4eec\u628a 1 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[1,3,2,4,5] \u3002 \u5bf9\u4e8e i=2: queries[i]=2, P=[1,3,2,4,5], 2 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 2\uff0c\u63a5\u7740\u6211\u4eec\u628a 2 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[2,1,3,4,5] \u3002 \u5bf9\u4e8e i=3: queries[i]=1, P=[2,1,3,4,5], 1 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 1\uff0c\u63a5\u7740\u6211\u4eec\u628a 1 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[1,2,3,4,5] \u3002 \u56e0\u6b64\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u6570\u7ec4\u4e3a [2,1,2,1] \u3002 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aqueries = [4,1,2,2], m = 4 \u8f93\u51fa\uff1a[3,1,2,0] \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aqueries = [7,5,5,8,3], m = 8 \u8f93\u51fa\uff1a[6,5,0,7,5] \u63d0\u793a\uff1a 1 2 3 1 <= m <= 10^3 1 <= queries.length <= m 1 <= queries[i] <= m","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1409/readme/#2","text":"#define MAXN 1001 /** * Note: The returned array must be malloced, assume caller calls free(). */ int * processQueries ( int * queries , int queriesSize , int m , int * returnSize ){ // map \u5b58\u50a8 value : index \u6620\u5c04 int * ans = ( int * ) malloc ( sizeof ( int ) * queriesSize ); int ansEnd = 0 ; int * map = ( int * ) malloc ( sizeof ( int ) * ( m + 1 )); for ( int i = 0 ; i < m ; i ++ ) { map [ i + 1 ] = i ; } for ( int i = 0 ; i < queriesSize ; i ++ ) { int index = map [ queries [ i ] ]; // \u67e5\u8be2value\u7684\u7d22\u5f15 ans [ ansEnd ++ ] = index ; // \u628aindex\u4f4d\u7f6e\u7684\u5143\u7d20\u79fb\u52a8\u5230\u9996\u4f4d\uff0c\u6240\u6709\u4ece[0, index-1]\u4f4d\u7f6e\u7684\u5143\u7d20\u7d22\u5f15+1 for ( int j = 1 ; j <= m ; j ++ ) { if ( map [ j ] < index ) { map [ j ] += 1 ; } } map [ queries [ i ] ] = 0 ; } * returnSize = ansEnd ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1410/1410/index.c.html","text":"1410.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAXN 10000 #define TRUE 1 #define FALSE 0 int isStart ( char c ) { int ans = FALSE ; switch ( c ) { case 'q' : case 'a' : case 'g' : case 'l' : case 'f' : ans = TRUE ; break ; default : ans = FALSE ; } return ans ; } char mapStr ( char * str ) { if ( strcmp ( str , \"&quot;\" ) == 0 ) { return '\"' ; } if ( strcmp ( str , \"&apos;\" ) == 0 ) { return '\\'' ; } if ( strcmp ( str , \"&gt;\" ) == 0 ) { return '>' ; } if ( strcmp ( str , \"&lt;\" ) == 0 ) { return '<' ; } if ( strcmp ( str , \"&frasl;\" ) == 0 ) { return '/' ; } if ( strcmp ( str , \"&amp;\" ) == 0 ) { return '&' ; } return 0 ; } char getMapStr ( char * text , int index , int * nextIndex ) { int i = index ; int segflag = FALSE ; while ( i < index + 7 ) { if ( text [ i ] == ';' ) { segflag = TRUE ; break ; } i ++ ; } // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5206\u53f7\uff0c\u4e0d\u53ef\u80fd\u662f\u5b9e\u4f53 if ( segflag == FALSE ) { * nextIndex = index + 1 ; return 0 ; } // [index, i]\u53ef\u80fd\u5bf9\u5e94\u5b9e\u4f53\uff0c\u8f6c\u6362\u6210\u5b9e\u4f53\u8fd4\u56de char * substr = ( char * ) malloc ( sizeof ( char ) * ( i - index + 3 )); int substrEnd = 0 ; for ( int j = index ; j <= i ; j ++ ) { substr [ substrEnd ++ ] = text [ j ]; } substr [ substrEnd ++ ] = '\\0' ; printf ( \"%s, [%d, %d]\" , substr , index , i ); char ans = mapStr ( substr ); if ( ans == 0 ) { * nextIndex = index + 1 ; return 0 ; } else { * nextIndex = i + 1 ; return ans ; } return ans ; } char * entityParser ( char * text ){ if ( text == NULL ) return NULL ; const int n = strlen ( text ); int i = 0 ; char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 2 )); int ansEnd = 0 ; while ( i < n ) { // \u5982\u679c\u5339\u914d\u4e86\u5b9e\u4f53\u5f00\u5934\uff0c\u5c31\u7ee7\u7eed\u627e\u6700\u8fd1\u7684\u7ed3\u5c3e; if ( text [ i ] == '&' && i + 1 < n && isStart ( text [ i + 1 ])) { int next_i = - 1 ; char c = getMapStr ( text , i , & next_i ); if ( c == 0 ) { ans [ ansEnd ++ ] = text [ i ]; i ++ ; } else { ans [ ansEnd ++ ] = c ; i = next_i ; } } else { ans [ ansEnd ++ ] = text [ i ]; i ++ ; } } ans [ ansEnd ] = '\\0' ; return ans ; }","title":"1410.c"},{"location":"leetcode/1410/1410/index.c.html#1410c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAXN 10000 #define TRUE 1 #define FALSE 0 int isStart ( char c ) { int ans = FALSE ; switch ( c ) { case 'q' : case 'a' : case 'g' : case 'l' : case 'f' : ans = TRUE ; break ; default : ans = FALSE ; } return ans ; } char mapStr ( char * str ) { if ( strcmp ( str , \"&quot;\" ) == 0 ) { return '\"' ; } if ( strcmp ( str , \"&apos;\" ) == 0 ) { return '\\'' ; } if ( strcmp ( str , \"&gt;\" ) == 0 ) { return '>' ; } if ( strcmp ( str , \"&lt;\" ) == 0 ) { return '<' ; } if ( strcmp ( str , \"&frasl;\" ) == 0 ) { return '/' ; } if ( strcmp ( str , \"&amp;\" ) == 0 ) { return '&' ; } return 0 ; } char getMapStr ( char * text , int index , int * nextIndex ) { int i = index ; int segflag = FALSE ; while ( i < index + 7 ) { if ( text [ i ] == ';' ) { segflag = TRUE ; break ; } i ++ ; } // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5206\u53f7\uff0c\u4e0d\u53ef\u80fd\u662f\u5b9e\u4f53 if ( segflag == FALSE ) { * nextIndex = index + 1 ; return 0 ; } // [index, i]\u53ef\u80fd\u5bf9\u5e94\u5b9e\u4f53\uff0c\u8f6c\u6362\u6210\u5b9e\u4f53\u8fd4\u56de char * substr = ( char * ) malloc ( sizeof ( char ) * ( i - index + 3 )); int substrEnd = 0 ; for ( int j = index ; j <= i ; j ++ ) { substr [ substrEnd ++ ] = text [ j ]; } substr [ substrEnd ++ ] = '\\0' ; printf ( \"%s, [%d, %d]\" , substr , index , i ); char ans = mapStr ( substr ); if ( ans == 0 ) { * nextIndex = index + 1 ; return 0 ; } else { * nextIndex = i + 1 ; return ans ; } return ans ; } char * entityParser ( char * text ){ if ( text == NULL ) return NULL ; const int n = strlen ( text ); int i = 0 ; char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 2 )); int ansEnd = 0 ; while ( i < n ) { // \u5982\u679c\u5339\u914d\u4e86\u5b9e\u4f53\u5f00\u5934\uff0c\u5c31\u7ee7\u7eed\u627e\u6700\u8fd1\u7684\u7ed3\u5c3e; if ( text [ i ] == '&' && i + 1 < n && isStart ( text [ i + 1 ])) { int next_i = - 1 ; char c = getMapStr ( text , i , & next_i ); if ( c == 0 ) { ans [ ansEnd ++ ] = text [ i ]; i ++ ; } else { ans [ ansEnd ++ ] = c ; i = next_i ; } } else { ans [ ansEnd ++ ] = text [ i ]; i ++ ; } } ans [ ansEnd ] = '\\0' ; return ans ; }","title":"1410.c"},{"location":"leetcode/1410/1410/index.cpp.html","text":"1410.cpp \u00b6","title":"1410.cpp"},{"location":"leetcode/1410/1410/index.cpp.html#1410cpp","text":"","title":"1410.cpp"},{"location":"leetcode/1410/1410/index.py.html","text":"1410.py \u00b6","title":"1410.py"},{"location":"leetcode/1410/1410/index.py.html#1410py","text":"","title":"1410.py"},{"location":"leetcode/1410/readme/","text":"1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u300cHTML \u5b9e\u4f53\u89e3\u6790\u5668\u300d \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u89e3\u6790\u5668\uff0c\u5b83\u5c06 HTML \u4ee3\u7801\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u7528\u5b57\u7b26\u672c\u8eab\u66ff\u6362\u6389\u6240\u6709\u8fd9\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\u5b9e\u4f53\u3002 HTML \u91cc\u8fd9\u4e9b\u7279\u6b8a\u5b57\u7b26\u548c\u5b83\u4eec\u5bf9\u5e94\u7684\u5b57\u7b26\u5b9e\u4f53\u5305\u62ec\uff1a 1 2 3 4 5 6 \u53cc\u5f15\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &quot; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f \" \u3002 \u5355\u5f15\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &apos; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f ' \u3002 \u4e0e\u7b26\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp; \uff0c\u5bf9\u5e94\u5bf9\u7684\u5b57\u7b26\u662f & \u3002 \u5927\u4e8e\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a > \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f > \u3002 \u5c0f\u4e8e\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a < \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f < \u3002 \u659c\u7ebf\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &frasl; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f / \u3002 \u7ed9\u4f60\u8f93\u5165\u5b57\u7b26\u4e32 text \uff0c\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a HTML \u5b9e\u4f53\u89e3\u6790\u5668\uff0c\u8fd4\u56de\u89e3\u6790\u5668\u89e3\u6790\u540e\u7684\u7ed3\u679c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1atext = \"&amp; is an HTML entity but &ambassador; is not.\" \u8f93\u51fa\uff1a\"& is an HTML entity but &ambassador; is not.\" \u89e3\u91ca\uff1a\u89e3\u6790\u5668\u628a\u5b57\u7b26\u5b9e\u4f53 &amp; \u7528 & \u66ff\u6362 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1atext = \"and I quote: &quot;...&quot;\" \u8f93\u51fa\uff1a\"and I quote: \\\"...\\\"\" \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1atext = \"Stay home! Practice on Leetcode :)\" \u8f93\u51fa\uff1a\"Stay home! Practice on Leetcode :)\" \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1atext = \"x > y &amp;&amp; x < y is always false\" \u8f93\u51fa\uff1a\"x > y && x < y is always false\" \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1atext = \"leetcode.com&frasl;problemset&frasl;all\" \u8f93\u51fa\uff1a\"leetcode.com/problemset/all\" \u63d0\u793a\uff1a 1 2 1 <= text.length <= 10^5 \u5b57\u7b26\u4e32\u53ef\u80fd\u5305\u542b 256 \u4e2aASCII \u5b57\u7b26\u4e2d\u7684\u4efb\u610f\u5b57\u7b26\u3002 2. AC\u4ee3\u7801 \u00b6 C","title":"[1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668](https://leetcode-cn.com/problems/html-entity-parser)"},{"location":"leetcode/1410/readme/#1410-html","text":"","title":"1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668"},{"location":"leetcode/1410/readme/#1","text":"\u300cHTML \u5b9e\u4f53\u89e3\u6790\u5668\u300d \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u89e3\u6790\u5668\uff0c\u5b83\u5c06 HTML \u4ee3\u7801\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u7528\u5b57\u7b26\u672c\u8eab\u66ff\u6362\u6389\u6240\u6709\u8fd9\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\u5b9e\u4f53\u3002 HTML \u91cc\u8fd9\u4e9b\u7279\u6b8a\u5b57\u7b26\u548c\u5b83\u4eec\u5bf9\u5e94\u7684\u5b57\u7b26\u5b9e\u4f53\u5305\u62ec\uff1a 1 2 3 4 5 6 \u53cc\u5f15\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &quot; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f \" \u3002 \u5355\u5f15\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &apos; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f ' \u3002 \u4e0e\u7b26\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp; \uff0c\u5bf9\u5e94\u5bf9\u7684\u5b57\u7b26\u662f & \u3002 \u5927\u4e8e\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a > \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f > \u3002 \u5c0f\u4e8e\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a < \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f < \u3002 \u659c\u7ebf\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &frasl; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f / \u3002 \u7ed9\u4f60\u8f93\u5165\u5b57\u7b26\u4e32 text \uff0c\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a HTML \u5b9e\u4f53\u89e3\u6790\u5668\uff0c\u8fd4\u56de\u89e3\u6790\u5668\u89e3\u6790\u540e\u7684\u7ed3\u679c\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1atext = \"&amp; is an HTML entity but &ambassador; is not.\" \u8f93\u51fa\uff1a\"& is an HTML entity but &ambassador; is not.\" \u89e3\u91ca\uff1a\u89e3\u6790\u5668\u628a\u5b57\u7b26\u5b9e\u4f53 &amp; \u7528 & \u66ff\u6362 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1atext = \"and I quote: &quot;...&quot;\" \u8f93\u51fa\uff1a\"and I quote: \\\"...\\\"\" \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1atext = \"Stay home! Practice on Leetcode :)\" \u8f93\u51fa\uff1a\"Stay home! Practice on Leetcode :)\" \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1atext = \"x > y &amp;&amp; x < y is always false\" \u8f93\u51fa\uff1a\"x > y && x < y is always false\" \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1atext = \"leetcode.com&frasl;problemset&frasl;all\" \u8f93\u51fa\uff1a\"leetcode.com/problemset/all\" \u63d0\u793a\uff1a 1 2 1 <= text.length <= 10^5 \u5b57\u7b26\u4e32\u53ef\u80fd\u5305\u542b 256 \u4e2aASCII \u5b57\u7b26\u4e2d\u7684\u4efb\u610f\u5b57\u7b26\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1410/readme/#2-ac","text":"C","title":"2. AC\u4ee3\u7801"},{"location":"leetcode/1418/readme/","text":"1418. \u70b9\u83dc\u5c55\u793a\u8868 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 orders\uff0c\u8868\u793a\u5ba2\u6237\u5728\u9910\u5385\u4e2d\u5b8c\u6210\u7684\u8ba2\u5355\uff0c\u786e\u5207\u5730\u8bf4\uff0c orders[i]=[customerNamei,tableNumberi,foodItemi] \uff0c\u5176\u4e2d customerNamei \u662f\u5ba2\u6237\u7684\u59d3\u540d\uff0ctableNumberi \u662f\u5ba2\u6237\u6240\u5728\u9910\u684c\u7684\u684c\u53f7\uff0c\u800c foodItemi \u662f\u5ba2\u6237\u70b9\u7684\u9910\u54c1\u540d\u79f0\u3002 \u8bf7\u4f60\u8fd4\u56de\u8be5\u9910\u5385\u7684 \u70b9\u83dc\u5c55\u793a\u8868 \u3002\u5728\u8fd9\u5f20\u8868\u4e2d\uff0c\u8868\u4e2d\u7b2c\u4e00\u884c\u4e3a\u6807\u9898\uff0c\u5176\u7b2c\u4e00\u5217\u4e3a\u9910\u684c\u684c\u53f7 \u201cTable\u201d \uff0c\u540e\u9762\u6bcf\u4e00\u5217\u90fd\u662f\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u9910\u54c1\u540d\u79f0\u3002\u63a5\u4e0b\u6765\u6bcf\u4e00\u884c\u4e2d\u7684\u9879\u5219\u8868\u793a\u6bcf\u5f20\u9910\u684c\u8ba2\u8d2d\u7684\u76f8\u5e94\u9910\u54c1\u6570\u91cf\uff0c\u7b2c\u4e00\u5217\u5e94\u5f53\u586b\u5bf9\u5e94\u7684\u684c\u53f7\uff0c\u540e\u9762\u4f9d\u6b21\u586b\u5199\u4e0b\u5355\u7684\u9910\u54c1\u6570\u91cf\u3002 \u6ce8\u610f\uff1a\u5ba2\u6237\u59d3\u540d\u4e0d\u662f\u70b9\u83dc\u5c55\u793a\u8868\u7684\u4e00\u90e8\u5206\u3002\u6b64\u5916\uff0c\u8868\u4e2d\u7684\u6570\u636e\u884c\u5e94\u8be5\u6309\u9910\u684c\u684c\u53f7\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1aorders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]] \u8f93\u51fa\uff1a[[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \u89e3\u91ca\uff1a \u70b9\u83dc\u5c55\u793a\u8868\u5982\u4e0b\u6240\u793a\uff1a Table,Beef Burrito,Ceviche,Fried Chicken,Water 3 ,0 ,2 ,1 ,0 5 ,0 ,1 ,0 ,1 10 ,1 ,0 ,0 ,0 \u5bf9\u4e8e\u9910\u684c 3\uff1aDavid \u70b9\u4e86 \"Ceviche\" \u548c \"Fried Chicken\"\uff0c\u800c Rous \u70b9\u4e86 \"Ceviche\" \u800c\u9910\u684c 5\uff1aCarla \u70b9\u4e86 \"Water\" \u548c \"Ceviche\" \u9910\u684c 10\uff1aCorina \u70b9\u4e86 \"Beef Burrito\" \u793a\u4f8b 2\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aorders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]] \u8f93\u51fa\uff1a[[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \u89e3\u91ca\uff1a \u5bf9\u4e8e\u9910\u684c 1\uff1aAdam \u548c Brianna \u90fd\u70b9\u4e86 \"Canadian Waffles\" \u800c\u9910\u684c 12\uff1aJames, Ratesh \u548c Amadeus \u90fd\u70b9\u4e86 \"Fried Chicken\" \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aorders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]] \u8f93\u51fa\uff1a[[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]] \u63d0\u793a\uff1a 1 2 3 4 5 1 <= orders.length <= 5 * 10^4 orders[i].length == 3 1 <= customerNamei.length, foodItemi.length <= 20 customerNamei \u548c foodItemi \u7531\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u53ca\u7a7a\u683c\u5b57\u7b26 ' ' \u7ec4\u6210\u3002 tableNumberi \u662f 1 \u5230 500 \u8303\u56f4\u5185\u7684\u6574\u6570\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 #include <stdio.h> #include <string.h> #include <stdlib.h> #include <uthash.h> #define STRMAX 22 #define NUMMAX 5 #define ORDERLEN 50001 typedef struct FoodName { char strname [ STRMAX ]; int index ; UT_hash_handle hh ; } STR_INDEX ; // foodname \u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217 int FoodCompare ( STR_INDEX * a , STR_INDEX * b ) { return strcmp ( a -> strname , b -> strname ); } // \u684c\u53f7\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5217 int TableCompare ( STR_INDEX * a , STR_INDEX * b ) { int num1 = atoi ( a -> strname ); int num2 = atoi ( b -> strname ); return num1 - num2 ; } void int2str ( int n , char * str ) { int end = 0 ; while ( n ) { str [ end ++ ] = n % 10 + '0' ; n = n / 10 ; } str [ end ] = '\\0' ; int left = 0 ; int right = end - 1 ; char tmp ; while ( left < right ) { tmp = str [ left ]; str [ left ] = str [ right ]; str [ right ] = tmp ; left ++ ; right -- ; } } void addOne ( char * str ) { printf ( \"%s,\" , str ); int a = atoi ( str ); a = a + 1 ; printf ( \"%d, \" , a ); int2str ( a , str ); } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ char *** displayTable ( char *** orders , int ordersSize , int * ordersColSize , int * returnSize , int ** returnColumnSizes ){ STR_INDEX * foodNames = NULL ; STR_INDEX * tableIndexs = NULL ; STR_INDEX * currFood = NULL ; STR_INDEX * currTable = NULL ; for ( int i = 0 ; i < ordersSize ; i ++ ) { char * foodName = orders [ i ][ 2 ]; HASH_FIND_STR ( foodNames , foodName , currFood ); if ( currFood == NULL ) { currFood = ( STR_INDEX * ) malloc ( sizeof ( STR_INDEX )); strcpy ( currFood -> strname , foodName ); currFood -> strname [ strlen ( foodName )] = '\\0' ; currFood -> index = - 1 ; HASH_ADD_STR ( foodNames , strname , currFood ); } char * tableIndex = orders [ i ][ 1 ]; HASH_FIND_STR ( tableIndexs , tableIndex , currTable ); if ( currTable == NULL ) { currTable = ( STR_INDEX * ) malloc ( sizeof ( STR_INDEX )); strcpy ( currTable -> strname , tableIndex ); currTable -> strname [ strlen ( tableIndex )] = '\\0' ; HASH_ADD_STR ( tableIndexs , strname , currTable ); } } int foodCount = HASH_COUNT ( foodNames ); int tableCount = HASH_COUNT ( tableIndexs ); HASH_SORT ( foodNames , FoodCompare ); HASH_SORT ( tableIndexs , TableCompare ); char *** ans = ( char *** ) malloc ( sizeof ( char ** ) * ( tableCount + 1 )); for ( int i = 0 ; i <= tableCount ; i ++ ) { ans [ i ] = ( char ** ) malloc ( sizeof ( char * ) * ( foodCount + 1 )); for ( int j = 0 ; j <= foodCount ; j ++ ) { ans [ i ][ j ] = ( char * ) malloc ( sizeof ( char ) * STRMAX ); ans [ i ][ j ][ 0 ] = '0' ; ans [ i ][ j ][ 1 ] = '\\0' ; } } strcpy ( ans [ 0 ][ 0 ], \"Table\" ); ans [ 0 ][ 0 ][ 5 ] = '\\0' ; int findex = 1 ; for ( currFood = foodNames ; currFood != NULL ; currFood = currFood -> hh . next ) { currFood -> index = findex ; strcpy ( ans [ 0 ][ findex ], currFood -> strname ); ans [ 0 ][ findex ][ strlen ( currFood -> strname )] = '\\0' ; findex += 1 ; } int tindex = 1 ; for ( currTable = tableIndexs ; currTable != NULL ; currTable = currTable -> hh . next ) { currTable -> index = tindex ; strcpy ( ans [ tindex ][ 0 ], currTable -> strname ); ans [ tindex ][ 0 ][ strlen ( currTable -> strname )] = '\\0' ; tindex += 1 ; } for ( int i = 0 ; i < ordersSize ; i ++ ) { char * tableIndex = orders [ i ][ 1 ]; char * foodName = orders [ i ][ 2 ]; findex = - 1 ; tindex = - 1 ; HASH_FIND_STR ( tableIndexs , tableIndex , currTable ); HASH_FIND_STR ( foodNames , foodName , currFood ); if ( currTable != NULL ) tindex = currTable -> index ; if ( currFood != NULL ) findex = currFood -> index ; if ( findex != - 1 && tindex != - 1 ) { addOne ( ans [ tindex ][ findex ]); } else { printf ( \"tindex: %d, findex: %d\" , tindex , findex ); } } int * colsSize = ( int * ) malloc ( sizeof ( int ) * ( tableCount + 1 )); for ( int i = 0 ; i <= tableCount ; i ++ ) { colsSize [ i ] = foodCount + 1 ; } * returnSize = tableCount + 1 ; * returnColumnSizes = colsSize ; return ans ; }","title":"[1418. \u70b9\u83dc\u5c55\u793a\u8868](https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/)"},{"location":"leetcode/1418/readme/#1418","text":"","title":"1418. \u70b9\u83dc\u5c55\u793a\u8868"},{"location":"leetcode/1418/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 orders\uff0c\u8868\u793a\u5ba2\u6237\u5728\u9910\u5385\u4e2d\u5b8c\u6210\u7684\u8ba2\u5355\uff0c\u786e\u5207\u5730\u8bf4\uff0c orders[i]=[customerNamei,tableNumberi,foodItemi] \uff0c\u5176\u4e2d customerNamei \u662f\u5ba2\u6237\u7684\u59d3\u540d\uff0ctableNumberi \u662f\u5ba2\u6237\u6240\u5728\u9910\u684c\u7684\u684c\u53f7\uff0c\u800c foodItemi \u662f\u5ba2\u6237\u70b9\u7684\u9910\u54c1\u540d\u79f0\u3002 \u8bf7\u4f60\u8fd4\u56de\u8be5\u9910\u5385\u7684 \u70b9\u83dc\u5c55\u793a\u8868 \u3002\u5728\u8fd9\u5f20\u8868\u4e2d\uff0c\u8868\u4e2d\u7b2c\u4e00\u884c\u4e3a\u6807\u9898\uff0c\u5176\u7b2c\u4e00\u5217\u4e3a\u9910\u684c\u684c\u53f7 \u201cTable\u201d \uff0c\u540e\u9762\u6bcf\u4e00\u5217\u90fd\u662f\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u9910\u54c1\u540d\u79f0\u3002\u63a5\u4e0b\u6765\u6bcf\u4e00\u884c\u4e2d\u7684\u9879\u5219\u8868\u793a\u6bcf\u5f20\u9910\u684c\u8ba2\u8d2d\u7684\u76f8\u5e94\u9910\u54c1\u6570\u91cf\uff0c\u7b2c\u4e00\u5217\u5e94\u5f53\u586b\u5bf9\u5e94\u7684\u684c\u53f7\uff0c\u540e\u9762\u4f9d\u6b21\u586b\u5199\u4e0b\u5355\u7684\u9910\u54c1\u6570\u91cf\u3002 \u6ce8\u610f\uff1a\u5ba2\u6237\u59d3\u540d\u4e0d\u662f\u70b9\u83dc\u5c55\u793a\u8868\u7684\u4e00\u90e8\u5206\u3002\u6b64\u5916\uff0c\u8868\u4e2d\u7684\u6570\u636e\u884c\u5e94\u8be5\u6309\u9910\u684c\u684c\u53f7\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u8f93\u5165\uff1aorders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]] \u8f93\u51fa\uff1a[[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \u89e3\u91ca\uff1a \u70b9\u83dc\u5c55\u793a\u8868\u5982\u4e0b\u6240\u793a\uff1a Table,Beef Burrito,Ceviche,Fried Chicken,Water 3 ,0 ,2 ,1 ,0 5 ,0 ,1 ,0 ,1 10 ,1 ,0 ,0 ,0 \u5bf9\u4e8e\u9910\u684c 3\uff1aDavid \u70b9\u4e86 \"Ceviche\" \u548c \"Fried Chicken\"\uff0c\u800c Rous \u70b9\u4e86 \"Ceviche\" \u800c\u9910\u684c 5\uff1aCarla \u70b9\u4e86 \"Water\" \u548c \"Ceviche\" \u9910\u684c 10\uff1aCorina \u70b9\u4e86 \"Beef Burrito\" \u793a\u4f8b 2\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aorders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]] \u8f93\u51fa\uff1a[[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \u89e3\u91ca\uff1a \u5bf9\u4e8e\u9910\u684c 1\uff1aAdam \u548c Brianna \u90fd\u70b9\u4e86 \"Canadian Waffles\" \u800c\u9910\u684c 12\uff1aJames, Ratesh \u548c Amadeus \u90fd\u70b9\u4e86 \"Fried Chicken\" \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aorders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]] \u8f93\u51fa\uff1a[[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]] \u63d0\u793a\uff1a 1 2 3 4 5 1 <= orders.length <= 5 * 10^4 orders[i].length == 3 1 <= customerNamei.length, foodItemi.length <= 20 customerNamei \u548c foodItemi \u7531\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u53ca\u7a7a\u683c\u5b57\u7b26 ' ' \u7ec4\u6210\u3002 tableNumberi \u662f 1 \u5230 500 \u8303\u56f4\u5185\u7684\u6574\u6570\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1418/readme/#2","text":"#include <stdio.h> #include <string.h> #include <stdlib.h> #include <uthash.h> #define STRMAX 22 #define NUMMAX 5 #define ORDERLEN 50001 typedef struct FoodName { char strname [ STRMAX ]; int index ; UT_hash_handle hh ; } STR_INDEX ; // foodname \u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217 int FoodCompare ( STR_INDEX * a , STR_INDEX * b ) { return strcmp ( a -> strname , b -> strname ); } // \u684c\u53f7\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5217 int TableCompare ( STR_INDEX * a , STR_INDEX * b ) { int num1 = atoi ( a -> strname ); int num2 = atoi ( b -> strname ); return num1 - num2 ; } void int2str ( int n , char * str ) { int end = 0 ; while ( n ) { str [ end ++ ] = n % 10 + '0' ; n = n / 10 ; } str [ end ] = '\\0' ; int left = 0 ; int right = end - 1 ; char tmp ; while ( left < right ) { tmp = str [ left ]; str [ left ] = str [ right ]; str [ right ] = tmp ; left ++ ; right -- ; } } void addOne ( char * str ) { printf ( \"%s,\" , str ); int a = atoi ( str ); a = a + 1 ; printf ( \"%d, \" , a ); int2str ( a , str ); } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ char *** displayTable ( char *** orders , int ordersSize , int * ordersColSize , int * returnSize , int ** returnColumnSizes ){ STR_INDEX * foodNames = NULL ; STR_INDEX * tableIndexs = NULL ; STR_INDEX * currFood = NULL ; STR_INDEX * currTable = NULL ; for ( int i = 0 ; i < ordersSize ; i ++ ) { char * foodName = orders [ i ][ 2 ]; HASH_FIND_STR ( foodNames , foodName , currFood ); if ( currFood == NULL ) { currFood = ( STR_INDEX * ) malloc ( sizeof ( STR_INDEX )); strcpy ( currFood -> strname , foodName ); currFood -> strname [ strlen ( foodName )] = '\\0' ; currFood -> index = - 1 ; HASH_ADD_STR ( foodNames , strname , currFood ); } char * tableIndex = orders [ i ][ 1 ]; HASH_FIND_STR ( tableIndexs , tableIndex , currTable ); if ( currTable == NULL ) { currTable = ( STR_INDEX * ) malloc ( sizeof ( STR_INDEX )); strcpy ( currTable -> strname , tableIndex ); currTable -> strname [ strlen ( tableIndex )] = '\\0' ; HASH_ADD_STR ( tableIndexs , strname , currTable ); } } int foodCount = HASH_COUNT ( foodNames ); int tableCount = HASH_COUNT ( tableIndexs ); HASH_SORT ( foodNames , FoodCompare ); HASH_SORT ( tableIndexs , TableCompare ); char *** ans = ( char *** ) malloc ( sizeof ( char ** ) * ( tableCount + 1 )); for ( int i = 0 ; i <= tableCount ; i ++ ) { ans [ i ] = ( char ** ) malloc ( sizeof ( char * ) * ( foodCount + 1 )); for ( int j = 0 ; j <= foodCount ; j ++ ) { ans [ i ][ j ] = ( char * ) malloc ( sizeof ( char ) * STRMAX ); ans [ i ][ j ][ 0 ] = '0' ; ans [ i ][ j ][ 1 ] = '\\0' ; } } strcpy ( ans [ 0 ][ 0 ], \"Table\" ); ans [ 0 ][ 0 ][ 5 ] = '\\0' ; int findex = 1 ; for ( currFood = foodNames ; currFood != NULL ; currFood = currFood -> hh . next ) { currFood -> index = findex ; strcpy ( ans [ 0 ][ findex ], currFood -> strname ); ans [ 0 ][ findex ][ strlen ( currFood -> strname )] = '\\0' ; findex += 1 ; } int tindex = 1 ; for ( currTable = tableIndexs ; currTable != NULL ; currTable = currTable -> hh . next ) { currTable -> index = tindex ; strcpy ( ans [ tindex ][ 0 ], currTable -> strname ); ans [ tindex ][ 0 ][ strlen ( currTable -> strname )] = '\\0' ; tindex += 1 ; } for ( int i = 0 ; i < ordersSize ; i ++ ) { char * tableIndex = orders [ i ][ 1 ]; char * foodName = orders [ i ][ 2 ]; findex = - 1 ; tindex = - 1 ; HASH_FIND_STR ( tableIndexs , tableIndex , currTable ); HASH_FIND_STR ( foodNames , foodName , currFood ); if ( currTable != NULL ) tindex = currTable -> index ; if ( currFood != NULL ) findex = currFood -> index ; if ( findex != - 1 && tindex != - 1 ) { addOne ( ans [ tindex ][ findex ]); } else { printf ( \"tindex: %d, findex: %d\" , tindex , findex ); } } int * colsSize = ( int * ) malloc ( sizeof ( int ) * ( tableCount + 1 )); for ( int i = 0 ; i <= tableCount ; i ++ ) { colsSize [ i ] = foodCount + 1 ; } * returnSize = tableCount + 1 ; * returnColumnSizes = colsSize ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1423/readme/","text":"1423. \u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u51e0\u5f20\u5361\u724c \u6392\u6210\u4e00\u884c\uff0c\u6bcf\u5f20\u5361\u724c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\u6570\u3002\u70b9\u6570\u7531\u6574\u6570\u6570\u7ec4 cardPoints \u7ed9\u51fa\u3002 \u6bcf\u6b21\u884c\u52a8\uff0c\u4f60\u53ef\u4ee5\u4ece\u884c\u7684\u5f00\u5934\u6216\u8005\u672b\u5c3e\u62ff\u4e00\u5f20\u5361\u724c\uff0c\u6700\u7ec8\u4f60\u5fc5\u987b\u6b63\u597d\u62ff k \u5f20\u5361\u724c\u3002 \u4f60\u7684\u70b9\u6570\u5c31\u662f\u4f60\u62ff\u5230\u624b\u4e2d\u7684\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cardPoints \u548c\u6574\u6570 k\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [1,2,3,4,5,6,1], k = 3 \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u7b2c\u4e00\u6b21\u884c\u52a8\uff0c\u4e0d\u7ba1\u62ff\u54ea\u5f20\u724c\uff0c\u4f60\u7684\u70b9\u6570\u603b\u662f 1 \u3002\u4f46\u662f\uff0c\u5148\u62ff\u6700\u53f3\u8fb9\u7684\u5361\u724c\u5c06\u4f1a\u6700\u5927\u5316\u4f60\u7684\u53ef\u83b7\u5f97\u70b9\u6570\u3002\u6700\u4f18\u7b56\u7565\u662f\u62ff\u53f3\u8fb9\u7684\u4e09\u5f20\u724c\uff0c\u6700\u7ec8\u70b9\u6570\u4e3a 1 + 6 + 5 = 12 \u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [2,2,2], k = 2 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u65e0\u8bba\u4f60\u62ff\u8d77\u54ea\u4e24\u5f20\u5361\u724c\uff0c\u53ef\u83b7\u5f97\u7684\u70b9\u6570\u603b\u662f 4 \u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [9,7,7,9,7,7,9], k = 7 \u8f93\u51fa\uff1a55 \u89e3\u91ca\uff1a\u4f60\u5fc5\u987b\u62ff\u8d77\u6240\u6709\u5361\u724c\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u70b9\u6570\u4e3a\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002 \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [1,1000,1], k = 1 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u4f60\u65e0\u6cd5\u62ff\u5230\u4e2d\u95f4\u90a3\u5f20\u5361\u724c\uff0c\u6240\u4ee5\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u4e3a 1 \u3002 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1acardPoints = [1,79,80,1,1,1,200,1], k = 3 \u8f93\u51fa\uff1a202 \u63d0\u793a\uff1a 1 2 3 1 <= cardPoints.length <= 10^5 1 <= cardPoints[i] <= 10^4 1 <= k <= cardPoints.length 2. \u89e3\u9898\u601d\u8def \u00b6 #define NN 100000 int ** matrix = NULL ; int * colSize = NULL ; int n = 0 ; int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } return 0 ; } void iter ( int i , int j , int * ans , int * ansEnd ) { while ( i >= 0 ) { if ( j < colSize [ i ]) { ans [( * ansEnd ) ++ ] = matrix [ i ][ j ]; } i -= 1 ; j += 1 ; } } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * findDiagonalOrder ( int ** nums , int numsSize , int * numsColSize , int * returnSize ){ int m = 0 ; int i , j , k ; for ( i = 0 ; i < numsSize ; i ++ ) { m = max ( m , numsColSize [ i ]); } int * ans = ( malloc ( sizeof ( int ) * NN )); int ansEnd = 0 ; matrix = nums ; n = numsSize ; colSize = numsColSize ; for ( i = 0 ; i < numsSize - 1 ; i ++ ) { iter ( i , 0 , ans , & ansEnd ); } for ( j = 0 ; j < m ; j ++ ) { iter ( numsSize - 1 , j , ans , & ansEnd ); } * returnSize = ansEnd ; return ans ; }","title":"[1423. \u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570](https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/)"},{"location":"leetcode/1423/readme/#1423","text":"","title":"1423. \u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570"},{"location":"leetcode/1423/readme/#1","text":"\u51e0\u5f20\u5361\u724c \u6392\u6210\u4e00\u884c\uff0c\u6bcf\u5f20\u5361\u724c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\u6570\u3002\u70b9\u6570\u7531\u6574\u6570\u6570\u7ec4 cardPoints \u7ed9\u51fa\u3002 \u6bcf\u6b21\u884c\u52a8\uff0c\u4f60\u53ef\u4ee5\u4ece\u884c\u7684\u5f00\u5934\u6216\u8005\u672b\u5c3e\u62ff\u4e00\u5f20\u5361\u724c\uff0c\u6700\u7ec8\u4f60\u5fc5\u987b\u6b63\u597d\u62ff k \u5f20\u5361\u724c\u3002 \u4f60\u7684\u70b9\u6570\u5c31\u662f\u4f60\u62ff\u5230\u624b\u4e2d\u7684\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cardPoints \u548c\u6574\u6570 k\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [1,2,3,4,5,6,1], k = 3 \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u7b2c\u4e00\u6b21\u884c\u52a8\uff0c\u4e0d\u7ba1\u62ff\u54ea\u5f20\u724c\uff0c\u4f60\u7684\u70b9\u6570\u603b\u662f 1 \u3002\u4f46\u662f\uff0c\u5148\u62ff\u6700\u53f3\u8fb9\u7684\u5361\u724c\u5c06\u4f1a\u6700\u5927\u5316\u4f60\u7684\u53ef\u83b7\u5f97\u70b9\u6570\u3002\u6700\u4f18\u7b56\u7565\u662f\u62ff\u53f3\u8fb9\u7684\u4e09\u5f20\u724c\uff0c\u6700\u7ec8\u70b9\u6570\u4e3a 1 + 6 + 5 = 12 \u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [2,2,2], k = 2 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u65e0\u8bba\u4f60\u62ff\u8d77\u54ea\u4e24\u5f20\u5361\u724c\uff0c\u53ef\u83b7\u5f97\u7684\u70b9\u6570\u603b\u662f 4 \u3002 \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [9,7,7,9,7,7,9], k = 7 \u8f93\u51fa\uff1a55 \u89e3\u91ca\uff1a\u4f60\u5fc5\u987b\u62ff\u8d77\u6240\u6709\u5361\u724c\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u70b9\u6570\u4e3a\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002 \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1acardPoints = [1,1000,1], k = 1 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u4f60\u65e0\u6cd5\u62ff\u5230\u4e2d\u95f4\u90a3\u5f20\u5361\u724c\uff0c\u6240\u4ee5\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u4e3a 1 \u3002 \u793a\u4f8b 5\uff1a 1 2 \u8f93\u5165\uff1acardPoints = [1,79,80,1,1,1,200,1], k = 3 \u8f93\u51fa\uff1a202 \u63d0\u793a\uff1a 1 2 3 1 <= cardPoints.length <= 10^5 1 <= cardPoints[i] <= 10^4 1 <= k <= cardPoints.length","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1423/readme/#2","text":"#define NN 100000 int ** matrix = NULL ; int * colSize = NULL ; int n = 0 ; int max ( int a , int b ) { if ( a > b ) { return a ; } else { return b ; } return 0 ; } void iter ( int i , int j , int * ans , int * ansEnd ) { while ( i >= 0 ) { if ( j < colSize [ i ]) { ans [( * ansEnd ) ++ ] = matrix [ i ][ j ]; } i -= 1 ; j += 1 ; } } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * findDiagonalOrder ( int ** nums , int numsSize , int * numsColSize , int * returnSize ){ int m = 0 ; int i , j , k ; for ( i = 0 ; i < numsSize ; i ++ ) { m = max ( m , numsColSize [ i ]); } int * ans = ( malloc ( sizeof ( int ) * NN )); int ansEnd = 0 ; matrix = nums ; n = numsSize ; colSize = numsColSize ; for ( i = 0 ; i < numsSize - 1 ; i ++ ) { iter ( i , 0 , ans , & ansEnd ); } for ( j = 0 ; j < m ; j ++ ) { iter ( numsSize - 1 , j , ans , & ansEnd ); } * returnSize = ansEnd ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/1452/readme/","text":"1452. \u6536\u85cf\u6e05\u5355 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 favoriteCompanies \uff0c\u5176\u4e2d favoriteCompanies[i] \u662f\u7b2c i \u540d\u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002 \u8bf7\u627e\u51fa\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\u7684\u6536\u85cf\u6e05\u5355\uff0c\u5e76\u8fd4\u56de\u8be5\u6e05\u5355\u4e0b\u6807\u3002\u4e0b\u6807\u9700\u8981\u6309\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]] \u8f93\u51fa\uff1a[0,1,4] \u89e3\u91ca\uff1a favoriteCompanies[2]=[\"google\",\"facebook\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\u3002 favoriteCompanies[3]=[\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u548c favoriteCompanies[1]=[\"google\",\"microsoft\"] \u7684\u5b50\u96c6\u3002 \u5176\u4f59\u7684\u6536\u85cf\u6e05\u5355\u5747\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1,4] \u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]] \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1afavoriteCompanies[2]=[\"facebook\",\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1] \u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]] \u8f93\u51fa\uff1a[0,1,2,3] \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= favoriteCompanies.length <= 100 1 <= favoriteCompanies[i].length <= 500 1 <= favoriteCompanies[i][j].length <= 20 favoriteCompanies[i] \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32 \u5404\u4e0d\u76f8\u540c \u3002 \u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u4e5f \u5404\u4e0d\u76f8\u540c \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4fbf\u6211\u4eec\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\u6bcf\u4e2a\u6e05\u5355\uff0c favoriteCompanies[i] != favoriteCompanies[j] \u4ecd\u7136\u6210\u7acb\u3002 \u6240\u6709\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution : def peopleIndexes ( self , favoriteCompanies : List [ List [ str ]]) -> List [ int ]: listset = [] for liststr in favoriteCompanies : listset . append ( set ( liststr )) ans = [] for i in range ( len ( favoriteCompanies )): flag = True for j in range ( len ( favoriteCompanies )): if i != j and ( listset [ i ] & listset [ j ] == listset [ i ]): flag = False break if flag : ans . append ( i ) return ans","title":"[1452. \u6536\u85cf\u6e05\u5355](https://leetcode-cn.com/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list/)"},{"location":"leetcode/1452/readme/#1452","text":"","title":"1452. \u6536\u85cf\u6e05\u5355"},{"location":"leetcode/1452/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 favoriteCompanies \uff0c\u5176\u4e2d favoriteCompanies[i] \u662f\u7b2c i \u540d\u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002 \u8bf7\u627e\u51fa\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\u7684\u6536\u85cf\u6e05\u5355\uff0c\u5e76\u8fd4\u56de\u8be5\u6e05\u5355\u4e0b\u6807\u3002\u4e0b\u6807\u9700\u8981\u6309\u5347\u5e8f\u6392\u5217\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]] \u8f93\u51fa\uff1a[0,1,4] \u89e3\u91ca\uff1a favoriteCompanies[2]=[\"google\",\"facebook\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\u3002 favoriteCompanies[3]=[\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u548c favoriteCompanies[1]=[\"google\",\"microsoft\"] \u7684\u5b50\u96c6\u3002 \u5176\u4f59\u7684\u6536\u85cf\u6e05\u5355\u5747\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1,4] \u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]] \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1afavoriteCompanies[2]=[\"facebook\",\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1] \u3002 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]] \u8f93\u51fa\uff1a[0,1,2,3] \u63d0\u793a\uff1a 1 2 3 4 5 6 1 <= favoriteCompanies.length <= 100 1 <= favoriteCompanies[i].length <= 500 1 <= favoriteCompanies[i][j].length <= 20 favoriteCompanies[i] \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32 \u5404\u4e0d\u76f8\u540c \u3002 \u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u4e5f \u5404\u4e0d\u76f8\u540c \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4fbf\u6211\u4eec\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\u6bcf\u4e2a\u6e05\u5355\uff0c favoriteCompanies[i] != favoriteCompanies[j] \u4ecd\u7136\u6210\u7acb\u3002 \u6240\u6709\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/1452/readme/#2","text":"class Solution : def peopleIndexes ( self , favoriteCompanies : List [ List [ str ]]) -> List [ int ]: listset = [] for liststr in favoriteCompanies : listset . append ( set ( liststr )) ans = [] for i in range ( len ( favoriteCompanies )): flag = True for j in range ( len ( favoriteCompanies )): if i != j and ( listset [ i ] & listset [ j ] == listset [ i ]): flag = False break if flag : ans . append ( i ) return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/150/150/index.c.html","text":"150.c \u00b6 #include <stdio.h> #include <string.h> #include <stdlib.h> int op ( char * o , int a , int b ) { if ( strcmp ( o , \"+\" ) == 0 ) return a + b ; if ( strcmp ( o , \"-\" ) == 0 ) return a - b ; if ( strcmp ( o , \"*\" ) == 0 ) return a * b ; if ( strcmp ( o , \"/\" ) == 0 ) return a / b ; return 0 ; } int evalRPN ( char ** tokens , int tokensSize ){ int ans = 0 ; int * stack = ( int * ) malloc ( sizeof ( int ) * tokensSize ); int top = 0 ; // \u9047\u5230\u6570\u5b57\u5165\u6808\uff0c\u9047\u5230\u64cd\u4f5c\u7b26\u4ece\u6808\u4e2d\u53d6\u6570\u5b57\u64cd\u4f5c for ( int i = 0 ; i < tokensSize ; i ++ ) { if ( strcmp ( tokens [ i ], \"+\" ) == 0 || strcmp ( tokens [ i ], \"-\" ) == 0 || strcmp ( tokens [ i ], \"*\" ) == 0 || strcmp ( tokens [ i ], \"/\" ) == 0 ) { int num1 = stack [ -- top ]; int num2 = stack [ -- top ]; int num3 = op ( tokens [ i ], num2 , num1 ); stack [ top ++ ] = num3 ; } else { stack [ top ++ ] = atoi ( tokens [ i ] ); } } ans = stack [ 0 ]; free ( stack ); return ans ; } int main () { char * tokens [] = { \"10\" , \"6\" , \"9\" , \"3\" , \"+\" , \"-11\" , \"*\" , \"/\" , \"*\" , \"17\" , \"+\" , \"5\" , \"+\" }; int tokenSize = 13 ; int ans = evalRPN ( tokens , tokenSize ); printf ( \"ans:%d \\n \" , ans ); return 0 ; }","title":"150.c"},{"location":"leetcode/150/150/index.c.html#150c","text":"#include <stdio.h> #include <string.h> #include <stdlib.h> int op ( char * o , int a , int b ) { if ( strcmp ( o , \"+\" ) == 0 ) return a + b ; if ( strcmp ( o , \"-\" ) == 0 ) return a - b ; if ( strcmp ( o , \"*\" ) == 0 ) return a * b ; if ( strcmp ( o , \"/\" ) == 0 ) return a / b ; return 0 ; } int evalRPN ( char ** tokens , int tokensSize ){ int ans = 0 ; int * stack = ( int * ) malloc ( sizeof ( int ) * tokensSize ); int top = 0 ; // \u9047\u5230\u6570\u5b57\u5165\u6808\uff0c\u9047\u5230\u64cd\u4f5c\u7b26\u4ece\u6808\u4e2d\u53d6\u6570\u5b57\u64cd\u4f5c for ( int i = 0 ; i < tokensSize ; i ++ ) { if ( strcmp ( tokens [ i ], \"+\" ) == 0 || strcmp ( tokens [ i ], \"-\" ) == 0 || strcmp ( tokens [ i ], \"*\" ) == 0 || strcmp ( tokens [ i ], \"/\" ) == 0 ) { int num1 = stack [ -- top ]; int num2 = stack [ -- top ]; int num3 = op ( tokens [ i ], num2 , num1 ); stack [ top ++ ] = num3 ; } else { stack [ top ++ ] = atoi ( tokens [ i ] ); } } ans = stack [ 0 ]; free ( stack ); return ans ; } int main () { char * tokens [] = { \"10\" , \"6\" , \"9\" , \"3\" , \"+\" , \"-11\" , \"*\" , \"/\" , \"*\" , \"17\" , \"+\" , \"5\" , \"+\" }; int tokenSize = 13 ; int ans = evalRPN ( tokens , tokenSize ); printf ( \"ans:%d \\n \" , ans ); return 0 ; }","title":"150.c"},{"location":"leetcode/150/150/index.cpp.html","text":"150.cpp \u00b6 #include <iostream> #include <vector> #include <string> #include <stack> #include <set> using namespace std ; // \u8fd0\u7b97\u7b26\u53ea\u8003\u8651\u4e86\u52a0\u51cf\u4e58\u9664 template < typename T > T compute ( T first , T second , string op ){ if ( op == \"+\" ) return first + second ; if ( op == \"-\" ) return first - second ; if ( op == \"*\" ) return first * second ; if ( op == \"/\" && second != 0 ) return first / second ; return - 1000 ; // \u8bf4\u660e\u8f93\u5165\u7684\u6570\u636e\u6709\u95ee\u9898 } int evalRPN ( vector < string > & tokens ) { // write your code here stack < int > s ; set < string > op = { \"+\" , \"-\" , \"*\" , \"/\" }; // \u90fd\u662f\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u903b\u8f91\u662f\u76f8\u540c\u7684 for ( size_t i = 0 ; i < tokens . size (); i ++ ){ if ( op . count ( tokens [ i ]) > 0 ){ int first = 0 , second = 0 ; if ( ! s . empty ()){ first = s . top () ; s . pop (); } if ( ! s . empty ()){ second = s . top () ; s . pop (); } s . push ( compute ( second , first , tokens [ i ])); } else { s . push ( stoi ( tokens [ i ])); } } return s . top (); } int main () { vector < string > tokens ( 5 ); tokens [ 0 ] = \"20\" ; tokens [ 1 ] = \"12\" ; tokens [ 2 ] = \"+\" ; tokens [ 3 ] = \"2\" ; tokens [ 4 ] = \"*\" ; int ans = evalRPN ( tokens ); printf ( \"ans:%d \\n \" , ans ); return 0 ; }","title":"150.cpp"},{"location":"leetcode/150/150/index.cpp.html#150cpp","text":"#include <iostream> #include <vector> #include <string> #include <stack> #include <set> using namespace std ; // \u8fd0\u7b97\u7b26\u53ea\u8003\u8651\u4e86\u52a0\u51cf\u4e58\u9664 template < typename T > T compute ( T first , T second , string op ){ if ( op == \"+\" ) return first + second ; if ( op == \"-\" ) return first - second ; if ( op == \"*\" ) return first * second ; if ( op == \"/\" && second != 0 ) return first / second ; return - 1000 ; // \u8bf4\u660e\u8f93\u5165\u7684\u6570\u636e\u6709\u95ee\u9898 } int evalRPN ( vector < string > & tokens ) { // write your code here stack < int > s ; set < string > op = { \"+\" , \"-\" , \"*\" , \"/\" }; // \u90fd\u662f\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u903b\u8f91\u662f\u76f8\u540c\u7684 for ( size_t i = 0 ; i < tokens . size (); i ++ ){ if ( op . count ( tokens [ i ]) > 0 ){ int first = 0 , second = 0 ; if ( ! s . empty ()){ first = s . top () ; s . pop (); } if ( ! s . empty ()){ second = s . top () ; s . pop (); } s . push ( compute ( second , first , tokens [ i ])); } else { s . push ( stoi ( tokens [ i ])); } } return s . top (); } int main () { vector < string > tokens ( 5 ); tokens [ 0 ] = \"20\" ; tokens [ 1 ] = \"12\" ; tokens [ 2 ] = \"+\" ; tokens [ 3 ] = \"2\" ; tokens [ 4 ] = \"*\" ; int ans = evalRPN ( tokens ); printf ( \"ans:%d \\n \" , ans ); return 0 ; }","title":"150.cpp"},{"location":"leetcode/150/150/index.py.html","text":"150.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Solution : def op ( self , num1 , num2 , token ): if token == \"+\" : return num1 + num2 if token == \"-\" : return num1 - num2 if token == \"*\" : return num1 * num2 if token == \"/\" : return int ( num1 / num2 ) # \u5148\u6c42\u9664\u6cd5\u518d\u53d6\u6574\uff0c int\u4e0eC\u8bed\u8a00\u5904\u7406\u4e00\u81f4 def evalRPN ( self , tokens : List [ str ]) -> int : stack = [] for token in tokens : if token in [ \"+\" , \"-\" , \"*\" , \"/\" ]: number1 = stack . pop () number2 = stack . pop () number3 = self . op ( number2 , number1 , token ) stack . append ( number3 ) else : stack . append ( int ( token )) if len ( stack ) != 1 : print ( stack ) else : return stack [ 0 ] s = Solution () ans = s . evalRPN ([ \"10\" , \"6\" , \"9\" , \"3\" , \"+\" , \"-11\" , \"*\" , \"/\" , \"*\" , \"17\" , \"+\" , \"5\" , \"+\" ]) print ( ans )","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/150/150/index.py.html#150py","text":"# -*- coding:utf-8 -*- from typing import List class Solution : def op ( self , num1 , num2 , token ): if token == \"+\" : return num1 + num2 if token == \"-\" : return num1 - num2 if token == \"*\" : return num1 * num2 if token == \"/\" : return int ( num1 / num2 ) # \u5148\u6c42\u9664\u6cd5\u518d\u53d6\u6574\uff0c int\u4e0eC\u8bed\u8a00\u5904\u7406\u4e00\u81f4 def evalRPN ( self , tokens : List [ str ]) -> int : stack = [] for token in tokens : if token in [ \"+\" , \"-\" , \"*\" , \"/\" ]: number1 = stack . pop () number2 = stack . pop () number3 = self . op ( number2 , number1 , token ) stack . append ( number3 ) else : stack . append ( int ( token )) if len ( stack ) != 1 : print ( stack ) else : return stack [ 0 ] s = Solution () ans = s . evalRPN ([ \"10\" , \"6\" , \"9\" , \"3\" , \"+\" , \"-11\" , \"*\" , \"/\" , \"*\" , \"17\" , \"+\" , \"5\" , \"+\" ]) print ( ans )","title":"150.py"},{"location":"leetcode/150/readme/","text":"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6839\u636e\u9006\u6ce2\u5170\u8868\u793a\u6cd5\uff0c\u6c42\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u6709\u6548\u7684\u8fd0\u7b97\u7b26\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002 \u8bf4\u660e\uff1a 1 2 \u6574\u6570\u9664\u6cd5\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002 \u7ed9\u5b9a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u603b\u662f\u6709\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8868\u8fbe\u5f0f\u603b\u4f1a\u5f97\u51fa\u6709\u6548\u6570\u503c\u4e14\u4e0d\u5b58\u5728\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"] \u8f93\u51fa: 9 \u89e3\u91ca: ((2 + 1) * 3) = 9 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"] \u8f93\u51fa: 6 \u89e3\u91ca: (4 + (13 / 5)) = 6 \u793a\u4f8b 3\uff1a 1 2 3 4 5 6 7 8 9 10 \u8f93\u5165: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"] \u8f93\u51fa: 22 \u89e3\u91ca: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22 2. \u89e3\u9898\u601d\u8def \u00b6 \u7528\u6808\u5b58\u653e\u6570\u5b57\uff0c\u4e00\u65e6\u9047\u5230\u6570\u5b57\u5c31\u653e\u5165\u6808\u4e2d \u4e00\u65e6\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u4ece\u6808\u9876\u5f39\u51fa\u4e24\u4e2a\u6570\u5b57\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e4b\u540e\u653e\u5165\u6808 \u91cd\u590d1,2\u76f4\u5230\u6808\u4e2d\u53ea\u5269\u4e00\u4e2a\u6570\u5b57 3. AC\u4ee3\u7801 \u00b6 C C++ Python","title":"[150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c](https://leetcode-cn.com/problems/evaluate-reverse-polish-notation)"},{"location":"leetcode/150/readme/#150","text":"","title":"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"leetcode/150/readme/#1","text":"\u6839\u636e\u9006\u6ce2\u5170\u8868\u793a\u6cd5\uff0c\u6c42\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u6709\u6548\u7684\u8fd0\u7b97\u7b26\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002 \u8bf4\u660e\uff1a 1 2 \u6574\u6570\u9664\u6cd5\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002 \u7ed9\u5b9a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u603b\u662f\u6709\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8868\u8fbe\u5f0f\u603b\u4f1a\u5f97\u51fa\u6709\u6548\u6570\u503c\u4e14\u4e0d\u5b58\u5728\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"] \u8f93\u51fa: 9 \u89e3\u91ca: ((2 + 1) * 3) = 9 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"] \u8f93\u51fa: 6 \u89e3\u91ca: (4 + (13 / 5)) = 6 \u793a\u4f8b 3\uff1a 1 2 3 4 5 6 7 8 9 10 \u8f93\u5165: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"] \u8f93\u51fa: 22 \u89e3\u91ca: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/150/readme/#2","text":"\u7528\u6808\u5b58\u653e\u6570\u5b57\uff0c\u4e00\u65e6\u9047\u5230\u6570\u5b57\u5c31\u653e\u5165\u6808\u4e2d \u4e00\u65e6\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u4ece\u6808\u9876\u5f39\u51fa\u4e24\u4e2a\u6570\u5b57\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e4b\u540e\u653e\u5165\u6808 \u91cd\u590d1,2\u76f4\u5230\u6808\u4e2d\u53ea\u5269\u4e00\u4e2a\u6570\u5b57","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/150/readme/#3-ac","text":"C C++ Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/169/169/index.py.html","text":"169.py \u00b6 class Solution : def majorityElement ( self , nums : List [ int ]) -> int : currNum = 0 count = 0 for num in nums : if count == 0 : count = 1 currNum = num elif num == currNum : count += 1 else : count -= 1 return currNum","title":"169.py"},{"location":"leetcode/169/169/index.py.html#169py","text":"class Solution : def majorityElement ( self , nums : List [ int ]) -> int : currNum = 0 count = 0 for num in nums : if count == 0 : count = 1 currNum = num elif num == currNum : count += 1 else : count -= 1 return currNum","title":"169.py"},{"location":"leetcode/169/readme/","text":"169. \u591a\u6570\u5143\u7d20 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u7684\u591a\u6570\u5143\u7d20\u3002\u591a\u6570\u5143\u7d20\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e \u230a n/2 \u230b \u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u591a\u6570\u5143\u7d20\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [3,2,3] \u8f93\u51fa: 3 \u793a\u4f8b 2: 1 2 \u8f93\u5165: [2,2,1,1,1,2,2] \u8f93\u51fa: 2 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528 currNum \u8bb0\u5f55\u5f53\u524d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c \u4f7f\u7528 count \u8bb0\u5f55\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u904d\u5386\u6570\u7ec4\u7b2c\u4e00\u904d\uff0c \u5982\u679c\u9047\u5230 currNum, count++, \u5982\u679c\u9047\u5230\u4e0d\u662f currNum, count--. \u5982\u679c count == 0, currNum \u8bbe\u7f6e\u6210\u65b0\u7684\u5143\u7d20\uff0c count = 1. \u904d\u5386\u6570\u7ec4\u7b2c\u4e8c\u904d\uff0c \u7edf\u8ba1currNum \u51fa\u73b0\u7684\u6b21\u6570 Python","title":"[169. \u591a\u6570\u5143\u7d20](https://leetcode-cn.com/problems/majority-element/)"},{"location":"leetcode/169/readme/#169","text":"","title":"169. \u591a\u6570\u5143\u7d20"},{"location":"leetcode/169/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u7684\u591a\u6570\u5143\u7d20\u3002\u591a\u6570\u5143\u7d20\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e \u230a n/2 \u230b \u7684\u5143\u7d20\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u591a\u6570\u5143\u7d20\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [3,2,3] \u8f93\u51fa: 3 \u793a\u4f8b 2: 1 2 \u8f93\u5165: [2,2,1,1,1,2,2] \u8f93\u51fa: 2","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/169/readme/#2","text":"\u4f7f\u7528 currNum \u8bb0\u5f55\u5f53\u524d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c \u4f7f\u7528 count \u8bb0\u5f55\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u904d\u5386\u6570\u7ec4\u7b2c\u4e00\u904d\uff0c \u5982\u679c\u9047\u5230 currNum, count++, \u5982\u679c\u9047\u5230\u4e0d\u662f currNum, count--. \u5982\u679c count == 0, currNum \u8bbe\u7f6e\u6210\u65b0\u7684\u5143\u7d20\uff0c count = 1. \u904d\u5386\u6570\u7ec4\u7b2c\u4e8c\u904d\uff0c \u7edf\u8ba1currNum \u51fa\u73b0\u7684\u6b21\u6570 Python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/17/17/index.c.html","text":"17.c \u00b6 #include <stdio.h> #include <string.h> #include <stdlib.h> #define NN 5000 // \u6700\u5927\u7b54\u6848\u6570\u91cf #define MM 200 // \u6700\u5927digits\u957f\u5ea6 char * t9 [] = { \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" }; char * d = NULL ; int size = 0 ; char * deepCopy ( char * str , int end ) { char * ans = ( char * ) malloc ( sizeof ( char ) * ( end + 1 )); int ansEnd = 0 ; for ( int i = 0 ; i < end ; i ++ ) { ans [ ansEnd ++ ] = str [ i ]; } ans [ ansEnd ] = '\\0' ; return ans ; } void dfs ( int start , char * line , int lineEnd , char ** ans , int * ansEnd ) { // \u5982\u679c\u641c\u7d22\u5230\u7ed3\u5c3e\uff0c\u8bb0\u5f55\u672c\u6b21\u7684\u641c\u7d22\u7ed3\u679c if ( start == size ) { ans [( * ansEnd ) ++ ] = deepCopy ( line , lineEnd ); return ; } char * str = t9 [ ( d [ start ] - '0' ) - 2 ]; int len = strlen ( str ); for ( int i = 0 ; i < len ; i ++ ) { line [ lineEnd ] = str [ i ]; dfs ( start + 1 , line , lineEnd + 1 , ans , ansEnd ); } return ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** letterCombinations ( char * digits , int * returnSize ){ if ( digits == NULL || strlen ( digits ) == 0 ) { * returnSize = 0 ; return NULL ; } char ** ans = ( char ** ) malloc ( sizeof ( char * ) * NN ); char * line = ( char * ) malloc ( sizeof ( char ) * MM ); int ansEnd = 0 ; d = digits ; size = strlen ( digits ); dfs ( 0 , line , 0 , ans , & ansEnd ); * returnSize = ansEnd ; return ans ; } int main () { char digits [] = \"234\" ; int returnSize = 0 ; char ** ans = letterCombinations ( digits , & returnSize ); for ( int i = 0 ; i < returnSize ; i ++ ) { printf ( \"%s, \" , ans [ i ]); } return 0 ; }","title":"17.c"},{"location":"leetcode/17/17/index.c.html#17c","text":"#include <stdio.h> #include <string.h> #include <stdlib.h> #define NN 5000 // \u6700\u5927\u7b54\u6848\u6570\u91cf #define MM 200 // \u6700\u5927digits\u957f\u5ea6 char * t9 [] = { \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" }; char * d = NULL ; int size = 0 ; char * deepCopy ( char * str , int end ) { char * ans = ( char * ) malloc ( sizeof ( char ) * ( end + 1 )); int ansEnd = 0 ; for ( int i = 0 ; i < end ; i ++ ) { ans [ ansEnd ++ ] = str [ i ]; } ans [ ansEnd ] = '\\0' ; return ans ; } void dfs ( int start , char * line , int lineEnd , char ** ans , int * ansEnd ) { // \u5982\u679c\u641c\u7d22\u5230\u7ed3\u5c3e\uff0c\u8bb0\u5f55\u672c\u6b21\u7684\u641c\u7d22\u7ed3\u679c if ( start == size ) { ans [( * ansEnd ) ++ ] = deepCopy ( line , lineEnd ); return ; } char * str = t9 [ ( d [ start ] - '0' ) - 2 ]; int len = strlen ( str ); for ( int i = 0 ; i < len ; i ++ ) { line [ lineEnd ] = str [ i ]; dfs ( start + 1 , line , lineEnd + 1 , ans , ansEnd ); } return ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** letterCombinations ( char * digits , int * returnSize ){ if ( digits == NULL || strlen ( digits ) == 0 ) { * returnSize = 0 ; return NULL ; } char ** ans = ( char ** ) malloc ( sizeof ( char * ) * NN ); char * line = ( char * ) malloc ( sizeof ( char ) * MM ); int ansEnd = 0 ; d = digits ; size = strlen ( digits ); dfs ( 0 , line , 0 , ans , & ansEnd ); * returnSize = ansEnd ; return ans ; } int main () { char digits [] = \"234\" ; int returnSize = 0 ; char ** ans = letterCombinations ( digits , & returnSize ); for ( int i = 0 ; i < returnSize ; i ++ ) { printf ( \"%s, \" , ans [ i ]); } return 0 ; }","title":"17.c"},{"location":"leetcode/17/17/index.cpp.html","text":"17.cpp \u00b6 #include <vector> #include <string> using namespace std ; class Solution { public : vector < string > t9 = { \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" }; void dfs ( int start , string & digits , string & line , vector < string > & ans ) { if ( start == digits . size ()) { ans . push_back ( line ); return ; } string curr = t9 [ digits [ start ] - '0' - 2 ]; for ( int i = 0 ; i < curr . size (); i ++ ) { line . push_back ( curr [ i ]); dfs ( start + 1 , digits , line , ans ); line . pop_back (); } return ; } vector < string > letterCombinations ( string digits ) { vector < string > ans ; if ( digits . empty ()) { return ans ; } string line ; dfs ( 0 , digits , line , ans ); return ans ; } }; int main () { string nums = \"23\" ; Solution * s = new Solution (); auto ans = s -> letterCombinations ( nums ); for ( auto a : ans ) { printf ( \"%s, \" , a ); } return 0 ; }","title":"17.cpp"},{"location":"leetcode/17/17/index.cpp.html#17cpp","text":"#include <vector> #include <string> using namespace std ; class Solution { public : vector < string > t9 = { \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" }; void dfs ( int start , string & digits , string & line , vector < string > & ans ) { if ( start == digits . size ()) { ans . push_back ( line ); return ; } string curr = t9 [ digits [ start ] - '0' - 2 ]; for ( int i = 0 ; i < curr . size (); i ++ ) { line . push_back ( curr [ i ]); dfs ( start + 1 , digits , line , ans ); line . pop_back (); } return ; } vector < string > letterCombinations ( string digits ) { vector < string > ans ; if ( digits . empty ()) { return ans ; } string line ; dfs ( 0 , digits , line , ans ); return ans ; } }; int main () { string nums = \"23\" ; Solution * s = new Solution (); auto ans = s -> letterCombinations ( nums ); for ( auto a : ans ) { printf ( \"%s, \" , a ); } return 0 ; }","title":"17.cpp"},{"location":"leetcode/17/17/index.py.html","text":"17.py \u00b6 from typing import List class Solution : def __init__ ( self ): self . t9 = [ \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" ] def dfs ( self , start , digits , line , ans ): if start == len ( digits ): ans . append ( '' . join ( line )) return curr = self . t9 [ int ( digits [ start ]) - 2 ] for c in curr : line . append ( c ) self . dfs ( start + 1 , digits , line , ans ) line . pop () return def letterCombinations ( self , digits : str ) -> List [ str ]: ans = [] if len ( digits ) == 0 : return ans line = [] self . dfs ( 0 , digits , line , ans ) return ans digits = \"23\" s = Solution () ans = s . letterCombinations ( digits ) print ( ans )","title":"17.py"},{"location":"leetcode/17/17/index.py.html#17py","text":"from typing import List class Solution : def __init__ ( self ): self . t9 = [ \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" ] def dfs ( self , start , digits , line , ans ): if start == len ( digits ): ans . append ( '' . join ( line )) return curr = self . t9 [ int ( digits [ start ]) - 2 ] for c in curr : line . append ( c ) self . dfs ( start + 1 , digits , line , ans ) line . pop () return def letterCombinations ( self , digits : str ) -> List [ str ]: ans = [] if len ( digits ) == 0 : return ans line = [] self . dfs ( 0 , digits , line , ans ) return ans digits = \"23\" s = Solution () ans = s . letterCombinations ( digits ) print ( ans )","title":"17.py"},{"location":"leetcode/17/readme/","text":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165\uff1a\"23\" \u8f93\u51fa\uff1a[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \u8bf4\u660e: \u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 2 \u5bf9\u5e94 \"abc\", 3 \u5bf9\u5e94 \"def\", \u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u53ef\u4ee5\u7528\u4e24\u91cd\u5faa\u73af\u904d\u5386\u5f97\u5230\u3002 \u4f46\u662f\u672c\u9898\u7ed9\u51fa\u7684\u8f93\u5165\u662f\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u4e2a\u7684\uff0c\u65e0\u6cd5\u7528\u591a\u91cd\u5faa\u73af\u904d\u5386\uff0c\u8fd9\u79cd\u60c5\u51b5\u7528\u9012\u5f52\u5b9e\u73b0\u5c31\u6bd4\u8f83\u5bb9\u6613\u3002 \u9012\u5f52\u7684\u65f6\u5019\uff0c\u51fd\u6570\u4e2d\u6709\u4e00\u4e2afor\u5faa\u73af\uff0c\u7528\u6765\u5c1d\u8bd5\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u5b57\u6bcd\u3002 3. AC\u4ee3\u7801 \u00b6 C C++ Python","title":"[17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number)"},{"location":"leetcode/17/readme/#17","text":"","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408"},{"location":"leetcode/17/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165\uff1a\"23\" \u8f93\u51fa\uff1a[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \u8bf4\u660e: \u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/17/readme/#2","text":"2 \u5bf9\u5e94 \"abc\", 3 \u5bf9\u5e94 \"def\", \u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u53ef\u4ee5\u7528\u4e24\u91cd\u5faa\u73af\u904d\u5386\u5f97\u5230\u3002 \u4f46\u662f\u672c\u9898\u7ed9\u51fa\u7684\u8f93\u5165\u662f\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u4e2a\u7684\uff0c\u65e0\u6cd5\u7528\u591a\u91cd\u5faa\u73af\u904d\u5386\uff0c\u8fd9\u79cd\u60c5\u51b5\u7528\u9012\u5f52\u5b9e\u73b0\u5c31\u6bd4\u8f83\u5bb9\u6613\u3002 \u9012\u5f52\u7684\u65f6\u5019\uff0c\u51fd\u6570\u4e2d\u6709\u4e00\u4e2afor\u5faa\u73af\uff0c\u7528\u6765\u5c1d\u8bd5\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u5b57\u6bcd\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/17/readme/#3-ac","text":"C C++ Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/179/readme/","text":"179. \u6700\u5927\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570\uff0c\u91cd\u65b0\u6392\u5217\u5b83\u4eec\u7684\u987a\u5e8f\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [10,2] \u8f93\u51fa: 210 \u793a\u4f8b 2: 1 2 \u8f93\u5165: [3,30,34,5,9] \u8f93\u51fa: 9534330 \u8bf4\u660e: \u8f93\u51fa\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u6574\u6570\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u672c\u8d28\u4e0a\u662f\u786e\u5b9a\u4e00\u79cd\u6392\u5e8f\u65f6\u6bd4\u8f83\u5927\u5c0f\u7684\u65b9\u5f0f\uff0c\u786e\u5b9a\u597d\u5927\u5c0f\u4e4b\u540e\uff0c\u6392\u5e8f\uff0c\u8f93\u51fa\u3002 \u6ce8\u610f0\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u9700\u8981\u7279\u6b8a\u5904\u7406 \u6ce8\u610f\u7ed3\u679c\u662f\u51680\u7684\u65f6\u5019\u8f93\u51fa\u4e00\u4e2a0\uff0c\u800c\u4e0d\u80fd\u8f93\u51fa\u4e00\u4e320 #define N 100 // \u6570\u5b57\u7684\u6700\u5927\u4f4d\u6570 #define MAX(a, b) ((a) > (b) ? (a) : (b)) int num2strSubProcess(char *str, int end, int num) { int left = end; int right; char tmp; // 0 \u9700\u8981\u7279\u6b8a\u5904\u7406 if (num == 0) { str[end++] = '0'; return end; } while (num) { str[end++] = (char)(num % 10 + '0'); num = num / 10; } right = end - 1; while (left < right) { tmp = str[left]; str[left] = str[right]; str[right] = tmp; left += 1; right -= 1; } return end; } void num2str(char *str, int num1, int num2) { int end = 0; end = num2strSubProcess(str, end, num1); end = num2strSubProcess(str, end, num2); str[end] = '\\0'; return; } // num1 < num2 \u5b9e\u73b0\u672c\u9898\u7684\u5173\u952e\u6bd4\u8f83\u903b\u8f91 // \u6bd4\u8f83\u7684\u65b9\u6cd5\u662f\u6bd4\u8f83 num1num2 \u548c num2num1 \u7684\u5927\u5c0f int less(int num1, int num2) { char *str1 = (char*)malloc(sizeof(char) * N * 2); char *str2 = (char*)malloc(sizeof(char) * N * 2); int i, n; num2str(str1, num1, num2); num2str(str2, num2, num1); n = strlen(str1); for (i = 0; i < n; i++) { if (str1[i] < str2[i]) { return 1; } else if (str1[i] > str2[i]) { return 0; } } return 0; } int partition(int *nums, int begin, int end) { int x, i, j, tmp; x = nums[end]; i = begin - 1; for (j = begin; j < end; j++) { if (less(nums[j], x) == 1) { i = i + 1; tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } } tmp = nums[i + 1]; nums[i + 1] = nums[end]; nums[end] = tmp; return i + 1; } void sorted(int *nums, int begin, int end) { int mid; if (begin > end) { return; } mid = partition(nums, begin, end); sorted(nums, begin, mid - 1); sorted(nums, mid + 1, end); return; } char * largestNumber(int* nums, int numsSize){ int i, num, left, right, digit; char tmp; char *ans; int ansEnd = 0; if (numsSize == 0 || nums == NULL) { return NULL; } // \u5148\u6309\u7167\u89c4\u5219\u4ece\u5c0f\u5230\u5927\u6392\u5e8f sorted(nums, 0, numsSize - 1); ans = (char*)malloc(sizeof(char) * numsSize * N); // \u4f9d\u6b21\u53d6\u51fa\u6bcf\u4e2a\u6570\u5b57\uff0c\u8f6c\u5316\u6210\u5b57\u7b26\u62fc\u63a5\u5728\u4e00\u8d77 for (i = numsSize - 1; i >= 0; i--) { num = nums[i]; // 0 \u9700\u8981\u7279\u6b8a\u5904\u7406 if (num == 0) { ans[ansEnd++] = '0'; continue; } left = ansEnd; right = left; while (num) { digit = num % 10; num = num / 10; ans[right++] = (char)(digit + '0'); } ansEnd = right; right -= 1; while (left < right) { tmp = ans[left]; ans[left] = ans[right]; ans[right] = tmp; left++; right--; } } ans[ansEnd] = '\\0'; // \u5982\u679c ans \u4e2d\u5168\u90e8\u90fd\u662f0 \u7f29\u5199\u6210\u4e00\u4e2a0 int flag = 1; for (i = 0; i < ansEnd; i++) { if (ans[i] != '0') { flag = 0; break; } } if (flag) { ans[0] = '0'; ans[1] = '\\0'; } return ans; }","title":"[179. \u6700\u5927\u6570](https://leetcode-cn.com/problems/largest-number/)"},{"location":"leetcode/179/readme/#179","text":"","title":"179. \u6700\u5927\u6570"},{"location":"leetcode/179/readme/#1","text":"\u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570\uff0c\u91cd\u65b0\u6392\u5217\u5b83\u4eec\u7684\u987a\u5e8f\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [10,2] \u8f93\u51fa: 210 \u793a\u4f8b 2: 1 2 \u8f93\u5165: [3,30,34,5,9] \u8f93\u51fa: 9534330 \u8bf4\u660e: \u8f93\u51fa\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u6574\u6570\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/179/readme/#2","text":"\u672c\u8d28\u4e0a\u662f\u786e\u5b9a\u4e00\u79cd\u6392\u5e8f\u65f6\u6bd4\u8f83\u5927\u5c0f\u7684\u65b9\u5f0f\uff0c\u786e\u5b9a\u597d\u5927\u5c0f\u4e4b\u540e\uff0c\u6392\u5e8f\uff0c\u8f93\u51fa\u3002 \u6ce8\u610f0\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u9700\u8981\u7279\u6b8a\u5904\u7406 \u6ce8\u610f\u7ed3\u679c\u662f\u51680\u7684\u65f6\u5019\u8f93\u51fa\u4e00\u4e2a0\uff0c\u800c\u4e0d\u80fd\u8f93\u51fa\u4e00\u4e320 #define N 100 // \u6570\u5b57\u7684\u6700\u5927\u4f4d\u6570 #define MAX(a, b) ((a) > (b) ? (a) : (b)) int num2strSubProcess(char *str, int end, int num) { int left = end; int right; char tmp; // 0 \u9700\u8981\u7279\u6b8a\u5904\u7406 if (num == 0) { str[end++] = '0'; return end; } while (num) { str[end++] = (char)(num % 10 + '0'); num = num / 10; } right = end - 1; while (left < right) { tmp = str[left]; str[left] = str[right]; str[right] = tmp; left += 1; right -= 1; } return end; } void num2str(char *str, int num1, int num2) { int end = 0; end = num2strSubProcess(str, end, num1); end = num2strSubProcess(str, end, num2); str[end] = '\\0'; return; } // num1 < num2 \u5b9e\u73b0\u672c\u9898\u7684\u5173\u952e\u6bd4\u8f83\u903b\u8f91 // \u6bd4\u8f83\u7684\u65b9\u6cd5\u662f\u6bd4\u8f83 num1num2 \u548c num2num1 \u7684\u5927\u5c0f int less(int num1, int num2) { char *str1 = (char*)malloc(sizeof(char) * N * 2); char *str2 = (char*)malloc(sizeof(char) * N * 2); int i, n; num2str(str1, num1, num2); num2str(str2, num2, num1); n = strlen(str1); for (i = 0; i < n; i++) { if (str1[i] < str2[i]) { return 1; } else if (str1[i] > str2[i]) { return 0; } } return 0; } int partition(int *nums, int begin, int end) { int x, i, j, tmp; x = nums[end]; i = begin - 1; for (j = begin; j < end; j++) { if (less(nums[j], x) == 1) { i = i + 1; tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } } tmp = nums[i + 1]; nums[i + 1] = nums[end]; nums[end] = tmp; return i + 1; } void sorted(int *nums, int begin, int end) { int mid; if (begin > end) { return; } mid = partition(nums, begin, end); sorted(nums, begin, mid - 1); sorted(nums, mid + 1, end); return; } char * largestNumber(int* nums, int numsSize){ int i, num, left, right, digit; char tmp; char *ans; int ansEnd = 0; if (numsSize == 0 || nums == NULL) { return NULL; } // \u5148\u6309\u7167\u89c4\u5219\u4ece\u5c0f\u5230\u5927\u6392\u5e8f sorted(nums, 0, numsSize - 1); ans = (char*)malloc(sizeof(char) * numsSize * N); // \u4f9d\u6b21\u53d6\u51fa\u6bcf\u4e2a\u6570\u5b57\uff0c\u8f6c\u5316\u6210\u5b57\u7b26\u62fc\u63a5\u5728\u4e00\u8d77 for (i = numsSize - 1; i >= 0; i--) { num = nums[i]; // 0 \u9700\u8981\u7279\u6b8a\u5904\u7406 if (num == 0) { ans[ansEnd++] = '0'; continue; } left = ansEnd; right = left; while (num) { digit = num % 10; num = num / 10; ans[right++] = (char)(digit + '0'); } ansEnd = right; right -= 1; while (left < right) { tmp = ans[left]; ans[left] = ans[right]; ans[right] = tmp; left++; right--; } } ans[ansEnd] = '\\0'; // \u5982\u679c ans \u4e2d\u5168\u90e8\u90fd\u662f0 \u7f29\u5199\u6210\u4e00\u4e2a0 int flag = 1; for (i = 0; i < ansEnd; i++) { if (ans[i] != '0') { flag = 0; break; } } if (flag) { ans[0] = '0'; ans[1] = '\\0'; } return ans; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/18/readme/","text":"18. \u56db\u6570\u4e4b\u548c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] 2. \u89e3\u9898\u601d\u8def \u00b6 \u56fa\u5b9a\u4e24\u4e2a\u6570\u5b57\uff0c\u53e6\u5916\u4e24\u4e2a\u6570\u5b57\u4f7f\u7528\u53cc\u6307\u9488\u903c\u8fd1 class Solution ( object ): def fourSum ( self , nums , target ): \"\"\" :type nums: List[int] :type target: int :rtype: List[List[int]] \"\"\" sns = sorted ( nums ) n = len ( sns ) if n < 4 : return [] i = 0 ans = [] while i < n - 3 : if i > 0 and sns [ i ] == sns [ i - 1 ]: i += 1 continue j = i + 1 while j < n - 2 : if j > i + 1 and sns [ j ] == sns [ j - 1 ]: j += 1 continue p = j + 1 q = n - 1 while p < q : tmp = sns [ p ] + sns [ q ] + sns [ i ] + sns [ j ] if tmp == target : if p == j + 1 or p > j + 1 and sns [ p ] != sns [ p - 1 ]: ans . append ([ sns [ i ], sns [ j ], sns [ p ], sns [ q ]]) p += 1 elif tmp < target : p += 1 else : q -= 1 j += 1 i += 1 return ans","title":"[18. \u56db\u6570\u4e4b\u548c](https://leetcode-cn.com/problems/4sum/)"},{"location":"leetcode/18/readme/#18","text":"","title":"18. \u56db\u6570\u4e4b\u548c"},{"location":"leetcode/18/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/18/readme/#2","text":"\u56fa\u5b9a\u4e24\u4e2a\u6570\u5b57\uff0c\u53e6\u5916\u4e24\u4e2a\u6570\u5b57\u4f7f\u7528\u53cc\u6307\u9488\u903c\u8fd1 class Solution ( object ): def fourSum ( self , nums , target ): \"\"\" :type nums: List[int] :type target: int :rtype: List[List[int]] \"\"\" sns = sorted ( nums ) n = len ( sns ) if n < 4 : return [] i = 0 ans = [] while i < n - 3 : if i > 0 and sns [ i ] == sns [ i - 1 ]: i += 1 continue j = i + 1 while j < n - 2 : if j > i + 1 and sns [ j ] == sns [ j - 1 ]: j += 1 continue p = j + 1 q = n - 1 while p < q : tmp = sns [ p ] + sns [ q ] + sns [ i ] + sns [ j ] if tmp == target : if p == j + 1 or p > j + 1 and sns [ p ] != sns [ p - 1 ]: ans . append ([ sns [ i ], sns [ j ], sns [ p ], sns [ q ]]) p += 1 elif tmp < target : p += 1 else : q -= 1 j += 1 i += 1 return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/187/187/index.c.html","text":"187.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #include <uthash.h> #define N 10 struct HashTable { char key [ N + 1 ]; // N\u4e2a\u5b57\u6bcd int count ; // \u51fa\u73b0\u7684\u6b21\u6570 UT_hash_handle hh ; }; typedef struct HashTable Map ; char * deepCopy ( char * string , int start , int end ) { char * newString = ( char * ) malloc ( sizeof ( char ) * ( end - start + 1 )); int newStringEnd = 0 ; for ( int i = start ; i < end ; i ++ ) { newString [ newStringEnd ++ ] = string [ i ]; } newString [ newStringEnd ] = '\\0' ; return newString ; } char ** findRepeatedDnaSequences ( char * s , int * returnSize ) { char ** ans = NULL ; * returnSize = 0 ; if ( s == NULL || strlen ( s ) <= N ) { return ans ; } Map * map = NULL ; // \u54c8\u5e0c\u8868 Map * current = NULL ; // \u54c8\u5e0c\u8868\u4e2d\u7684\u5f53\u524d\u5143\u7d20 for ( int i = 0 ; i <= strlen ( s ) - N ; i ++ ) { char * key = deepCopy ( s , i , i + N ); HASH_FIND_STR ( map , key , current ); if ( current == NULL ) { current = ( Map * ) malloc ( sizeof ( Map )); strncpy ( current -> key , key , N ); current -> key [ N ] = '\\0' ; current -> count = 1 ; HASH_ADD_STR ( map , key , current ); } else { current -> count ++ ; } } // \u7edf\u8ba1\u7ed3\u679c\u7684\u6570\u91cf int ansCount = 0 ; for ( current = map ; current != NULL ; current = current -> hh . next ) { if ( current -> count > 1 ) { ansCount ++ ; } } // \u6839\u636e\u7ed3\u679c\u6570\u91cf\u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u7ed3\u679c ans = ( char ** ) malloc ( sizeof ( char * ) * ansCount ); int ansEnd = 0 ; for ( current = map ; current != NULL ; current = current -> hh . next ) { if ( current -> count > 1 ) { ans [ ansEnd ++ ] = deepCopy ( current -> key , 0 , strlen ( current -> key )); } } // \u91ca\u653e\u6389map\u6240\u5360\u7528\u7684\u7a7a\u95f4 Map * tmp ; HASH_ITER ( hh , map , current , tmp ) { HASH_DEL ( map , current ); free ( current ); } * returnSize = ansCount ; return ans ; }","title":"187.c"},{"location":"leetcode/187/187/index.c.html#187c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #include <uthash.h> #define N 10 struct HashTable { char key [ N + 1 ]; // N\u4e2a\u5b57\u6bcd int count ; // \u51fa\u73b0\u7684\u6b21\u6570 UT_hash_handle hh ; }; typedef struct HashTable Map ; char * deepCopy ( char * string , int start , int end ) { char * newString = ( char * ) malloc ( sizeof ( char ) * ( end - start + 1 )); int newStringEnd = 0 ; for ( int i = start ; i < end ; i ++ ) { newString [ newStringEnd ++ ] = string [ i ]; } newString [ newStringEnd ] = '\\0' ; return newString ; } char ** findRepeatedDnaSequences ( char * s , int * returnSize ) { char ** ans = NULL ; * returnSize = 0 ; if ( s == NULL || strlen ( s ) <= N ) { return ans ; } Map * map = NULL ; // \u54c8\u5e0c\u8868 Map * current = NULL ; // \u54c8\u5e0c\u8868\u4e2d\u7684\u5f53\u524d\u5143\u7d20 for ( int i = 0 ; i <= strlen ( s ) - N ; i ++ ) { char * key = deepCopy ( s , i , i + N ); HASH_FIND_STR ( map , key , current ); if ( current == NULL ) { current = ( Map * ) malloc ( sizeof ( Map )); strncpy ( current -> key , key , N ); current -> key [ N ] = '\\0' ; current -> count = 1 ; HASH_ADD_STR ( map , key , current ); } else { current -> count ++ ; } } // \u7edf\u8ba1\u7ed3\u679c\u7684\u6570\u91cf int ansCount = 0 ; for ( current = map ; current != NULL ; current = current -> hh . next ) { if ( current -> count > 1 ) { ansCount ++ ; } } // \u6839\u636e\u7ed3\u679c\u6570\u91cf\u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u7ed3\u679c ans = ( char ** ) malloc ( sizeof ( char * ) * ansCount ); int ansEnd = 0 ; for ( current = map ; current != NULL ; current = current -> hh . next ) { if ( current -> count > 1 ) { ans [ ansEnd ++ ] = deepCopy ( current -> key , 0 , strlen ( current -> key )); } } // \u91ca\u653e\u6389map\u6240\u5360\u7528\u7684\u7a7a\u95f4 Map * tmp ; HASH_ITER ( hh , map , current , tmp ) { HASH_DEL ( map , current ); free ( current ); } * returnSize = ansCount ; return ans ; }","title":"187.c"},{"location":"leetcode/187/187/index.cpp.html","text":"187.cpp \u00b6","title":"187.cpp"},{"location":"leetcode/187/187/index.cpp.html#187cpp","text":"","title":"187.cpp"},{"location":"leetcode/187/187/index.py.html","text":"187.py \u00b6","title":"187.py"},{"location":"leetcode/187/187/index.py.html#187py","text":"","title":"187.py"},{"location":"leetcode/187/readme/","text":"187. \u91cd\u590d\u7684DNA\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6240\u6709 DNA \u90fd\u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7\u4e00\u6b21\u7684 10 \u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002 \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1as = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" \u8f93\u51fa\uff1a[\"AAAAACCCCC\", \"CCCCCAAAAA\"] 2. \u89e3\u9898\u601d\u8def \u00b6 \u6bcf10\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u952e\u54c8\u5e0c\u8bb0\u5f55\uff0c\u5982\u679c\u627e\u5230\u91cd\u590d\u7684\u5c31\u8f93\u51fa\u3002 3. AC\u4ee3\u7801 \u00b6 C","title":"[187. \u91cd\u590d\u7684DNA\u5e8f\u5217](https://leetcode-cn.com/problems/repeated-dna-sequences)"},{"location":"leetcode/187/readme/#187-dna","text":"","title":"187. \u91cd\u590d\u7684DNA\u5e8f\u5217"},{"location":"leetcode/187/readme/#1","text":"\u6240\u6709 DNA \u90fd\u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7\u4e00\u6b21\u7684 10 \u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002 \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1as = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" \u8f93\u51fa\uff1a[\"AAAAACCCCC\", \"CCCCCAAAAA\"]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/187/readme/#2","text":"\u6bcf10\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u952e\u54c8\u5e0c\u8bb0\u5f55\uff0c\u5982\u679c\u627e\u5230\u91cd\u590d\u7684\u5c31\u8f93\u51fa\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/187/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/19/readme/","text":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a 1 \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f 2. \u89e3\u9898\u601d\u8def \u00b6 \u5e38\u89c4\u89e3\u6cd5 \u5047\u8bbe\u94fe\u8868\u4e3alink, \u8282\u70b9\u4e2a\u6570\u4e3aN\uff0c\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\uff0c\u5c31\u662f\u6b63\u6570\u7b2c(N-n+1)\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u8be5\u8282\u70b9\uff0c\u9700\u8981\u627e\u5230\u5b83\u524d\u9762\u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7b2c(N-n)\u4e2a\u8282\u70b9\u3002 \u5982\u679c(N-n)==0, \u76f4\u63a5\u7528\u5934\u7ed3\u70b9\u6307\u5411\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u5373\u5220\u9664\u4e86\u7b2c\u4e00\u4e2a\u8282\u70b9\uff1b \u5176\u4ed6\u60c5\u51b5\uff0c\u627e\u5230\u7b2c(N-n)\u8282\u70b9\uff0cnext\u6307\u9488\u6307\u5411\u4e0b\u4e0b\u4e2a\u8282\u70b9\uff1b \u4e00\u6b21\u904d\u5386\u7684\u89e3\u6cd5 \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\uff0c\u95f4\u9694n, \u7136\u540e\u4e00\u8d77\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u524d\u9762\u7684\u5230\u7ed3\u5c3e\uff0c\u540e\u9762\u7684\u6307\u9488\u6b63\u597d\u6307\u5411\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\u524d\u4e00\u4e2a\u3002 /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * removeNthFromEnd ( struct ListNode * head , int n ){ struct ListNode * g ; struct ListNode * c ; struct ListNode * p ; g = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); g -> next = head ; if ( head == NULL ) { return head ; } // \u63d0\u524d\u8d70n+1\u6b65 n = n + 1 ; c = g ; while ( c && n ) { c = c -> next ; n = n - 1 ; } // \u4e00\u8d77\u8d70\u77e5\u9053c\u4e3a\u7a7a p = g ; while ( c ) { c = c -> next ; p = p -> next ; } // p\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u8981\u5220\u9664\u7684\u8282\u70b9 p -> next = p -> next -> next ; return g -> next ; }","title":"[19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)"},{"location":"leetcode/19/readme/#19-n","text":"","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"leetcode/19/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a 1 \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/19/readme/#2","text":"\u5e38\u89c4\u89e3\u6cd5 \u5047\u8bbe\u94fe\u8868\u4e3alink, \u8282\u70b9\u4e2a\u6570\u4e3aN\uff0c\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\uff0c\u5c31\u662f\u6b63\u6570\u7b2c(N-n+1)\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u8be5\u8282\u70b9\uff0c\u9700\u8981\u627e\u5230\u5b83\u524d\u9762\u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7b2c(N-n)\u4e2a\u8282\u70b9\u3002 \u5982\u679c(N-n)==0, \u76f4\u63a5\u7528\u5934\u7ed3\u70b9\u6307\u5411\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u5373\u5220\u9664\u4e86\u7b2c\u4e00\u4e2a\u8282\u70b9\uff1b \u5176\u4ed6\u60c5\u51b5\uff0c\u627e\u5230\u7b2c(N-n)\u8282\u70b9\uff0cnext\u6307\u9488\u6307\u5411\u4e0b\u4e0b\u4e2a\u8282\u70b9\uff1b \u4e00\u6b21\u904d\u5386\u7684\u89e3\u6cd5 \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\uff0c\u95f4\u9694n, \u7136\u540e\u4e00\u8d77\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u524d\u9762\u7684\u5230\u7ed3\u5c3e\uff0c\u540e\u9762\u7684\u6307\u9488\u6b63\u597d\u6307\u5411\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\u524d\u4e00\u4e2a\u3002 /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * removeNthFromEnd ( struct ListNode * head , int n ){ struct ListNode * g ; struct ListNode * c ; struct ListNode * p ; g = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); g -> next = head ; if ( head == NULL ) { return head ; } // \u63d0\u524d\u8d70n+1\u6b65 n = n + 1 ; c = g ; while ( c && n ) { c = c -> next ; n = n - 1 ; } // \u4e00\u8d77\u8d70\u77e5\u9053c\u4e3a\u7a7a p = g ; while ( c ) { c = c -> next ; p = p -> next ; } // p\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u8981\u5220\u9664\u7684\u8282\u70b9 p -> next = p -> next -> next ; return g -> next ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/198/readme/","text":"198. \u6253\u5bb6\u52ab\u820d \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 \u8f93\u5165\uff1a[1,2,3,1] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1a[2,7,9,3,1] \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002 \u63d0\u793a\uff1a 1 2 0 <= nums.length <= 100 0 <= nums[i] <= 400 2. \u89e3\u9898\u601d\u8def \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u904d\u5386\u6240\u6709\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5927\u90e8\u5206\u7528\u4f8b\uff0c\u4f46\u662f\u6700\u540e\u4f1a\u8d85\u65f6\u3002 #define MAX(a,b) ((a) > (b)) ? (a) : (b) int maxv = 0 ; void dfs ( int * nums , int numsSize , int i , int tmpMax ) { if ( i >= numsSize ) { maxv = MAX ( maxv , tmpMax ); return ; } // \u9009\u62e9i dfs ( nums , numsSize , i + 2 , tmpMax + nums [ i ]); // \u4e0d\u9009\u62e9i dfs ( nums , numsSize , i + 1 , tmpMax ); } int rob ( int * nums , int numsSize ){ int ans = 0 ; maxv = 0 ; if ( numsSize <= 0 ) { return maxv ; } dfs ( nums , numsSize , 0 , ans ); return maxv ; } \u9012\u5f52\u6d88\u8017\u65f6\u95f4\u592a\u591a\uff0c\u53ea\u9002\u5408N\u8f83\u5c0f\u7684\u60c5\u51b5\uff0c\u4e0b\u9762\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff0c\u8ba1\u7b97\u4ee5\u6bcf\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u60c5\u51b5\u4e0b\u5077\u7684\u6700\u591a\u7684\u94b1\uff0c\u7136\u540e\u53d6\u6700\u5927\u503c\u3002 #define MAX(a,b) ((a) > (b)) ? (a) : (b) int rob ( int * nums , int numsSize ){ int * dp ; int maxv = 0 ; int premax = 0 ; int i ; if ( numsSize <= 0 ) { return 0 ; } if ( numsSize == 1 ) { return nums [ 0 ]; } if ( numsSize == 2 ) { return MAX ( nums [ 0 ], nums [ 1 ]); } dp = ( int * ) malloc ( sizeof ( int ) * numsSize ); dp [ 0 ] = nums [ 0 ]; dp [ 1 ] = nums [ 1 ]; premax = nums [ 0 ]; maxv = MAX ( nums [ 0 ], nums [ 1 ]); for ( i = 2 ; i < numsSize ; i ++ ) { dp [ i ] = premax + nums [ i ]; premax = MAX ( premax , dp [ i - 1 ]); maxv = MAX ( maxv , dp [ i ]); } return maxv ; }","title":"[198. \u6253\u5bb6\u52ab\u820d](https://leetcode-cn.com/problems/house-robber/)"},{"location":"leetcode/198/readme/#198","text":"","title":"198. \u6253\u5bb6\u52ab\u820d"},{"location":"leetcode/198/readme/#1","text":"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 \u8f93\u5165\uff1a[1,2,3,1] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1a[2,7,9,3,1] \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002 \u63d0\u793a\uff1a 1 2 0 <= nums.length <= 100 0 <= nums[i] <= 400","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/198/readme/#2","text":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u904d\u5386\u6240\u6709\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5927\u90e8\u5206\u7528\u4f8b\uff0c\u4f46\u662f\u6700\u540e\u4f1a\u8d85\u65f6\u3002 #define MAX(a,b) ((a) > (b)) ? (a) : (b) int maxv = 0 ; void dfs ( int * nums , int numsSize , int i , int tmpMax ) { if ( i >= numsSize ) { maxv = MAX ( maxv , tmpMax ); return ; } // \u9009\u62e9i dfs ( nums , numsSize , i + 2 , tmpMax + nums [ i ]); // \u4e0d\u9009\u62e9i dfs ( nums , numsSize , i + 1 , tmpMax ); } int rob ( int * nums , int numsSize ){ int ans = 0 ; maxv = 0 ; if ( numsSize <= 0 ) { return maxv ; } dfs ( nums , numsSize , 0 , ans ); return maxv ; } \u9012\u5f52\u6d88\u8017\u65f6\u95f4\u592a\u591a\uff0c\u53ea\u9002\u5408N\u8f83\u5c0f\u7684\u60c5\u51b5\uff0c\u4e0b\u9762\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff0c\u8ba1\u7b97\u4ee5\u6bcf\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u60c5\u51b5\u4e0b\u5077\u7684\u6700\u591a\u7684\u94b1\uff0c\u7136\u540e\u53d6\u6700\u5927\u503c\u3002 #define MAX(a,b) ((a) > (b)) ? (a) : (b) int rob ( int * nums , int numsSize ){ int * dp ; int maxv = 0 ; int premax = 0 ; int i ; if ( numsSize <= 0 ) { return 0 ; } if ( numsSize == 1 ) { return nums [ 0 ]; } if ( numsSize == 2 ) { return MAX ( nums [ 0 ], nums [ 1 ]); } dp = ( int * ) malloc ( sizeof ( int ) * numsSize ); dp [ 0 ] = nums [ 0 ]; dp [ 1 ] = nums [ 1 ]; premax = nums [ 0 ]; maxv = MAX ( nums [ 0 ], nums [ 1 ]); for ( i = 2 ; i < numsSize ; i ++ ) { dp [ i ] = premax + nums [ i ]; premax = MAX ( premax , dp [ i - 1 ]); maxv = MAX ( maxv , dp [ i ]); } return maxv ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/2/readme/","text":"2. \u4e24\u6570\u76f8\u52a0 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u51fa\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807 2. \u89e3\u9898\u601d\u8def \u00b6 3. \u9898\u89e3 \u00b6 \u904d\u5386\u76f8\u52a0\u6ce8\u610f\u8fdb\u4f4d\u5373\u53ef\u3002 3.1 C++ \u00b6 class Solution { public : ListNode * addTwoNumbers ( ListNode * l1 , ListNode * l2 ) { if ( l1 == nullptr ) return l2 ; if ( l2 == nullptr ) return l1 ; ListNode * iter = new ListNode ( - 1 ); ListNode * head = iter ; int carry = 0 ; while ( l1 != nullptr and l2 != nullptr ) { carry = l1 -> val + l2 -> val + carry ; ListNode * node = new ListNode ( carry % 10 ); iter -> next = node ; iter = node ; carry = carry / 10 ; l1 = l1 -> next ; l2 = l2 -> next ; } while ( l1 != nullptr ) { carry = l1 -> val + carry ; ListNode * node = new ListNode ( carry % 10 ); iter -> next = node ; iter = node ; carry = carry / 10 ; l1 = l1 -> next ; } while ( l2 != nullptr ) { carry = l2 -> val + carry ; ListNode * node = new ListNode ( carry % 10 ); iter -> next = node ; iter = node ; carry = carry / 10 ; l2 = l2 -> next ; } if ( carry > 0 ) { ListNode * node = new ListNode ( carry ); iter -> next = node ; } return head -> next ; } }; 3.2 python \u00b6 class Solution : def addTwoNumbers ( self , l1 : ListNode , l2 : ListNode ) -> ListNode : if not l1 : return l2 if not l2 : return l1 carry = 0 head = ListNode ( - 1 ) iters = head while ( l1 and l2 ): carry = l1 . val + l2 . val + carry node = ListNode ( carry % 10 ) carry = carry // 10 iters . next = node iters = node l1 = l1 . next l2 = l2 . next while ( l1 ): carry = l1 . val + carry node = ListNode ( carry % 10 ) carry = carry // 10 iters . next = node iters = node l1 = l1 . next while ( l2 ): carry = l2 . val + carry node = ListNode ( carry % 10 ) carry = carry // 10 iters . next = node iters = node l2 = l2 . next if carry > 0 : node = ListNode ( carry ) iters . next = node return head . next","title":"Readme"},{"location":"leetcode/2/readme/#2","text":"","title":"2. \u4e24\u6570\u76f8\u52a0"},{"location":"leetcode/2/readme/#1","text":"\u7ed9\u51fa\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u793a\u4f8b \u8f93\u5165\uff1a(2 -> 4 -> 3) + (5 -> 6 -> 4) \u8f93\u51fa\uff1a7 -> 0 -> 8 \u539f\u56e0\uff1a342 + 465 = 807","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/2/readme/#2_1","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/2/readme/#3","text":"\u904d\u5386\u76f8\u52a0\u6ce8\u610f\u8fdb\u4f4d\u5373\u53ef\u3002","title":"3. \u9898\u89e3"},{"location":"leetcode/2/readme/#31-c","text":"class Solution { public : ListNode * addTwoNumbers ( ListNode * l1 , ListNode * l2 ) { if ( l1 == nullptr ) return l2 ; if ( l2 == nullptr ) return l1 ; ListNode * iter = new ListNode ( - 1 ); ListNode * head = iter ; int carry = 0 ; while ( l1 != nullptr and l2 != nullptr ) { carry = l1 -> val + l2 -> val + carry ; ListNode * node = new ListNode ( carry % 10 ); iter -> next = node ; iter = node ; carry = carry / 10 ; l1 = l1 -> next ; l2 = l2 -> next ; } while ( l1 != nullptr ) { carry = l1 -> val + carry ; ListNode * node = new ListNode ( carry % 10 ); iter -> next = node ; iter = node ; carry = carry / 10 ; l1 = l1 -> next ; } while ( l2 != nullptr ) { carry = l2 -> val + carry ; ListNode * node = new ListNode ( carry % 10 ); iter -> next = node ; iter = node ; carry = carry / 10 ; l2 = l2 -> next ; } if ( carry > 0 ) { ListNode * node = new ListNode ( carry ); iter -> next = node ; } return head -> next ; } };","title":"3.1 C++"},{"location":"leetcode/2/readme/#32-python","text":"class Solution : def addTwoNumbers ( self , l1 : ListNode , l2 : ListNode ) -> ListNode : if not l1 : return l2 if not l2 : return l1 carry = 0 head = ListNode ( - 1 ) iters = head while ( l1 and l2 ): carry = l1 . val + l2 . val + carry node = ListNode ( carry % 10 ) carry = carry // 10 iters . next = node iters = node l1 = l1 . next l2 = l2 . next while ( l1 ): carry = l1 . val + carry node = ListNode ( carry % 10 ) carry = carry // 10 iters . next = node iters = node l1 = l1 . next while ( l2 ): carry = l2 . val + carry node = ListNode ( carry % 10 ) carry = carry // 10 iters . next = node iters = node l2 = l2 . next if carry > 0 : node = ListNode ( carry ) iters . next = node return head . next","title":"3.2 python"},{"location":"leetcode/200/200/index.py.html","text":"200.py \u00b6 from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def numIslands ( self , grid : List [ List [ str ]]) -> int : zero_count = 0 m = len ( grid ) if m == 0 : return 0 n = len ( grid [ 0 ]) if n == 0 : return 0 self . create ( m * n ) for i in range ( m ): for j in range ( n ): if grid [ i ][ j ] == '0' : zero_count += 1 continue if i == 0 and j > 0 : if grid [ i ][ j ] == grid [ i ][ j - 1 ]: self . merge ( i * n + j , i * n + j - 1 ) if i > 0 and j == 0 : if grid [ i ][ j ] == grid [ i - 1 ][ j ]: self . merge ( i * n + j , ( i - 1 ) * n + j ) if i > 0 and j > 0 : if grid [ i ][ j ] == grid [ i - 1 ][ j ]: self . merge ( i * n + j , ( i - 1 ) * n + j ) if grid [ i ][ j ] == grid [ i ][ j - 1 ]: self . merge ( i * n + j , i * n + j - 1 ) count = self . count () return count - zero_count s = Solution () grid = [[ \"1\" , \"1\" , \"1\" , \"1\" , \"0\" ], [ \"1\" , \"1\" , \"0\" , \"1\" , \"0\" ], [ \"1\" , \"1\" , \"0\" , \"0\" , \"0\" ], [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" ]] expected = 1 ans = s . numIslands ( grid ) assert ans == expected grid = [[ \"1\" , \"1\" , \"1\" , \"1\" , \"0\" ], [ \"1\" , \"1\" , \"0\" , \"1\" , \"0\" ], [ \"0\" , \"0\" , \"0\" , \"0\" , \"1\" ], [ \"1\" , \"1\" , \"1\" , \"0\" , \"0\" ]] expected = 3 ans = s . numIslands ( grid ) assert ans == expected end = 10","title":"200.py"},{"location":"leetcode/200/200/index.py.html#200py","text":"from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def numIslands ( self , grid : List [ List [ str ]]) -> int : zero_count = 0 m = len ( grid ) if m == 0 : return 0 n = len ( grid [ 0 ]) if n == 0 : return 0 self . create ( m * n ) for i in range ( m ): for j in range ( n ): if grid [ i ][ j ] == '0' : zero_count += 1 continue if i == 0 and j > 0 : if grid [ i ][ j ] == grid [ i ][ j - 1 ]: self . merge ( i * n + j , i * n + j - 1 ) if i > 0 and j == 0 : if grid [ i ][ j ] == grid [ i - 1 ][ j ]: self . merge ( i * n + j , ( i - 1 ) * n + j ) if i > 0 and j > 0 : if grid [ i ][ j ] == grid [ i - 1 ][ j ]: self . merge ( i * n + j , ( i - 1 ) * n + j ) if grid [ i ][ j ] == grid [ i ][ j - 1 ]: self . merge ( i * n + j , i * n + j - 1 ) count = self . count () return count - zero_count s = Solution () grid = [[ \"1\" , \"1\" , \"1\" , \"1\" , \"0\" ], [ \"1\" , \"1\" , \"0\" , \"1\" , \"0\" ], [ \"1\" , \"1\" , \"0\" , \"0\" , \"0\" ], [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" ]] expected = 1 ans = s . numIslands ( grid ) assert ans == expected grid = [[ \"1\" , \"1\" , \"1\" , \"1\" , \"0\" ], [ \"1\" , \"1\" , \"0\" , \"1\" , \"0\" ], [ \"0\" , \"0\" , \"0\" , \"0\" , \"1\" ], [ \"1\" , \"1\" , \"1\" , \"0\" , \"0\" ]] expected = 3 ans = s . numIslands ( grid ) assert ans == expected end = 10","title":"200.py"},{"location":"leetcode/200/readme/","text":"200. \u5c9b\u5c7f\u6570\u91cf \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u7531 '1'\uff08\u9646\u5730\uff09\u548c '0'\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002 \u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 \u8f93\u5165: 11110 11010 11000 00000 \u8f93\u51fa: 1 \u793a\u4f8b 2: 1 2 3 4 5 6 7 \u8f93\u5165: 11000 11000 00100 00011 \u8f93\u51fa: 3 \u89e3\u91ca: \u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u5927\u5c0f\u4e3a m * n \u7684\u5e76\u67e5\u96c6\u8868\u793a\u6700\u7ec8\u7684\u5c9b\u5c7f\u6570\u91cf \u904d\u5386\u77e9\u9635\u6bcf\u4e2a\u5143\u7d20\uff0c\u68c0\u67e5\u5176\u5de6\u4fa7\uff0c\u4e0a\u4fa7\u662f\u5426\u4e0e1\u76f8\u8fde\uff0c\u5982\u679c\u76f8\u90bb\uff0c\u5408\u5e76\u5230\u4e00\u7ec4\u4e2d \u6700\u540e\u7edf\u8ba1\u5e76\u67e5\u96c6\u4e2d\u96c6\u5408\u7684\u6570\u91cf python","title":"[200. \u5c9b\u5c7f\u6570\u91cf](https://leetcode-cn.com/problems/number-of-islands/)"},{"location":"leetcode/200/readme/#200","text":"","title":"200. \u5c9b\u5c7f\u6570\u91cf"},{"location":"leetcode/200/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u7531 '1'\uff08\u9646\u5730\uff09\u548c '0'\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002 \u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 \u8f93\u5165: 11110 11010 11000 00000 \u8f93\u51fa: 1 \u793a\u4f8b 2: 1 2 3 4 5 6 7 \u8f93\u5165: 11000 11000 00100 00011 \u8f93\u51fa: 3 \u89e3\u91ca: \u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/200/readme/#2","text":"\u4f7f\u7528\u5927\u5c0f\u4e3a m * n \u7684\u5e76\u67e5\u96c6\u8868\u793a\u6700\u7ec8\u7684\u5c9b\u5c7f\u6570\u91cf \u904d\u5386\u77e9\u9635\u6bcf\u4e2a\u5143\u7d20\uff0c\u68c0\u67e5\u5176\u5de6\u4fa7\uff0c\u4e0a\u4fa7\u662f\u5426\u4e0e1\u76f8\u8fde\uff0c\u5982\u679c\u76f8\u90bb\uff0c\u5408\u5e76\u5230\u4e00\u7ec4\u4e2d \u6700\u540e\u7edf\u8ba1\u5e76\u67e5\u96c6\u4e2d\u96c6\u5408\u7684\u6570\u91cf python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/207/207/index.py.html","text":"207.py \u00b6 from typing import List class Solution : def canFinish ( self , numCourses : int , prerequisites : List [ List [ int ]]) -> bool : def dfs ( G , i , color ): color [ i ] = 1 for j in range ( len ( G )): if i != j and G [ i ][ j ] != 0 : if color [ j ] == 1 : return True if color [ j ] == 0 : ans = dfs ( G , j , color ) if ans == True : return True color [ i ] = 2 return False def isCycle ( G ): color = [ 0 ] * len ( G ) for i in range ( len ( G )): if color [ i ] == 0 : ans = dfs ( G , i , color ) if ans == True : return True return False G = [ [ 0 for _ in range ( numCourses )] for _ in range ( numCourses )] for u , v in prerequisites : G [ u ][ v ] = 1 ans = isCycle ( G ) return not ans s = Solution () numCourses = 3 pre = [[ 0 , 2 ],[ 1 , 2 ],[ 2 , 0 ]] ans = s . canFinish ( numCourses , pre ) expected = False assert expected == ans end = 10","title":"207.py"},{"location":"leetcode/207/207/index.py.html#207py","text":"from typing import List class Solution : def canFinish ( self , numCourses : int , prerequisites : List [ List [ int ]]) -> bool : def dfs ( G , i , color ): color [ i ] = 1 for j in range ( len ( G )): if i != j and G [ i ][ j ] != 0 : if color [ j ] == 1 : return True if color [ j ] == 0 : ans = dfs ( G , j , color ) if ans == True : return True color [ i ] = 2 return False def isCycle ( G ): color = [ 0 ] * len ( G ) for i in range ( len ( G )): if color [ i ] == 0 : ans = dfs ( G , i , color ) if ans == True : return True return False G = [ [ 0 for _ in range ( numCourses )] for _ in range ( numCourses )] for u , v in prerequisites : G [ u ][ v ] = 1 ans = isCycle ( G ) return not ans s = Solution () numCourses = 3 pre = [[ 0 , 2 ],[ 1 , 2 ],[ 2 , 0 ]] ans = s . canFinish ( numCourses , pre ) expected = False assert expected == ans end = 10","title":"207.py"},{"location":"leetcode/207/readme/","text":"207. \u8bfe\u7a0b\u8868 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u4f60\u8fd9\u4e2a\u5b66\u671f\u5fc5\u987b\u9009\u4fee numCourse \u95e8\u8bfe\u7a0b\uff0c\u8bb0\u4e3a 0 \u5230 numCourse-1 \u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec\uff1a[0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: true \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: 2, [[1,0],[0,1]] \u8f93\u51fa: false \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u63d0\u793a\uff1a 1 2 3 \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f \u90bb\u63a5\u77e9\u9635 \u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 1 <= numCourses <= 10^5 2. \u89e3\u9898\u601d\u8def \u00b6 \u5904\u7406\u6709\u5411\u56fe\uff0c\u770b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u73af\u8def Python","title":"[207. \u8bfe\u7a0b\u8868](https://leetcode-cn.com/problems/course-schedule)"},{"location":"leetcode/207/readme/#207","text":"","title":"207. \u8bfe\u7a0b\u8868"},{"location":"leetcode/207/readme/#1","text":"\u4f60\u8fd9\u4e2a\u5b66\u671f\u5fc5\u987b\u9009\u4fee numCourse \u95e8\u8bfe\u7a0b\uff0c\u8bb0\u4e3a 0 \u5230 numCourse-1 \u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec\uff1a[0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: true \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u793a\u4f8b 2: \u8f93\u5165: 2, [[1,0],[0,1]] \u8f93\u51fa: false \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u63d0\u793a\uff1a 1 2 3 \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f \u90bb\u63a5\u77e9\u9635 \u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 1 <= numCourses <= 10^5","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/207/readme/#2","text":"\u5904\u7406\u6709\u5411\u56fe\uff0c\u770b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u73af\u8def Python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/208/208/index.c.html","text":"208.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define CHAR_MAX 26 typedef struct node { struct node * children [ CHAR_MAX ]; // \u6307\u5411\u5b69\u5b50\u4eec\u7684\u6307\u9488\u6570\u7ec4 char c ; // \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u5b57\u6bcd bool isWord ; // \u8bb0\u5f55\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0 } Trie ; void initChildren ( Trie ** children , int size ) { for ( int i = 0 ; i < size ; i ++ ) { children [ i ] = NULL ; } } /** Initialize your data structure here. */ Trie * trieCreate () { Trie * root = ( Trie * ) malloc ( sizeof ( Trie )); root -> c = ' ' ; root -> isWord = false ; initChildren ( root -> children , CHAR_MAX ); return root ; } /** Inserts a word into the trie. */ void trieInsert ( Trie * obj , char * word ) { if ( word == NULL ) return ; const int n = strlen ( word ); if ( n == 0 ) return ; Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; // \u8f6c\u6362\u6210\u7d22\u5f15 if ( curr -> children [ index ] == NULL ) { // \u8be5\u5b57\u7b26\u8fd8\u4e0d\u5b58\u5728\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ i ]; newNode -> isWord = ( i == n - 1 ) ? true : false ; initChildren ( newNode -> children , CHAR_MAX ); curr -> children [ index ] = newNode ; curr = newNode ; } else { // \u5982\u679c\u5b58\u5728\uff0c\u5224\u65ad\u662f\u5426\u5230\u4e86\u6700\u540e\u4e00\u4e2a if ( i == n - 1 ) { curr -> children [ index ] -> isWord = true ; } curr = curr -> children [ index ]; } } return ; } /** Returns if the word is in the trie. */ bool trieSearch ( Trie * obj , char * word ) { if ( obj == NULL || word == NULL ) return false ; const int n = strlen ( word ); Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; if ( curr -> children [ index ] == NULL ) { return false ; } else if ( i == n - 1 && curr -> children [ index ] -> isWord == true ) { return true ; } else { curr = curr -> children [ index ]; } } return false ; } /* \u771f\u524d\u7f00\u624d\u8fd4\u56de true */ bool trieStartsWithTrue ( Trie * obj , char * prefix ) { if ( obj == NULL || prefix == NULL ) return false ; const int n = strlen ( prefix ); Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = prefix [ i ] - 'a' ; if ( curr -> children [ index ] == NULL ) { return false ; } else if ( i == n - 1 ) { // \u5982\u679c\u68c0\u67e5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c // \u6ca1\u6709\u5355\u8bcd\u7ed3\u675f\u6807\u5fd7\uff0c\u76f4\u63a5\u8fd4\u56de true // \u6709\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0\uff0c\u5224\u65ad\u662f\u5426\u6709\u5b69\u5b50\uff0c\u6ca1\u6709\u5b69\u5b50\uff0c\u8bf4\u660e\u4e0d\u662f\u771f\u524d\u7f00 // \u6709\u5b69\u5b50\uff0c\u8bf4\u660e\u662f\u67d0\u4e2a\u5355\u8bcd\u7684\u771f\u524d\u7f00 if ( curr -> children [ index ] -> isWord == false ) return true ; bool ans = false ; Trie * next = curr -> children [ index ]; for ( int j = 0 ; j < CHAR_MAX ; j ++ ) { if ( next -> children [ j ] != NULL ) { ans = true ; break ; } } return ans ; } else { curr = curr -> children [ index ]; } } return false ; } // \u7b49\u4e8e\u5355\u8bcd\u4e5f\u8ba4\u4e3a\u662f\u524d\u7f00 bool trieStartsWith ( Trie * obj , char * prefix ) { if ( obj == NULL || prefix == NULL ) return false ; const int n = strlen ( prefix ); Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = prefix [ i ] - 'a' ; if ( curr -> children [ index ] == NULL ) { return false ; } else if ( i == n - 1 ) { return true ; } else { curr = curr -> children [ index ]; } } return false ; } void trieFree ( Trie * obj ) { if ( obj == NULL ) return ; for ( int i = 0 ; i < CHAR_MAX ; i ++ ) { if ( obj -> children [ i ] != NULL ) { free ( obj -> children [ i ]); } } free ( obj ); } int main () { Trie * obj = trieCreate (); trieInsert ( obj , \"apple\" ); bool ans_1 = trieSearch ( obj , \"apple\" ); // \u8fd4\u56de true trieSearch ( obj , \"app\" ); // \u8fd4\u56de false bool ans_2 = trieStartsWith ( obj , \"app\" ); // \u8fd4\u56de true trieInsert ( obj , \"app\" ); bool ans_3 = trieSearch ( obj , \"app\" ); // \u8fd4\u56de true bool ans_4 = trieStartsWithTrue ( obj , \"app\" ); // \u8fd4\u56detrue bool ans_5 = trieStartsWithTrue ( obj , \"apple\" ); // \u8fd4\u56defalse trieFree ( obj ); return 0 ; } /** * Your Trie struct will be instantiated and called as such: * Trie* obj = trieCreate(); * trieInsert(obj, word); * bool param_2 = trieSearch(obj, word); * bool param_3 = trieStartsWith(obj, prefix); * trieFree(obj); */","title":"208.c"},{"location":"leetcode/208/208/index.c.html#208c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define CHAR_MAX 26 typedef struct node { struct node * children [ CHAR_MAX ]; // \u6307\u5411\u5b69\u5b50\u4eec\u7684\u6307\u9488\u6570\u7ec4 char c ; // \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u5b57\u6bcd bool isWord ; // \u8bb0\u5f55\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0 } Trie ; void initChildren ( Trie ** children , int size ) { for ( int i = 0 ; i < size ; i ++ ) { children [ i ] = NULL ; } } /** Initialize your data structure here. */ Trie * trieCreate () { Trie * root = ( Trie * ) malloc ( sizeof ( Trie )); root -> c = ' ' ; root -> isWord = false ; initChildren ( root -> children , CHAR_MAX ); return root ; } /** Inserts a word into the trie. */ void trieInsert ( Trie * obj , char * word ) { if ( word == NULL ) return ; const int n = strlen ( word ); if ( n == 0 ) return ; Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; // \u8f6c\u6362\u6210\u7d22\u5f15 if ( curr -> children [ index ] == NULL ) { // \u8be5\u5b57\u7b26\u8fd8\u4e0d\u5b58\u5728\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ i ]; newNode -> isWord = ( i == n - 1 ) ? true : false ; initChildren ( newNode -> children , CHAR_MAX ); curr -> children [ index ] = newNode ; curr = newNode ; } else { // \u5982\u679c\u5b58\u5728\uff0c\u5224\u65ad\u662f\u5426\u5230\u4e86\u6700\u540e\u4e00\u4e2a if ( i == n - 1 ) { curr -> children [ index ] -> isWord = true ; } curr = curr -> children [ index ]; } } return ; } /** Returns if the word is in the trie. */ bool trieSearch ( Trie * obj , char * word ) { if ( obj == NULL || word == NULL ) return false ; const int n = strlen ( word ); Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; if ( curr -> children [ index ] == NULL ) { return false ; } else if ( i == n - 1 && curr -> children [ index ] -> isWord == true ) { return true ; } else { curr = curr -> children [ index ]; } } return false ; } /* \u771f\u524d\u7f00\u624d\u8fd4\u56de true */ bool trieStartsWithTrue ( Trie * obj , char * prefix ) { if ( obj == NULL || prefix == NULL ) return false ; const int n = strlen ( prefix ); Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = prefix [ i ] - 'a' ; if ( curr -> children [ index ] == NULL ) { return false ; } else if ( i == n - 1 ) { // \u5982\u679c\u68c0\u67e5\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c // \u6ca1\u6709\u5355\u8bcd\u7ed3\u675f\u6807\u5fd7\uff0c\u76f4\u63a5\u8fd4\u56de true // \u6709\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0\uff0c\u5224\u65ad\u662f\u5426\u6709\u5b69\u5b50\uff0c\u6ca1\u6709\u5b69\u5b50\uff0c\u8bf4\u660e\u4e0d\u662f\u771f\u524d\u7f00 // \u6709\u5b69\u5b50\uff0c\u8bf4\u660e\u662f\u67d0\u4e2a\u5355\u8bcd\u7684\u771f\u524d\u7f00 if ( curr -> children [ index ] -> isWord == false ) return true ; bool ans = false ; Trie * next = curr -> children [ index ]; for ( int j = 0 ; j < CHAR_MAX ; j ++ ) { if ( next -> children [ j ] != NULL ) { ans = true ; break ; } } return ans ; } else { curr = curr -> children [ index ]; } } return false ; } // \u7b49\u4e8e\u5355\u8bcd\u4e5f\u8ba4\u4e3a\u662f\u524d\u7f00 bool trieStartsWith ( Trie * obj , char * prefix ) { if ( obj == NULL || prefix == NULL ) return false ; const int n = strlen ( prefix ); Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = prefix [ i ] - 'a' ; if ( curr -> children [ index ] == NULL ) { return false ; } else if ( i == n - 1 ) { return true ; } else { curr = curr -> children [ index ]; } } return false ; } void trieFree ( Trie * obj ) { if ( obj == NULL ) return ; for ( int i = 0 ; i < CHAR_MAX ; i ++ ) { if ( obj -> children [ i ] != NULL ) { free ( obj -> children [ i ]); } } free ( obj ); } int main () { Trie * obj = trieCreate (); trieInsert ( obj , \"apple\" ); bool ans_1 = trieSearch ( obj , \"apple\" ); // \u8fd4\u56de true trieSearch ( obj , \"app\" ); // \u8fd4\u56de false bool ans_2 = trieStartsWith ( obj , \"app\" ); // \u8fd4\u56de true trieInsert ( obj , \"app\" ); bool ans_3 = trieSearch ( obj , \"app\" ); // \u8fd4\u56de true bool ans_4 = trieStartsWithTrue ( obj , \"app\" ); // \u8fd4\u56detrue bool ans_5 = trieStartsWithTrue ( obj , \"apple\" ); // \u8fd4\u56defalse trieFree ( obj ); return 0 ; } /** * Your Trie struct will be instantiated and called as such: * Trie* obj = trieCreate(); * trieInsert(obj, word); * bool param_2 = trieSearch(obj, word); * bool param_3 = trieStartsWith(obj, prefix); * trieFree(obj); */","title":"208.c"},{"location":"leetcode/208/readme/","text":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert, search, \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 8 Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true \u8bf4\u660e: 1 2 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u6784\u6210\u7684\u3002 \u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002 C","title":"[208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)](https://leetcode-cn.com/problems/implement-trie-prefix-tree/)"},{"location":"leetcode/208/readme/#208-trie","text":"","title":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)"},{"location":"leetcode/208/readme/#1","text":"\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b insert, search, \u548c startsWith \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 8 Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // \u8fd4\u56de true trie.search(\"app\"); // \u8fd4\u56de false trie.startsWith(\"app\"); // \u8fd4\u56de true trie.insert(\"app\"); trie.search(\"app\"); // \u8fd4\u56de true \u8bf4\u660e: 1 2 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u6784\u6210\u7684\u3002 \u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002 C","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/210/210/index.py.html","text":"210.py \u00b6 from typing import List class Solution : def findOrder ( self , numCourses : int , prerequisites : List [ List [ int ]]) -> List [ int ]: def dfs ( G , i , color ): color [ i ] = 1 for j in range ( len ( G )): if i != j and G [ i ][ j ] != 0 : if color [ j ] == 1 : return True if color [ j ] == 0 : ans = dfs ( G , j , color ) if ans == True : return True color [ i ] = 2 return False def isCycle ( G ): color = [ 0 ] * len ( G ) for i in range ( len ( G )): if color [ i ] == 0 : ans = dfs ( G , i , color ) if ans == True : return True return False def Topology ( G , i , color ): color [ i ] = 1 #outlist.append(i) for point , value in enumerate ( G [ i ]): if value != 0 and color [ point ] == 0 : Topology ( G , point , color ) color [ i ] = 2 outlist . insert ( 0 , i ) # \u8bbf\u95ee\u5b8c\u4e4b\u540e\u9006\u5e8f\u8f93\u51fa G = [ [ 0 for _ in range ( numCourses )] for _ in range ( numCourses )] for u , v in prerequisites : G [ v ][ u ] = 1 cycle = isCycle ( G ) if cycle : return [] outlist = [] color = [ 0 for _ in range ( len ( G ))] for i in range ( len ( G )): if color [ i ] == 0 : Topology ( G , i , color ) return outlist s = Solution () numCourses = 2 pre = [[ 1 , 0 ]] ans = s . findOrder ( numCourses , pre ) expected = [ 0 , 1 , 2 , 3 ] assert expected == ans end = 10","title":"210.py"},{"location":"leetcode/210/210/index.py.html#210py","text":"from typing import List class Solution : def findOrder ( self , numCourses : int , prerequisites : List [ List [ int ]]) -> List [ int ]: def dfs ( G , i , color ): color [ i ] = 1 for j in range ( len ( G )): if i != j and G [ i ][ j ] != 0 : if color [ j ] == 1 : return True if color [ j ] == 0 : ans = dfs ( G , j , color ) if ans == True : return True color [ i ] = 2 return False def isCycle ( G ): color = [ 0 ] * len ( G ) for i in range ( len ( G )): if color [ i ] == 0 : ans = dfs ( G , i , color ) if ans == True : return True return False def Topology ( G , i , color ): color [ i ] = 1 #outlist.append(i) for point , value in enumerate ( G [ i ]): if value != 0 and color [ point ] == 0 : Topology ( G , point , color ) color [ i ] = 2 outlist . insert ( 0 , i ) # \u8bbf\u95ee\u5b8c\u4e4b\u540e\u9006\u5e8f\u8f93\u51fa G = [ [ 0 for _ in range ( numCourses )] for _ in range ( numCourses )] for u , v in prerequisites : G [ v ][ u ] = 1 cycle = isCycle ( G ) if cycle : return [] outlist = [] color = [ 0 for _ in range ( len ( G ))] for i in range ( len ( G )): if color [ i ] == 0 : Topology ( G , i , color ) return outlist s = Solution () numCourses = 2 pre = [[ 1 , 0 ]] ans = s . findOrder ( numCourses , pre ) expected = [ 0 , 1 , 2 , 3 ] assert expected == ans end = 10","title":"210.py"},{"location":"leetcode/210/readme/","text":"210. \u8bfe\u7a0b\u8868 II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1\u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002 \u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 9 10 11 12 13 \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: [0,1] \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a [0,1] \u3002 \u793a\u4f8b 2: \u8f93\u5165: 4, [[1,0],[2,0],[3,1],[3,2]] \u8f93\u51fa: [0,1,2,3] or [0,2,1,3] \u89e3\u91ca: \u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f [0,1,2,3] \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f [0,2,1,3] \u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\u8fb9\u7f18\u5217\u8868\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: 1 2 3 \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5148\u5224\u65ad\u662f\u5426\u6709\u73af\uff0c\u5982\u679c\u6ca1\u6709\u73af\u8def\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f Python","title":"[210. \u8bfe\u7a0b\u8868 II](https://leetcode-cn.com/problems/course-schedule-ii)"},{"location":"leetcode/210/readme/#210-ii","text":"","title":"210. \u8bfe\u7a0b\u8868 II"},{"location":"leetcode/210/readme/#1","text":"\u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 n-1\u3002 \u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1] \u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002 \u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 9 10 11 12 13 \u8f93\u5165: 2, [[1,0]] \u8f93\u51fa: [0,1] \u89e3\u91ca: \u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a [0,1] \u3002 \u793a\u4f8b 2: \u8f93\u5165: 4, [[1,0],[2,0],[3,1],[3,2]] \u8f93\u51fa: [0,1,2,3] or [0,2,1,3] \u89e3\u91ca: \u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f [0,1,2,3] \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f [0,2,1,3] \u3002 \u8bf4\u660e: \u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\u8fb9\u7f18\u5217\u8868\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002 \u63d0\u793a: 1 2 3 \u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002 \u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7 BFS \u5b8c\u6210\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/210/readme/#2","text":"\u5148\u5224\u65ad\u662f\u5426\u6709\u73af\uff0c\u5982\u679c\u6ca1\u6709\u73af\u8def\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f Python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/212/212/index.c.html","text":"212.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_CHAR 26 // \u5b57\u6bcd\u79cd\u7c7b\uff0c26\u4e2a\u5c0f\u5199\u5b57\u6bcd #define MAX_WORD 500 // \u4e00\u4e2a\u5355\u8bcd\u7684\u6700\u5927\u957f\u5ea6 int rows = 0 ; int cols = 0 ; char ** gborad = NULL ; int ** color = NULL ; char ** ans = NULL ; int ansEnd = 0 ; const int direct [ 4 ][ 2 ] = {{ 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 }}; typedef struct node { struct node * children [ MAX_CHAR ]; // \u6307\u5411\u5b69\u5b50\u4eec\u7684\u6307\u9488\u6570\u7ec4 char c ; // \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u5b57\u6bcd bool isWord ; // \u8bb0\u5f55\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0 } Trie ; int ** allocMatrix ( int n , int m ) { int ** matrix = ( int ** ) malloc ( sizeof ( int * ) * n ); for ( int i = 0 ; i < n ; i ++ ) { matrix [ i ] = ( int * ) malloc ( sizeof ( int ) * m ); } return matrix ; } void fillMatrix ( int ** matrix , int n , int m , int val ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { matrix [ i ][ j ] = val ; } } } void freeMatrix ( int ** matrix , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { free ( matrix [ i ]); } free ( matrix ); } void initChildren ( Trie ** children , int size ) { for ( int i = 0 ; i < size ; i ++ ) { children [ i ] = NULL ; } } char * deepCopy ( char * string , int end ) { char * new_string = ( char * ) malloc ( sizeof ( char ) * ( end + 2 )); for ( int i = 0 ; i < end ; i ++ ) { new_string [ i ] = string [ i ]; } new_string [ end ] = '\\0' ; return new_string ; } bool notfind ( char ** words , int wordsSize , char * line , int end ) { line [ end ] = '\\0' ; for ( int i = 0 ; i < wordsSize ; i ++ ) { if ( strcmp ( words [ i ], line ) == 0 ) { return false ; } } return true ; } Trie * trieCreate () { Trie * root = ( Trie * ) malloc ( sizeof ( Trie )); root -> c = ' ' ; root -> isWord = false ; initChildren ( root -> children , MAX_CHAR ); return root ; } void trieInsert ( Trie * obj , char * word ) { if ( word == NULL ) return ; const int n = strlen ( word ); if ( n == 0 ) return ; Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; // \u8f6c\u6362\u6210\u7d22\u5f15 if ( curr -> children [ index ] == NULL ) { // \u8be5\u5b57\u7b26\u8fd8\u4e0d\u5b58\u5728\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ i ]; newNode -> isWord = ( i == n - 1 ) ? true : false ; initChildren ( newNode -> children , MAX_CHAR ); curr -> children [ index ] = newNode ; curr = newNode ; } else { // \u5982\u679c\u5b58\u5728\uff0c\u5224\u65ad\u662f\u5426\u5230\u4e86\u6700\u540e\u4e00\u4e2a if ( i == n - 1 ) { curr -> children [ index ] -> isWord = true ; } curr = curr -> children [ index ]; } } return ; } void trieFree ( Trie * obj ) { if ( obj == NULL ) return ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( obj -> children [ i ] != NULL ) { free ( obj -> children [ i ]); } } free ( obj ); } void dfs ( int i , int j , Trie * root , char * line , int end ) { if ( root -> isWord ) { line [ end ] = root -> c ; // \u53bb\u91cd\uff0c\u6b64\u5904\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u52a0\u5feb\u901f\u5ea6 if ( notfind ( ans , ansEnd , line , end + 1 )) { ans [ ansEnd ++ ] = deepCopy ( line , end + 1 ); } } color [ i ][ j ] = 1 ; for ( int p = 0 ; p < MAX_CHAR ; p ++ ) { if ( root -> children [ p ] != NULL ) { for ( int k = 0 ; k < 4 ; k ++ ) { int ni = i + direct [ k ][ 0 ]; int nj = j + direct [ k ][ 1 ]; if ( 0 <= ni && ni < rows && 0 <= nj && nj < cols && color [ ni ][ nj ] == 0 ) { if ( gborad [ ni ][ nj ] == root -> children [ p ] -> c ) { line [ end ] = root -> c ; dfs ( ni , nj , root -> children [ p ], line , end + 1 ); } } } } } color [ i ][ j ] = 0 ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findWords ( char ** board , int boardSize , int * boardColSize , char ** words , int wordsSize , int * returnSize ){ * returnSize = 0 ; if ( words == NULL || wordsSize <= 0 ) return NULL ; if ( board == NULL || boardSize <= 0 ) return NULL ; if ( boardColSize == NULL || boardColSize [ 0 ] == 0 ) return NULL ; if ( words [ 0 ] == 0 ) return NULL ; rows = boardSize ; cols = boardColSize [ 0 ]; gborad = board ; color = allocMatrix ( rows , cols ); ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); ansEnd = 0 ; char * line = ( char * ) malloc ( sizeof ( char ) * MAX_WORD ); // \u5efa\u7acb\u5b57\u5178\u6811 Trie * root = trieCreate (); for ( int i = 0 ; i < wordsSize ; i ++ ) { trieInsert ( root , words [ i ]); } // \u5bf9\u4e8e\u4ee5\u6bcf\u4e2a\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\uff0c\u4ece\u77e9\u9635\u4e2d\u5bfb\u627e\u5230\u4f4d\u7f6e\uff0c\u4ece\u4f4d\u7f6e\u5f00\u59cb\u641c\u7d22 for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( root -> children [ i ] != NULL ) { for ( int p = 0 ; p < boardSize ; p ++ ) { for ( int q = 0 ; q < boardColSize [ p ]; q ++ ) { if ( board [ p ][ q ] == root -> children [ i ] -> c ) { fillMatrix ( color , rows , cols , 0 ); dfs ( p , q , root -> children [ i ], line , 0 ); } } } } } trieFree ( root ); freeMatrix ( color , rows , cols ); free ( line ); rows = 0 ; cols = 0 ; gborad = NULL ; color = NULL ; * returnSize = ansEnd ; return ans ; } int main () { //[[\"a\",\"b\"],[\"a\",\"a\"]] //[\"aba\",\"baa\",\"bab\",\"aaab\",\"aaa\",\"aaaa\",\"aaba\"] // \u9884\u671f\u7ed3\u679c [\"aaa\",\"aaab\",\"aaba\",\"aba\",\"baa\"] // [\"a\", \"a\"] // [\"a\"] // \u9884\u671f\u7ed3\u679c\uff1a[\"a\"] int boardSize = 2 ; int boardColsSize [] = { 2 , 2 }; int wordSize = 7 ; char * words [ 7 ] = { \"aba\" , \"baa\" , \"bab\" , \"aaab\" , \"aaa\" , \"aaaa\" , \"aaba\" }; char * board [ 2 ] = { \"ab\" , \"aa\" }; char ** ans ; int returnSize ; ans = findWords ( board , boardSize , boardColsSize , words , wordSize , & returnSize ); for ( int i = 0 ; i < returnSize ; i ++ ) { printf ( \"%s, \" , ans [ i ]); } return 0 ; } /* \u6267\u884c\u7528\u65f6 :52 ms, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8682.58%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017 :27 MB, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 */","title":"212.c"},{"location":"leetcode/212/212/index.c.html#212c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_CHAR 26 // \u5b57\u6bcd\u79cd\u7c7b\uff0c26\u4e2a\u5c0f\u5199\u5b57\u6bcd #define MAX_WORD 500 // \u4e00\u4e2a\u5355\u8bcd\u7684\u6700\u5927\u957f\u5ea6 int rows = 0 ; int cols = 0 ; char ** gborad = NULL ; int ** color = NULL ; char ** ans = NULL ; int ansEnd = 0 ; const int direct [ 4 ][ 2 ] = {{ 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 }}; typedef struct node { struct node * children [ MAX_CHAR ]; // \u6307\u5411\u5b69\u5b50\u4eec\u7684\u6307\u9488\u6570\u7ec4 char c ; // \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u5b57\u6bcd bool isWord ; // \u8bb0\u5f55\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0 } Trie ; int ** allocMatrix ( int n , int m ) { int ** matrix = ( int ** ) malloc ( sizeof ( int * ) * n ); for ( int i = 0 ; i < n ; i ++ ) { matrix [ i ] = ( int * ) malloc ( sizeof ( int ) * m ); } return matrix ; } void fillMatrix ( int ** matrix , int n , int m , int val ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { matrix [ i ][ j ] = val ; } } } void freeMatrix ( int ** matrix , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { free ( matrix [ i ]); } free ( matrix ); } void initChildren ( Trie ** children , int size ) { for ( int i = 0 ; i < size ; i ++ ) { children [ i ] = NULL ; } } char * deepCopy ( char * string , int end ) { char * new_string = ( char * ) malloc ( sizeof ( char ) * ( end + 2 )); for ( int i = 0 ; i < end ; i ++ ) { new_string [ i ] = string [ i ]; } new_string [ end ] = '\\0' ; return new_string ; } bool notfind ( char ** words , int wordsSize , char * line , int end ) { line [ end ] = '\\0' ; for ( int i = 0 ; i < wordsSize ; i ++ ) { if ( strcmp ( words [ i ], line ) == 0 ) { return false ; } } return true ; } Trie * trieCreate () { Trie * root = ( Trie * ) malloc ( sizeof ( Trie )); root -> c = ' ' ; root -> isWord = false ; initChildren ( root -> children , MAX_CHAR ); return root ; } void trieInsert ( Trie * obj , char * word ) { if ( word == NULL ) return ; const int n = strlen ( word ); if ( n == 0 ) return ; Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; // \u8f6c\u6362\u6210\u7d22\u5f15 if ( curr -> children [ index ] == NULL ) { // \u8be5\u5b57\u7b26\u8fd8\u4e0d\u5b58\u5728\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ i ]; newNode -> isWord = ( i == n - 1 ) ? true : false ; initChildren ( newNode -> children , MAX_CHAR ); curr -> children [ index ] = newNode ; curr = newNode ; } else { // \u5982\u679c\u5b58\u5728\uff0c\u5224\u65ad\u662f\u5426\u5230\u4e86\u6700\u540e\u4e00\u4e2a if ( i == n - 1 ) { curr -> children [ index ] -> isWord = true ; } curr = curr -> children [ index ]; } } return ; } void trieFree ( Trie * obj ) { if ( obj == NULL ) return ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( obj -> children [ i ] != NULL ) { free ( obj -> children [ i ]); } } free ( obj ); } void dfs ( int i , int j , Trie * root , char * line , int end ) { if ( root -> isWord ) { line [ end ] = root -> c ; // \u53bb\u91cd\uff0c\u6b64\u5904\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\u52a0\u5feb\u901f\u5ea6 if ( notfind ( ans , ansEnd , line , end + 1 )) { ans [ ansEnd ++ ] = deepCopy ( line , end + 1 ); } } color [ i ][ j ] = 1 ; for ( int p = 0 ; p < MAX_CHAR ; p ++ ) { if ( root -> children [ p ] != NULL ) { for ( int k = 0 ; k < 4 ; k ++ ) { int ni = i + direct [ k ][ 0 ]; int nj = j + direct [ k ][ 1 ]; if ( 0 <= ni && ni < rows && 0 <= nj && nj < cols && color [ ni ][ nj ] == 0 ) { if ( gborad [ ni ][ nj ] == root -> children [ p ] -> c ) { line [ end ] = root -> c ; dfs ( ni , nj , root -> children [ p ], line , end + 1 ); } } } } } color [ i ][ j ] = 0 ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findWords ( char ** board , int boardSize , int * boardColSize , char ** words , int wordsSize , int * returnSize ){ * returnSize = 0 ; if ( words == NULL || wordsSize <= 0 ) return NULL ; if ( board == NULL || boardSize <= 0 ) return NULL ; if ( boardColSize == NULL || boardColSize [ 0 ] == 0 ) return NULL ; if ( words [ 0 ] == 0 ) return NULL ; rows = boardSize ; cols = boardColSize [ 0 ]; gborad = board ; color = allocMatrix ( rows , cols ); ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); ansEnd = 0 ; char * line = ( char * ) malloc ( sizeof ( char ) * MAX_WORD ); // \u5efa\u7acb\u5b57\u5178\u6811 Trie * root = trieCreate (); for ( int i = 0 ; i < wordsSize ; i ++ ) { trieInsert ( root , words [ i ]); } // \u5bf9\u4e8e\u4ee5\u6bcf\u4e2a\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\uff0c\u4ece\u77e9\u9635\u4e2d\u5bfb\u627e\u5230\u4f4d\u7f6e\uff0c\u4ece\u4f4d\u7f6e\u5f00\u59cb\u641c\u7d22 for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( root -> children [ i ] != NULL ) { for ( int p = 0 ; p < boardSize ; p ++ ) { for ( int q = 0 ; q < boardColSize [ p ]; q ++ ) { if ( board [ p ][ q ] == root -> children [ i ] -> c ) { fillMatrix ( color , rows , cols , 0 ); dfs ( p , q , root -> children [ i ], line , 0 ); } } } } } trieFree ( root ); freeMatrix ( color , rows , cols ); free ( line ); rows = 0 ; cols = 0 ; gborad = NULL ; color = NULL ; * returnSize = ansEnd ; return ans ; } int main () { //[[\"a\",\"b\"],[\"a\",\"a\"]] //[\"aba\",\"baa\",\"bab\",\"aaab\",\"aaa\",\"aaaa\",\"aaba\"] // \u9884\u671f\u7ed3\u679c [\"aaa\",\"aaab\",\"aaba\",\"aba\",\"baa\"] // [\"a\", \"a\"] // [\"a\"] // \u9884\u671f\u7ed3\u679c\uff1a[\"a\"] int boardSize = 2 ; int boardColsSize [] = { 2 , 2 }; int wordSize = 7 ; char * words [ 7 ] = { \"aba\" , \"baa\" , \"bab\" , \"aaab\" , \"aaa\" , \"aaaa\" , \"aaba\" }; char * board [ 2 ] = { \"ab\" , \"aa\" }; char ** ans ; int returnSize ; ans = findWords ( board , boardSize , boardColsSize , words , wordSize , & returnSize ); for ( int i = 0 ; i < returnSize ; i ++ ) { printf ( \"%s, \" , ans [ i ]); } return 0 ; } /* \u6267\u884c\u7528\u65f6 :52 ms, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8682.58%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017 :27 MB, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 */","title":"212.c"},{"location":"leetcode/212/212_2/index.c.html","text":"212_2.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> int rows = 0 ; int cols = 0 ; char ** gborad = NULL ; int ** color = NULL ; const int direct [ 4 ][ 2 ] = {{ 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 }}; char * deepCopy ( char * string ) { const int n = strlen ( string ); char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 3 )); for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = string [ i ]; } ans [ n ] = '\\0' ; return ans ; } void fillMatrix ( int ** matrix , int n , int m , int val ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { matrix [ i ][ j ] = val ; } } } void freeMatrix ( int ** matrix , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { free ( matrix [ i ]); } free ( matrix ); } bool dfs ( int i , int j , char * word , int index ) { if ( index == strlen ( word ) - 1 ) { return true ; } color [ i ][ j ] = 1 ; for ( int k = 0 ; k < 4 ; k ++ ) { int ni = i + direct [ k ][ 0 ]; int nj = j + direct [ k ][ 1 ]; if ( 0 <= ni && ni < rows && 0 <= nj && nj < cols ) { if ( gborad [ ni ][ nj ] == word [ index + 1 ] && color [ ni ][ nj ] == 0 ) { bool result = dfs ( ni , nj , word , index + 1 ); color [ ni ][ nj ] = 0 ; if ( result ) { return true ; } } } } color [ i ][ j ] = 0 ; return false ; } bool find ( char * word ) { for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ) { if ( gborad [ i ][ j ] == word [ 0 ]) { fillMatrix ( color , rows , cols , 0 ); bool result = dfs ( i , j , word , 0 ); if ( result ) { return true ; } } } } return false ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findWords ( char ** board , int boardSize , int * boardColSize , char ** words , int wordsSize , int * returnSize ) { * returnSize = 0 ; if ( words == NULL || wordsSize <= 0 ) return NULL ; if ( board == NULL || boardSize <= 0 ) return NULL ; if ( boardColSize == NULL || boardColSize [ 0 ] == 0 ) return NULL ; if ( words [ 0 ] == 0 ) return NULL ; char ** ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); int ansEnd = 0 ; int ** cc = ( int ** ) malloc ( sizeof ( int * ) * boardSize ); for ( int i = 0 ; i < boardSize ; i ++ ) { cc [ i ] = ( int * ) malloc ( sizeof ( int ) * boardColSize [ i ]); } // \u8bbe\u7f6e\u5168\u5c40\u53d8\u91cf\uff0c \u5c3d\u91cf\u5c11\u4f20\u53c2\u6570 rows = boardSize ; cols = boardColSize [ 0 ]; gborad = board ; color = cc ; for ( int i = 0 ; i < wordsSize ; i ++ ) { bool result = find ( words [ i ]); if ( result ) { ans [ ansEnd ++ ] = deepCopy ( words [ i ]); } } freeMatrix ( cc , rows , cols ); rows = 0 ; cols = 0 ; gborad = NULL ; color = NULL ; * returnSize = ansEnd ; return ans ; } int main () { int boardSize = 4 ; int boardColsSize [] = { 4 , 4 , 4 , 4 }; int wordSize = 4 ; char * words [ 4 ] = { \"oath\" , \"pea\" , \"eat\" , \"rain\" }; char * board [ 4 ] = { \"oaan\" , \"etae\" , \"ihkr\" , \"iflv\" }; char ** ans ; int returnSize ; ans = findWords ( board , boardSize , boardColsSize , words , wordSize , & returnSize ); for ( int i = 0 ; i < returnSize ; i ++ ) { printf ( \"%s, \" , ans [ i ]); } return 0 ; } /* \u6267\u884c\u7528\u65f6 :1240 ms, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8613.87%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017 :8.3 MB, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 */","title":"212 2.c"},{"location":"leetcode/212/212_2/index.c.html#212_2c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> int rows = 0 ; int cols = 0 ; char ** gborad = NULL ; int ** color = NULL ; const int direct [ 4 ][ 2 ] = {{ 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 }}; char * deepCopy ( char * string ) { const int n = strlen ( string ); char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 3 )); for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = string [ i ]; } ans [ n ] = '\\0' ; return ans ; } void fillMatrix ( int ** matrix , int n , int m , int val ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { matrix [ i ][ j ] = val ; } } } void freeMatrix ( int ** matrix , int n , int m ) { for ( int i = 0 ; i < n ; i ++ ) { free ( matrix [ i ]); } free ( matrix ); } bool dfs ( int i , int j , char * word , int index ) { if ( index == strlen ( word ) - 1 ) { return true ; } color [ i ][ j ] = 1 ; for ( int k = 0 ; k < 4 ; k ++ ) { int ni = i + direct [ k ][ 0 ]; int nj = j + direct [ k ][ 1 ]; if ( 0 <= ni && ni < rows && 0 <= nj && nj < cols ) { if ( gborad [ ni ][ nj ] == word [ index + 1 ] && color [ ni ][ nj ] == 0 ) { bool result = dfs ( ni , nj , word , index + 1 ); color [ ni ][ nj ] = 0 ; if ( result ) { return true ; } } } } color [ i ][ j ] = 0 ; return false ; } bool find ( char * word ) { for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ) { if ( gborad [ i ][ j ] == word [ 0 ]) { fillMatrix ( color , rows , cols , 0 ); bool result = dfs ( i , j , word , 0 ); if ( result ) { return true ; } } } } return false ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findWords ( char ** board , int boardSize , int * boardColSize , char ** words , int wordsSize , int * returnSize ) { * returnSize = 0 ; if ( words == NULL || wordsSize <= 0 ) return NULL ; if ( board == NULL || boardSize <= 0 ) return NULL ; if ( boardColSize == NULL || boardColSize [ 0 ] == 0 ) return NULL ; if ( words [ 0 ] == 0 ) return NULL ; char ** ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); int ansEnd = 0 ; int ** cc = ( int ** ) malloc ( sizeof ( int * ) * boardSize ); for ( int i = 0 ; i < boardSize ; i ++ ) { cc [ i ] = ( int * ) malloc ( sizeof ( int ) * boardColSize [ i ]); } // \u8bbe\u7f6e\u5168\u5c40\u53d8\u91cf\uff0c \u5c3d\u91cf\u5c11\u4f20\u53c2\u6570 rows = boardSize ; cols = boardColSize [ 0 ]; gborad = board ; color = cc ; for ( int i = 0 ; i < wordsSize ; i ++ ) { bool result = find ( words [ i ]); if ( result ) { ans [ ansEnd ++ ] = deepCopy ( words [ i ]); } } freeMatrix ( cc , rows , cols ); rows = 0 ; cols = 0 ; gborad = NULL ; color = NULL ; * returnSize = ansEnd ; return ans ; } int main () { int boardSize = 4 ; int boardColsSize [] = { 4 , 4 , 4 , 4 }; int wordSize = 4 ; char * words [ 4 ] = { \"oath\" , \"pea\" , \"eat\" , \"rain\" }; char * board [ 4 ] = { \"oaan\" , \"etae\" , \"ihkr\" , \"iflv\" }; char ** ans ; int returnSize ; ans = findWords ( board , boardSize , boardColsSize , words , wordSize , & returnSize ); for ( int i = 0 ; i < returnSize ; i ++ ) { printf ( \"%s, \" , ans [ i ]); } return 0 ; } /* \u6267\u884c\u7528\u65f6 :1240 ms, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8613.87%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017 :8.3 MB, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 */","title":"212_2.c"},{"location":"leetcode/212/readme/","text":"212. \u5355\u8bcd\u641c\u7d22 II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 words\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 8 9 10 11 12 \u8f93\u5165: words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board = [ ['o','a','a','n'], ['e','t','a','e'], ['i','h','k','r'], ['i','f','l','v'] ] \u8f93\u51fa: [\"eat\",\"oath\"] \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u7ec4\u6210\u3002 \u63d0\u793a: 1 2 \u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f \u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 2.1 \u65b9\u6cd5\u4e00 \u00b6 \u66b4\u529b\u67e5\u627e\uff0c \u5bf9\u6bcf\u4e00\u4e2a\u5355\u8bcd\uff0c \u4ece\u77e9\u9635\u4e2d\u627e\u5230\u6240\u6709\u5f00\u5934\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u4e3a\u8d77\u70b9\u5411\u56db\u4e2a\u65b9\u5411\u641c\u7d22\u3002 C 2.2 \u65b9\u6cd5\u4e8c \u00b6 \u5bf9 words \u5efa\u7acb\u524d\u7f00\u6811\uff0c \u7136\u540e\u904d\u5386\u524d\u7f00\u6811\u5728\u4e8c\u7ef4\u77e9\u9635\u4e2d\u641c\u7d22\u3002 C","title":"[212. \u5355\u8bcd\u641c\u7d22 II](https://leetcode-cn.com/problems/word-search-ii/)"},{"location":"leetcode/212/readme/#212-ii","text":"","title":"212. \u5355\u8bcd\u641c\u7d22 II"},{"location":"leetcode/212/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 words\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002 \u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 8 9 10 11 12 \u8f93\u5165: words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board = [ ['o','a','a','n'], ['e','t','a','e'], ['i','h','k','r'], ['i','f','l','v'] ] \u8f93\u51fa: [\"eat\",\"oath\"] \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd a-z \u7ec4\u6210\u3002 \u63d0\u793a: 1 2 \u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f \u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/212/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/212/readme/#21","text":"\u66b4\u529b\u67e5\u627e\uff0c \u5bf9\u6bcf\u4e00\u4e2a\u5355\u8bcd\uff0c \u4ece\u77e9\u9635\u4e2d\u627e\u5230\u6240\u6709\u5f00\u5934\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u4e3a\u8d77\u70b9\u5411\u56db\u4e2a\u65b9\u5411\u641c\u7d22\u3002 C","title":"2.1 \u65b9\u6cd5\u4e00"},{"location":"leetcode/212/readme/#22","text":"\u5bf9 words \u5efa\u7acb\u524d\u7f00\u6811\uff0c \u7136\u540e\u904d\u5386\u524d\u7f00\u6811\u5728\u4e8c\u7ef4\u77e9\u9635\u4e2d\u641c\u7d22\u3002 C","title":"2.2 \u65b9\u6cd5\u4e8c"},{"location":"leetcode/215/readme/","text":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: 1 2 \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002","title":"[215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20](https://leetcode-cn.com/problems/kth-largest-element-in-an-array/)"},{"location":"leetcode/215/readme/#215-k","text":"","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20"},{"location":"leetcode/215/readme/#1","text":"\u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2 \u8f93\u51fa: 5 \u793a\u4f8b 2: 1 2 \u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4 \u8f93\u51fa: 4 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/224/readme/","text":"224. \u57fa\u672c\u8ba1\u7b97\u5668 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5305\u542b\u5de6\u62ec\u53f7 ( \uff0c\u53f3\u62ec\u53f7 )\uff0c\u52a0\u53f7 + \uff0c\u51cf\u53f7 -\uff0c\u975e\u8d1f\u6574\u6570\u548c\u7a7a\u683c \u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: \"1 + 1\" \u8f93\u51fa: 2 \u793a\u4f8b 2: 1 2 \u8f93\u5165: \" 2-1 + 2 \" \u8f93\u51fa: 3 \u793a\u4f8b 3: 1 2 \u8f93\u5165: \"(1+(4+5+2)-3)+(6+8)\" \u8f93\u51fa: 23 \u8bf4\u660e\uff1a 1 2 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002 \u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 eval\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u6309\u7167\u5b57\u7b26\u4e32\u5904\u7406\u7684\u65b9\u5f0f\u5b8c\u6210\u89e3\u6790\uff1a #include <stdio.h> #include <stdlib.h> char * substr ( char * s , int start , int end ) { char * ans = ( char * ) malloc ( sizeof ( char ) * ( end - start + 2 )); int ansEnd = 0 ; for ( int i = start ; i < end ; i ++ ) { ans [ ansEnd ++ ] = s [ i ]; } ans [ ansEnd ++ ] = '\\0' ; return ans ; } int eval ( char * s ) { if ( s == NULL ) return 0 ; const int n = strlen ( s ); int num1 = 0 ; char op = '+' ; int num2 ; int start = 0 ; int end = 0 ; while ( end < n ) { while ( start < n && s [ start ] == ' ' ) start ++ ; if ( start >= n ) return 0 ; end = start ; if ( s [ start ] < '0' || s [ start ] > '9' ) printf ( \"label1.\" ); while ( s [ end ] >= '0' && s [ end ] <= '9' ) end ++ ; char * num2str = substr ( s , start , end ); printf ( \"parse str:%s \\n \" , num2str ); int num2 = atoi ( num2str ); printf ( \"compute: %d %c %d = \\n \" , num1 , op , num2 ); num1 = ( op == '+' ? num1 + num2 : num1 - num2 ); start = end ; while ( start < n && s [ start ] == ' ' ) start ++ ; if ( s [ start ] == '+' || s [ start ] == '-' ) op = s [ start ]; else printf ( \"label2. \\n \" ); // \u68c0\u6d4b\u662f\u5426\u6709\u8fde\u7eed\u7684\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u8d1f\u6570\u7684\u60c5\u51b5 int tmps = start + 1 ; while ( tmps < n && s [ tmps ] == ' ' ) tmps ++ ; if ( tmps >= n ) printf ( \"lable4. \\n \" ); if ( s [ tmps ] == '-' ) { if ( op == '+' ) op = '-' ; else if ( op == '-' ) op = '+' ; start = tmps + 1 ; end = start ; } else { start = start + 1 ; end = start ; } } return num1 ; } char * toStrWithNegtive ( int n ) { char * ans = ( char * ) malloc ( sizeof ( char ) * 100 ); int ansEnd = 0 ; if ( n == 0 ) { ans [ ansEnd ++ ] = '0' ; } else if ( n < 0 ) { n = - n ; ans [ ansEnd ++ ] = '-' ; } int start = ansEnd ; while ( n ) { ans [ ansEnd ++ ] = n % 10 + '0' ; n = n / 10 ; } ans [ ansEnd ] = '\\0' ; int end = ansEnd - 1 ; char tmp ; while ( start < end ) { tmp = ans [ start ]; ans [ start ] = ans [ end ]; ans [ end ] = tmp ; start ++ ; end -- ; } return ans ; } int calculate ( char * s ) { if ( s == NULL ) return 0 ; const int n = strlen ( s ); char * stack = ( char * ) malloc ( sizeof ( char ) * ( strlen ( s ) + 10 )); int top = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] != ')' ) { stack [ top ++ ] = s [ i ]; } else { int start = i - 1 ; while ( start >= 0 && stack [ start ] != '(' ) start -- ; if ( start < 0 ) printf ( \"label3.\" ); char * cc = substr ( stack , start + 1 , top ); printf ( \"parsed cc: %s \\n \" , cc ); int tmpnum = eval ( cc ); printf ( \"parsed cc2:%d \\n \" , tmpnum ); top = start ; char * tmpstr = toStrWithNegtive ( tmpnum ); for ( int k = 0 ; k < strlen ( tmpstr ); k ++ ) { stack [ top ++ ] = tmpstr [ k ]; } } } stack [ top ] = '\\0' ; printf ( \"final stack:%s \\n \" , stack ); return eval ( stack ); } \u5982\u679c\u7b26\u53f7\u5305\u542b\u7684\u518d\u591a\u4e00\u4e9b\uff0c\u6dfb\u52a0\u62ec\u53f7\uff0c\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4e4b\u540e\uff0c\u7eaf\u89e3\u6790\u5b57\u7b26\u4e32\u53ef\u80fd\u8fc7\u4e8e\u7e41\u7410\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5148\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u5229\u7528\u6808\u6c42\u89e3\u6700\u7ec8\u7684\u7ed3\u679c\u3002","title":"[224. \u57fa\u672c\u8ba1\u7b97\u5668](https://leetcode-cn.com/problems/basic-calculator/)"},{"location":"leetcode/224/readme/#224","text":"","title":"224. \u57fa\u672c\u8ba1\u7b97\u5668"},{"location":"leetcode/224/readme/#1","text":"\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5305\u542b\u5de6\u62ec\u53f7 ( \uff0c\u53f3\u62ec\u53f7 )\uff0c\u52a0\u53f7 + \uff0c\u51cf\u53f7 -\uff0c\u975e\u8d1f\u6574\u6570\u548c\u7a7a\u683c \u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: \"1 + 1\" \u8f93\u51fa: 2 \u793a\u4f8b 2: 1 2 \u8f93\u5165: \" 2-1 + 2 \" \u8f93\u51fa: 3 \u793a\u4f8b 3: 1 2 \u8f93\u5165: \"(1+(4+5+2)-3)+(6+8)\" \u8f93\u51fa: 23 \u8bf4\u660e\uff1a 1 2 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002 \u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 eval\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/224/readme/#2","text":"\u6309\u7167\u5b57\u7b26\u4e32\u5904\u7406\u7684\u65b9\u5f0f\u5b8c\u6210\u89e3\u6790\uff1a #include <stdio.h> #include <stdlib.h> char * substr ( char * s , int start , int end ) { char * ans = ( char * ) malloc ( sizeof ( char ) * ( end - start + 2 )); int ansEnd = 0 ; for ( int i = start ; i < end ; i ++ ) { ans [ ansEnd ++ ] = s [ i ]; } ans [ ansEnd ++ ] = '\\0' ; return ans ; } int eval ( char * s ) { if ( s == NULL ) return 0 ; const int n = strlen ( s ); int num1 = 0 ; char op = '+' ; int num2 ; int start = 0 ; int end = 0 ; while ( end < n ) { while ( start < n && s [ start ] == ' ' ) start ++ ; if ( start >= n ) return 0 ; end = start ; if ( s [ start ] < '0' || s [ start ] > '9' ) printf ( \"label1.\" ); while ( s [ end ] >= '0' && s [ end ] <= '9' ) end ++ ; char * num2str = substr ( s , start , end ); printf ( \"parse str:%s \\n \" , num2str ); int num2 = atoi ( num2str ); printf ( \"compute: %d %c %d = \\n \" , num1 , op , num2 ); num1 = ( op == '+' ? num1 + num2 : num1 - num2 ); start = end ; while ( start < n && s [ start ] == ' ' ) start ++ ; if ( s [ start ] == '+' || s [ start ] == '-' ) op = s [ start ]; else printf ( \"label2. \\n \" ); // \u68c0\u6d4b\u662f\u5426\u6709\u8fde\u7eed\u7684\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u8d1f\u6570\u7684\u60c5\u51b5 int tmps = start + 1 ; while ( tmps < n && s [ tmps ] == ' ' ) tmps ++ ; if ( tmps >= n ) printf ( \"lable4. \\n \" ); if ( s [ tmps ] == '-' ) { if ( op == '+' ) op = '-' ; else if ( op == '-' ) op = '+' ; start = tmps + 1 ; end = start ; } else { start = start + 1 ; end = start ; } } return num1 ; } char * toStrWithNegtive ( int n ) { char * ans = ( char * ) malloc ( sizeof ( char ) * 100 ); int ansEnd = 0 ; if ( n == 0 ) { ans [ ansEnd ++ ] = '0' ; } else if ( n < 0 ) { n = - n ; ans [ ansEnd ++ ] = '-' ; } int start = ansEnd ; while ( n ) { ans [ ansEnd ++ ] = n % 10 + '0' ; n = n / 10 ; } ans [ ansEnd ] = '\\0' ; int end = ansEnd - 1 ; char tmp ; while ( start < end ) { tmp = ans [ start ]; ans [ start ] = ans [ end ]; ans [ end ] = tmp ; start ++ ; end -- ; } return ans ; } int calculate ( char * s ) { if ( s == NULL ) return 0 ; const int n = strlen ( s ); char * stack = ( char * ) malloc ( sizeof ( char ) * ( strlen ( s ) + 10 )); int top = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] != ')' ) { stack [ top ++ ] = s [ i ]; } else { int start = i - 1 ; while ( start >= 0 && stack [ start ] != '(' ) start -- ; if ( start < 0 ) printf ( \"label3.\" ); char * cc = substr ( stack , start + 1 , top ); printf ( \"parsed cc: %s \\n \" , cc ); int tmpnum = eval ( cc ); printf ( \"parsed cc2:%d \\n \" , tmpnum ); top = start ; char * tmpstr = toStrWithNegtive ( tmpnum ); for ( int k = 0 ; k < strlen ( tmpstr ); k ++ ) { stack [ top ++ ] = tmpstr [ k ]; } } } stack [ top ] = '\\0' ; printf ( \"final stack:%s \\n \" , stack ); return eval ( stack ); } \u5982\u679c\u7b26\u53f7\u5305\u542b\u7684\u518d\u591a\u4e00\u4e9b\uff0c\u6dfb\u52a0\u62ec\u53f7\uff0c\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4e4b\u540e\uff0c\u7eaf\u89e3\u6790\u5b57\u7b26\u4e32\u53ef\u80fd\u8fc7\u4e8e\u7e41\u7410\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5148\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u5229\u7528\u6808\u6c42\u89e3\u6700\u7ec8\u7684\u7ed3\u679c\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/229/229/index.py.html","text":"229.py \u00b6 from typing import List class Solution : def majorityElement ( self , nums : List [ int ]) -> List [ int ]: num1 = 0 count1 = 0 num2 = 0 count2 = 0 for num in nums : if num == num1 : count1 += 1 elif num == num2 : count2 += 1 elif count1 == 0 : count1 = 1 num1 = num elif count2 == 0 : count2 = 1 num2 = num else : count1 -= 1 count2 -= 1 ans = [] count1 = 0 count2 = 0 for num in nums : if num == num1 : count1 += 1 elif num == num2 : count2 += 1 if count1 > len ( nums ) // 3 : ans . append ( num1 ) if count2 > len ( nums ) // 3 and num2 != num1 : ans . append ( num2 ) return ans","title":"229.py"},{"location":"leetcode/229/229/index.py.html#229py","text":"from typing import List class Solution : def majorityElement ( self , nums : List [ int ]) -> List [ int ]: num1 = 0 count1 = 0 num2 = 0 count2 = 0 for num in nums : if num == num1 : count1 += 1 elif num == num2 : count2 += 1 elif count1 == 0 : count1 = 1 num1 = num elif count2 == 0 : count2 = 1 num2 = num else : count1 -= 1 count2 -= 1 ans = [] count1 = 0 count2 = 0 for num in nums : if num == num1 : count1 += 1 elif num == num2 : count2 += 1 if count1 > len ( nums ) // 3 : ans . append ( num1 ) if count2 > len ( nums ) // 3 and num2 != num1 : ans . append ( num2 ) return ans","title":"229.py"},{"location":"leetcode/229/readme/","text":"229. \u6c42\u4f17\u6570 II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7 \u230a n/3 \u230b \u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [3,2,3] \u8f93\u51fa: [3] \u793a\u4f8b 2: 1 2 \u8f93\u5165: [1,1,1,3,3,2,2,2] \u8f93\u51fa: [1,2] 2. \u89e3\u9898\u601d\u8def \u00b6 \u8d85\u8fc7 n/3 \u7684\u6570\u5b57\u6700\u591a\u53ea\u67092\u4e2a\uff0c \u5f53\u7136\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\uff0c\u6216\u8005\u6ca1\u6709\u3002 \u4f7f\u7528 num1, num2 \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u6570\u5b57\uff0c count1, count2 \u5206\u522b\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570 \u7b2c\u4e00\u904d\u904d\u5386\u6570\u7ec4\uff0c if nums[i] == num1: count1++, if nums[i] == num2: count2++ \u5982\u679c\u548cnum1, num2\u90fd\u4e0d\u540c\uff0c if count1 == 0: num1 = nums[i], if count2 == 0: num2 = nums[i] \u5982\u679ccount1, count2\u90fd\u4e0d\u4e3a0\uff0c count1, count2 \u540c\u65f6 -1, \u8868\u793a\u62b5\u6d88\u4e00\u4e2a\u3002 \u7b2c\u4e8c\u6b21\u904d\u5386\u6570\u7ec4\uff0c \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\uff0c\u8f93\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n/3 \u7684\u6570\u5b57 \u6ce8\u610f\uff0c\u8fd9\u91cc num1, num2 \u53ef\u80fd\u662f\u540c\u4e00\u4e2a\u6570\u5b57\u3002 Python","title":"[229. \u6c42\u4f17\u6570 II](https://leetcode-cn.com/problems/majority-element-ii/)"},{"location":"leetcode/229/readme/#229-ii","text":"","title":"229. \u6c42\u4f17\u6570 II"},{"location":"leetcode/229/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7 \u230a n/3 \u230b \u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [3,2,3] \u8f93\u51fa: [3] \u793a\u4f8b 2: 1 2 \u8f93\u5165: [1,1,1,3,3,2,2,2] \u8f93\u51fa: [1,2]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/229/readme/#2","text":"\u8d85\u8fc7 n/3 \u7684\u6570\u5b57\u6700\u591a\u53ea\u67092\u4e2a\uff0c \u5f53\u7136\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\uff0c\u6216\u8005\u6ca1\u6709\u3002 \u4f7f\u7528 num1, num2 \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u6570\u5b57\uff0c count1, count2 \u5206\u522b\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570 \u7b2c\u4e00\u904d\u904d\u5386\u6570\u7ec4\uff0c if nums[i] == num1: count1++, if nums[i] == num2: count2++ \u5982\u679c\u548cnum1, num2\u90fd\u4e0d\u540c\uff0c if count1 == 0: num1 = nums[i], if count2 == 0: num2 = nums[i] \u5982\u679ccount1, count2\u90fd\u4e0d\u4e3a0\uff0c count1, count2 \u540c\u65f6 -1, \u8868\u793a\u62b5\u6d88\u4e00\u4e2a\u3002 \u7b2c\u4e8c\u6b21\u904d\u5386\u6570\u7ec4\uff0c \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\uff0c\u8f93\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n/3 \u7684\u6570\u5b57 \u6ce8\u610f\uff0c\u8fd9\u91cc num1, num2 \u53ef\u80fd\u662f\u540c\u4e00\u4e2a\u6570\u5b57\u3002 Python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/23/23/index.c.html","text":"23.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> // Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; typedef struct ListNode NODE ; typedef struct ListNode * NODE_ARRAY ; void swap ( NODE_ARRAY * nodes , int a , int b ) { NODE * tmp ; tmp = nodes [ a ]; nodes [ a ] = nodes [ b ]; nodes [ b ] = tmp ; } void heapify ( NODE_ARRAY * nodes , int n , int i ) { int left = 2 * i + 1 ; int right = 2 * i + 2 ; int minv = i ; if ( left < n && nodes [ left ] -> val < nodes [ minv ] -> val ) { minv = left ; } if ( right < n && nodes [ right ] -> val < nodes [ minv ] -> val ) { minv = right ; } if ( minv != i ) { swap ( nodes , minv , i ); heapify ( nodes , n , minv ); } } // \u5efa\u7acb\u5806 void build ( NODE_ARRAY * nodes , int n ) { for ( int i = n / 2 ; i >= 0 ; i -- ) { heapify ( nodes , n , i ); } } struct ListNode * mergeKLists ( struct ListNode ** lists , int listsSize ){ if ( lists == NULL || listsSize <= 0 ) return NULL ; NODE_ARRAY * nodes = ( NODE_ARRAY * ) malloc ( sizeof ( NODE_ARRAY ) * listsSize ); int nodesEnd = 0 ; for ( int i = 0 ; i < listsSize ; i ++ ) { if ( lists [ i ] != NULL ) { nodes [ nodesEnd ++ ] = lists [ i ]; } } if ( nodesEnd == 0 ) { return NULL ; } build ( nodes , nodesEnd ); NODE * head = ( NODE * ) malloc ( sizeof ( NODE )); NODE * pre = head ; while ( nodesEnd > 0 ) { NODE * curr = nodes [ 0 ]; pre -> next = curr ; pre = curr ; if ( curr -> next ) { nodes [ 0 ] = curr -> next ; heapify ( nodes , nodesEnd , 0 ); } else { swap ( nodes , 0 , nodesEnd - 1 ); nodesEnd = nodesEnd - 1 ; heapify ( nodes , nodesEnd , 0 ); } } return head -> next ; }","title":"23.c"},{"location":"leetcode/23/23/index.c.html#23c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> // Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; typedef struct ListNode NODE ; typedef struct ListNode * NODE_ARRAY ; void swap ( NODE_ARRAY * nodes , int a , int b ) { NODE * tmp ; tmp = nodes [ a ]; nodes [ a ] = nodes [ b ]; nodes [ b ] = tmp ; } void heapify ( NODE_ARRAY * nodes , int n , int i ) { int left = 2 * i + 1 ; int right = 2 * i + 2 ; int minv = i ; if ( left < n && nodes [ left ] -> val < nodes [ minv ] -> val ) { minv = left ; } if ( right < n && nodes [ right ] -> val < nodes [ minv ] -> val ) { minv = right ; } if ( minv != i ) { swap ( nodes , minv , i ); heapify ( nodes , n , minv ); } } // \u5efa\u7acb\u5806 void build ( NODE_ARRAY * nodes , int n ) { for ( int i = n / 2 ; i >= 0 ; i -- ) { heapify ( nodes , n , i ); } } struct ListNode * mergeKLists ( struct ListNode ** lists , int listsSize ){ if ( lists == NULL || listsSize <= 0 ) return NULL ; NODE_ARRAY * nodes = ( NODE_ARRAY * ) malloc ( sizeof ( NODE_ARRAY ) * listsSize ); int nodesEnd = 0 ; for ( int i = 0 ; i < listsSize ; i ++ ) { if ( lists [ i ] != NULL ) { nodes [ nodesEnd ++ ] = lists [ i ]; } } if ( nodesEnd == 0 ) { return NULL ; } build ( nodes , nodesEnd ); NODE * head = ( NODE * ) malloc ( sizeof ( NODE )); NODE * pre = head ; while ( nodesEnd > 0 ) { NODE * curr = nodes [ 0 ]; pre -> next = curr ; pre = curr ; if ( curr -> next ) { nodes [ 0 ] = curr -> next ; heapify ( nodes , nodesEnd , 0 ); } else { swap ( nodes , 0 , nodesEnd - 1 ); nodesEnd = nodesEnd - 1 ; heapify ( nodes , nodesEnd , 0 ); } } return head -> next ; }","title":"23.c"},{"location":"leetcode/23/23/index.cpp.html","text":"23.cpp \u00b6","title":"23.cpp"},{"location":"leetcode/23/23/index.cpp.html#23cpp","text":"","title":"23.cpp"},{"location":"leetcode/23/23/index.py.html","text":"23.py \u00b6","title":"23.py"},{"location":"leetcode/23/23/index.py.html#23py","text":"","title":"23.py"},{"location":"leetcode/23/readme/","text":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u4e00\u4e2a\u6700\u5c0f\u5806\u7ef4\u62a4K\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6bcf\u6b21\u4ece\u5806\u9876\u53d6\u4e00\u4e2a\u8282\u70b9\u5e76\u628a\u4e0b\u4e00\u4e2a\u8282\u70b9\u5165\u5806\uff0c\u8c03\u6574\u4e4b\u540e\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u3002 3. AC\u4ee3\u7801 \u00b6 C","title":"[23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868](https://leetcode-cn.com/problems/merge-k-sorted-lists)"},{"location":"leetcode/23/readme/#23-k","text":"","title":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868"},{"location":"leetcode/23/readme/#1","text":"\u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/23/readme/#2","text":"\u4f7f\u7528\u4e00\u4e2a\u6700\u5c0f\u5806\u7ef4\u62a4K\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6bcf\u6b21\u4ece\u5806\u9876\u53d6\u4e00\u4e2a\u8282\u70b9\u5e76\u628a\u4e0b\u4e00\u4e2a\u8282\u70b9\u5165\u5806\uff0c\u8c03\u6574\u4e4b\u540e\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/23/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/239/readme/","text":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 k \u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002 \u8fd4\u56de\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u6b64\u9898\u5417\uff1f \u793a\u4f8b: 1 2 3 4 5 6 7 8 9 10 11 12 \u8f93\u5165: nums = [1,3,-1,-3,5,3,6,7], \u548c k = 3 \u8f93\u51fa: [3,3,5,5,6,7] \u89e3\u91ca: \u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e \u6700\u5927\u503c --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 \u63d0\u793a\uff1a 1 2 3 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 1 <= k <= nums.length 2. \u89e3\u9898\u601d\u8def \u00b6 2.1 \u65b9\u6cd5\u4e00 \u00b6 \u66b4\u529b\u89e3\u51b3\u65b9\u6cd5\uff0c \u6ed1\u52a8\u7a97\u53e3\uff0c \u6bcf\u6b21\u6ed1\u51fa\u4e00\u4e2a\uff0c\u6ed1\u5165\u4e00\u4e2a\uff0c \u770b\u6ed1\u51fa\u7684\u662f\u5426\u662f\u6700\u5927\u503c\uff0c\u5982\u679c\u6ed1\u51fa\u7684\u4e0d\u662f\u6700\u5927\u503c\uff0c\u6bd4\u8f83\u6ed1\u5165\u5143\u7d20\u548c\u6700\u5927\u503c\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u6700\u5927\u503c\uff1b \u5982\u679c\u6ed1\u51fa\u7684\u662f\u6700\u5927\u503c\uff0c \u65b0\u7684\u6700\u5927\u503c\u53ea\u80fd\u904d\u5386\u4e00\u904d\u5f97\u5230\uff0c\u8fd9\u91cc\u4f1a\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u662f\u7ebf\u6027\u7684\u3002 \u6700\u574f\u7684\u60c5\u51b5\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u904d\u5386\u5f97\u5230\u6700\u5927\u503c, \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(k) * (n - k)\u3002 python class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: n = len(nums) maxv = max(nums[0:k]) ans = [maxv] for i in range(1, n - k + 1): if nums[i - 1] != maxv: if nums[i + k - 1] > maxv: maxv = nums[i + k - 1] else: maxv = max(nums[i: i + k]) ans.append(maxv) return ans ### \u65b9\u6cd5\u4e8c \u5982\u679c\u4f7f\u7528\u5927\u5c0f\u4e3aK\u7684\u5806\uff0c\u6bcf\u6b21\u5efa\u7acb\u5806 O(K), \u53d6\u51fa\u6700\u5927\u503c O(1), \u5faa\u73af n-k+1 \u6b21\uff0c \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f nk, \u4e0e\u66b4\u529b\u65b9\u6cd5\u7684\u590d\u6742\u5ea6\u4e00\u6837\uff0c\u4f46\u662f\u6700\u540e\u4e00\u4e2a\u7528\u4f8b\u8fc7\u4e0d\u4e86\u3002 python import heapq class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: MAX_NUM = 100 n = len(nums) ans = [] for i in range(n - k + 1): heap = [(MAX_NUM - num, num) for num in nums[i : i + k]] heapq.heapify(heap) ans.append(heapq.heappop(heap)[1]) return ans 17/18 cases passed (N/A) ### \u65b9\u6cd5\u4e09 \u4f7f\u7528\u53cc\u5411\u961f\u5217\uff0c \u5728\u961f\u5217\u9996\u7ef4\u62a4\u6700\u5927\u503c\u7684\u7d22\u5f15\uff0c \u59cb\u7ec8\u4fdd\u6301\u961f\u5217\u7684\u964d\u5e8f\u6392\u5217\u3002 ```python from collections import deque from typing import List class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: n = len(nums) if n * k == 0: return [] if k == 1: return nums 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # \u521b\u5efa\u4e00\u4e2a\u53cc\u5411\u961f\u5217\uff0c \u6211\u4eec\u7528\u961f\u5217\u5934 array[0] \u7684\u4f4d\u7f6e\u5b58\u50a8\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c\u7684\u7d22\u5f15 # \u961f\u5217\u4ece\u5de6\u5411\u53f3\u5b58\u50a8\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u5185\u5143\u7d20\u7684\u7d22\u5f15\u503c\uff0c\u4f46\u662f\u5e76\u4e0d\u5b58\u50a8\u6240\u6709\u7684\u503c\uff0c \u4fdd\u6301\u964d\u5e8f\u5b58\u50a8 # \u5728\u961f\u5217\u5c3e\u6dfb\u52a0\u5143\u7d20\u7684\u65f6\u5019\uff0c \u9996\u5148\u628a\u5e94\u8be5\u5f39\u51fa\u7684\u5143\u7d20\u90fd\u5f39\u51fa # \u5e94\u8be5\u5f39\u51fa\u7684\u5143\u7d20\u5305\u62ec\uff0c 1. \u6ed1\u52a8\u51fa\u7a97\u53e3\u7684\u5143\u7d20\uff1b 2. \u6bd4\u5c06\u8981\u52a0\u5165\u7684\u5143\u7d20\u5c0f\u7684\u5143\u7d20 array = deque() maxIndex = 0 for i in range(k): # array \u975e\u7a7a\u7684\u65f6\u5019\u9996\u5148\u5f39\u51fa\u6bd4 nums[i] \u5c0f\u7684\u5143\u7d20 if array: while array and nums[ array[-1] ] < nums[i]: array.pop() # \u4ece\u961f\u5c3e\u52a0\u5165\u961f\u5217 array.append(i) if nums[i] > nums[maxIndex]: maxIndex = i ans = [ nums[maxIndex] ] # \u5904\u7406\u5143\u7d20 [k, n-1] for i in range(k, n): # \u5982\u679c\u961f\u9996\u7684\u5143\u7d20\u5df2\u7ecf\u4f4d\u4e8e\u6ed1\u52a8\u7a97\u53e3\u4e4b\u5916\u4e86\uff0c\u5f39\u51fa\u5b83 # \u8fd9\u91cc\u65e0\u9700\u5faa\u73af\u5f39\u51fa\u662f\u56e0\u4e3a\u4e00\u6b21\u53ea\u52a0\u5165\u4e00\u4e2a if array and array[0] == i - k: array.popleft() while array and nums[ array[-1] ] < nums[i]: array.pop() array.append(i) ans.append(nums[ array[0] ]) return ans ``` ### \u65b9\u6cd5\u56db \u4f7f\u7528\u5206\u5272\u533a\u57df\u7684\u524d\u5411\u548c\u540e\u5411\u6570\u7ec4 ```python class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: n = len(nums) if n * k == 0: return [] if k == 1: return nums 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # k = 3, n = 10 # 3, 1, 6 | 4, 8, 2 | 1, 9, 10 | 7 # 3, 3, 6 | 4, 8, 8 | 1, 9, 10 | 7 --> left # 6, 6, 6 | 8, 8, 2 | 10, 10, 10| 7 --> right # left[i] \u8868\u793a [(i / k) * k, i] \u533a\u95f4\u7684\u6700\u5927\u503c # right[i] \u8868\u793a [i, (i/k + 1)*k - 1] \u533a\u95f4\u7684\u6700\u5927\u503c # \u8bbe [i, j] \u4e3a\u533a\u95f4\u5927\u5c0f\u4e3a k \u7684\u533a\u95f4\uff0c \u5219\u8be5\u533a\u95f4\u7684\u6700\u5927\u503c # \u5982\u679c i = (i / k) * k, j = (i/k + 1)*k - 1, \u6b63\u597d\u4f4d\u4e8e\u533a\u95f4\u5185\uff0cmax([i, j]) = left[j] = right[i] # \u5982\u679c [i, j] \u8de8\u8d8a k \u533a\u95f4\uff0c \u4f8b\u5982 i = 1, j = 3, \u5219 max([1, 3]) = max( max([1,2]) , max([3,3]) ) # \u800c max([1, 2]) = right[i], max([3,3]) = left[j] # \u7efc\u4e0a\uff0c \u6700\u540e\u7684\u7ed3\u679c\u603b\u662f\u7b49\u4e8e max(left[j], right[i]) left = [0] * n for i in range(n): if i % k == 0: left[i] = nums[i] else: if nums[i] > left[i - 1]: left[i] = nums[i] else: left[i] = left[i - 1] right = [0] * n for i in reversed(range(n)): if (i + 1) % k == 0: right[i] = nums[i] else: if i + 1 >= n: right[i] = nums[i] continue if nums[i] > right[i + 1]: right[i] = nums[i] else: right[i] = right[i + 1] ans = [] for i in range(n - k + 1): j = i + k - 1 maxv = max(right[i], left[j]) ans.append(maxv) return ans ```","title":"[239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c](https://leetcode-cn.com/problems/sliding-window-maximum/)"},{"location":"leetcode/239/readme/#239","text":"","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c"},{"location":"leetcode/239/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 k \u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002 \u8fd4\u56de\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u6b64\u9898\u5417\uff1f \u793a\u4f8b: 1 2 3 4 5 6 7 8 9 10 11 12 \u8f93\u5165: nums = [1,3,-1,-3,5,3,6,7], \u548c k = 3 \u8f93\u51fa: [3,3,5,5,6,7] \u89e3\u91ca: \u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e \u6700\u5927\u503c --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 \u63d0\u793a\uff1a 1 2 3 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 1 <= k <= nums.length","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/239/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/239/readme/#21","text":"\u66b4\u529b\u89e3\u51b3\u65b9\u6cd5\uff0c \u6ed1\u52a8\u7a97\u53e3\uff0c \u6bcf\u6b21\u6ed1\u51fa\u4e00\u4e2a\uff0c\u6ed1\u5165\u4e00\u4e2a\uff0c \u770b\u6ed1\u51fa\u7684\u662f\u5426\u662f\u6700\u5927\u503c\uff0c\u5982\u679c\u6ed1\u51fa\u7684\u4e0d\u662f\u6700\u5927\u503c\uff0c\u6bd4\u8f83\u6ed1\u5165\u5143\u7d20\u548c\u6700\u5927\u503c\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u6700\u5927\u503c\uff1b \u5982\u679c\u6ed1\u51fa\u7684\u662f\u6700\u5927\u503c\uff0c \u65b0\u7684\u6700\u5927\u503c\u53ea\u80fd\u904d\u5386\u4e00\u904d\u5f97\u5230\uff0c\u8fd9\u91cc\u4f1a\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u662f\u7ebf\u6027\u7684\u3002 \u6700\u574f\u7684\u60c5\u51b5\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u904d\u5386\u5f97\u5230\u6700\u5927\u503c, \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(k) * (n - k)\u3002 python class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: n = len(nums) maxv = max(nums[0:k]) ans = [maxv] for i in range(1, n - k + 1): if nums[i - 1] != maxv: if nums[i + k - 1] > maxv: maxv = nums[i + k - 1] else: maxv = max(nums[i: i + k]) ans.append(maxv) return ans ### \u65b9\u6cd5\u4e8c \u5982\u679c\u4f7f\u7528\u5927\u5c0f\u4e3aK\u7684\u5806\uff0c\u6bcf\u6b21\u5efa\u7acb\u5806 O(K), \u53d6\u51fa\u6700\u5927\u503c O(1), \u5faa\u73af n-k+1 \u6b21\uff0c \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f nk, \u4e0e\u66b4\u529b\u65b9\u6cd5\u7684\u590d\u6742\u5ea6\u4e00\u6837\uff0c\u4f46\u662f\u6700\u540e\u4e00\u4e2a\u7528\u4f8b\u8fc7\u4e0d\u4e86\u3002 python import heapq class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: MAX_NUM = 100 n = len(nums) ans = [] for i in range(n - k + 1): heap = [(MAX_NUM - num, num) for num in nums[i : i + k]] heapq.heapify(heap) ans.append(heapq.heappop(heap)[1]) return ans 17/18 cases passed (N/A) ### \u65b9\u6cd5\u4e09 \u4f7f\u7528\u53cc\u5411\u961f\u5217\uff0c \u5728\u961f\u5217\u9996\u7ef4\u62a4\u6700\u5927\u503c\u7684\u7d22\u5f15\uff0c \u59cb\u7ec8\u4fdd\u6301\u961f\u5217\u7684\u964d\u5e8f\u6392\u5217\u3002 ```python from collections import deque from typing import List class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: n = len(nums) if n * k == 0: return [] if k == 1: return nums 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # \u521b\u5efa\u4e00\u4e2a\u53cc\u5411\u961f\u5217\uff0c \u6211\u4eec\u7528\u961f\u5217\u5934 array[0] \u7684\u4f4d\u7f6e\u5b58\u50a8\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c\u7684\u7d22\u5f15 # \u961f\u5217\u4ece\u5de6\u5411\u53f3\u5b58\u50a8\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u5185\u5143\u7d20\u7684\u7d22\u5f15\u503c\uff0c\u4f46\u662f\u5e76\u4e0d\u5b58\u50a8\u6240\u6709\u7684\u503c\uff0c \u4fdd\u6301\u964d\u5e8f\u5b58\u50a8 # \u5728\u961f\u5217\u5c3e\u6dfb\u52a0\u5143\u7d20\u7684\u65f6\u5019\uff0c \u9996\u5148\u628a\u5e94\u8be5\u5f39\u51fa\u7684\u5143\u7d20\u90fd\u5f39\u51fa # \u5e94\u8be5\u5f39\u51fa\u7684\u5143\u7d20\u5305\u62ec\uff0c 1. \u6ed1\u52a8\u51fa\u7a97\u53e3\u7684\u5143\u7d20\uff1b 2. \u6bd4\u5c06\u8981\u52a0\u5165\u7684\u5143\u7d20\u5c0f\u7684\u5143\u7d20 array = deque() maxIndex = 0 for i in range(k): # array \u975e\u7a7a\u7684\u65f6\u5019\u9996\u5148\u5f39\u51fa\u6bd4 nums[i] \u5c0f\u7684\u5143\u7d20 if array: while array and nums[ array[-1] ] < nums[i]: array.pop() # \u4ece\u961f\u5c3e\u52a0\u5165\u961f\u5217 array.append(i) if nums[i] > nums[maxIndex]: maxIndex = i ans = [ nums[maxIndex] ] # \u5904\u7406\u5143\u7d20 [k, n-1] for i in range(k, n): # \u5982\u679c\u961f\u9996\u7684\u5143\u7d20\u5df2\u7ecf\u4f4d\u4e8e\u6ed1\u52a8\u7a97\u53e3\u4e4b\u5916\u4e86\uff0c\u5f39\u51fa\u5b83 # \u8fd9\u91cc\u65e0\u9700\u5faa\u73af\u5f39\u51fa\u662f\u56e0\u4e3a\u4e00\u6b21\u53ea\u52a0\u5165\u4e00\u4e2a if array and array[0] == i - k: array.popleft() while array and nums[ array[-1] ] < nums[i]: array.pop() array.append(i) ans.append(nums[ array[0] ]) return ans ``` ### \u65b9\u6cd5\u56db \u4f7f\u7528\u5206\u5272\u533a\u57df\u7684\u524d\u5411\u548c\u540e\u5411\u6570\u7ec4 ```python class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]: n = len(nums) if n * k == 0: return [] if k == 1: return nums 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # k = 3, n = 10 # 3, 1, 6 | 4, 8, 2 | 1, 9, 10 | 7 # 3, 3, 6 | 4, 8, 8 | 1, 9, 10 | 7 --> left # 6, 6, 6 | 8, 8, 2 | 10, 10, 10| 7 --> right # left[i] \u8868\u793a [(i / k) * k, i] \u533a\u95f4\u7684\u6700\u5927\u503c # right[i] \u8868\u793a [i, (i/k + 1)*k - 1] \u533a\u95f4\u7684\u6700\u5927\u503c # \u8bbe [i, j] \u4e3a\u533a\u95f4\u5927\u5c0f\u4e3a k \u7684\u533a\u95f4\uff0c \u5219\u8be5\u533a\u95f4\u7684\u6700\u5927\u503c # \u5982\u679c i = (i / k) * k, j = (i/k + 1)*k - 1, \u6b63\u597d\u4f4d\u4e8e\u533a\u95f4\u5185\uff0cmax([i, j]) = left[j] = right[i] # \u5982\u679c [i, j] \u8de8\u8d8a k \u533a\u95f4\uff0c \u4f8b\u5982 i = 1, j = 3, \u5219 max([1, 3]) = max( max([1,2]) , max([3,3]) ) # \u800c max([1, 2]) = right[i], max([3,3]) = left[j] # \u7efc\u4e0a\uff0c \u6700\u540e\u7684\u7ed3\u679c\u603b\u662f\u7b49\u4e8e max(left[j], right[i]) left = [0] * n for i in range(n): if i % k == 0: left[i] = nums[i] else: if nums[i] > left[i - 1]: left[i] = nums[i] else: left[i] = left[i - 1] right = [0] * n for i in reversed(range(n)): if (i + 1) % k == 0: right[i] = nums[i] else: if i + 1 >= n: right[i] = nums[i] continue if nums[i] > right[i + 1]: right[i] = nums[i] else: right[i] = right[i + 1] ans = [] for i in range(n - k + 1): j = i + k - 1 maxv = max(right[i], left[j]) ans.append(maxv) return ans ```","title":"2.1 \u65b9\u6cd5\u4e00"},{"location":"leetcode/24/24/index.c.html","text":"24.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * swapPairs ( struct ListNode * head ){ if ( head == NULL || head -> next == NULL ) return head ; struct ListNode * first = head ; struct ListNode * second = first -> next ; struct ListNode * pre = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); pre -> next = head ; head = second ; while ( second ) { pre -> next = second ; first -> next = second -> next ; second -> next = first ; pre = first ; first = first -> next ; if ( first ) { second = first -> next ; } else { second = NULL ; } } return head ; }","title":"24.c"},{"location":"leetcode/24/24/index.c.html#24c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * swapPairs ( struct ListNode * head ){ if ( head == NULL || head -> next == NULL ) return head ; struct ListNode * first = head ; struct ListNode * second = first -> next ; struct ListNode * pre = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); pre -> next = head ; head = second ; while ( second ) { pre -> next = second ; first -> next = second -> next ; second -> next = first ; pre = first ; first = first -> next ; if ( first ) { second = first -> next ; } else { second = NULL ; } } return head ; }","title":"24.c"},{"location":"leetcode/24/24/index.cpp.html","text":"24.cpp \u00b6","title":"24.cpp"},{"location":"leetcode/24/24/index.cpp.html#24cpp","text":"","title":"24.cpp"},{"location":"leetcode/24/24/index.py.html","text":"24.py \u00b6","title":"24.py"},{"location":"leetcode/24/24/index.py.html#24py","text":"","title":"24.py"},{"location":"leetcode/24/readme/","text":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b: 1 \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. 2. \u89e3\u9898\u601d\u8def \u00b6 \u8fd9\u4e2a\u6709\u4e2a\u66f4\u4e00\u822c\u7684\u9898\u76ee\uff0c K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868\u3002 \u5173\u952e\u662f\u638c\u63e1\u94fe\u8868\u7ffb\u8f6c\u7684\u64cd\u4f5c\u3002 3. AC\u4ee3\u7801 \u00b6 C","title":"[24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9](https://leetcode-cn.com/problems/swap-nodes-in-pairs)"},{"location":"leetcode/24/readme/#24","text":"","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"leetcode/24/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b: 1 \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3.","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/24/readme/#2","text":"\u8fd9\u4e2a\u6709\u4e2a\u66f4\u4e00\u822c\u7684\u9898\u76ee\uff0c K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868\u3002 \u5173\u952e\u662f\u638c\u63e1\u94fe\u8868\u7ffb\u8f6c\u7684\u64cd\u4f5c\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/24/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/25/25/index.c.html","text":"25.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; typedef struct ListNode NODE ; struct ListNode * reverseKGroup ( struct ListNode * head , int k ){ if ( head == NULL || k <= 1 ) { return head ; } NODE * preStart , * endNext , * start , * end , * iter ; NODE * g = ( NODE * ) malloc ( sizeof ( NODE )); g -> next = head ; preStart = g ; endNext = g -> next ; int tmpk = k ; while ( 1 ) { tmpk = k ; endNext = preStart -> next ; while ( tmpk && endNext ) { endNext = endNext -> next ; tmpk -- ; } if ( tmpk > 0 ) { break ; } start = preStart -> next ; end = start -> next ; start -> next = NULL ; while ( end != endNext ) { iter = end -> next ; end -> next = start ; start = end ; end = iter ; } NODE * tmp = preStart -> next ; preStart -> next -> next = end ; preStart -> next = start ; preStart = tmp ; } return g -> next ; }","title":"25.c"},{"location":"leetcode/25/25/index.c.html#25c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; typedef struct ListNode NODE ; struct ListNode * reverseKGroup ( struct ListNode * head , int k ){ if ( head == NULL || k <= 1 ) { return head ; } NODE * preStart , * endNext , * start , * end , * iter ; NODE * g = ( NODE * ) malloc ( sizeof ( NODE )); g -> next = head ; preStart = g ; endNext = g -> next ; int tmpk = k ; while ( 1 ) { tmpk = k ; endNext = preStart -> next ; while ( tmpk && endNext ) { endNext = endNext -> next ; tmpk -- ; } if ( tmpk > 0 ) { break ; } start = preStart -> next ; end = start -> next ; start -> next = NULL ; while ( end != endNext ) { iter = end -> next ; end -> next = start ; start = end ; end = iter ; } NODE * tmp = preStart -> next ; preStart -> next -> next = end ; preStart -> next = start ; preStart = tmp ; } return g -> next ; }","title":"25.c"},{"location":"leetcode/25/25/index.cpp.html","text":"25.cpp \u00b6","title":"25.cpp"},{"location":"leetcode/25/25/index.cpp.html#25cpp","text":"","title":"25.cpp"},{"location":"leetcode/25/25/index.py.html","text":"25.py \u00b6","title":"25.py"},{"location":"leetcode/25/25/index.py.html#25py","text":"","title":"25.py"},{"location":"leetcode/25/readme/","text":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 \u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5 2. \u89e3\u9898\u601d\u8def \u00b6 3. AC\u4ee3\u7801 \u00b6 C","title":"[25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868](https://leetcode-cn.com/problems/reverse-nodes-in-k-group)"},{"location":"leetcode/25/readme/#25-k","text":"","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"},{"location":"leetcode/25/readme/#1","text":"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 \u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/25/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/25/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/263/readme/","text":"263. \u4e11\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: 6 \u8f93\u51fa: true \u89e3\u91ca: 6 = 2 \u00d7 3 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: 8 \u8f93\u51fa: true \u89e3\u91ca: 8 = 2 \u00d7 2 \u00d7 2 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165: 14 \u8f93\u51fa: false \u89e3\u91ca: 14 \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570 7\u3002 \u8bf4\u660e\uff1a 1 2 1 \u662f\u4e11\u6570\u3002 \u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4: [\u22122^31, 2^31 \u2212 1]\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution : def isUgly ( self , num : int ) -> bool : if num <= 0 : return False while num > 1 : if num % 2 != 0 and num % 5 != 0 and num % 3 != 0 : return False if num % 2 == 0 : num = num // 2 if num % 3 == 0 : num = num // 3 if num % 5 == 0 : num = num // 5 return True bool isUgly ( int num ){ if ( num == 0 ) { return false ; } while ( num % 2 == 0 ) { num = num / 2 ; } while ( num % 3 == 0 ) { num = num / 3 ; } while ( num % 5 == 0 ) { num = num / 5 ; } if ( num == 1 ) { return true ; } return false ; }","title":"[263. \u4e11\u6570](https://leetcode-cn.com/problems/ugly-number/)"},{"location":"leetcode/263/readme/#263","text":"","title":"263. \u4e11\u6570"},{"location":"leetcode/263/readme/#1","text":"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: 6 \u8f93\u51fa: true \u89e3\u91ca: 6 = 2 \u00d7 3 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: 8 \u8f93\u51fa: true \u89e3\u91ca: 8 = 2 \u00d7 2 \u00d7 2 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165: 14 \u8f93\u51fa: false \u89e3\u91ca: 14 \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570 7\u3002 \u8bf4\u660e\uff1a 1 2 1 \u662f\u4e11\u6570\u3002 \u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4: [\u22122^31, 2^31 \u2212 1]\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/263/readme/#2","text":"class Solution : def isUgly ( self , num : int ) -> bool : if num <= 0 : return False while num > 1 : if num % 2 != 0 and num % 5 != 0 and num % 3 != 0 : return False if num % 2 == 0 : num = num // 2 if num % 3 == 0 : num = num // 3 if num % 5 == 0 : num = num // 5 return True bool isUgly ( int num ){ if ( num == 0 ) { return false ; } while ( num % 2 == 0 ) { num = num / 2 ; } while ( num % 3 == 0 ) { num = num / 3 ; } while ( num % 5 == 0 ) { num = num / 5 ; } if ( num == 1 ) { return true ; } return false ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/264/readme/","text":"264. \u4e11\u6570 II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c n \u4e2a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u8d28\u56e0\u6570\u53ea\u5305\u542b 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: n = 10 \u8f93\u51fa: 12 \u89e3\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4e11\u6570\u3002 n \u4e0d\u8d85\u8fc71690\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4ece1\u5f00\u59cb\u679a\u4e3e\uff0c\u5224\u65ad\u6bcf\u4e2a\u6570\u5b57\u662f\u5426\u662f\u4e11\u6570\uff0c\u662f\u8ba1\u6570+1\uff0c \u76f4\u5230\u627e\u5230\u7b2cN\u4e2a\u4e11\u6570\u4e3a\u6b62\u3002\u8fd9\u6837\u5230\u540e\u9762\u5927\u91cf\u7684\u65f6\u95f4\u5c31\u4f1a\u6d6a\u8d39\u5728\u5224\u65ad\u662f\u5426\u662f\u4e11\u6570\u4e0a\u3002 \u8f6c\u53d8\u601d\u8def\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4e11\u6570\u5f00\u59cb\u4f9d\u6b21\u751f\u6210\u4e0b\u4e00\u4e2a\u4e11\u6570\uff0c\u8fd9\u6837\u65e0\u9700\u5224\u65ad\u662f\u5426\u662f\u4e11\u6570\uff0c\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002 class Solution : def __init__ ( self ): N = 1690 c2 , c3 , c5 = 0 , 0 , 0 # \u5206\u522b\u6307\u54112,3,5\u4e3a\u56e0\u5b50\u7684\u6307\u9488\uff0c \u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u4f4d\u7f6e self . uglys = [ 1 , ] for i in range ( 1 , N ): nextUgly = min ( self . uglys [ c2 ] * 2 , self . uglys [ c3 ] * 3 , self . uglys [ c5 ] * 5 ) self . uglys . append ( nextUgly ) if nextUgly == self . uglys [ c2 ] * 2 : c2 += 1 if nextUgly == self . uglys [ c3 ] * 3 : c3 += 1 if nextUgly == self . uglys [ c5 ] * 5 : c5 += 1 print ( self . uglys ) print ( c2 , c3 , c5 ) def nthUglyNumber ( self , n : int ) -> int : return self . uglys [ n - 1 ] \u5206\u6790\u4e0a\u8ff0\u8fc7\u7a0b [1] | | c2 c3 c5 [1, 2] | | | | c3 c2 c5 [1, 2, 3] | | | | c5 c2 c3 [1, 2, 3, 4] | | | | | | c5 c3 c2 [1, 2, 3, 4, 5] | | | | c3 c2 c5 [1, 2, 3, 4, 5, 6] | | | | | | c5 c3 c2 [1, 2, 3, 4, 5, 6, 8] | | | | | | c5 c3 c2 [1, 2, 3, 4, 5, 6, 8, 9] | | | | | | c5 c3 c2 c2, c3, c5 \u5206\u522b\u8868\u793a\u4e58 2\uff0c 3\uff0c 5 \u4e58\u8fc7\u7684\u6b21\u6570\u3002","title":"[264. \u4e11\u6570 II](https://leetcode-cn.com/problems/ugly-number-ii/)"},{"location":"leetcode/264/readme/#264-ii","text":"","title":"264. \u4e11\u6570 II"},{"location":"leetcode/264/readme/#1","text":"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c n \u4e2a\u4e11\u6570\u3002 \u4e11\u6570\u5c31\u662f\u8d28\u56e0\u6570\u53ea\u5305\u542b 2, 3, 5 \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: n = 10 \u8f93\u51fa: 12 \u89e3\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002 \u8bf4\u660e: 1 \u662f\u4e11\u6570\u3002 n \u4e0d\u8d85\u8fc71690\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/264/readme/#2","text":"\u4ece1\u5f00\u59cb\u679a\u4e3e\uff0c\u5224\u65ad\u6bcf\u4e2a\u6570\u5b57\u662f\u5426\u662f\u4e11\u6570\uff0c\u662f\u8ba1\u6570+1\uff0c \u76f4\u5230\u627e\u5230\u7b2cN\u4e2a\u4e11\u6570\u4e3a\u6b62\u3002\u8fd9\u6837\u5230\u540e\u9762\u5927\u91cf\u7684\u65f6\u95f4\u5c31\u4f1a\u6d6a\u8d39\u5728\u5224\u65ad\u662f\u5426\u662f\u4e11\u6570\u4e0a\u3002 \u8f6c\u53d8\u601d\u8def\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4e11\u6570\u5f00\u59cb\u4f9d\u6b21\u751f\u6210\u4e0b\u4e00\u4e2a\u4e11\u6570\uff0c\u8fd9\u6837\u65e0\u9700\u5224\u65ad\u662f\u5426\u662f\u4e11\u6570\uff0c\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002 class Solution : def __init__ ( self ): N = 1690 c2 , c3 , c5 = 0 , 0 , 0 # \u5206\u522b\u6307\u54112,3,5\u4e3a\u56e0\u5b50\u7684\u6307\u9488\uff0c \u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u4f4d\u7f6e self . uglys = [ 1 , ] for i in range ( 1 , N ): nextUgly = min ( self . uglys [ c2 ] * 2 , self . uglys [ c3 ] * 3 , self . uglys [ c5 ] * 5 ) self . uglys . append ( nextUgly ) if nextUgly == self . uglys [ c2 ] * 2 : c2 += 1 if nextUgly == self . uglys [ c3 ] * 3 : c3 += 1 if nextUgly == self . uglys [ c5 ] * 5 : c5 += 1 print ( self . uglys ) print ( c2 , c3 , c5 ) def nthUglyNumber ( self , n : int ) -> int : return self . uglys [ n - 1 ] \u5206\u6790\u4e0a\u8ff0\u8fc7\u7a0b [1] | | c2 c3 c5 [1, 2] | | | | c3 c2 c5 [1, 2, 3] | | | | c5 c2 c3 [1, 2, 3, 4] | | | | | | c5 c3 c2 [1, 2, 3, 4, 5] | | | | c3 c2 c5 [1, 2, 3, 4, 5, 6] | | | | | | c5 c3 c2 [1, 2, 3, 4, 5, 6, 8] | | | | | | c5 c3 c2 [1, 2, 3, 4, 5, 6, 8, 9] | | | | | | c5 c3 c2 c2, c3, c5 \u5206\u522b\u8868\u793a\u4e58 2\uff0c 3\uff0c 5 \u4e58\u8fc7\u7684\u6b21\u6570\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/3/readme/","text":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b \u793a\u4f8b 1: \u8f93\u5165: \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3: \u8f93\u5165: \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5148\u5c1d\u8bd5\u66b4\u529b\u7684\u89e3\u6cd5\uff0c\u4ece\u7b2c\u4e00\u5b57\u7b26\u5f00\u59cb\u653e\u5165set,\u9047\u5230\u91cd\u590d\u7684\u5c31\u505c\u6b62\uff0c\u8bb0\u5f55\u5f53\u524d\u4e0d\u91cd\u590d\u7684\u6700\u5927\u5b57\u7b26\u4e2a\u6570\uff0c\u6700\u540e\u8f93\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u3002 \u66b4\u529b\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e24\u91cd\u5faa\u73af\uff0c\u5176\u4e2d\u6709\u5927\u91cf\u7684\u65e0\u7528\u67e5\u627e\u3002\u4ed4\u7ec6\u8003\u8651\uff0c\u5982\u679c\u626b\u63cf\u5230\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u4ece\u5de6\u4fa7\u5220\u9664\u4e00\u6837\u7684\uff0c\u7ee7\u7eed\u5411\u4e0b\u626b\u63cf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u7528\u56de\u6eaf\uff0c\u63d0\u9ad8\u6548\u7387\u3002 3. \u9898\u89e3 \u00b6 3.1 C++ \u00b6 \u66b4\u529b\u89e3\u51b3\uff1a class Solution { public : int lengthOfLongestSubstring ( string s ) { int len = s . size (); set < char > unique ; int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int length ; for ( int j = i ; j < len ; j ++ ) { if ( unique . find ( s [ j ]) == unique . end ()) { unique . insert ( s [ j ]); } else { break ; } } length = unique . size (); ans = ans > length ? ans : length ; unique . clear (); } return ans ; } }; \u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u5143\u7d20\u4f4d\u7f6e\uff0c\u907f\u514d\u91cd\u590d\u626b\u63cf\u3002 class Solution { public : int lengthOfLongestSubstring ( string s ) { unordered_map < char , int > m ; int ans = 0 ; int left = 0 ; // \u6307\u793a\u5de6\u4fa7\u5f00\u59cb\u7684\u4f4d\u7f6e for ( int i = 0 ; i < s . size (); i ++ ) { left = max ( left , m [ s [ i ] ]); //\u66f4\u65b0\u5de6\u4fa7 m [ s [ i ] ] = i + 1 ; // \u4f4d\u7f6e\u4ece1\u5f00\u59cb ans = max ( ans , i - left + 1 ); } return ans ; } }; 3.2 python \u00b6 class Solution : def lengthOfLongestSubstring ( self , s : str ) -> int : j = 0 end = len ( s ) ans = 0 unique = set () while ( j < end ): i = j while ( i < end ): if s [ i ] not in unique : unique . add ( s [ i ]) i = i + 1 continue else : break length = len ( unique ) ans = max ( ans , length ) unique = set () j = j + 1 return ans ``` \u4f7f\u7528dict\u5b58\u50a8\u6620\u5c04\u5173\u7cfb \uff0c \u5b9e\u73b0\u4e00\u904d\u626b\u63cf\u51fa\u7ed3\u679c \u3002 ``` python class Solution : def lengthOfLongestSubstring ( self , s : str ) -> int : ans = 0 m = {} left = 0 for i , v in enumerate ( s ): if v not in m : m [ v ] = i + 1 else : left = max ( left , m [ v ]) m [ v ] = i + 1 ans = max ( ans , i - left + 1 ) return ans","title":"Readme"},{"location":"leetcode/3/readme/#3","text":"","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{"location":"leetcode/3/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b \u793a\u4f8b 1: \u8f93\u5165: \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3: \u8f93\u5165: \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/3/readme/#2","text":"\u5148\u5c1d\u8bd5\u66b4\u529b\u7684\u89e3\u6cd5\uff0c\u4ece\u7b2c\u4e00\u5b57\u7b26\u5f00\u59cb\u653e\u5165set,\u9047\u5230\u91cd\u590d\u7684\u5c31\u505c\u6b62\uff0c\u8bb0\u5f55\u5f53\u524d\u4e0d\u91cd\u590d\u7684\u6700\u5927\u5b57\u7b26\u4e2a\u6570\uff0c\u6700\u540e\u8f93\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u3002 \u66b4\u529b\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e24\u91cd\u5faa\u73af\uff0c\u5176\u4e2d\u6709\u5927\u91cf\u7684\u65e0\u7528\u67e5\u627e\u3002\u4ed4\u7ec6\u8003\u8651\uff0c\u5982\u679c\u626b\u63cf\u5230\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u4ece\u5de6\u4fa7\u5220\u9664\u4e00\u6837\u7684\uff0c\u7ee7\u7eed\u5411\u4e0b\u626b\u63cf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u7528\u56de\u6eaf\uff0c\u63d0\u9ad8\u6548\u7387\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/3/readme/#3_1","text":"","title":"3. \u9898\u89e3"},{"location":"leetcode/3/readme/#31-c","text":"\u66b4\u529b\u89e3\u51b3\uff1a class Solution { public : int lengthOfLongestSubstring ( string s ) { int len = s . size (); set < char > unique ; int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int length ; for ( int j = i ; j < len ; j ++ ) { if ( unique . find ( s [ j ]) == unique . end ()) { unique . insert ( s [ j ]); } else { break ; } } length = unique . size (); ans = ans > length ? ans : length ; unique . clear (); } return ans ; } }; \u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u5143\u7d20\u4f4d\u7f6e\uff0c\u907f\u514d\u91cd\u590d\u626b\u63cf\u3002 class Solution { public : int lengthOfLongestSubstring ( string s ) { unordered_map < char , int > m ; int ans = 0 ; int left = 0 ; // \u6307\u793a\u5de6\u4fa7\u5f00\u59cb\u7684\u4f4d\u7f6e for ( int i = 0 ; i < s . size (); i ++ ) { left = max ( left , m [ s [ i ] ]); //\u66f4\u65b0\u5de6\u4fa7 m [ s [ i ] ] = i + 1 ; // \u4f4d\u7f6e\u4ece1\u5f00\u59cb ans = max ( ans , i - left + 1 ); } return ans ; } };","title":"3.1 C++"},{"location":"leetcode/3/readme/#32-python","text":"class Solution : def lengthOfLongestSubstring ( self , s : str ) -> int : j = 0 end = len ( s ) ans = 0 unique = set () while ( j < end ): i = j while ( i < end ): if s [ i ] not in unique : unique . add ( s [ i ]) i = i + 1 continue else : break length = len ( unique ) ans = max ( ans , length ) unique = set () j = j + 1 return ans ``` \u4f7f\u7528dict\u5b58\u50a8\u6620\u5c04\u5173\u7cfb \uff0c \u5b9e\u73b0\u4e00\u904d\u626b\u63cf\u51fa\u7ed3\u679c \u3002 ``` python class Solution : def lengthOfLongestSubstring ( self , s : str ) -> int : ans = 0 m = {} left = 0 for i , v in enumerate ( s ): if v not in m : m [ v ] = i + 1 else : left = max ( left , m [ v ]) m [ v ] = i + 1 ans = max ( ans , i - left + 1 ) return ans","title":"3.2 python"},{"location":"leetcode/30/30/index.c.html","text":"30.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_ANS 1000 #define true 1 #define false 0 char ** wordsGlobal = NULL ; int wordsSizeGlobal = 0 ; int * wordsMap = NULL ; // \u4fdd\u5b58words\u4e2d\u7684\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570 int wordsMapSize = 0 ; // \u8bb0\u5f55wordsMap\u4e2d\u5b58\u6709\u591a\u5c11\u4e2a\u5355\u8bcd char * substr ( char * s , int start , int len ) { int end = 0 ; char * newString = ( char * ) malloc ( sizeof ( char ) * ( len + 1 )); for ( int i = start ; i < start + len ; i ++ ) { newString [ end ++ ] = s [ i ]; } newString [ end ] = '\\0' ; return newString ; } // indexOf \u8fd4\u56deword \u5728 words \u4e2d\u7684\u7d22\u5f15\uff0c\u6ca1\u6709\u8fd4\u56de-1 int indexOf ( char * word ) { for ( int i = 0 ; i < wordsSizeGlobal ; i ++ ) { if ( strcmp ( wordsGlobal [ i ], word ) == 0 && wordsMap [ i ] == 1 ) { return i ; } } return - 1 ; } // \u662f\u5426\u662f\u4e00\u4e2a\u62fc\u63a5 // \u4ece start \u5f00\u59cb\uff0c\u6bcfm\u4e2a\u5b57\u7b26\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e00\u5171\u6709k\u4e2a\u5355\u8bcd int isSatisfied ( char * s , int start , int m , int k ) { wordsMapSize = wordsSizeGlobal ; for ( int i = 0 ; i < wordsSizeGlobal ; i ++ ) { wordsMap [ i ] = 1 ; } for ( int i = 0 ; i < k ; i ++ ) { char * word = substr ( s , start + m * i , m ); int index = indexOf ( word ); if ( index != - 1 ) { wordsMap [ index ] -= 1 ; wordsMapSize -- ; } else { return false ; } } if ( wordsMapSize == 0 ) { return true ; } else { return false ; } } int * findSubstring ( char * s , char ** words , int wordsSize , int * returnSize ) { if ( s == NULL || words == NULL || wordsSize <= 0 ) { * returnSize = 0 ; return NULL ; } int slen = strlen ( s ); int wlen = strlen ( words [ 0 ]); if ( slen < wlen * wordsSize ) { * returnSize = 0 ; return NULL ; } int * ans = ( int * ) malloc ( sizeof ( int ) * MAX_ANS ); int ansEnd = 0 ; int result ; int m = strlen ( words [ 0 ]); int n = m * wordsSize ; wordsGlobal = words ; wordsSizeGlobal = wordsSize ; wordsMap = ( int * ) malloc ( sizeof ( int ) * wordsSize ); wordsMapSize = wordsSize ; for ( int i = 0 ; i <= strlen ( s ) - n ; i ++ ) { result = isSatisfied ( s , i , m , wordsSize ); if ( result ) { ans [ ansEnd ++ ] = i ; } } * returnSize = ansEnd ; return ans ; }","title":"30.c"},{"location":"leetcode/30/30/index.c.html#30c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_ANS 1000 #define true 1 #define false 0 char ** wordsGlobal = NULL ; int wordsSizeGlobal = 0 ; int * wordsMap = NULL ; // \u4fdd\u5b58words\u4e2d\u7684\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570 int wordsMapSize = 0 ; // \u8bb0\u5f55wordsMap\u4e2d\u5b58\u6709\u591a\u5c11\u4e2a\u5355\u8bcd char * substr ( char * s , int start , int len ) { int end = 0 ; char * newString = ( char * ) malloc ( sizeof ( char ) * ( len + 1 )); for ( int i = start ; i < start + len ; i ++ ) { newString [ end ++ ] = s [ i ]; } newString [ end ] = '\\0' ; return newString ; } // indexOf \u8fd4\u56deword \u5728 words \u4e2d\u7684\u7d22\u5f15\uff0c\u6ca1\u6709\u8fd4\u56de-1 int indexOf ( char * word ) { for ( int i = 0 ; i < wordsSizeGlobal ; i ++ ) { if ( strcmp ( wordsGlobal [ i ], word ) == 0 && wordsMap [ i ] == 1 ) { return i ; } } return - 1 ; } // \u662f\u5426\u662f\u4e00\u4e2a\u62fc\u63a5 // \u4ece start \u5f00\u59cb\uff0c\u6bcfm\u4e2a\u5b57\u7b26\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e00\u5171\u6709k\u4e2a\u5355\u8bcd int isSatisfied ( char * s , int start , int m , int k ) { wordsMapSize = wordsSizeGlobal ; for ( int i = 0 ; i < wordsSizeGlobal ; i ++ ) { wordsMap [ i ] = 1 ; } for ( int i = 0 ; i < k ; i ++ ) { char * word = substr ( s , start + m * i , m ); int index = indexOf ( word ); if ( index != - 1 ) { wordsMap [ index ] -= 1 ; wordsMapSize -- ; } else { return false ; } } if ( wordsMapSize == 0 ) { return true ; } else { return false ; } } int * findSubstring ( char * s , char ** words , int wordsSize , int * returnSize ) { if ( s == NULL || words == NULL || wordsSize <= 0 ) { * returnSize = 0 ; return NULL ; } int slen = strlen ( s ); int wlen = strlen ( words [ 0 ]); if ( slen < wlen * wordsSize ) { * returnSize = 0 ; return NULL ; } int * ans = ( int * ) malloc ( sizeof ( int ) * MAX_ANS ); int ansEnd = 0 ; int result ; int m = strlen ( words [ 0 ]); int n = m * wordsSize ; wordsGlobal = words ; wordsSizeGlobal = wordsSize ; wordsMap = ( int * ) malloc ( sizeof ( int ) * wordsSize ); wordsMapSize = wordsSize ; for ( int i = 0 ; i <= strlen ( s ) - n ; i ++ ) { result = isSatisfied ( s , i , m , wordsSize ); if ( result ) { ans [ ansEnd ++ ] = i ; } } * returnSize = ansEnd ; return ans ; }","title":"30.c"},{"location":"leetcode/30/30/index.cpp.html","text":"30.cpp \u00b6","title":"30.cpp"},{"location":"leetcode/30/30/index.cpp.html#30cpp","text":"","title":"30.cpp"},{"location":"leetcode/30/30/index.py.html","text":"30.py \u00b6","title":"30.py"},{"location":"leetcode/30/30/index.py.html#30py","text":"","title":"30.py"},{"location":"leetcode/30/readme/","text":"30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1a s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa\uff1a[0,9] \u89e3\u91ca\uff1a \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoo\" \u548c \"foobar\" \u3002 \u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1a s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"] \u8f93\u51fa\uff1a[] 2. \u89e3\u9898\u601d\u8def \u00b6 \u7edf\u8ba1words\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570 \u904d\u5386s, \u6bcf\u6ee1\u8db3words\u957f\u5ea6\u5c31\u5206\u5272\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u770b\u662f\u5426\u548cwords\u8ba1\u7b97\u7ed3\u679c\u76f8\u540c \u5982\u679c\u76f8\u540c\uff0c\u8f93\u51fa\u8fd9\u65f6\u7684\u8d77\u59cb\u4e0b\u6807 3. AC\u4ee3\u7801 \u00b6 C","title":"[30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32](https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words)"},{"location":"leetcode/30/readme/#30","text":"","title":"30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32"},{"location":"leetcode/30/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1a s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa\uff1a[0,9] \u89e3\u91ca\uff1a \u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoo\" \u548c \"foobar\" \u3002 \u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a 1 2 3 4 \u8f93\u5165\uff1a s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"] \u8f93\u51fa\uff1a[]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/30/readme/#2","text":"\u7edf\u8ba1words\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570 \u904d\u5386s, \u6bcf\u6ee1\u8db3words\u957f\u5ea6\u5c31\u5206\u5272\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u770b\u662f\u5426\u548cwords\u8ba1\u7b97\u7ed3\u679c\u76f8\u540c \u5982\u679c\u76f8\u540c\uff0c\u8f93\u51fa\u8fd9\u65f6\u7684\u8d77\u59cb\u4e0b\u6807","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/30/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/307/307/index.c.html","text":"307.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> int * g_nums = NULL ; typedef struct AA { struct AA * left ; struct AA * right ; int begin , end ; int val ; } NumArray ; NumArray * create ( int * nums , int begin , int end ) { g_nums = nums ; if ( begin > end ) return NULL ; if ( begin == end ) { NumArray * newNode = ( NumArray * ) malloc ( sizeof ( NumArray )); newNode -> left = NULL ; newNode -> right = NULL ; newNode -> begin = begin ; newNode -> end = end ; newNode -> val = nums [ begin ]; return newNode ; } int mid = ( begin + end ) / 2 ; NumArray * newNode = ( NumArray * ) malloc ( sizeof ( NumArray )); newNode -> begin = begin ; newNode -> end = end ; newNode -> left = create ( nums , begin , mid ); newNode -> right = create ( nums , mid + 1 , end ); newNode -> val = newNode -> left -> val + newNode -> right -> val ; return newNode ; } NumArray * numArrayCreate ( int * nums , int numsSize ) { NumArray * root = create ( nums , 0 , numsSize - 1 ); return root ; } void numArrayAdd ( NumArray * obj , int i , int added ) { if ( obj == NULL ) return ; if ( obj -> begin == obj -> end && obj -> begin == i ) { obj -> val += added ; return ; } obj -> val += added ; int mid = ( obj -> begin + obj -> end ) / 2 ; if ( i <= mid ) { numArrayAdd ( obj -> left , i , added ); } else { numArrayAdd ( obj -> right , i , added ); } } void numArrayUpdate ( NumArray * obj , int i , int val ) { int added = val - g_nums [ i ]; numArrayAdd ( obj , i , added ); g_nums [ i ] = val ; } int numArraySumRange ( NumArray * obj , int i , int j ) { if ( i <= obj -> begin && j >= obj -> end ) { return obj -> val ; } if ( i > obj -> end || j < obj -> begin ) { return 0 ; } int left = numArraySumRange ( obj -> left , i , j ); int right = numArraySumRange ( obj -> right , i , j ); return left + right ; } void numArrayFree ( NumArray * obj ) { g_nums = NULL ; if ( obj == NULL ) return ; if ( obj -> left == NULL && obj -> right == NULL ) { free ( obj ); obj = NULL ; return ; } free ( obj -> left ); free ( obj -> right ); obj -> left = NULL ; obj -> right = NULL ; } int main () { int nums [ 3 ] = { 1 , 3 , 5 }; int numsSize = 3 ; NumArray * obj = numArrayCreate ( nums , numsSize ); int param_2 = numArraySumRange ( obj , 0 , 2 ); int expected_2 = 9 ; numArrayUpdate ( obj , 1 , 2 ); int param_3 = numArraySumRange ( obj , 0 , 2 ); int expected_3 = 8 ; numArrayFree ( obj ); return 0 ; }","title":"307.c"},{"location":"leetcode/307/307/index.c.html#307c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> int * g_nums = NULL ; typedef struct AA { struct AA * left ; struct AA * right ; int begin , end ; int val ; } NumArray ; NumArray * create ( int * nums , int begin , int end ) { g_nums = nums ; if ( begin > end ) return NULL ; if ( begin == end ) { NumArray * newNode = ( NumArray * ) malloc ( sizeof ( NumArray )); newNode -> left = NULL ; newNode -> right = NULL ; newNode -> begin = begin ; newNode -> end = end ; newNode -> val = nums [ begin ]; return newNode ; } int mid = ( begin + end ) / 2 ; NumArray * newNode = ( NumArray * ) malloc ( sizeof ( NumArray )); newNode -> begin = begin ; newNode -> end = end ; newNode -> left = create ( nums , begin , mid ); newNode -> right = create ( nums , mid + 1 , end ); newNode -> val = newNode -> left -> val + newNode -> right -> val ; return newNode ; } NumArray * numArrayCreate ( int * nums , int numsSize ) { NumArray * root = create ( nums , 0 , numsSize - 1 ); return root ; } void numArrayAdd ( NumArray * obj , int i , int added ) { if ( obj == NULL ) return ; if ( obj -> begin == obj -> end && obj -> begin == i ) { obj -> val += added ; return ; } obj -> val += added ; int mid = ( obj -> begin + obj -> end ) / 2 ; if ( i <= mid ) { numArrayAdd ( obj -> left , i , added ); } else { numArrayAdd ( obj -> right , i , added ); } } void numArrayUpdate ( NumArray * obj , int i , int val ) { int added = val - g_nums [ i ]; numArrayAdd ( obj , i , added ); g_nums [ i ] = val ; } int numArraySumRange ( NumArray * obj , int i , int j ) { if ( i <= obj -> begin && j >= obj -> end ) { return obj -> val ; } if ( i > obj -> end || j < obj -> begin ) { return 0 ; } int left = numArraySumRange ( obj -> left , i , j ); int right = numArraySumRange ( obj -> right , i , j ); return left + right ; } void numArrayFree ( NumArray * obj ) { g_nums = NULL ; if ( obj == NULL ) return ; if ( obj -> left == NULL && obj -> right == NULL ) { free ( obj ); obj = NULL ; return ; } free ( obj -> left ); free ( obj -> right ); obj -> left = NULL ; obj -> right = NULL ; } int main () { int nums [ 3 ] = { 1 , 3 , 5 }; int numsSize = 3 ; NumArray * obj = numArrayCreate ( nums , numsSize ); int param_2 = numArraySumRange ( obj , 0 , 2 ); int expected_2 = 9 ; numArrayUpdate ( obj , 1 , 2 ); int param_3 = numArraySumRange ( obj , 0 , 2 ); int expected_3 = 8 ; numArrayFree ( obj ); return 0 ; }","title":"307.c"},{"location":"leetcode/307/307/index.py.html","text":"307.py \u00b6 from typing import List import numpy as np import random class NumArray : def __init__ ( self , nums : List [ int ]): self . n = len ( nums ) self . nums = nums self . array = [ 0 ] * self . n for i in range ( self . n ): self . add ( i , nums [ i ]) def add ( self , i : int , val : int ) -> None : \"\"\" nums[i] + val \"\"\" i = i + 1 while i <= self . n : self . array [ i - 1 ] += val i += ( i & - i ) def sum ( self , i : int ) -> int : \"\"\" \u524d i \u9879\u548c \"\"\" s = 0 i = i + 1 while ( i > 0 ): s += self . array [ i - 1 ] i -= ( i & - i ) return s def update ( self , i : int , val : int ) -> None : \"\"\" nums[i] = val \"\"\" addv = val - self . nums [ i ] self . add ( i , addv ) self . nums [ i ] = val def sumRange ( self , i : int , j : int ) -> int : if i == 0 : return self . sum ( j ) else : return self . sum ( j ) - self . sum ( i - 1 ) # \u968f\u673a\u6784\u9020\u6570\u636e\u6d4b\u8bd5 n = 20 nums = list ( np . random . randint ( 1 , 100 , n )) obj = NumArray ( nums ) count = 50 for i in range ( count ): index = random . randint ( 0 , n - 1 ) val = random . randint ( 1 , 200 ) obj . update ( index , val ) nums [ index ] = val a = random . randint ( 0 , n - 1 ) b = random . randint ( a , n - 1 ) sumab = obj . sumRange ( a , b ) expect = sum ( nums [ a : b + 1 ]) if sumab != expect : print ( nums ) print ( obj . nums ) print ( obj . array ) print ( a , b ) else : print ( \" {} successfully.\" . format ( i )) end = 10","title":"307.py"},{"location":"leetcode/307/307/index.py.html#307py","text":"from typing import List import numpy as np import random class NumArray : def __init__ ( self , nums : List [ int ]): self . n = len ( nums ) self . nums = nums self . array = [ 0 ] * self . n for i in range ( self . n ): self . add ( i , nums [ i ]) def add ( self , i : int , val : int ) -> None : \"\"\" nums[i] + val \"\"\" i = i + 1 while i <= self . n : self . array [ i - 1 ] += val i += ( i & - i ) def sum ( self , i : int ) -> int : \"\"\" \u524d i \u9879\u548c \"\"\" s = 0 i = i + 1 while ( i > 0 ): s += self . array [ i - 1 ] i -= ( i & - i ) return s def update ( self , i : int , val : int ) -> None : \"\"\" nums[i] = val \"\"\" addv = val - self . nums [ i ] self . add ( i , addv ) self . nums [ i ] = val def sumRange ( self , i : int , j : int ) -> int : if i == 0 : return self . sum ( j ) else : return self . sum ( j ) - self . sum ( i - 1 ) # \u968f\u673a\u6784\u9020\u6570\u636e\u6d4b\u8bd5 n = 20 nums = list ( np . random . randint ( 1 , 100 , n )) obj = NumArray ( nums ) count = 50 for i in range ( count ): index = random . randint ( 0 , n - 1 ) val = random . randint ( 1 , 200 ) obj . update ( index , val ) nums [ index ] = val a = random . randint ( 0 , n - 1 ) b = random . randint ( a , n - 1 ) sumab = obj . sumRange ( a , b ) expect = sum ( nums [ a : b + 1 ]) if sumab != expect : print ( nums ) print ( obj . nums ) print ( obj . array ) print ( a , b ) else : print ( \" {} successfully.\" . format ( i )) end = 10","title":"307.py"},{"location":"leetcode/307/307_2/index.py.html","text":"307_2.py \u00b6 from typing import List import numpy as np import random class Node : def __init__ ( self , left = None , right = None , begin =- 1 , end =- 1 , value = 0 ): self . left = left self . right = right self . begin = begin self . end = end self . value = value class NumArray : def __init__ ( self , nums : List [ int ]): self . root = None self . array = nums self . root = self . create ( nums ) def create ( self , array ): \"\"\" \u521b\u5efa\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u548c \"\"\" def __create ( begin , end ): if begin > end : return None if begin == end : node = Node ( begin = begin , end = end , value = array [ begin ]) return node mid = ( begin + end ) // 2 node = Node ( begin = begin , end = end ) node . left = __create ( begin , mid ) node . right = __create ( mid + 1 , end ) node . value = node . left . value + node . right . value return node n = len ( array ) begin , end = 0 , n - 1 self . root = __create ( begin , end ) self . array = array return self . root def sumRange ( self , i : int , j : int ) -> int : return self . query ( i , j ) def query ( self , begin , end ): \"\"\" \u67e5\u8be2\u533a\u95f4[begin, end]\u7684\u548c \"\"\" def __query ( node , begin , end ): if begin <= node . begin and end >= node . end : return node . value if begin > node . end or end < node . begin : return 0 lres = __query ( node . left , begin , end ) rres = __query ( node . right , begin , end ) return lres + rres return __query ( self . root , begin , end ) def add ( self , i , x ): \"\"\" array[i] + x \u4e4b\u540e\u66f4\u65b0\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c \"\"\" def __add ( node , i , x ): if node . begin == node . end == i : node . value += x return node . value += x mid = ( node . begin + node . end ) // 2 if i <= mid : __add ( node . left , i , x ) else : __add ( node . right , i , x ) __add ( self . root , i , x ) return self . root def update ( self , i : int , val : int ) -> None : \"\"\" array[i] = x \u4e4b\u540e\u66f4\u65b0\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c \"\"\" added = val - self . array [ i ] self . add ( i , added ) self . array [ i ] = val return self . root # \u968f\u673a\u6784\u9020\u6570\u636e\u6d4b\u8bd5 n = 8 nums = list ( np . random . randint ( 1 , 10 , n )) obj = NumArray ( nums ) root = obj . create ( nums ) count = 50 for i in range ( count ): index = random . randint ( 0 , n - 1 ) val = random . randint ( 1 , 200 ) obj . update ( index , val ) nums [ index ] = val a = random . randint ( 0 , n - 1 ) b = random . randint ( a , n - 1 ) sumab = obj . sumRange ( a , b ) expect = sum ( nums [ a : b + 1 ]) if sumab != expect : print ( nums ) print ( a , b ) else : print ( \" {} successfully.\" . format ( i )) end = 10","title":"307 2.py"},{"location":"leetcode/307/307_2/index.py.html#307_2py","text":"from typing import List import numpy as np import random class Node : def __init__ ( self , left = None , right = None , begin =- 1 , end =- 1 , value = 0 ): self . left = left self . right = right self . begin = begin self . end = end self . value = value class NumArray : def __init__ ( self , nums : List [ int ]): self . root = None self . array = nums self . root = self . create ( nums ) def create ( self , array ): \"\"\" \u521b\u5efa\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u548c \"\"\" def __create ( begin , end ): if begin > end : return None if begin == end : node = Node ( begin = begin , end = end , value = array [ begin ]) return node mid = ( begin + end ) // 2 node = Node ( begin = begin , end = end ) node . left = __create ( begin , mid ) node . right = __create ( mid + 1 , end ) node . value = node . left . value + node . right . value return node n = len ( array ) begin , end = 0 , n - 1 self . root = __create ( begin , end ) self . array = array return self . root def sumRange ( self , i : int , j : int ) -> int : return self . query ( i , j ) def query ( self , begin , end ): \"\"\" \u67e5\u8be2\u533a\u95f4[begin, end]\u7684\u548c \"\"\" def __query ( node , begin , end ): if begin <= node . begin and end >= node . end : return node . value if begin > node . end or end < node . begin : return 0 lres = __query ( node . left , begin , end ) rres = __query ( node . right , begin , end ) return lres + rres return __query ( self . root , begin , end ) def add ( self , i , x ): \"\"\" array[i] + x \u4e4b\u540e\u66f4\u65b0\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c \"\"\" def __add ( node , i , x ): if node . begin == node . end == i : node . value += x return node . value += x mid = ( node . begin + node . end ) // 2 if i <= mid : __add ( node . left , i , x ) else : __add ( node . right , i , x ) __add ( self . root , i , x ) return self . root def update ( self , i : int , val : int ) -> None : \"\"\" array[i] = x \u4e4b\u540e\u66f4\u65b0\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c \"\"\" added = val - self . array [ i ] self . add ( i , added ) self . array [ i ] = val return self . root # \u968f\u673a\u6784\u9020\u6570\u636e\u6d4b\u8bd5 n = 8 nums = list ( np . random . randint ( 1 , 10 , n )) obj = NumArray ( nums ) root = obj . create ( nums ) count = 50 for i in range ( count ): index = random . randint ( 0 , n - 1 ) val = random . randint ( 1 , 200 ) obj . update ( index , val ) nums [ index ] = val a = random . randint ( 0 , n - 1 ) b = random . randint ( a , n - 1 ) sumab = obj . sumRange ( a , b ) expect = sum ( nums [ a : b + 1 ]) if sumab != expect : print ( nums ) print ( a , b ) else : print ( \" {} successfully.\" . format ( i )) end = 10","title":"307_2.py"},{"location":"leetcode/307/307_3/index.c.html","text":"307_3.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> typedef struct { int * arr ; int * nums ; int size ; } NumArray ; void add ( NumArray * obj , int i , int val ) { i = i + 1 ; while ( i <= obj -> size ) { obj -> arr [ i - 1 ] += val ; i += ( i & - i ); } } NumArray * numArrayCreate ( int * nums , int numsSize ) { NumArray * array = ( NumArray * ) malloc ( sizeof ( NumArray )); array -> arr = ( int * ) malloc ( sizeof ( int ) * numsSize ); array -> size = numsSize ; array -> nums = nums ; for ( int i = 0 ; i < numsSize ; i ++ ) { array -> arr [ i ] = 0 ; } for ( int i = 0 ; i < numsSize ; i ++ ) { add ( array , i , nums [ i ]); } return array ; } int query ( NumArray * obj , int i ) { int sum = 0 ; i = i + 1 ; while ( i > 0 ) { sum += obj -> arr [ i - 1 ]; i -= ( i & - i ); } return sum ; } void numArrayUpdate ( NumArray * obj , int i , int val ) { int added = val - obj -> nums [ i ]; add ( obj , i , added ); obj -> nums [ i ] = val ; } int numArraySumRange ( NumArray * obj , int i , int j ) { int ans = query ( obj , j ) - query ( obj , i - 1 ); return ans ; } void numArrayFree ( NumArray * obj ) { free ( obj -> arr ); free ( obj ); } int main () { int nums [ 3 ] = { 1 , 3 , 5 }; int numsSize = 3 ; NumArray * obj = numArrayCreate ( nums , numsSize ); int param_2 = numArraySumRange ( obj , 0 , 2 ); int expected_2 = 9 ; numArrayUpdate ( obj , 1 , 2 ); int param_3 = numArraySumRange ( obj , 0 , 2 ); int expected_3 = 8 ; numArrayFree ( obj ); return 0 ; }","title":"307 3.c"},{"location":"leetcode/307/307_3/index.c.html#307_3c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> typedef struct { int * arr ; int * nums ; int size ; } NumArray ; void add ( NumArray * obj , int i , int val ) { i = i + 1 ; while ( i <= obj -> size ) { obj -> arr [ i - 1 ] += val ; i += ( i & - i ); } } NumArray * numArrayCreate ( int * nums , int numsSize ) { NumArray * array = ( NumArray * ) malloc ( sizeof ( NumArray )); array -> arr = ( int * ) malloc ( sizeof ( int ) * numsSize ); array -> size = numsSize ; array -> nums = nums ; for ( int i = 0 ; i < numsSize ; i ++ ) { array -> arr [ i ] = 0 ; } for ( int i = 0 ; i < numsSize ; i ++ ) { add ( array , i , nums [ i ]); } return array ; } int query ( NumArray * obj , int i ) { int sum = 0 ; i = i + 1 ; while ( i > 0 ) { sum += obj -> arr [ i - 1 ]; i -= ( i & - i ); } return sum ; } void numArrayUpdate ( NumArray * obj , int i , int val ) { int added = val - obj -> nums [ i ]; add ( obj , i , added ); obj -> nums [ i ] = val ; } int numArraySumRange ( NumArray * obj , int i , int j ) { int ans = query ( obj , j ) - query ( obj , i - 1 ); return ans ; } void numArrayFree ( NumArray * obj ) { free ( obj -> arr ); free ( obj ); } int main () { int nums [ 3 ] = { 1 , 3 , 5 }; int numsSize = 3 ; NumArray * obj = numArrayCreate ( nums , numsSize ); int param_2 = numArraySumRange ( obj , 0 , 2 ); int expected_2 = 9 ; numArrayUpdate ( obj , 1 , 2 ); int param_3 = numArraySumRange ( obj , 0 , 2 ); int expected_3 = 8 ; numArrayFree ( obj ); return 0 ; }","title":"307_3.c"},{"location":"leetcode/307/readme/","text":"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j (i \u2264 j) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 update(i, val) \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a i \u7684\u6570\u503c\u66f4\u65b0\u4e3a val\uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002 \u793a\u4f8b: 1 2 3 4 5 Given nums = [1, 3, 5] sumRange(0, 2) -> 9 update(1, 2) sumRange(0, 2) -> 8 \u8bf4\u660e: 1 2 \u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728 update \u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe update \u51fd\u6570\u4e0e sumRange \u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u662f\u5747\u5300\u5206\u5e03\u7684\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 3. AC\u4ee3\u7801 \u00b6 python \u6811\u72b6\u6570\u7ec4\u5b9e\u73b0 C python \u7ebf\u6bb5\u6811\u5b9e\u73b0 C","title":"[307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539](https://leetcode-cn.com/problems/range-sum-query-mutable/)"},{"location":"leetcode/307/readme/#307-","text":"","title":"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539"},{"location":"leetcode/307/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j (i \u2264 j) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i, j \u4e24\u70b9\u3002 update(i, val) \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a i \u7684\u6570\u503c\u66f4\u65b0\u4e3a val\uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002 \u793a\u4f8b: 1 2 3 4 5 Given nums = [1, 3, 5] sumRange(0, 2) -> 9 update(1, 2) sumRange(0, 2) -> 8 \u8bf4\u660e: 1 2 \u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728 update \u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe update \u51fd\u6570\u4e0e sumRange \u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u662f\u5747\u5300\u5206\u5e03\u7684\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/307/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/307/readme/#3-ac","text":"python \u6811\u72b6\u6570\u7ec4\u5b9e\u73b0 C python \u7ebf\u6bb5\u6811\u5b9e\u73b0 C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/313/readme/","text":"313. \u8d85\u7ea7\u4e11\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002 \u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u662f\u957f\u5ea6\u4e3a k \u7684\u8d28\u6570\u5217\u8868 primes \u4e2d\u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 8 9 \u8f93\u5165: n = 12, primes = [2,7,13,19] \u8f93\u51fa: 32 \u89e3\u91ca: \u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684\u8d28\u6570\u5217\u8868 primes = [2,7,13,19]\uff0c\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u5e8f\u5217\u4e3a\uff1a[1,2,4,7,8,13,14,16,19,26,28,32] \u3002 \u8bf4\u660e: 1 \u662f\u4efb\u4f55\u7ed9\u5b9a primes \u7684\u8d85\u7ea7\u4e11\u6570\u3002 \u7ed9\u5b9a primes \u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002 0 < k \u2264 100, 0 < n \u2264 106, 0 < primes[i] < 1000 \u3002 \u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u8303\u56f4\u5185\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 idx \u6709 len(primes) \u4e2a\u5143\u7d20\uff0c \u521d\u59cb\u5316\u4e3a0\uff0c \u4e3a\u5bf9\u5e94\u7684 primes[i] \u7684\u6307\u9488\u3002\u601d\u8def\u4e0e 264. \u4e11\u6570 II \u5b8c\u5168\u4e00\u81f4\u3002 class Solution : def nthSuperUglyNumber ( self , n : int , primes : List [ int ]) -> int : k = len ( primes ) idx = [ 0 ] * k # \u6307\u793aprimes[i]\u5f53\u524d\u4f4d\u7f6e array = [ 1 ] for _ in range ( 1 , n ): nextNumbers = [ array [ value ] * primes [ i ] for i , value in enumerate ( idx )] nextNumber = min ( nextNumbers ) array . append ( nextNumber ) for j in range ( k ): if array [ idx [ j ] ] * primes [ j ] == nextNumber : idx [ j ] += 1 return array [ n - 1 ]","title":"[313. \u8d85\u7ea7\u4e11\u6570](https://leetcode-cn.com/problems/super-ugly-number/)"},{"location":"leetcode/313/readme/#313","text":"","title":"313. \u8d85\u7ea7\u4e11\u6570"},{"location":"leetcode/313/readme/#1","text":"\u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002 \u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u662f\u957f\u5ea6\u4e3a k \u7684\u8d28\u6570\u5217\u8868 primes \u4e2d\u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 8 9 \u8f93\u5165: n = 12, primes = [2,7,13,19] \u8f93\u51fa: 32 \u89e3\u91ca: \u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684\u8d28\u6570\u5217\u8868 primes = [2,7,13,19]\uff0c\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u5e8f\u5217\u4e3a\uff1a[1,2,4,7,8,13,14,16,19,26,28,32] \u3002 \u8bf4\u660e: 1 \u662f\u4efb\u4f55\u7ed9\u5b9a primes \u7684\u8d85\u7ea7\u4e11\u6570\u3002 \u7ed9\u5b9a primes \u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002 0 < k \u2264 100, 0 < n \u2264 106, 0 < primes[i] < 1000 \u3002 \u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u8303\u56f4\u5185\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/313/readme/#2","text":"idx \u6709 len(primes) \u4e2a\u5143\u7d20\uff0c \u521d\u59cb\u5316\u4e3a0\uff0c \u4e3a\u5bf9\u5e94\u7684 primes[i] \u7684\u6307\u9488\u3002\u601d\u8def\u4e0e 264. \u4e11\u6570 II \u5b8c\u5168\u4e00\u81f4\u3002 class Solution : def nthSuperUglyNumber ( self , n : int , primes : List [ int ]) -> int : k = len ( primes ) idx = [ 0 ] * k # \u6307\u793aprimes[i]\u5f53\u524d\u4f4d\u7f6e array = [ 1 ] for _ in range ( 1 , n ): nextNumbers = [ array [ value ] * primes [ i ] for i , value in enumerate ( idx )] nextNumber = min ( nextNumbers ) array . append ( nextNumber ) for j in range ( k ): if array [ idx [ j ] ] * primes [ j ] == nextNumber : idx [ j ] += 1 return array [ n - 1 ]","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/315/315/index.py.html","text":"315.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Node : def __init__ ( self , left = None , right = None , begin = None , end = None , val = None ): self . left = left self . right = right self . begin = begin self . end = end self . val = val class Solution : def build ( self , begin , end ): \"\"\" \u6784\u9020\u8303\u56f4\u4e3a [beign, end] \u7684\u7ebf\u6bb5\u6811 \"\"\" if begin == end : node = Node ( begin = begin , end = end ) node . val = 0 return node mid = ( begin + end ) // 2 node = Node ( begin = begin , end = end ) node . left = self . build ( begin , mid ) node . right = self . build ( mid + 1 , end ) node . val = 0 return node def query ( self , node , begin , end ): \"\"\" \u67e5\u8be2 [begin, end] \u533a\u95f4\u7684 cnt \u503c \"\"\" if begin > node . end or end < node . begin : return 0 if begin <= node . begin and end >= node . end : return node . val lres = self . query ( node . left , begin , end ) rres = self . query ( node . right , begin , end ) return lres + rres def add ( self , node , idx , addv ): \"\"\" \u533a\u95f4 [idx, idx] \u589e\u52a0 addv \"\"\" if node . begin == node . end == idx : node . val += addv return mid = ( node . begin + node . end ) // 2 node . val += addv if idx <= mid : self . add ( node . left , idx , addv ) else : self . add ( node . right , idx , addv ) def countSmaller ( self , nums : List [ int ]) -> List [ int ]: ans = [] if len ( nums ) == 0 : return ans low , high = min ( nums ), max ( nums ) root = self . build ( low , high ) for num in reversed ( nums ): cnt = self . query ( root , low , num - 1 ) ans . insert ( 0 , cnt ) self . add ( root , num , 1 ) return ans s = Solution () arr = [ 5 , 2 , 6 , 1 ] ans = s . countSmaller ( arr ) end = 10","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/315/315/index.py.html#315py","text":"# -*- coding:utf-8 -*- from typing import List class Node : def __init__ ( self , left = None , right = None , begin = None , end = None , val = None ): self . left = left self . right = right self . begin = begin self . end = end self . val = val class Solution : def build ( self , begin , end ): \"\"\" \u6784\u9020\u8303\u56f4\u4e3a [beign, end] \u7684\u7ebf\u6bb5\u6811 \"\"\" if begin == end : node = Node ( begin = begin , end = end ) node . val = 0 return node mid = ( begin + end ) // 2 node = Node ( begin = begin , end = end ) node . left = self . build ( begin , mid ) node . right = self . build ( mid + 1 , end ) node . val = 0 return node def query ( self , node , begin , end ): \"\"\" \u67e5\u8be2 [begin, end] \u533a\u95f4\u7684 cnt \u503c \"\"\" if begin > node . end or end < node . begin : return 0 if begin <= node . begin and end >= node . end : return node . val lres = self . query ( node . left , begin , end ) rres = self . query ( node . right , begin , end ) return lres + rres def add ( self , node , idx , addv ): \"\"\" \u533a\u95f4 [idx, idx] \u589e\u52a0 addv \"\"\" if node . begin == node . end == idx : node . val += addv return mid = ( node . begin + node . end ) // 2 node . val += addv if idx <= mid : self . add ( node . left , idx , addv ) else : self . add ( node . right , idx , addv ) def countSmaller ( self , nums : List [ int ]) -> List [ int ]: ans = [] if len ( nums ) == 0 : return ans low , high = min ( nums ), max ( nums ) root = self . build ( low , high ) for num in reversed ( nums ): cnt = self . query ( root , low , num - 1 ) ans . insert ( 0 , cnt ) self . add ( root , num , 1 ) return ans s = Solution () arr = [ 5 , 2 , 6 , 1 ] ans = s . countSmaller ( arr ) end = 10","title":"315.py"},{"location":"leetcode/315/315_2/index.py.html","text":"315_2.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Node : def __init__ ( self , left = None , right = None , begin = None , end = None , val = None ): self . left = left self . right = right self . begin = begin self . end = end self . val = val class Solution : def build ( self , begin , end ): \"\"\" \u6784\u9020\u8303\u56f4\u4e3a [beign, end] \u7684\u7ebf\u6bb5\u6811 \"\"\" if begin == end : node = Node ( begin = begin , end = end ) node . val = 0 return node mid = ( begin + end ) // 2 node = Node ( begin = begin , end = end ) node . left = self . build ( begin , mid ) node . right = self . build ( mid + 1 , end ) node . val = 0 return node def query ( self , node , begin , end ): \"\"\" \u67e5\u8be2 [begin, end] \u533a\u95f4\u7684 cnt \u503c \"\"\" if begin > node . end or end < node . begin : return 0 if begin <= node . begin and end >= node . end : return node . val lres = self . query ( node . left , begin , end ) rres = self . query ( node . right , begin , end ) return lres + rres def add ( self , node , idx , addv ): \"\"\" \u533a\u95f4 [idx, idx] \u589e\u52a0 addv \"\"\" if node . begin == node . end == idx : node . val += addv return mid = ( node . begin + node . end ) // 2 node . val += addv if idx <= mid : self . add ( node . left , idx , addv ) else : self . add ( node . right , idx , addv ) def convert2rank ( self , nums ): \"\"\" \u8fd4\u56de nums \u4e2d\u5143\u7d20\u6392\u5e8f\u4e4b\u540e\u7684\u6392\u540d\uff0c\u5982\u679c\u5143\u7d20\u76f8\u540c\uff0c\u6392\u540d\u5e76\u5217 \"\"\" sorted_nums = sorted ( nums ) kvs = [[ i , sorted_nums [ i ]] for i in range ( len ( sorted_nums ))] for i in range ( 1 , len ( kvs )): if kvs [ i ][ 1 ] == kvs [ i - 1 ][ 1 ]: kvs [ i ][ 0 ] = kvs [ i - 1 ][ 0 ] dic = {} for k , v in kvs : dic [ v ] = k rank = [] for num in nums : rank . append ( dic [ num ]) return rank def countSmaller ( self , nums : List [ int ]) -> List [ int ]: ans = [] if len ( nums ) == 0 : return ans nums = self . convert2rank ( nums ) low , high = min ( nums ), max ( nums ) root = self . build ( low , high ) for num in reversed ( nums ): cnt = self . query ( root , low , num - 1 ) ans . insert ( 0 , cnt ) self . add ( root , num , 1 ) return ans s = Solution () arr = [ 5 , 2 , 2 , 6 , 6 , 1 ] rank = s . convert2rank ( arr ) ans = s . countSmaller ( arr ) end = 10","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/315/315_2/index.py.html#315_2py","text":"# -*- coding:utf-8 -*- from typing import List class Node : def __init__ ( self , left = None , right = None , begin = None , end = None , val = None ): self . left = left self . right = right self . begin = begin self . end = end self . val = val class Solution : def build ( self , begin , end ): \"\"\" \u6784\u9020\u8303\u56f4\u4e3a [beign, end] \u7684\u7ebf\u6bb5\u6811 \"\"\" if begin == end : node = Node ( begin = begin , end = end ) node . val = 0 return node mid = ( begin + end ) // 2 node = Node ( begin = begin , end = end ) node . left = self . build ( begin , mid ) node . right = self . build ( mid + 1 , end ) node . val = 0 return node def query ( self , node , begin , end ): \"\"\" \u67e5\u8be2 [begin, end] \u533a\u95f4\u7684 cnt \u503c \"\"\" if begin > node . end or end < node . begin : return 0 if begin <= node . begin and end >= node . end : return node . val lres = self . query ( node . left , begin , end ) rres = self . query ( node . right , begin , end ) return lres + rres def add ( self , node , idx , addv ): \"\"\" \u533a\u95f4 [idx, idx] \u589e\u52a0 addv \"\"\" if node . begin == node . end == idx : node . val += addv return mid = ( node . begin + node . end ) // 2 node . val += addv if idx <= mid : self . add ( node . left , idx , addv ) else : self . add ( node . right , idx , addv ) def convert2rank ( self , nums ): \"\"\" \u8fd4\u56de nums \u4e2d\u5143\u7d20\u6392\u5e8f\u4e4b\u540e\u7684\u6392\u540d\uff0c\u5982\u679c\u5143\u7d20\u76f8\u540c\uff0c\u6392\u540d\u5e76\u5217 \"\"\" sorted_nums = sorted ( nums ) kvs = [[ i , sorted_nums [ i ]] for i in range ( len ( sorted_nums ))] for i in range ( 1 , len ( kvs )): if kvs [ i ][ 1 ] == kvs [ i - 1 ][ 1 ]: kvs [ i ][ 0 ] = kvs [ i - 1 ][ 0 ] dic = {} for k , v in kvs : dic [ v ] = k rank = [] for num in nums : rank . append ( dic [ num ]) return rank def countSmaller ( self , nums : List [ int ]) -> List [ int ]: ans = [] if len ( nums ) == 0 : return ans nums = self . convert2rank ( nums ) low , high = min ( nums ), max ( nums ) root = self . build ( low , high ) for num in reversed ( nums ): cnt = self . query ( root , low , num - 1 ) ans . insert ( 0 , cnt ) self . add ( root , num , 1 ) return ans s = Solution () arr = [ 5 , 2 , 2 , 6 , 6 , 1 ] rank = s . convert2rank ( arr ) ans = s . countSmaller ( arr ) end = 10","title":"315_2.py"},{"location":"leetcode/315/315_3/index.py.html","text":"315_3.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Solution : def convert2rank ( self , nums ): \"\"\" \u8fd4\u56de nums \u4e2d\u5143\u7d20\u6392\u5e8f\u4e4b\u540e\u7684\u6392\u540d\uff0c\u5982\u679c\u5143\u7d20\u76f8\u540c\uff0c\u6392\u540d\u5e76\u5217 \"\"\" sorted_nums = sorted ( nums ) kvs = [[ i , sorted_nums [ i ]] for i in range ( len ( sorted_nums ))] for i in range ( 1 , len ( kvs )): if kvs [ i ][ 1 ] == kvs [ i - 1 ][ 1 ]: kvs [ i ][ 0 ] = kvs [ i - 1 ][ 0 ] dic = {} for k , v in kvs : dic [ v ] = k rank = [] for num in nums : rank . append ( dic [ num ]) return rank def query ( self , array , i ): \"\"\" \u8fd4\u56de[0, i] \u7ef4\u62a4\u7684\u533a\u95f4\u503c cnt \"\"\" ans = 0 i = i + 1 while i > 0 : ans += array [ i - 1 ] i -= ( i & - i ) return ans def add ( self , array , i , added ): \"\"\" array[i] += added \u4e4b\u540e\u66f4\u65b0\u6811\u72b6\u6570\u7ec4 \"\"\" i = i + 1 while i <= len ( array ): array [ i - 1 ] += added i += ( i & - i ) def countSmaller ( self , nums : List [ int ]) -> List [ int ]: ans = [] if len ( nums ) == 0 : return ans nums = self . convert2rank ( nums ) n = len ( nums ) array = [ 0 ] * n for i in reversed ( range ( n )): cnt = self . query ( array , nums [ i ] - 1 ) self . add ( array , nums [ i ], 1 ) ans . insert ( 0 , cnt ) return ans s = Solution () arr = [ 5 , 2 , 2 , 6 , 6 , 1 ] rank = s . convert2rank ( arr ) ans = s . countSmaller ( arr ) end = 10","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/315/315_3/index.py.html#315_3py","text":"# -*- coding:utf-8 -*- from typing import List class Solution : def convert2rank ( self , nums ): \"\"\" \u8fd4\u56de nums \u4e2d\u5143\u7d20\u6392\u5e8f\u4e4b\u540e\u7684\u6392\u540d\uff0c\u5982\u679c\u5143\u7d20\u76f8\u540c\uff0c\u6392\u540d\u5e76\u5217 \"\"\" sorted_nums = sorted ( nums ) kvs = [[ i , sorted_nums [ i ]] for i in range ( len ( sorted_nums ))] for i in range ( 1 , len ( kvs )): if kvs [ i ][ 1 ] == kvs [ i - 1 ][ 1 ]: kvs [ i ][ 0 ] = kvs [ i - 1 ][ 0 ] dic = {} for k , v in kvs : dic [ v ] = k rank = [] for num in nums : rank . append ( dic [ num ]) return rank def query ( self , array , i ): \"\"\" \u8fd4\u56de[0, i] \u7ef4\u62a4\u7684\u533a\u95f4\u503c cnt \"\"\" ans = 0 i = i + 1 while i > 0 : ans += array [ i - 1 ] i -= ( i & - i ) return ans def add ( self , array , i , added ): \"\"\" array[i] += added \u4e4b\u540e\u66f4\u65b0\u6811\u72b6\u6570\u7ec4 \"\"\" i = i + 1 while i <= len ( array ): array [ i - 1 ] += added i += ( i & - i ) def countSmaller ( self , nums : List [ int ]) -> List [ int ]: ans = [] if len ( nums ) == 0 : return ans nums = self . convert2rank ( nums ) n = len ( nums ) array = [ 0 ] * n for i in reversed ( range ( n )): cnt = self . query ( array , nums [ i ] - 1 ) self . add ( array , nums [ i ], 1 ) ans . insert ( 0 , cnt ) return ans s = Solution () arr = [ 5 , 2 , 2 , 6 , 6 , 1 ] rank = s . convert2rank ( arr ) ans = s . countSmaller ( arr ) end = 10","title":"315_3.py"},{"location":"leetcode/315/315_4/index.py.html","text":"315_4.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Solution : def merge ( self , array , begin , mid , end , ans ): left_array = array [ begin : mid + 1 ] right_array = array [ mid + 1 : end + 1 ] i , j = 0 , 0 m , n = mid - begin + 1 , end - mid for k in range ( begin , end + 1 ): if i < m and j < n and left_array [ i ][ 0 ] <= right_array [ j ][ 0 ]: ans [ left_array [ i ][ 1 ]] += j # \u8bb0\u5f55\u53f3\u4fa7\u6bd4\u81ea\u5df1\u5c0f\u7684\u5143\u7d20\u4e2a\u6570 array [ k ] = left_array [ i ] i += 1 elif i < m and j < n and left_array [ i ][ 0 ] > right_array [ j ][ 0 ]: array [ k ] = right_array [ j ] j += 1 elif i < m : ans [ left_array [ i ][ 1 ]] += j # \u8bb0\u5f55\u53f3\u4fa7\u6bd4\u81ea\u5df1\u5c0f\u7684\u5143\u7d20\u4e2a\u6570 array [ k ] = left_array [ i ] i += 1 else : array [ k ] = right_array [ j ] j += 1 def mergesort ( self , array , begin , end , ans ): if begin >= end : return mid = ( begin + end ) // 2 self . mergesort ( array , begin , mid , ans ) self . mergesort ( array , mid + 1 , end , ans ) self . merge ( array , begin , mid , end , ans ) def countSmaller ( self , nums : List [ int ]) -> List [ int ]: index_nums = [ ( nums [ i ], i ) for i in range ( len ( nums ))] ans = [ 0 ] * len ( nums ) self . mergesort ( index_nums , 0 , len ( index_nums ) - 1 , ans ) return ans s = Solution () arr = [ 5 , 2 , 2 , 6 , 6 , 1 ] ans = s . countSmaller ( arr ) end = 10","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/315/315_4/index.py.html#315_4py","text":"# -*- coding:utf-8 -*- from typing import List class Solution : def merge ( self , array , begin , mid , end , ans ): left_array = array [ begin : mid + 1 ] right_array = array [ mid + 1 : end + 1 ] i , j = 0 , 0 m , n = mid - begin + 1 , end - mid for k in range ( begin , end + 1 ): if i < m and j < n and left_array [ i ][ 0 ] <= right_array [ j ][ 0 ]: ans [ left_array [ i ][ 1 ]] += j # \u8bb0\u5f55\u53f3\u4fa7\u6bd4\u81ea\u5df1\u5c0f\u7684\u5143\u7d20\u4e2a\u6570 array [ k ] = left_array [ i ] i += 1 elif i < m and j < n and left_array [ i ][ 0 ] > right_array [ j ][ 0 ]: array [ k ] = right_array [ j ] j += 1 elif i < m : ans [ left_array [ i ][ 1 ]] += j # \u8bb0\u5f55\u53f3\u4fa7\u6bd4\u81ea\u5df1\u5c0f\u7684\u5143\u7d20\u4e2a\u6570 array [ k ] = left_array [ i ] i += 1 else : array [ k ] = right_array [ j ] j += 1 def mergesort ( self , array , begin , end , ans ): if begin >= end : return mid = ( begin + end ) // 2 self . mergesort ( array , begin , mid , ans ) self . mergesort ( array , mid + 1 , end , ans ) self . merge ( array , begin , mid , end , ans ) def countSmaller ( self , nums : List [ int ]) -> List [ int ]: index_nums = [ ( nums [ i ], i ) for i in range ( len ( nums ))] ans = [ 0 ] * len ( nums ) self . mergesort ( index_nums , 0 , len ( index_nums ) - 1 , ans ) return ans s = Solution () arr = [ 5 , 2 , 2 , 6 , 6 , 1 ] ans = s . countSmaller ( arr ) end = 10","title":"315_4.py"},{"location":"leetcode/315/readme/","text":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts\u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts[i] \u7684\u503c\u662f nums[i] \u53f3\u4fa7\u5c0f\u4e8e nums[i] \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: [5,2,6,1] \u8f93\u51fa: [2,1,1,0] \u89e3\u91ca: 5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1). 2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1). 6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1). 1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20. 2. \u89e3\u9898\u601d\u8def \u00b6 2.1 \u4f7f\u7528\u7ebf\u6bb5\u6811 \u00b6 \u6c42\u51fanums\u7684\u6700\u5c0f\u6700\u5927\u503c\uff0c[min, max]\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u6784\u9020\u4e00\u68f5\u6811\uff0c\u8282\u70b9\u7ef4\u62a4\u533a\u95f4\u5185\u5143\u7d20\u4e2a\u6570\uff0c\u6784\u9020\u7684\u65f6\u5019\u521d\u59cb\u5316\u4e3a0 \u4ece\u53f3\u5411\u5de6\u904d\u5386nums, \u67e5\u8be2 [min, nums[i] - 1] \u8303\u56f4\u5185\u4e2a\u6570\uff0c\u8f93\u51fa\u5230\u7ed3\u679c \u7ebf\u6bb5\u6811\u4e2d nums[i] \u90a3\u4e2a\u8282\u70b9\u7684 cnt \u503c+1, \u9012\u5f52\u66f4\u65b0\u76f8\u5173\u8282\u70b9\u7684 cnt \u503c \u8be5\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u5f53 max - min \u975e\u5e38\u5927\u7684\u65f6\u5019\u5360\u7528\u7a7a\u95f4\u5927\u3002\u4f7f\u7528\u8be5\u65b9\u6cd5\u4e4b\u524d\u9700\u8981\u6ce8\u610f\u6570\u636e\u8303\u56f4\u3002 [ python ] \u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u4e4b\u66f4\u4e3a\u901a\u7528\uff0c \u4e0d\u7528\u5728\u610f\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\uff0c\u65b9\u6cd5\u662f\u9884\u5904\u7406\u6570\u7ec4\u3002 \u628a\u6570\u7ec4\u7684\u6bcf\u4e2a\u6570\u5b57\u66ff\u6362\u6210\u6392\u5e8f\u4e4b\u540e\u7684\u7d22\u5f15\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5982\u679c\u6570\u5b57\u76f8\u540c\uff0c\u5176\u6392\u5e8f\u4e4b\u540e\u7684\u7d22\u5f15\u4e5f\u8981\u4fdd\u6301\u4e00\u6837\u3002 [5,2,6,1] --> [2,1,3,0] [5,2,6,2,1] --> [3,1,4,1,0] [2,1,1,0] [2,1,1,0] [3,1,2,1,0] --> [3,1,2,1,0] \u53ef\u4ee5\u770b\u5230\uff0c \u8f6c\u6362\u4e4b\u540e\u7684\u6570\u7ec4\u7ed3\u679c\u8fd8\u662f\u548c\u4e4b\u524d\u4e00\u6837\u7684\uff0c \u4f46\u662f\u6570\u636e\u8303\u56f4\u88ab\u7f29\u653e\u5230[0,len(nums)-1]. \u8fd9\u6837\u9884\u5904\u7406\u4e4b\u540e\u518d\u4f7f\u7528\u4e0a\u9762\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 python 2.2 \u4f7f\u7528\u6811\u72b6\u6570\u7ec4 \u00b6 \u628a nums \u9884\u5904\u7406\u6210 nums[i] \u7684\u6392\u540d\u4e4b\u540e\uff0c \u6570\u7ec4\u7684\u503c\u7684\u8303\u56f4\u5c31\u548c\u4e0b\u6807\u4e00\u81f4\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u7ef4\u62a4 [begin, end] \u8303\u56f4\uff0c \u800c\u533a\u95f4\u6027\u8d28\u53ea\u9700\u8981\u4e00\u4e2a\u6570\u636e\u4fbf\u53ef\u4ee5\u4fdd\u5b58\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u505a\u3002 \u9884\u5904\u7406 nums \u4e3a\u5176\u6392\u540d \u4ece\u53f3\u5411\u505a\u904d\u5386 nums, \u67e5\u8be2 [0, nums[i]-1] \u533a\u95f4\u5185 cnt \u503c nums[i] \u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff0c\u66f4\u65b0\u5173\u8054\u7684\u8282\u70b9\u7684 cnt \u503c python 2.3 \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u601d\u60f3 \u00b6 \u5f52\u5e76\u6392\u5e8f\u5728\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u7684\u65f6\u5019\uff0c \u540e\u9762\u7684\u6570\u7ec4\u4e00\u5b9a\u5728\u524d\u9762\u6570\u7ec4\u6240\u6709\u5143\u7d20\u7684\u540e\u9762\uff0c \u6240\u4ee5\u524d\u9762\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c \u90fd\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u540e\u9762\u6570\u7ec4\u6709\u51e0\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5b83\u3002 \u6211\u4eec\u4f7f\u7528 (num, index) \u66ff\u6362\u6389\u539f\u6765\u7684 nums \u6570\u7ec4\uff0c \u5bf9\u5176\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c \u6bcf\u6b21 merge \u7684\u65f6\u5019\uff0c \u5bf9\u4e8e\u524d\u9762\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20 \u8ba1\u7b97\u540e\u9762\u6570\u7ec4\u4e2d\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u4e2a\u6570\uff0c \u7d2f\u52a0\u5230 ans[index] \u7ed3\u679c\u4e2d\u3002 \u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e\uff0c ans \u4e2d\u4fdd\u5b58\u7684\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c\u3002 python","title":"[315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570](https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/)"},{"location":"leetcode/315/readme/#315","text":"","title":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570"},{"location":"leetcode/315/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts\u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts[i] \u7684\u503c\u662f nums[i] \u53f3\u4fa7\u5c0f\u4e8e nums[i] \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: [5,2,6,1] \u8f93\u51fa: [2,1,1,0] \u89e3\u91ca: 5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1). 2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1). 6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1). 1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20.","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/315/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/315/readme/#21","text":"\u6c42\u51fanums\u7684\u6700\u5c0f\u6700\u5927\u503c\uff0c[min, max]\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u6784\u9020\u4e00\u68f5\u6811\uff0c\u8282\u70b9\u7ef4\u62a4\u533a\u95f4\u5185\u5143\u7d20\u4e2a\u6570\uff0c\u6784\u9020\u7684\u65f6\u5019\u521d\u59cb\u5316\u4e3a0 \u4ece\u53f3\u5411\u5de6\u904d\u5386nums, \u67e5\u8be2 [min, nums[i] - 1] \u8303\u56f4\u5185\u4e2a\u6570\uff0c\u8f93\u51fa\u5230\u7ed3\u679c \u7ebf\u6bb5\u6811\u4e2d nums[i] \u90a3\u4e2a\u8282\u70b9\u7684 cnt \u503c+1, \u9012\u5f52\u66f4\u65b0\u76f8\u5173\u8282\u70b9\u7684 cnt \u503c \u8be5\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u5f53 max - min \u975e\u5e38\u5927\u7684\u65f6\u5019\u5360\u7528\u7a7a\u95f4\u5927\u3002\u4f7f\u7528\u8be5\u65b9\u6cd5\u4e4b\u524d\u9700\u8981\u6ce8\u610f\u6570\u636e\u8303\u56f4\u3002 [ python ] \u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u4e4b\u66f4\u4e3a\u901a\u7528\uff0c \u4e0d\u7528\u5728\u610f\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\uff0c\u65b9\u6cd5\u662f\u9884\u5904\u7406\u6570\u7ec4\u3002 \u628a\u6570\u7ec4\u7684\u6bcf\u4e2a\u6570\u5b57\u66ff\u6362\u6210\u6392\u5e8f\u4e4b\u540e\u7684\u7d22\u5f15\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5982\u679c\u6570\u5b57\u76f8\u540c\uff0c\u5176\u6392\u5e8f\u4e4b\u540e\u7684\u7d22\u5f15\u4e5f\u8981\u4fdd\u6301\u4e00\u6837\u3002 [5,2,6,1] --> [2,1,3,0] [5,2,6,2,1] --> [3,1,4,1,0] [2,1,1,0] [2,1,1,0] [3,1,2,1,0] --> [3,1,2,1,0] \u53ef\u4ee5\u770b\u5230\uff0c \u8f6c\u6362\u4e4b\u540e\u7684\u6570\u7ec4\u7ed3\u679c\u8fd8\u662f\u548c\u4e4b\u524d\u4e00\u6837\u7684\uff0c \u4f46\u662f\u6570\u636e\u8303\u56f4\u88ab\u7f29\u653e\u5230[0,len(nums)-1]. \u8fd9\u6837\u9884\u5904\u7406\u4e4b\u540e\u518d\u4f7f\u7528\u4e0a\u9762\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 python","title":"2.1 \u4f7f\u7528\u7ebf\u6bb5\u6811"},{"location":"leetcode/315/readme/#22","text":"\u628a nums \u9884\u5904\u7406\u6210 nums[i] \u7684\u6392\u540d\u4e4b\u540e\uff0c \u6570\u7ec4\u7684\u503c\u7684\u8303\u56f4\u5c31\u548c\u4e0b\u6807\u4e00\u81f4\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u7ef4\u62a4 [begin, end] \u8303\u56f4\uff0c \u800c\u533a\u95f4\u6027\u8d28\u53ea\u9700\u8981\u4e00\u4e2a\u6570\u636e\u4fbf\u53ef\u4ee5\u4fdd\u5b58\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u505a\u3002 \u9884\u5904\u7406 nums \u4e3a\u5176\u6392\u540d \u4ece\u53f3\u5411\u505a\u904d\u5386 nums, \u67e5\u8be2 [0, nums[i]-1] \u533a\u95f4\u5185 cnt \u503c nums[i] \u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff0c\u66f4\u65b0\u5173\u8054\u7684\u8282\u70b9\u7684 cnt \u503c python","title":"2.2 \u4f7f\u7528\u6811\u72b6\u6570\u7ec4"},{"location":"leetcode/315/readme/#23","text":"\u5f52\u5e76\u6392\u5e8f\u5728\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u7684\u65f6\u5019\uff0c \u540e\u9762\u7684\u6570\u7ec4\u4e00\u5b9a\u5728\u524d\u9762\u6570\u7ec4\u6240\u6709\u5143\u7d20\u7684\u540e\u9762\uff0c \u6240\u4ee5\u524d\u9762\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c \u90fd\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u540e\u9762\u6570\u7ec4\u6709\u51e0\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5b83\u3002 \u6211\u4eec\u4f7f\u7528 (num, index) \u66ff\u6362\u6389\u539f\u6765\u7684 nums \u6570\u7ec4\uff0c \u5bf9\u5176\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c \u6bcf\u6b21 merge \u7684\u65f6\u5019\uff0c \u5bf9\u4e8e\u524d\u9762\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20 \u8ba1\u7b97\u540e\u9762\u6570\u7ec4\u4e2d\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u4e2a\u6570\uff0c \u7d2f\u52a0\u5230 ans[index] \u7ed3\u679c\u4e2d\u3002 \u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e\uff0c ans \u4e2d\u4fdd\u5b58\u7684\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c\u3002 python","title":"2.3 \u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u601d\u60f3"},{"location":"leetcode/318/readme/","text":"318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words\uff0c\u627e\u5230 length(word[i]) * length(word[j]) \u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e0d\u542b\u6709\u516c\u5171\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8fd4\u56de 0\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"] \u8f93\u51fa: 16 \u89e3\u91ca: \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a \"abcw\", \"xtfn\"\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"] \u8f93\u51fa: 4 \u89e3\u91ca: \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a \"ab\", \"cd\"\u3002 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165: [\"a\",\"aa\",\"aaa\",\"aaaa\"] \u8f93\u51fa: 0 \u89e3\u91ca: \u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u628a\u5355\u8bcd\u8f6c\u6362\u6210\u6570\u5b57\uff0c\u5229\u7528\u4e0e\u8fd0\u7b97\u5224\u65ad\u6709\u6ca1\u6709\u76f8\u540c\u7684\u5b57\u6bcd\u3002 class Solution ( object ): def maxProduct ( self , words ): \"\"\" :type words: List[str] :rtype: int \"\"\" bits = [] for word in words : b = 0 for c in word : b = b | ( 1 << ( ord ( c ) - ord ( 'a' )) ) bits . append ( b ) ans = 0 for i in range ( len ( bits )): for j in range ( len ( bits )): if i != j and bits [ i ] & bits [ j ] == 0 : ab = len ( words [ i ]) * len ( words [ j ]) ans = max ([ ans , ab ]) return ans","title":"[318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef](https://leetcode-cn.com/problems/maximum-product-of-word-lengths/)"},{"location":"leetcode/318/readme/#318","text":"","title":"318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef"},{"location":"leetcode/318/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words\uff0c\u627e\u5230 length(word[i]) * length(word[j]) \u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e0d\u542b\u6709\u516c\u5171\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8fd4\u56de 0\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"] \u8f93\u51fa: 16 \u89e3\u91ca: \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a \"abcw\", \"xtfn\"\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"] \u8f93\u51fa: 4 \u89e3\u91ca: \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a \"ab\", \"cd\"\u3002 \u793a\u4f8b 3: 1 2 3 \u8f93\u5165: [\"a\",\"aa\",\"aaa\",\"aaaa\"] \u8f93\u51fa: 0 \u89e3\u91ca: \u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/318/readme/#2","text":"\u628a\u5355\u8bcd\u8f6c\u6362\u6210\u6570\u5b57\uff0c\u5229\u7528\u4e0e\u8fd0\u7b97\u5224\u65ad\u6709\u6ca1\u6709\u76f8\u540c\u7684\u5b57\u6bcd\u3002 class Solution ( object ): def maxProduct ( self , words ): \"\"\" :type words: List[str] :rtype: int \"\"\" bits = [] for word in words : b = 0 for c in word : b = b | ( 1 << ( ord ( c ) - ord ( 'a' )) ) bits . append ( b ) ans = 0 for i in range ( len ( bits )): for j in range ( len ( bits )): if i != j and bits [ i ] & bits [ j ] == 0 : ab = len ( words [ i ]) * len ( words [ j ]) ans = max ([ ans , ab ]) return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/327/readme/","text":"327. \u533a\u95f4\u548c\u7684\u4e2a\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u533a\u95f4\u548c\u5728 [lower, upper] \u4e4b\u95f4\u7684\u4e2a\u6570\uff0c\u5305\u542b lower \u548c upper\u3002 \u533a\u95f4\u548c S(i, j) \u8868\u793a\u5728 nums \u4e2d\uff0c\u4f4d\u7f6e\u4ece i \u5230 j \u7684\u5143\u7d20\u4e4b\u548c\uff0c\u5305\u542b i \u548c j (i \u2264 j)\u3002 \u8bf4\u660e: \u6700\u76f4\u89c2\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f O(n2) \uff0c\u8bf7\u5728\u6b64\u57fa\u7840\u4e0a\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165: nums = [-2,5,-1], lower = -2, upper = 2, \u8f93\u51fa: 3 \u89e3\u91ca: 3\u4e2a\u533a\u95f4\u5206\u522b\u662f: [0,0], [2,2], [0,2]\uff0c\u5b83\u4eec\u8868\u793a\u7684\u548c\u5206\u522b\u4e3a: -2, -1, 2\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 3. AC\u4ee3\u7801 \u00b6","title":"[327. \u533a\u95f4\u548c\u7684\u4e2a\u6570](https://leetcode-cn.com/problems/count-of-range-sum)"},{"location":"leetcode/327/readme/#327","text":"","title":"327. \u533a\u95f4\u548c\u7684\u4e2a\u6570"},{"location":"leetcode/327/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u533a\u95f4\u548c\u5728 [lower, upper] \u4e4b\u95f4\u7684\u4e2a\u6570\uff0c\u5305\u542b lower \u548c upper\u3002 \u533a\u95f4\u548c S(i, j) \u8868\u793a\u5728 nums \u4e2d\uff0c\u4f4d\u7f6e\u4ece i \u5230 j \u7684\u5143\u7d20\u4e4b\u548c\uff0c\u5305\u542b i \u548c j (i \u2264 j)\u3002 \u8bf4\u660e: \u6700\u76f4\u89c2\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f O(n2) \uff0c\u8bf7\u5728\u6b64\u57fa\u7840\u4e0a\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165: nums = [-2,5,-1], lower = -2, upper = 2, \u8f93\u51fa: 3 \u89e3\u91ca: 3\u4e2a\u533a\u95f4\u5206\u522b\u662f: [0,0], [2,2], [0,2]\uff0c\u5b83\u4eec\u8868\u793a\u7684\u548c\u5206\u522b\u4e3a: -2, -1, 2\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/327/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/327/readme/#3-ac","text":"","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/336/336/index.c.html","text":"336.c \u00b6","title":"336.c"},{"location":"leetcode/336/336/index.c.html#336c","text":"","title":"336.c"},{"location":"leetcode/336/336_2/index.c.html","text":"336_2.c \u00b6 char tmp [ 1000 ]; bool isHuiwen ( char * word1 , char * word2 ) { int n1 = strlen ( word1 ); int n2 = strlen ( word2 ); int end = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) tmp [ end ++ ] = word1 [ i ]; for ( int i = 0 ; i < n2 ; i ++ ) tmp [ end ++ ] = word2 [ i ]; int left = 0 , right = end - 1 ; while ( left < right ) { if ( tmp [ left ] != tmp [ right ]) { return false ; } left ++ , right -- ; } return true ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** palindromePairs ( char ** words , int wordsSize , int * returnSize , int ** returnColumnSizes ){ int * cols = ( int * ) malloc ( sizeof ( int ) * wordsSize * wordsSize ); int ** ans = ( int ** ) malloc ( sizeof ( int * ) * wordsSize * wordsSize ); int ansEnd = 0 ; for ( int i = 0 ; i < wordsSize * wordsSize ; i ++ ) ans [ i ] = ( int * ) malloc ( sizeof ( int ) * 2 ); for ( int i = 0 ; i < wordsSize * wordsSize ; i ++ ) cols [ i ] = 2 ; for ( int i = 0 ; i < wordsSize ; i ++ ) { for ( int j = 0 ; j < wordsSize ; j ++ ) { if ( i != j && isHuiwen ( words [ i ], words [ j ])) { ans [ ansEnd ][ 0 ] = i ; ans [ ansEnd ][ 1 ] = j ; ansEnd ++ ; } } } * returnSize = ansEnd ; * returnColumnSizes = cols ; return ans ; } /* 80 / 134 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b */","title":"336 2.c"},{"location":"leetcode/336/336_2/index.c.html#336_2c","text":"char tmp [ 1000 ]; bool isHuiwen ( char * word1 , char * word2 ) { int n1 = strlen ( word1 ); int n2 = strlen ( word2 ); int end = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) tmp [ end ++ ] = word1 [ i ]; for ( int i = 0 ; i < n2 ; i ++ ) tmp [ end ++ ] = word2 [ i ]; int left = 0 , right = end - 1 ; while ( left < right ) { if ( tmp [ left ] != tmp [ right ]) { return false ; } left ++ , right -- ; } return true ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** palindromePairs ( char ** words , int wordsSize , int * returnSize , int ** returnColumnSizes ){ int * cols = ( int * ) malloc ( sizeof ( int ) * wordsSize * wordsSize ); int ** ans = ( int ** ) malloc ( sizeof ( int * ) * wordsSize * wordsSize ); int ansEnd = 0 ; for ( int i = 0 ; i < wordsSize * wordsSize ; i ++ ) ans [ i ] = ( int * ) malloc ( sizeof ( int ) * 2 ); for ( int i = 0 ; i < wordsSize * wordsSize ; i ++ ) cols [ i ] = 2 ; for ( int i = 0 ; i < wordsSize ; i ++ ) { for ( int j = 0 ; j < wordsSize ; j ++ ) { if ( i != j && isHuiwen ( words [ i ], words [ j ])) { ans [ ansEnd ][ 0 ] = i ; ans [ ansEnd ][ 1 ] = j ; ansEnd ++ ; } } } * returnSize = ansEnd ; * returnColumnSizes = cols ; return ans ; } /* 80 / 134 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b */","title":"336_2.c"},{"location":"leetcode/336/readme/","text":"336. \u56de\u6587\u5bf9 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u7ec4\u552f\u4e00\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709\u4e0d\u540c \u7684\u7d22\u5f15\u5bf9(i, j)\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c words[i] + words[j] \uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 \u8f93\u5165: [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"] \u8f93\u51fa: [[0,1],[1,0],[3,2],[2,4]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"] \u793a\u4f8b 2: \u8f93\u5165: [\"bat\",\"tab\",\"cat\"] \u8f93\u51fa: [[0,1],[1,0]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"battab\",\"tabbat\"] 2. \u89e3\u9898\u601d\u8def \u00b6 2.1 \u65b9\u6cd5\u4e00 \u00b6 \u66b4\u529b\u679a\u4e3e, 110/134 cases passed (N/A) class Solution: def palindromePairs(self, words: List[str]) -> List[List[int]]: def valid(string): m = len(string) left, right = 0, m-1 while left < right: if string[left] != string[right]: return False left += 1 right -= 1 return True n = len(words) ans = [] for i in range(n): for j in range(n): if i != j: string = words[i] + words[j] if valid(string): ans.append([i, j]) return ans 2.2 \u65b9\u6cd5\u4e8c \u00b6 C","title":"[336. \u56de\u6587\u5bf9](https://leetcode-cn.com/problems/palindrome-pairs)"},{"location":"leetcode/336/readme/#336","text":"","title":"336. \u56de\u6587\u5bf9"},{"location":"leetcode/336/readme/#1","text":"\u7ed9\u5b9a\u4e00\u7ec4\u552f\u4e00\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709\u4e0d\u540c \u7684\u7d22\u5f15\u5bf9(i, j)\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c words[i] + words[j] \uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 \u8f93\u5165: [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"] \u8f93\u51fa: [[0,1],[1,0],[3,2],[2,4]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"] \u793a\u4f8b 2: \u8f93\u5165: [\"bat\",\"tab\",\"cat\"] \u8f93\u51fa: [[0,1],[1,0]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"battab\",\"tabbat\"]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/336/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/336/readme/#21","text":"\u66b4\u529b\u679a\u4e3e, 110/134 cases passed (N/A) class Solution: def palindromePairs(self, words: List[str]) -> List[List[int]]: def valid(string): m = len(string) left, right = 0, m-1 while left < right: if string[left] != string[right]: return False left += 1 right -= 1 return True n = len(words) ans = [] for i in range(n): for j in range(n): if i != j: string = words[i] + words[j] if valid(string): ans.append([i, j]) return ans","title":"2.1 \u65b9\u6cd5\u4e00"},{"location":"leetcode/336/readme/#22","text":"C","title":"2.2 \u65b9\u6cd5\u4e8c"},{"location":"leetcode/336/readme2/","text":"336. \u56de\u6587\u5bf9 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u7ec4\u552f\u4e00\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709\u4e0d\u540c \u7684\u7d22\u5f15\u5bf9(i, j)\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c words[i] + words[j] \uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"] \u8f93\u51fa: [[0,1],[1,0],[3,2],[2,4]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"] \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: [\"bat\",\"tab\",\"cat\"] \u8f93\u51fa: [[0,1],[1,0]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"battab\",\"tabbat\"] 2. \u89e3\u9898\u601d\u8def \u00b6 \u66b4\u529b\u65b9\u6cd5 class Solution : def palindromePairs ( self , words : List [ str ]) -> List [ List [ int ]]: def valid ( string ): m = len ( string ) left , right = 0 , m - 1 while left < right : if string [ left ] != string [ right ]: return False left += 1 right -= 1 return True n = len ( words ) ans = [] for i in range ( n ): for j in range ( n ): if i != j : string = words [ i ] + words [ j ] if valid ( string ): ans . append ([ i , j ]) return ans","title":"[336. \u56de\u6587\u5bf9](https://leetcode-cn.com/problems/palindrome-pairs/)"},{"location":"leetcode/336/readme2/#336","text":"","title":"336. \u56de\u6587\u5bf9"},{"location":"leetcode/336/readme2/#1","text":"\u7ed9\u5b9a\u4e00\u7ec4\u552f\u4e00\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709\u4e0d\u540c \u7684\u7d22\u5f15\u5bf9(i, j)\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c words[i] + words[j] \uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"] \u8f93\u51fa: [[0,1],[1,0],[3,2],[2,4]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"] \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: [\"bat\",\"tab\",\"cat\"] \u8f93\u51fa: [[0,1],[1,0]] \u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"battab\",\"tabbat\"]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/336/readme2/#2","text":"\u66b4\u529b\u65b9\u6cd5 class Solution : def palindromePairs ( self , words : List [ str ]) -> List [ List [ int ]]: def valid ( string ): m = len ( string ) left , right = 0 , m - 1 while left < right : if string [ left ] != string [ right ]: return False left += 1 right -= 1 return True n = len ( words ) ans = [] for i in range ( n ): for j in range ( n ): if i != j : string = words [ i ] + words [ j ] if valid ( string ): ans . append ([ i , j ]) return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/386/readme/","text":"386. \u5b57\u5178\u5e8f\u6392\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n, \u8fd4\u56de\u4ece 1 \u5230 n \u7684\u5b57\u5178\u987a\u5e8f\u3002 \u4f8b\u5982\uff0c 1 2 3 \u7ed9\u5b9a n =1 3\uff0c\u8fd4\u56de [1,10,11,12,13,2,3,4,5,6,7,8,9] \u3002 \u8bf7\u5c3d\u53ef\u80fd\u7684\u4f18\u5316\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u8f93\u5165\u7684\u6570\u636e n \u5c0f\u4e8e\u7b49\u4e8e 5,000,000\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u66b4\u529b\u65b9\u6cd5\uff0c \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c\u6309\u7167\u5b57\u7b26\u4e32\u6bd4\u8f83\u5927\u5c0f\u3002 char * str ( int n ) { char * ans = ( char * ) malloc ( sizeof ( char ) * 1000 ); int ansEnd = 0 ; if ( n == 0 ) { ans [ ansEnd ++ ] = '0' ; ans [ ansEnd ] = '\\0' ; return ans ; } while ( n ) { ans [ ansEnd ++ ] = n % 10 + '0' ; n = n / 10 ; } ans [ ansEnd ] = '\\0' ; int left = 0 ; int right = ansEnd - 1 ; char tmp ; while ( left < right ) { tmp = ans [ left ]; ans [ left ] = ans [ right ]; ans [ right ] = tmp ; left ++ ; right -- ; } return ans ; } int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; char * aString = str ( a ); int aSize = strlen ( aString ); char * bString = str ( b ); int bSize = strlen ( bString ); int i = 0 ; int ans = 0 ; while ( i < aSize && i < bSize ) { if ( aString [ i ] != bString [ i ]) { ans = aString [ i ] - bString [ i ]; break ; } else { i ++ ; } } free ( aString ); free ( bString ); if ( i >= aSize ) return - 1 ; if ( i >= bSize ) return 1 ; return ans ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * lexicalOrder ( int n , int * returnSize ){ int * ans = ( int * ) malloc ( sizeof ( int ) * n ); for ( int i = 1 ; i <= n ; i ++ ) { ans [ i - 1 ] = i ; } qsort ( ans , n , sizeof ( int ), compare ); * returnSize = n ; return ans ; } \u5148\u5e8f\u904d\u538610\u53c9\u6570\uff0c\u76f4\u63a5\u751f\u6210\u7ed3\u679c\u3002","title":"[386. \u5b57\u5178\u5e8f\u6392\u6570](https://leetcode-cn.com/problems/lexicographical-numbers/)"},{"location":"leetcode/386/readme/#386","text":"","title":"386. \u5b57\u5178\u5e8f\u6392\u6570"},{"location":"leetcode/386/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n, \u8fd4\u56de\u4ece 1 \u5230 n \u7684\u5b57\u5178\u987a\u5e8f\u3002 \u4f8b\u5982\uff0c 1 2 3 \u7ed9\u5b9a n =1 3\uff0c\u8fd4\u56de [1,10,11,12,13,2,3,4,5,6,7,8,9] \u3002 \u8bf7\u5c3d\u53ef\u80fd\u7684\u4f18\u5316\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u8f93\u5165\u7684\u6570\u636e n \u5c0f\u4e8e\u7b49\u4e8e 5,000,000\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/386/readme/#2","text":"\u66b4\u529b\u65b9\u6cd5\uff0c \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c\u6309\u7167\u5b57\u7b26\u4e32\u6bd4\u8f83\u5927\u5c0f\u3002 char * str ( int n ) { char * ans = ( char * ) malloc ( sizeof ( char ) * 1000 ); int ansEnd = 0 ; if ( n == 0 ) { ans [ ansEnd ++ ] = '0' ; ans [ ansEnd ] = '\\0' ; return ans ; } while ( n ) { ans [ ansEnd ++ ] = n % 10 + '0' ; n = n / 10 ; } ans [ ansEnd ] = '\\0' ; int left = 0 ; int right = ansEnd - 1 ; char tmp ; while ( left < right ) { tmp = ans [ left ]; ans [ left ] = ans [ right ]; ans [ right ] = tmp ; left ++ ; right -- ; } return ans ; } int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; char * aString = str ( a ); int aSize = strlen ( aString ); char * bString = str ( b ); int bSize = strlen ( bString ); int i = 0 ; int ans = 0 ; while ( i < aSize && i < bSize ) { if ( aString [ i ] != bString [ i ]) { ans = aString [ i ] - bString [ i ]; break ; } else { i ++ ; } } free ( aString ); free ( bString ); if ( i >= aSize ) return - 1 ; if ( i >= bSize ) return 1 ; return ans ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ int * lexicalOrder ( int n , int * returnSize ){ int * ans = ( int * ) malloc ( sizeof ( int ) * n ); for ( int i = 1 ; i <= n ; i ++ ) { ans [ i - 1 ] = i ; } qsort ( ans , n , sizeof ( int ), compare ); * returnSize = n ; return ans ; } \u5148\u5e8f\u904d\u538610\u53c9\u6570\uff0c\u76f4\u63a5\u751f\u6210\u7ed3\u679c\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/39/39/index.c.html","text":"39.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #define MAXANS 3000 #define MAXLINE 1000 int * can = NULL ; int n = 0 ; int * cols = NULL ; int colsEnd = 0 ; int compare ( const void * a , const void * b ) { int n1 = * ( int * ) a ; int n2 = * ( int * ) b ; return n1 - n2 ; } int * deepCopy ( int * arr , int n ) { int * ans = ( int * ) malloc ( sizeof ( int ) * n ); for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ]; } return ans ; } void dfs ( int start , int target , int * line , int lineEnd , int ** ans , int * ansEnd ) { if ( target == 0 ) { ans [( * ansEnd ) ++ ] = deepCopy ( line , lineEnd ); cols [ colsEnd ++ ] = lineEnd ; return ; } for ( int i = start ; i < n ; i ++ ) { if ( can [ i ] > target ) { break ; } line [ lineEnd ++ ] = can [ i ]; dfs ( i , target - can [ i ], line , lineEnd , ans , ansEnd ); lineEnd -- ; } } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** combinationSum ( int * candidates , int candidatesSize , int target , int * returnSize , int ** returnColumnSizes ){ int * colsSize = ( int * ) malloc ( sizeof ( int ) * MAXANS ); int colsSizeEnd = 0 ; int ** ans = ( int ** ) malloc ( sizeof ( int * ) * MAXANS ); int ansEnd = 0 ; if ( candidates == 0 || candidatesSize == 0 || target <= 0 ) { * returnSize = 0 ; * returnColumnSizes = colsSize ; return NULL ; } can = candidates ; n = candidatesSize ; cols = colsSize ; colsEnd = colsSizeEnd ; int * line = ( int * ) malloc ( sizeof ( int ) * MAXLINE ); int lineEnd = 0 ; qsort ( can , n , sizeof ( int ), compare ); dfs ( 0 , target , line , lineEnd , ans , & ansEnd ); * returnSize = ansEnd ; * returnColumnSizes = colsSize ; free ( line ); return ans ; } int main () { return 0 ; }","title":"39.c"},{"location":"leetcode/39/39/index.c.html#39c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #define MAXANS 3000 #define MAXLINE 1000 int * can = NULL ; int n = 0 ; int * cols = NULL ; int colsEnd = 0 ; int compare ( const void * a , const void * b ) { int n1 = * ( int * ) a ; int n2 = * ( int * ) b ; return n1 - n2 ; } int * deepCopy ( int * arr , int n ) { int * ans = ( int * ) malloc ( sizeof ( int ) * n ); for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ]; } return ans ; } void dfs ( int start , int target , int * line , int lineEnd , int ** ans , int * ansEnd ) { if ( target == 0 ) { ans [( * ansEnd ) ++ ] = deepCopy ( line , lineEnd ); cols [ colsEnd ++ ] = lineEnd ; return ; } for ( int i = start ; i < n ; i ++ ) { if ( can [ i ] > target ) { break ; } line [ lineEnd ++ ] = can [ i ]; dfs ( i , target - can [ i ], line , lineEnd , ans , ansEnd ); lineEnd -- ; } } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** combinationSum ( int * candidates , int candidatesSize , int target , int * returnSize , int ** returnColumnSizes ){ int * colsSize = ( int * ) malloc ( sizeof ( int ) * MAXANS ); int colsSizeEnd = 0 ; int ** ans = ( int ** ) malloc ( sizeof ( int * ) * MAXANS ); int ansEnd = 0 ; if ( candidates == 0 || candidatesSize == 0 || target <= 0 ) { * returnSize = 0 ; * returnColumnSizes = colsSize ; return NULL ; } can = candidates ; n = candidatesSize ; cols = colsSize ; colsEnd = colsSizeEnd ; int * line = ( int * ) malloc ( sizeof ( int ) * MAXLINE ); int lineEnd = 0 ; qsort ( can , n , sizeof ( int ), compare ); dfs ( 0 , target , line , lineEnd , ans , & ansEnd ); * returnSize = ansEnd ; * returnColumnSizes = colsSize ; free ( line ); return ans ; } int main () { return 0 ; }","title":"39.c"},{"location":"leetcode/39/39/index.cpp.html","text":"39.cpp \u00b6 #include <vector> #include <string> #include <stack> #include <algorithm> #include <deque> using namespace std ; class Solution { public : void dfs ( int start , int target , vector < int > & line , vector < vector < int >> & ans , vector < int >& candidates ) { if ( target == 0 ) { ans . push_back ( line ); return ; } for ( int i = start ; i < candidates . size (); i ++ ) { if ( candidates [ i ] > target ) { break ; } line . push_back ( candidates [ i ]); dfs ( i , target - candidates [ i ], line , ans , candidates ); line . pop_back (); } return ; } vector < vector < int >> combinationSum ( vector < int >& candidates , int target ) { vector < vector < int >> ans ; if ( candidates . size () == 0 ) { return ans ; } vector < int > line ; sort ( candidates . begin (), candidates . end ()); dfs ( 0 , target , line , ans , candidates ); return ans ; } }; int main () { Solution * s = new Solution (); vector < int > can = { 2 , 3 , 6 , 7 }; int target = 7 ; auto ans = s -> combinationSum ( can , target ); return 0 ; }","title":"39.cpp"},{"location":"leetcode/39/39/index.cpp.html#39cpp","text":"#include <vector> #include <string> #include <stack> #include <algorithm> #include <deque> using namespace std ; class Solution { public : void dfs ( int start , int target , vector < int > & line , vector < vector < int >> & ans , vector < int >& candidates ) { if ( target == 0 ) { ans . push_back ( line ); return ; } for ( int i = start ; i < candidates . size (); i ++ ) { if ( candidates [ i ] > target ) { break ; } line . push_back ( candidates [ i ]); dfs ( i , target - candidates [ i ], line , ans , candidates ); line . pop_back (); } return ; } vector < vector < int >> combinationSum ( vector < int >& candidates , int target ) { vector < vector < int >> ans ; if ( candidates . size () == 0 ) { return ans ; } vector < int > line ; sort ( candidates . begin (), candidates . end ()); dfs ( 0 , target , line , ans , candidates ); return ans ; } }; int main () { Solution * s = new Solution (); vector < int > can = { 2 , 3 , 6 , 7 }; int target = 7 ; auto ans = s -> combinationSum ( can , target ); return 0 ; }","title":"39.cpp"},{"location":"leetcode/39/39/index.py.html","text":"39.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Solution : def dfs ( self , start , target , line , ans , candidates ): if target == 0 : ans . append ( line [:]) return for i in range ( start , len ( candidates )): if candidates [ i ] > target : break line . append ( candidates [ i ]) self . dfs ( i , target - candidates [ i ], line , ans , candidates ) line . pop () return def combinationSum ( self , candidates : List [ int ], target : int ) -> List [ List [ int ]]: line = [] ans = [] if ( len ( candidates ) == 0 ): return ans candidates = sorted ( candidates ) self . dfs ( 0 , target , line , ans , candidates ) return ans s = Solution () ans = s . combinationSum ([ 2 , 7 , 6 , 3 ], 7 ) print ( ans )","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/39/39/index.py.html#39py","text":"# -*- coding:utf-8 -*- from typing import List class Solution : def dfs ( self , start , target , line , ans , candidates ): if target == 0 : ans . append ( line [:]) return for i in range ( start , len ( candidates )): if candidates [ i ] > target : break line . append ( candidates [ i ]) self . dfs ( i , target - candidates [ i ], line , ans , candidates ) line . pop () return def combinationSum ( self , candidates : List [ int ], target : int ) -> List [ List [ int ]]: line = [] ans = [] if ( len ( candidates ) == 0 ): return ans candidates = sorted ( candidates ) self . dfs ( 0 , target , line , ans , candidates ) return ans s = Solution () ans = s . combinationSum ([ 2 , 7 , 6 , 3 ], 7 ) print ( ans )","title":"39.py"},{"location":"leetcode/39/readme/","text":"39. \u7ec4\u5408\u603b\u548c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a 1 2 \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 \u8f93\u5165: candidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [7], [2,2,3] ] \u793a\u4f8b 2: 1 2 3 4 5 6 7 \u8f93\u5165: candidates = [2,3,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [2,2,2,2], [2,3,3], [3,5] ] 2. \u89e3\u9898\u601d\u8def \u00b6 \u9996\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c \u7136\u540e\u5c1d\u8bd5\u6bcf\u4e2a\u5f53\u524d\u5143\u7d20\u5230\u6700\u5927\u6b21\u6570(\u7d2f\u52a0\u8d85\u8fc7\u76ee\u6807\u503c) 3. AC\u4ee3\u7801 \u00b6 C C++ Python","title":"[39. \u7ec4\u5408\u603b\u548c](https://leetcode-cn.com/problems/combination-sum)"},{"location":"leetcode/39/readme/#39","text":"","title":"39. \u7ec4\u5408\u603b\u548c"},{"location":"leetcode/39/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a 1 2 \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 \u8f93\u5165: candidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [7], [2,2,3] ] \u793a\u4f8b 2: 1 2 3 4 5 6 7 \u8f93\u5165: candidates = [2,3,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [2,2,2,2], [2,3,3], [3,5] ]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/39/readme/#2","text":"\u9996\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c \u7136\u540e\u5c1d\u8bd5\u6bcf\u4e2a\u5f53\u524d\u5143\u7d20\u5230\u6700\u5927\u6b21\u6570(\u7d2f\u52a0\u8d85\u8fc7\u76ee\u6807\u503c)","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/39/readme/#3-ac","text":"C C++ Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/4/readme/","text":"4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2\u3002 \u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log(m + n))\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u548c nums2 \u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002 \u793a\u4f8b \u793a\u4f8b 1: nums1 = [1, 3] nums2 = [2] \u5219\u4e2d\u4f4d\u6570\u662f 2.0 \u793a\u4f8b 2: nums1 = [1, 2] nums2 = [3, 4] \u5219\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5 2. \u89e3\u9898\u601d\u8def1 \u00b6 \u66b4\u529b\u89e3\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u628a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76(O(m+n)), \u518d\u53d6\u51fa\u4e2d\u4f4d\u6570(O(1)),\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u4e0d\u7b26\u5408\u8981\u6c42\u3002 \u4e0d\u989d\u5916\u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u5408\u5e76\u4e4b\u540e\u7684\u6570\u7ec4\uff0c\u53ea\u7528\u4e24\u4e2a\u6307\u9488\u8bb0\u5f55\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709 \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d0\u5347\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u66b4\u529b\u65b9\u6cd5\u3002 2.1 C++ \u00b6 class Solution { public : double findMedianSortedArrays ( vector < int >& nums1 , vector < int >& nums2 ) { int i = 0 ; int j = 0 ; int size1 = nums1 . size (); int size2 = nums2 . size (); vector < int > merge ; while ( i < size1 && j < size2 ) { if ( nums1 [ i ] <= nums2 [ j ]) { merge . push_back ( nums1 [ i ]); i ++ ; } else { merge . push_back ( nums2 [ j ]); j ++ ; } } while ( i < size1 ) { merge . push_back ( nums1 [ i ]); i ++ ; } while ( j < size2 ) { merge . push_back ( nums2 [ j ]); j ++ ; } int size3 = merge . size (); if ( size3 % 2 == 0 ) { int pos2 = size3 / 2 ; int pos1 = pos2 - 1 ; float ans = ( merge [ pos1 ] + merge [ pos2 ]) / 2.0 ; return ans ; } else { float ans = ( float ) merge [ size3 / 2 ]; return ans ; } return - 1 ; } }; 2.2 python \u00b6 class Solution : def findMedianSortedArrays ( self , nums1 : List [ int ], nums2 : List [ int ]) -> float : i = 0 j = 0 merge = [] while ( i < len ( nums1 ) and j < len ( nums2 )): if nums1 [ i ] <= nums2 [ j ]: merge . append ( nums1 [ i ]) i = i + 1 else : merge . append ( nums2 [ j ]) j = j + 1 while i < len ( nums1 ): merge . append ( nums1 [ i ]) i = i + 1 while j < len ( nums2 ): merge . append ( nums2 [ j ]) j = j + 1 if ( len ( merge ) % 2 == 0 ): pos2 = len ( merge ) // 2 pos1 = pos2 - 1 ans = ( merge [ pos1 ] + merge [ pos2 ]) / 2.0 return ans else : ans = float ( merge [ len ( merge ) // 2 ] ) return ans 3. \u89e3\u9898\u601d\u8def2 \u00b6 \u4e2d\u4f4d\u6570\u662f\u628a\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\uff0c\u4f4d\u4e8e\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u5b57\uff0c\u5982\u679c\u4e2d\u95f4\u4f4d\u7f6e\u6709\u4e24\u4e2a\u6570\u5b57\uff0c\u4e2d\u4f4d\u6570\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u5b57\u7684\u5e73\u5747\u503c\u3002 \u8bbe\u6570\u7ec4 array \u5143\u7d20\u4e2a\u6570\u4e3an, n\u4e3a\u5947\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4f4d\u7f6e\u4e3ai; i + 1 = n - i + 1 - 1, \u5373\u5de6\u4fa7\u5143\u7d20\u6570\u91cf = \u53f3\u4fa7\u5143\u7d20\u6570\u91cf + 1 \u5982\u679cn\u4e3a\u5076\u6570, \u4e2d\u4f4d\u6570\u7684\u4f4d\u7f6e\u4e3a i, i+1; i = (n - (i+1)) + 1, \u5373\u5de6\u4fa7\u5143\u7d20\u6570\u91cf = \u53f3\u4fa7\u5143\u7d20\u6570\u91cf \u4e0a\u9762\u4e24\u4e2a\u516c\u5f0f\u8ba1\u7b97\u51fa i = n / 2 (\u6574\u6570\u9664\u6cd5). \u5f53\u6709\u4e24\u4e2a\u6570\u7ec4 A, B \u7684\u65f6\u5019\uff0c \u6211\u4eec\u7528 i, j \u5206\u5272 A, B \u4e3a\u524d\u540e\u4e24\u4e2a\u90e8\u5206, m, n \u5206\u522b\u662f A\uff0c B\u7684\u5927\u5c0f\u3002 left_part | right_part A[0], A[1], ..., A[i - 1] | A[i], A[i+1], ..., A[m-1] B[0], B[1], ..., B[j - 1] | B[j], B[j+1], ..., B[n-1] \u5f53 len(left_part) == len(right_part) \u4e14 max(left_part) <= min(right_part) \u7684\u65f6\u5019\uff0c \u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e2d\u4f4d\u6570\u3002 - (m + n) / 2 == 0, midian = (max(left_part) + min(right_part)) / 2 - (m + n) / 2 != 0, midian = max(left_part) \u5de6\u534a\u90e8\u5206\u957f\u5ea6 = \u53f3\u534a\u90e8\u5206\u957f\u5ea6\uff0c \u5c31\u662f i + j = (m - i + n - j) \u6216\u8005 i + j = (m - i + n - j) + 1, \u5947\u6570\u65f6\u53f3\u4fa7\u5c11\u4e00\u4e2a\u5143\u7d20\u3002 \u6362\u7b97\u4e4b\u540e\u5f97\u5230 i + j = (m + n + 1) / 2; \u6211\u4eec\u904d\u5386i, \u4ece0\u5230m-1, \u627e\u5230\u5bf9\u5e94\u7684j\uff0c \u7136\u540e\u68c0\u67e5max(left_part) <= min(right_part)\uff0c \u4e00\u65e6\u6ee1\u8db3\u8981\u6c42\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u7ed3\u679c\u3002 #define MAX(a, b) ((a) > (b) ? (a) : (b)) #define MIN(a, b) ((a) < (b) ? (a) : (b)) double findMedianSortedArrays ( int * nums1 , int nums1Size , int * nums2 , int nums2Size ){ if ( nums1Size > nums2Size ) { return findMedianSortedArrays ( nums2 , nums2Size , nums1 , nums1Size ); } int m = nums1Size ; int n = nums2Size ; int i , j , mid1 , mid2 ; int left_max , right_min ; if ( m <= 0 ) { if ( n % 2 != 0 ) return ( double ) nums2 [ n / 2 ]; if ( n % 2 == 0 ) return ( nums2 [ n / 2 - 1 ] + nums2 [ n / 2 ]) / 2.0 ; } if ( n <= 0 ) { if ( m % 2 != 0 ) return ( double ) nums1 [ m / 2 ]; if ( m % 2 == 0 ) return ( nums1 [ m / 2 - 1 ] + nums1 [ m / 2 ]) / 2.0 ; } // i = 0 \u65f6\u8868\u793a nums1 \u4e2d\u4e0d\u53d6\u503c\uff0c i = m \u8868\u793a nums1 \u4e2d\u7684\u503c\u5168\u90e8\u5728left_part for ( i = 0 ; i <= m ; i ++ ) { j = ( m + n + 1 ) / 2 - i ; // left_max \u662f max(A[i-1], B[j-1]), \u56e0\u4e3a\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u53ea\u8981\u6bd4\u8f83\u6700\u540e\u4e24\u4e2a\u7684\u5927\u5c0f if ( i == 0 ) left_max = nums2 [ j - 1 ]; else if ( j == 0 ) left_max = nums1 [ i - 1 ]; else { left_max = MAX ( nums1 [ i - 1 ], nums2 [ j - 1 ]); } // right_min \u53d6\u6700\u5f00\u59cb\u4e24\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u503c if ( i == m ) right_min = nums2 [ j ]; else if ( j == n ) right_min = nums1 [ i ]; else right_min = MIN ( nums1 [ i ], nums2 [ j ]); if ( left_max <= right_min ) { if (( m + n ) % 2 == 0 ) return ( left_max + right_min ) / 2.0 ; if (( m + n ) % 2 != 0 ) return ( double ) left_max ; } } return 0.0 ; } \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m), \u662f\u5927\u4e8e\u9898\u76ee\u8981\u6c42 O(log(m + n)) O(log(m + n)) \u7684\u3002 \u53ea\u8981\u5728\u67e5\u627e\u7684\u65f6\u5019\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c \u56e0\u4e3a\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c \u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u4f4e\u5230 O(log(min(m,n))) O(log(min(m,n))) . double findMedianSortedArrays ( int * nums1 , int nums1Size , int * nums2 , int nums2Size ){ if ( nums1Size > nums2Size ) { return findMedianSortedArrays ( nums2 , nums2Size , nums1 , nums1Size ); } // i \u6307\u5411 nums1 \u7684\u524d\u534a\u90e8\u5206\uff0c j \u6307\u5411 nums2 \u7684\u524d\u534a\u90e8\u5206 // nums1 + nums2 \u7684\u524d\u534a\u90e8\u5206 \u548c \u540e\u534a\u90e8\u5206\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u627e\u5230\u4e2d\u4f4d\u6570 // nums1Size + nums2Size \u662f\u5076\u6570\uff0c len(left_part) == len(right_part) \u4e14 max(left_part) <= min(right_part) // nums1Size + nums2Size \u662f\u5947\u6570\uff0c len(left_part) == len(right_part) + 1 \u4e14 max(left_part) <= min(right_part) // \u5982\u679c\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u627e\u5230\u4e2d\u4f4d\u6570\uff0c\u56e0\u4e3a\u4e2d\u4f4d\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5206\u5272\u6570\u7ec4\u4e3a\u4e24\u4e2a\u6570\u91cf\u76f8\u7b49\u7684\u90e8\u5206\uff0c \u4f7f\u5f97\u524d\u9762\u7684\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u540e\u9762\u7684 // i + j = nums1Size - i + nums2Size - j , \u5982\u679c i \u662f\u5076\u6570 // i + j = nums1Size - i + nums2Size - j + 1, \u5982\u679c i \u662f\u5947\u6570 // \u6362\u7b97\u51fa i \u548c j \u7684\u5173\u7cfb\uff1a i + j = (nums1Size + nums2Size + 1) / 2, \u9664\u662f\u6574\u6570\u9664\u6cd5\uff0c\u4e0d\u7528\u533a\u5206\u5947\u6570\u5076\u6570 int left = 0 ; int right = nums1Size ; int mid1 , mid2 ; // \u5b58\u50a8\u6700\u4e2d\u95f4\u7684\u4e24\u4e2a\u6216\u8005\u4e00\u4e2a\u6570\u5b57 while ( left <= right ) { // \u4ece nums1 \u4e2d\u95f4\u4f4d\u7f6e\u5f00\u59cb\u641c\u7d22 int i = ( left + right ) / 2 ; int j = ( nums1Size + nums2Size + 1 ) / 2 - i ; // \u8fb9\u754c\u60c5\u51b5\u7684\u5904\u7406\uff0c\u5982\u679c\u662f\u524d\u534a\u90e8\u5206\u7684\u8fb9\u754c\uff0c \u8bbe\u7f6e\u6210\u6700\u5c0f\u503c // \u5982\u679c\u662f\u540e\u534a\u90e8\u5206\u7684\u8fb9\u754c\uff0c\u8bbe\u7f6e\u6210\u6700\u5927\u503c // nums[i-1], nums[i], nums[j-1], nums[j] \u8fb9\u754c\u6ce8\u610f int nums_i_1 = ( i == 0 ) ? INT_MIN : nums1 [ i - 1 ]; int nums_i = ( i == nums1Size ) ? INT_MAX : nums1 [ i ]; int nums_j_1 = ( j == 0 ) ? INT_MIN : nums2 [ j - 1 ]; int nums_j = ( j == nums2Size ) ? INT_MAX : nums2 [ j ]; // nums[i-1] <= nums[j] \u4e14 nums[j - 1] <= nums[i] \u7684\u65f6\u5019\uff0c\u5373\u627e\u5230 // nums[i-1] <= nums[j] \u7684\u65f6\u5019, \u7ee7\u7eed\u589e\u52a0i, \u5426\u5219\u51cf\u5c11i if ( nums_i_1 <= nums_j ) { mid1 = ( nums_i_1 > nums_j_1 ) ? nums_i_1 : nums_j_1 ; mid2 = ( nums_i < nums_j ) ? nums_i : nums_j ; left = i + 1 ; } else { right = i - 1 ; } } float ans = - 99999 ; if (( nums1Size + nums2Size ) % 2 == 0 ) { ans = ( mid1 + mid2 ) / 2.0 ; } else { ans = mid1 ; } return ans ; }","title":"Readme"},{"location":"leetcode/4/readme/#4","text":"","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},{"location":"leetcode/4/readme/#1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2\u3002 \u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log(m + n))\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u548c nums2 \u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002 \u793a\u4f8b \u793a\u4f8b 1: nums1 = [1, 3] nums2 = [2] \u5219\u4e2d\u4f4d\u6570\u662f 2.0 \u793a\u4f8b 2: nums1 = [1, 2] nums2 = [3, 4] \u5219\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/4/readme/#2-1","text":"\u66b4\u529b\u89e3\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u628a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76(O(m+n)), \u518d\u53d6\u51fa\u4e2d\u4f4d\u6570(O(1)),\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u4e0d\u7b26\u5408\u8981\u6c42\u3002 \u4e0d\u989d\u5916\u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u5408\u5e76\u4e4b\u540e\u7684\u6570\u7ec4\uff0c\u53ea\u7528\u4e24\u4e2a\u6307\u9488\u8bb0\u5f55\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709 \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d0\u5347\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u66b4\u529b\u65b9\u6cd5\u3002","title":"2. \u89e3\u9898\u601d\u8def1"},{"location":"leetcode/4/readme/#21-c","text":"class Solution { public : double findMedianSortedArrays ( vector < int >& nums1 , vector < int >& nums2 ) { int i = 0 ; int j = 0 ; int size1 = nums1 . size (); int size2 = nums2 . size (); vector < int > merge ; while ( i < size1 && j < size2 ) { if ( nums1 [ i ] <= nums2 [ j ]) { merge . push_back ( nums1 [ i ]); i ++ ; } else { merge . push_back ( nums2 [ j ]); j ++ ; } } while ( i < size1 ) { merge . push_back ( nums1 [ i ]); i ++ ; } while ( j < size2 ) { merge . push_back ( nums2 [ j ]); j ++ ; } int size3 = merge . size (); if ( size3 % 2 == 0 ) { int pos2 = size3 / 2 ; int pos1 = pos2 - 1 ; float ans = ( merge [ pos1 ] + merge [ pos2 ]) / 2.0 ; return ans ; } else { float ans = ( float ) merge [ size3 / 2 ]; return ans ; } return - 1 ; } };","title":"2.1 C++"},{"location":"leetcode/4/readme/#22-python","text":"class Solution : def findMedianSortedArrays ( self , nums1 : List [ int ], nums2 : List [ int ]) -> float : i = 0 j = 0 merge = [] while ( i < len ( nums1 ) and j < len ( nums2 )): if nums1 [ i ] <= nums2 [ j ]: merge . append ( nums1 [ i ]) i = i + 1 else : merge . append ( nums2 [ j ]) j = j + 1 while i < len ( nums1 ): merge . append ( nums1 [ i ]) i = i + 1 while j < len ( nums2 ): merge . append ( nums2 [ j ]) j = j + 1 if ( len ( merge ) % 2 == 0 ): pos2 = len ( merge ) // 2 pos1 = pos2 - 1 ans = ( merge [ pos1 ] + merge [ pos2 ]) / 2.0 return ans else : ans = float ( merge [ len ( merge ) // 2 ] ) return ans","title":"2.2 python"},{"location":"leetcode/4/readme/#3-2","text":"\u4e2d\u4f4d\u6570\u662f\u628a\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\uff0c\u4f4d\u4e8e\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u5b57\uff0c\u5982\u679c\u4e2d\u95f4\u4f4d\u7f6e\u6709\u4e24\u4e2a\u6570\u5b57\uff0c\u4e2d\u4f4d\u6570\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u5b57\u7684\u5e73\u5747\u503c\u3002 \u8bbe\u6570\u7ec4 array \u5143\u7d20\u4e2a\u6570\u4e3an, n\u4e3a\u5947\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4f4d\u7f6e\u4e3ai; i + 1 = n - i + 1 - 1, \u5373\u5de6\u4fa7\u5143\u7d20\u6570\u91cf = \u53f3\u4fa7\u5143\u7d20\u6570\u91cf + 1 \u5982\u679cn\u4e3a\u5076\u6570, \u4e2d\u4f4d\u6570\u7684\u4f4d\u7f6e\u4e3a i, i+1; i = (n - (i+1)) + 1, \u5373\u5de6\u4fa7\u5143\u7d20\u6570\u91cf = \u53f3\u4fa7\u5143\u7d20\u6570\u91cf \u4e0a\u9762\u4e24\u4e2a\u516c\u5f0f\u8ba1\u7b97\u51fa i = n / 2 (\u6574\u6570\u9664\u6cd5). \u5f53\u6709\u4e24\u4e2a\u6570\u7ec4 A, B \u7684\u65f6\u5019\uff0c \u6211\u4eec\u7528 i, j \u5206\u5272 A, B \u4e3a\u524d\u540e\u4e24\u4e2a\u90e8\u5206, m, n \u5206\u522b\u662f A\uff0c B\u7684\u5927\u5c0f\u3002 left_part | right_part A[0], A[1], ..., A[i - 1] | A[i], A[i+1], ..., A[m-1] B[0], B[1], ..., B[j - 1] | B[j], B[j+1], ..., B[n-1] \u5f53 len(left_part) == len(right_part) \u4e14 max(left_part) <= min(right_part) \u7684\u65f6\u5019\uff0c \u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e2d\u4f4d\u6570\u3002 - (m + n) / 2 == 0, midian = (max(left_part) + min(right_part)) / 2 - (m + n) / 2 != 0, midian = max(left_part) \u5de6\u534a\u90e8\u5206\u957f\u5ea6 = \u53f3\u534a\u90e8\u5206\u957f\u5ea6\uff0c \u5c31\u662f i + j = (m - i + n - j) \u6216\u8005 i + j = (m - i + n - j) + 1, \u5947\u6570\u65f6\u53f3\u4fa7\u5c11\u4e00\u4e2a\u5143\u7d20\u3002 \u6362\u7b97\u4e4b\u540e\u5f97\u5230 i + j = (m + n + 1) / 2; \u6211\u4eec\u904d\u5386i, \u4ece0\u5230m-1, \u627e\u5230\u5bf9\u5e94\u7684j\uff0c \u7136\u540e\u68c0\u67e5max(left_part) <= min(right_part)\uff0c \u4e00\u65e6\u6ee1\u8db3\u8981\u6c42\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u7ed3\u679c\u3002 #define MAX(a, b) ((a) > (b) ? (a) : (b)) #define MIN(a, b) ((a) < (b) ? (a) : (b)) double findMedianSortedArrays ( int * nums1 , int nums1Size , int * nums2 , int nums2Size ){ if ( nums1Size > nums2Size ) { return findMedianSortedArrays ( nums2 , nums2Size , nums1 , nums1Size ); } int m = nums1Size ; int n = nums2Size ; int i , j , mid1 , mid2 ; int left_max , right_min ; if ( m <= 0 ) { if ( n % 2 != 0 ) return ( double ) nums2 [ n / 2 ]; if ( n % 2 == 0 ) return ( nums2 [ n / 2 - 1 ] + nums2 [ n / 2 ]) / 2.0 ; } if ( n <= 0 ) { if ( m % 2 != 0 ) return ( double ) nums1 [ m / 2 ]; if ( m % 2 == 0 ) return ( nums1 [ m / 2 - 1 ] + nums1 [ m / 2 ]) / 2.0 ; } // i = 0 \u65f6\u8868\u793a nums1 \u4e2d\u4e0d\u53d6\u503c\uff0c i = m \u8868\u793a nums1 \u4e2d\u7684\u503c\u5168\u90e8\u5728left_part for ( i = 0 ; i <= m ; i ++ ) { j = ( m + n + 1 ) / 2 - i ; // left_max \u662f max(A[i-1], B[j-1]), \u56e0\u4e3a\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u53ea\u8981\u6bd4\u8f83\u6700\u540e\u4e24\u4e2a\u7684\u5927\u5c0f if ( i == 0 ) left_max = nums2 [ j - 1 ]; else if ( j == 0 ) left_max = nums1 [ i - 1 ]; else { left_max = MAX ( nums1 [ i - 1 ], nums2 [ j - 1 ]); } // right_min \u53d6\u6700\u5f00\u59cb\u4e24\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u503c if ( i == m ) right_min = nums2 [ j ]; else if ( j == n ) right_min = nums1 [ i ]; else right_min = MIN ( nums1 [ i ], nums2 [ j ]); if ( left_max <= right_min ) { if (( m + n ) % 2 == 0 ) return ( left_max + right_min ) / 2.0 ; if (( m + n ) % 2 != 0 ) return ( double ) left_max ; } } return 0.0 ; } \u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m), \u662f\u5927\u4e8e\u9898\u76ee\u8981\u6c42 O(log(m + n)) O(log(m + n)) \u7684\u3002 \u53ea\u8981\u5728\u67e5\u627e\u7684\u65f6\u5019\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c \u56e0\u4e3a\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c \u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u4f4e\u5230 O(log(min(m,n))) O(log(min(m,n))) . double findMedianSortedArrays ( int * nums1 , int nums1Size , int * nums2 , int nums2Size ){ if ( nums1Size > nums2Size ) { return findMedianSortedArrays ( nums2 , nums2Size , nums1 , nums1Size ); } // i \u6307\u5411 nums1 \u7684\u524d\u534a\u90e8\u5206\uff0c j \u6307\u5411 nums2 \u7684\u524d\u534a\u90e8\u5206 // nums1 + nums2 \u7684\u524d\u534a\u90e8\u5206 \u548c \u540e\u534a\u90e8\u5206\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u627e\u5230\u4e2d\u4f4d\u6570 // nums1Size + nums2Size \u662f\u5076\u6570\uff0c len(left_part) == len(right_part) \u4e14 max(left_part) <= min(right_part) // nums1Size + nums2Size \u662f\u5947\u6570\uff0c len(left_part) == len(right_part) + 1 \u4e14 max(left_part) <= min(right_part) // \u5982\u679c\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u627e\u5230\u4e2d\u4f4d\u6570\uff0c\u56e0\u4e3a\u4e2d\u4f4d\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5206\u5272\u6570\u7ec4\u4e3a\u4e24\u4e2a\u6570\u91cf\u76f8\u7b49\u7684\u90e8\u5206\uff0c \u4f7f\u5f97\u524d\u9762\u7684\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u540e\u9762\u7684 // i + j = nums1Size - i + nums2Size - j , \u5982\u679c i \u662f\u5076\u6570 // i + j = nums1Size - i + nums2Size - j + 1, \u5982\u679c i \u662f\u5947\u6570 // \u6362\u7b97\u51fa i \u548c j \u7684\u5173\u7cfb\uff1a i + j = (nums1Size + nums2Size + 1) / 2, \u9664\u662f\u6574\u6570\u9664\u6cd5\uff0c\u4e0d\u7528\u533a\u5206\u5947\u6570\u5076\u6570 int left = 0 ; int right = nums1Size ; int mid1 , mid2 ; // \u5b58\u50a8\u6700\u4e2d\u95f4\u7684\u4e24\u4e2a\u6216\u8005\u4e00\u4e2a\u6570\u5b57 while ( left <= right ) { // \u4ece nums1 \u4e2d\u95f4\u4f4d\u7f6e\u5f00\u59cb\u641c\u7d22 int i = ( left + right ) / 2 ; int j = ( nums1Size + nums2Size + 1 ) / 2 - i ; // \u8fb9\u754c\u60c5\u51b5\u7684\u5904\u7406\uff0c\u5982\u679c\u662f\u524d\u534a\u90e8\u5206\u7684\u8fb9\u754c\uff0c \u8bbe\u7f6e\u6210\u6700\u5c0f\u503c // \u5982\u679c\u662f\u540e\u534a\u90e8\u5206\u7684\u8fb9\u754c\uff0c\u8bbe\u7f6e\u6210\u6700\u5927\u503c // nums[i-1], nums[i], nums[j-1], nums[j] \u8fb9\u754c\u6ce8\u610f int nums_i_1 = ( i == 0 ) ? INT_MIN : nums1 [ i - 1 ]; int nums_i = ( i == nums1Size ) ? INT_MAX : nums1 [ i ]; int nums_j_1 = ( j == 0 ) ? INT_MIN : nums2 [ j - 1 ]; int nums_j = ( j == nums2Size ) ? INT_MAX : nums2 [ j ]; // nums[i-1] <= nums[j] \u4e14 nums[j - 1] <= nums[i] \u7684\u65f6\u5019\uff0c\u5373\u627e\u5230 // nums[i-1] <= nums[j] \u7684\u65f6\u5019, \u7ee7\u7eed\u589e\u52a0i, \u5426\u5219\u51cf\u5c11i if ( nums_i_1 <= nums_j ) { mid1 = ( nums_i_1 > nums_j_1 ) ? nums_i_1 : nums_j_1 ; mid2 = ( nums_i < nums_j ) ? nums_i : nums_j ; left = i + 1 ; } else { right = i - 1 ; } } float ans = - 99999 ; if (( nums1Size + nums2Size ) % 2 == 0 ) { ans = ( mid1 + mid2 ) / 2.0 ; } else { ans = mid1 ; } return ans ; }","title":"3. \u89e3\u9898\u601d\u8def2"},{"location":"leetcode/40/40/index.c.html","text":"40.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_ONE_LINE 1000 #define MAX_ANS_SIZE 1000 int ** lines ; int linesEnd = 0 ; int * columnsSize ; int columnsSizeEnd = 0 ; int * arrayGlobal ; int n ; int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; return a - b ; } int * deepCopy ( int * array , int size ) { int * newArray = ( int * ) malloc ( sizeof ( int ) * size ); memcpy ( newArray , array , sizeof ( int ) * size ); return newArray ; } void dfs ( int i , int target , int * line , int * lineEnd ) { // \u5982\u679c\u5f97\u5230\u7ed3\u679c\uff0c\u5b58\u50a8 if ( target == 0 ) { lines [ linesEnd ++ ] = deepCopy ( line , * lineEnd ); columnsSize [ columnsSizeEnd ++ ] = * lineEnd ; return ; } for ( int j = i + 1 ; j < n ; j ++ ) { if ( j > i + 1 && arrayGlobal [ j ] == arrayGlobal [ j - 1 ]) { continue ; } if ( arrayGlobal [ j ] > target ) { break ; } line [( * lineEnd ) ++ ] = arrayGlobal [ j ]; dfs ( j , target - arrayGlobal [ j ], line , lineEnd ); ( * lineEnd ) -- ; } return ; } int ** combinationSum2 ( int * candidates , int candidatesSize , int target , int * returnSize , int ** returnColumnSizes ) { // \u5b58\u50a8\u4e00\u8d9f\u641c\u7d22\u7ed3\u679c int * line = ( int * ) malloc ( sizeof ( int ) * MAX_ONE_LINE ); int lineEnd = 0 ; // \u5b58\u50a8\u6700\u7ec8\u641c\u7d22\u7ed3\u679c lines = ( int ** ) malloc ( sizeof ( int * ) * MAX_ANS_SIZE ); linesEnd = 0 ; // \u5b58\u50a8\u6bcf\u4e00\u884c\u7684\u5927\u5c0f columnsSize = ( int * ) malloc ( sizeof ( int * ) * MAX_ANS_SIZE ); columnsSizeEnd = 0 ; arrayGlobal = candidates ; n = candidatesSize ; qsort ( arrayGlobal , n , sizeof ( int ), compare ); // \u4ee5\u6bcf\u4e00\u4e2a\u4e3a\u8d77\u70b9\u6df1\u5ea6\u641c\u7d22\uff0c \u8df3\u8fc7\u91cd\u590d\u7684\u5f00\u59cb\u8282\u70b9 for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arrayGlobal [ i ] == arrayGlobal [ i - 1 ]) { continue ; } line [ lineEnd ++ ] = arrayGlobal [ i ]; dfs ( i , target - arrayGlobal [ i ], line , & lineEnd ); lineEnd -- ; } * returnSize = linesEnd ; * returnColumnSizes = columnsSize ; free ( line ); return lines ; }","title":"40.c"},{"location":"leetcode/40/40/index.c.html#40c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_ONE_LINE 1000 #define MAX_ANS_SIZE 1000 int ** lines ; int linesEnd = 0 ; int * columnsSize ; int columnsSizeEnd = 0 ; int * arrayGlobal ; int n ; int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; return a - b ; } int * deepCopy ( int * array , int size ) { int * newArray = ( int * ) malloc ( sizeof ( int ) * size ); memcpy ( newArray , array , sizeof ( int ) * size ); return newArray ; } void dfs ( int i , int target , int * line , int * lineEnd ) { // \u5982\u679c\u5f97\u5230\u7ed3\u679c\uff0c\u5b58\u50a8 if ( target == 0 ) { lines [ linesEnd ++ ] = deepCopy ( line , * lineEnd ); columnsSize [ columnsSizeEnd ++ ] = * lineEnd ; return ; } for ( int j = i + 1 ; j < n ; j ++ ) { if ( j > i + 1 && arrayGlobal [ j ] == arrayGlobal [ j - 1 ]) { continue ; } if ( arrayGlobal [ j ] > target ) { break ; } line [( * lineEnd ) ++ ] = arrayGlobal [ j ]; dfs ( j , target - arrayGlobal [ j ], line , lineEnd ); ( * lineEnd ) -- ; } return ; } int ** combinationSum2 ( int * candidates , int candidatesSize , int target , int * returnSize , int ** returnColumnSizes ) { // \u5b58\u50a8\u4e00\u8d9f\u641c\u7d22\u7ed3\u679c int * line = ( int * ) malloc ( sizeof ( int ) * MAX_ONE_LINE ); int lineEnd = 0 ; // \u5b58\u50a8\u6700\u7ec8\u641c\u7d22\u7ed3\u679c lines = ( int ** ) malloc ( sizeof ( int * ) * MAX_ANS_SIZE ); linesEnd = 0 ; // \u5b58\u50a8\u6bcf\u4e00\u884c\u7684\u5927\u5c0f columnsSize = ( int * ) malloc ( sizeof ( int * ) * MAX_ANS_SIZE ); columnsSizeEnd = 0 ; arrayGlobal = candidates ; n = candidatesSize ; qsort ( arrayGlobal , n , sizeof ( int ), compare ); // \u4ee5\u6bcf\u4e00\u4e2a\u4e3a\u8d77\u70b9\u6df1\u5ea6\u641c\u7d22\uff0c \u8df3\u8fc7\u91cd\u590d\u7684\u5f00\u59cb\u8282\u70b9 for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arrayGlobal [ i ] == arrayGlobal [ i - 1 ]) { continue ; } line [ lineEnd ++ ] = arrayGlobal [ i ]; dfs ( i , target - arrayGlobal [ i ], line , & lineEnd ); lineEnd -- ; } * returnSize = linesEnd ; * returnColumnSizes = columnsSize ; free ( line ); return lines ; }","title":"40.c"},{"location":"leetcode/40/40/index.cpp.html","text":"40.cpp \u00b6 #include <vector> #include <string> #include <stack> #include <algorithm> #include <deque> using namespace std ; class Solution { public : void dfs ( int start , int target , vector < int >& candidates , vector < int > & line , vector < vector < int >> & ans ) { if ( target == 0 ) { ans . push_back ( line ); return ; } if ( start == candidates . size ()) { return ; } for ( int i = start ; i < candidates . size (); i ++ ) { if ( i > start && candidates [ i ] == candidates [ i - 1 ]) { continue ; } if ( candidates [ i ] > target ) { break ; } line . push_back ( candidates [ i ]); dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ); line . pop_back (); } return ; } vector < vector < int >> combinationSum2 ( vector < int >& candidates , int target ) { vector < vector < int >> ans ; if ( candidates . empty ()) { return ans ; } sort ( candidates . begin (), candidates . end ()); vector < int > line ; for ( int i = 0 ; i < candidates . size (); i ++ ) { if ( i > 0 && candidates [ i ] == candidates [ i - 1 ]) { continue ; } if ( candidates [ i ] > target ) { break ; } line . push_back ( candidates [ i ]); dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ); line . pop_back (); } return ans ; } }; int main () { Solution * s = new Solution (); vector < int > candidates = { 10 , 1 , 2 , 7 , 6 , 1 , 5 }; int target = 8 ; auto ans = s -> combinationSum2 ( candidates , target ); return 0 ; }","title":"40.cpp"},{"location":"leetcode/40/40/index.cpp.html#40cpp","text":"#include <vector> #include <string> #include <stack> #include <algorithm> #include <deque> using namespace std ; class Solution { public : void dfs ( int start , int target , vector < int >& candidates , vector < int > & line , vector < vector < int >> & ans ) { if ( target == 0 ) { ans . push_back ( line ); return ; } if ( start == candidates . size ()) { return ; } for ( int i = start ; i < candidates . size (); i ++ ) { if ( i > start && candidates [ i ] == candidates [ i - 1 ]) { continue ; } if ( candidates [ i ] > target ) { break ; } line . push_back ( candidates [ i ]); dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ); line . pop_back (); } return ; } vector < vector < int >> combinationSum2 ( vector < int >& candidates , int target ) { vector < vector < int >> ans ; if ( candidates . empty ()) { return ans ; } sort ( candidates . begin (), candidates . end ()); vector < int > line ; for ( int i = 0 ; i < candidates . size (); i ++ ) { if ( i > 0 && candidates [ i ] == candidates [ i - 1 ]) { continue ; } if ( candidates [ i ] > target ) { break ; } line . push_back ( candidates [ i ]); dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ); line . pop_back (); } return ans ; } }; int main () { Solution * s = new Solution (); vector < int > candidates = { 10 , 1 , 2 , 7 , 6 , 1 , 5 }; int target = 8 ; auto ans = s -> combinationSum2 ( candidates , target ); return 0 ; }","title":"40.cpp"},{"location":"leetcode/40/40/index.py.html","text":"40.py \u00b6 # -*- coding:utf-8 -*- from typing import List class Solution : def dfs ( self , start , target , candidates , line , ans ): if target == 0 : print ( line ) ans . append ( line [:]) return if start == len ( candidates ): return for i in range ( start , len ( candidates )): if i > start and candidates [ i ] == candidates [ i - 1 ]: continue if candidates [ i ] > target : break line . append ( candidates [ i ]) self . dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ) line . pop () return def combinationSum2 ( self , candidates : List [ int ], target : int ) -> List [ List [ int ]]: ans = [] if len ( candidates ) == 0 : return ans candidates = sorted ( candidates ) line = [] for i in range ( len ( candidates )): if i > 0 and candidates [ i ] == candidates [ i - 1 ]: continue if candidates [ i ] > target : break line . append ( candidates [ i ]) self . dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ) line . pop () return ans s = Solution () ans = s . combinationSum2 ([ 10 , 1 , 2 , 7 , 6 , 1 , 5 ], 8 ) print ( ans )","title":"-*- coding:utf-8 -*-"},{"location":"leetcode/40/40/index.py.html#40py","text":"# -*- coding:utf-8 -*- from typing import List class Solution : def dfs ( self , start , target , candidates , line , ans ): if target == 0 : print ( line ) ans . append ( line [:]) return if start == len ( candidates ): return for i in range ( start , len ( candidates )): if i > start and candidates [ i ] == candidates [ i - 1 ]: continue if candidates [ i ] > target : break line . append ( candidates [ i ]) self . dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ) line . pop () return def combinationSum2 ( self , candidates : List [ int ], target : int ) -> List [ List [ int ]]: ans = [] if len ( candidates ) == 0 : return ans candidates = sorted ( candidates ) line = [] for i in range ( len ( candidates )): if i > 0 and candidates [ i ] == candidates [ i - 1 ]: continue if candidates [ i ] > target : break line . append ( candidates [ i ]) self . dfs ( i + 1 , target - candidates [ i ], candidates , line , ans ) line . pop () return ans s = Solution () ans = s . combinationSum2 ([ 10 , 1 , 2 , 7 , 6 , 1 , 5 ], 8 ) print ( ans )","title":"40.py"},{"location":"leetcode/40/readme/","text":"40. \u7ec4\u5408\u603b\u548c II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a 1 2 \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 \u8f93\u5165: candidates = [10,1,2,7,6,1,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] \u793a\u4f8b 2: 1 2 3 4 5 6 \u8f93\u5165: candidates = [2,5,2,1,2], target = 5, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1,2,2], [5] ] 2. \u89e3\u9898\u601d\u8def \u00b6 \u8be5\u9898\u4e0e39\u7684\u533a\u522b\u662f\u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f46\u662f\u6570\u5b57\u53ef\u80fd\u4f1a\u91cd\u590d\u3002 \u505a\u6cd5\u8fd8\u662f\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9012\u5f52\u7684\u65f6\u5019\u6ce8\u610f\uff1a\u9012\u5f52\u4e0b\u4e00\u4e2a\u7684\u65f6\u5019\u8981\u5148\u5224\u65ad\u662f\u5426\u548c\u5f53\u524d\u7684\u4e00\u6837\uff0c\u5982\u679c\u4e00\u6837\u8df3\u8fc7\uff0c\u53bb\u6389\u91cd\u590d\u7b54\u6848\u3002 3. AC\u4ee3\u7801 \u00b6 C C++ Python","title":"[40. \u7ec4\u5408\u603b\u548c II](https://leetcode-cn.com/problems/combination-sum-ii)"},{"location":"leetcode/40/readme/#40-ii","text":"","title":"40. \u7ec4\u5408\u603b\u548c II"},{"location":"leetcode/40/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002 \u8bf4\u660e\uff1a 1 2 \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 8 \u8f93\u5165: candidates = [10,1,2,7,6,1,5], target = 8, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ] \u793a\u4f8b 2: 1 2 3 4 5 6 \u8f93\u5165: candidates = [2,5,2,1,2], target = 5, \u6240\u6c42\u89e3\u96c6\u4e3a: [ [1,2,2], [5] ]","title":"1.  \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/40/readme/#2","text":"\u8be5\u9898\u4e0e39\u7684\u533a\u522b\u662f\u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f46\u662f\u6570\u5b57\u53ef\u80fd\u4f1a\u91cd\u590d\u3002 \u505a\u6cd5\u8fd8\u662f\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9012\u5f52\u7684\u65f6\u5019\u6ce8\u610f\uff1a\u9012\u5f52\u4e0b\u4e00\u4e2a\u7684\u65f6\u5019\u8981\u5148\u5224\u65ad\u662f\u5426\u548c\u5f53\u524d\u7684\u4e00\u6837\uff0c\u5982\u679c\u4e00\u6837\u8df3\u8fc7\uff0c\u53bb\u6389\u91cd\u590d\u7b54\u6848\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/40/readme/#3-ac","text":"C C++ Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/402/readme/","text":"402. \u79fb\u6389K\u4f4d\u6570\u5b57 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570 num\uff0c\u79fb\u9664\u8fd9\u4e2a\u6570\u4e2d\u7684 k \u4f4d\u6570\u5b57\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5b57\u6700\u5c0f\u3002 \u6ce8\u610f: num \u7684\u957f\u5ea6\u5c0f\u4e8e 10002 \u4e14 \u2265 k\u3002 num \u4e0d\u4f1a\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002 \u793a\u4f8b 1 : 1 2 3 \u8f93\u5165: num = \"1432219\", k = 3 \u8f93\u51fa: \"1219\" \u89e3\u91ca: \u79fb\u9664\u6389\u4e09\u4e2a\u6570\u5b57 4, 3, \u548c 2 \u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u6700\u5c0f\u7684\u6570\u5b57 1219\u3002 \u793a\u4f8b 2 : 1 2 3 \u8f93\u5165: num = \"10200\", k = 1 \u8f93\u51fa: \"200\" \u89e3\u91ca: \u79fb\u6389\u9996\u4f4d\u7684 1 \u5269\u4e0b\u7684\u6570\u5b57\u4e3a 200. \u6ce8\u610f\u8f93\u51fa\u4e0d\u80fd\u6709\u4efb\u4f55\u524d\u5bfc\u96f6\u3002 \u793a\u4f8b 3 : 1 2 3 \u8f93\u5165: num = \"10\", k = 2 \u8f93\u51fa: \"0\" \u89e3\u91ca: \u4ece\u539f\u6570\u5b57\u79fb\u9664\u6240\u6709\u7684\u6570\u5b57\uff0c\u5269\u4f59\u4e3a\u7a7a\u5c31\u662f0\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 char * removeKdigits ( char * num , int k ) { int n = strlen ( num ); int l = n - k ; // \u4ece num \u4e2d\u9009\u62e9 l \u4e2a\u6570\u5b57\u7ec4\u6210 \u6700\u5c0f\u7684\u6570 char * ans = ( char * ) malloc ( sizeof ( char ) * ( l + 3 )); int ansEnd = 0 ; // \u5168\u90e8\u79fb\u9664\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de0 if ( l == 0 ) { ans [ 0 ] = '0' ; ans [ 1 ] = '\\0' ; return ans ; } int start = 0 ; int end = n - l ; // \u6bcf\u6b21\u4ece[start, end]\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c \u66f4\u65b0 start \u4e3aindex+1, end = end+1 while ( start <= end && start < n && end < n ) { int min = INT_MAX ; int index = - 1 ; for ( int i = start ; i <= end ; i ++ ) { if ( num [ i ] < min ) { min = num [ i ]; index = i ; } } if ( index != - 1 ) { if ( ansEnd == 0 && num [ index ] == '0' ) { start = index + 1 ; end = end + 1 ; } else { ans [ ansEnd ++ ] = num [ index ]; start = index + 1 ; end = end + 1 ; } } else { break ; } } // \u53ea\u9009\u62e9\u4e86\u524d\u5bfc0\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de0 if ( ansEnd == 0 ) { ans [ ansEnd ++ ] = '0' ; } ans [ ansEnd ] = '\\0' ; return ans ; }","title":"[402. \u79fb\u6389K\u4f4d\u6570\u5b57](https://leetcode-cn.com/problems/remove-k-digits/)"},{"location":"leetcode/402/readme/#402-k","text":"","title":"402. \u79fb\u6389K\u4f4d\u6570\u5b57"},{"location":"leetcode/402/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570 num\uff0c\u79fb\u9664\u8fd9\u4e2a\u6570\u4e2d\u7684 k \u4f4d\u6570\u5b57\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5b57\u6700\u5c0f\u3002 \u6ce8\u610f: num \u7684\u957f\u5ea6\u5c0f\u4e8e 10002 \u4e14 \u2265 k\u3002 num \u4e0d\u4f1a\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002 \u793a\u4f8b 1 : 1 2 3 \u8f93\u5165: num = \"1432219\", k = 3 \u8f93\u51fa: \"1219\" \u89e3\u91ca: \u79fb\u9664\u6389\u4e09\u4e2a\u6570\u5b57 4, 3, \u548c 2 \u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u6700\u5c0f\u7684\u6570\u5b57 1219\u3002 \u793a\u4f8b 2 : 1 2 3 \u8f93\u5165: num = \"10200\", k = 1 \u8f93\u51fa: \"200\" \u89e3\u91ca: \u79fb\u6389\u9996\u4f4d\u7684 1 \u5269\u4e0b\u7684\u6570\u5b57\u4e3a 200. \u6ce8\u610f\u8f93\u51fa\u4e0d\u80fd\u6709\u4efb\u4f55\u524d\u5bfc\u96f6\u3002 \u793a\u4f8b 3 : 1 2 3 \u8f93\u5165: num = \"10\", k = 2 \u8f93\u51fa: \"0\" \u89e3\u91ca: \u4ece\u539f\u6570\u5b57\u79fb\u9664\u6240\u6709\u7684\u6570\u5b57\uff0c\u5269\u4f59\u4e3a\u7a7a\u5c31\u662f0\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/402/readme/#2","text":"char * removeKdigits ( char * num , int k ) { int n = strlen ( num ); int l = n - k ; // \u4ece num \u4e2d\u9009\u62e9 l \u4e2a\u6570\u5b57\u7ec4\u6210 \u6700\u5c0f\u7684\u6570 char * ans = ( char * ) malloc ( sizeof ( char ) * ( l + 3 )); int ansEnd = 0 ; // \u5168\u90e8\u79fb\u9664\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de0 if ( l == 0 ) { ans [ 0 ] = '0' ; ans [ 1 ] = '\\0' ; return ans ; } int start = 0 ; int end = n - l ; // \u6bcf\u6b21\u4ece[start, end]\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c \u66f4\u65b0 start \u4e3aindex+1, end = end+1 while ( start <= end && start < n && end < n ) { int min = INT_MAX ; int index = - 1 ; for ( int i = start ; i <= end ; i ++ ) { if ( num [ i ] < min ) { min = num [ i ]; index = i ; } } if ( index != - 1 ) { if ( ansEnd == 0 && num [ index ] == '0' ) { start = index + 1 ; end = end + 1 ; } else { ans [ ansEnd ++ ] = num [ index ]; start = index + 1 ; end = end + 1 ; } } else { break ; } } // \u53ea\u9009\u62e9\u4e86\u524d\u5bfc0\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de0 if ( ansEnd == 0 ) { ans [ ansEnd ++ ] = '0' ; } ans [ ansEnd ] = '\\0' ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/406/readme/","text":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\u3002 \u6bcf\u4e2a\u4eba\u7531\u4e00\u4e2a\u6574\u6570\u5bf9(h, k)\u8868\u793a\uff0c\u5176\u4e2dh\u662f\u8fd9\u4e2a\u4eba\u7684\u8eab\u9ad8\uff0ck\u662f\u6392\u5728\u8fd9\u4e2a\u4eba\u524d\u9762\u4e14\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8eh\u7684\u4eba\u6570\u3002 \u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u91cd\u5efa\u8fd9\u4e2a\u961f\u5217\u3002 \u6ce8\u610f\uff1a \u603b\u4eba\u6570\u5c11\u4e8e1100\u4eba\u3002 \u793a\u4f8b 1 2 3 4 5 \u8f93\u5165: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] \u8f93\u51fa: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]] 2. \u89e3\u9898\u601d\u8def \u00b6 int compare ( const int * p , const int * q ) { int * a = * ( int ** ) p ; int * b = * ( int ** ) q ; if ( a [ 0 ] != b [ 0 ]) { return a [ 0 ] - b [ 0 ]; } else { return b [ 1 ] - a [ 1 ]; } return 0 ; } int * deepCopy ( int * arr ) { int * ans = ( int * ) malloc ( sizeof ( int ) * 2 ); ans [ 0 ] = arr [ 0 ], ans [ 1 ] = arr [ 1 ]; return ans ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** reconstructQueue ( int ** people , int peopleSize , int * peopleColSize , int * returnSize , int ** returnColumnSizes ){ int * cols = ( int * ) malloc ( sizeof ( int ) * peopleSize ); for ( int i = 0 ; i < peopleSize ; i ++ ) cols [ i ] = 2 ; if ( people == NULL || peopleSize == 0 || peopleColSize == NULL ) { * returnSize = 0 ; * returnColumnSizes = cols ; return NULL ; } int ** ans = ( int ** ) malloc ( sizeof ( int * ) * peopleSize ); for ( int i = 0 ; i < peopleSize ; i ++ ) ans [ i ] = NULL ; qsort ( people , peopleSize , sizeof ( int ) * 2 , compare ); for ( int i = 0 ; i < peopleSize ; i ++ ) { int pos = people [ i ][ 1 ]; int blankCount = 0 ; // \u7edf\u8ba1\u7a7a\u4f4d\u7f6e\u7684\u6570\u91cf int j = 0 ; while ( blankCount <= pos && j < peopleSize ) { if ( ans [ j ] == NULL ) { blankCount ++ ; } j ++ ; } if ( j <= peopleSize && blankCount > pos ) { printf ( \"%d : [%d, %d] \\n \" , j - 1 , people [ i ][ 0 ], people [ i ][ 1 ]); ans [ j - 1 ] = deepCopy ( people [ i ]); } else { printf ( \"%d, %d, %d \\n \" , blankCount , pos , j ); } } * returnSize = peopleSize ; * returnColumnSizes = cols ; return ans ; }","title":"[406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217](https://leetcode-cn.com/problems/queue-reconstruction-by-height/)"},{"location":"leetcode/406/readme/#406","text":"","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217"},{"location":"leetcode/406/readme/#1","text":"\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\u3002 \u6bcf\u4e2a\u4eba\u7531\u4e00\u4e2a\u6574\u6570\u5bf9(h, k)\u8868\u793a\uff0c\u5176\u4e2dh\u662f\u8fd9\u4e2a\u4eba\u7684\u8eab\u9ad8\uff0ck\u662f\u6392\u5728\u8fd9\u4e2a\u4eba\u524d\u9762\u4e14\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8eh\u7684\u4eba\u6570\u3002 \u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u91cd\u5efa\u8fd9\u4e2a\u961f\u5217\u3002 \u6ce8\u610f\uff1a \u603b\u4eba\u6570\u5c11\u4e8e1100\u4eba\u3002 \u793a\u4f8b 1 2 3 4 5 \u8f93\u5165: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] \u8f93\u51fa: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/406/readme/#2","text":"int compare ( const int * p , const int * q ) { int * a = * ( int ** ) p ; int * b = * ( int ** ) q ; if ( a [ 0 ] != b [ 0 ]) { return a [ 0 ] - b [ 0 ]; } else { return b [ 1 ] - a [ 1 ]; } return 0 ; } int * deepCopy ( int * arr ) { int * ans = ( int * ) malloc ( sizeof ( int ) * 2 ); ans [ 0 ] = arr [ 0 ], ans [ 1 ] = arr [ 1 ]; return ans ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** reconstructQueue ( int ** people , int peopleSize , int * peopleColSize , int * returnSize , int ** returnColumnSizes ){ int * cols = ( int * ) malloc ( sizeof ( int ) * peopleSize ); for ( int i = 0 ; i < peopleSize ; i ++ ) cols [ i ] = 2 ; if ( people == NULL || peopleSize == 0 || peopleColSize == NULL ) { * returnSize = 0 ; * returnColumnSizes = cols ; return NULL ; } int ** ans = ( int ** ) malloc ( sizeof ( int * ) * peopleSize ); for ( int i = 0 ; i < peopleSize ; i ++ ) ans [ i ] = NULL ; qsort ( people , peopleSize , sizeof ( int ) * 2 , compare ); for ( int i = 0 ; i < peopleSize ; i ++ ) { int pos = people [ i ][ 1 ]; int blankCount = 0 ; // \u7edf\u8ba1\u7a7a\u4f4d\u7f6e\u7684\u6570\u91cf int j = 0 ; while ( blankCount <= pos && j < peopleSize ) { if ( ans [ j ] == NULL ) { blankCount ++ ; } j ++ ; } if ( j <= peopleSize && blankCount > pos ) { printf ( \"%d : [%d, %d] \\n \" , j - 1 , people [ i ][ 0 ], people [ i ][ 1 ]); ans [ j - 1 ] = deepCopy ( people [ i ]); } else { printf ( \"%d, %d, %d \\n \" , blankCount , pos , j ); } } * returnSize = peopleSize ; * returnColumnSizes = cols ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/414/readme/","text":"414. \u7b2c\u4e09\u5927\u7684\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u8fd4\u56de\u6b64\u6570\u7ec4\u4e2d\u7b2c\u4e09\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662fO(n)\u3002 \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: [3, 2, 1] \u8f93\u51fa: 1 \u89e3\u91ca: \u7b2c\u4e09\u5927\u7684\u6570\u662f 1. \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: [1, 2] \u8f93\u51fa: 2 \u89e3\u91ca: \u7b2c\u4e09\u5927\u7684\u6570\u4e0d\u5b58\u5728, \u6240\u4ee5\u8fd4\u56de\u6700\u5927\u7684\u6570 2 . \u793a\u4f8b 3: 1 2 3 4 5 6 \u8f93\u5165: [2, 2, 3, 1] \u8f93\u51fa: 1 \u89e3\u91ca: \u6ce8\u610f\uff0c\u8981\u6c42\u8fd4\u56de\u7b2c\u4e09\u5927\u7684\u6570\uff0c\u662f\u6307\u7b2c\u4e09\u5927\u4e14\u552f\u4e00\u51fa\u73b0\u7684\u6570\u3002 \u5b58\u5728\u4e24\u4e2a\u503c\u4e3a2\u7684\u6570\uff0c\u5b83\u4eec\u90fd\u6392\u7b2c\u4e8c\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 int thirdMax ( int * nums , int numsSize ){ long long max1 = LLONG_MIN ; long long max2 = LLONG_MIN ; long long max3 = LLONG_MIN ; int i ; for ( i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] > max1 ) { max3 = max2 ; max2 = max1 ; max1 = nums [ i ]; } if ( nums [ i ] < max1 && nums [ i ] > max2 ) { max3 = max2 ; max2 = nums [ i ]; } if ( nums [ i ] < max2 && nums [ i ] > max3 ) { max3 = nums [ i ]; } } if ( max3 == LLONG_MIN ) { return max1 ; } return max3 ; }","title":"[414. \u7b2c\u4e09\u5927\u7684\u6570](https://leetcode-cn.com/problems/third-maximum-number/)"},{"location":"leetcode/414/readme/#414","text":"","title":"414. \u7b2c\u4e09\u5927\u7684\u6570"},{"location":"leetcode/414/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u8fd4\u56de\u6b64\u6570\u7ec4\u4e2d\u7b2c\u4e09\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662fO(n)\u3002 \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: [3, 2, 1] \u8f93\u51fa: 1 \u89e3\u91ca: \u7b2c\u4e09\u5927\u7684\u6570\u662f 1. \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: [1, 2] \u8f93\u51fa: 2 \u89e3\u91ca: \u7b2c\u4e09\u5927\u7684\u6570\u4e0d\u5b58\u5728, \u6240\u4ee5\u8fd4\u56de\u6700\u5927\u7684\u6570 2 . \u793a\u4f8b 3: 1 2 3 4 5 6 \u8f93\u5165: [2, 2, 3, 1] \u8f93\u51fa: 1 \u89e3\u91ca: \u6ce8\u610f\uff0c\u8981\u6c42\u8fd4\u56de\u7b2c\u4e09\u5927\u7684\u6570\uff0c\u662f\u6307\u7b2c\u4e09\u5927\u4e14\u552f\u4e00\u51fa\u73b0\u7684\u6570\u3002 \u5b58\u5728\u4e24\u4e2a\u503c\u4e3a2\u7684\u6570\uff0c\u5b83\u4eec\u90fd\u6392\u7b2c\u4e8c\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/414/readme/#2","text":"int thirdMax ( int * nums , int numsSize ){ long long max1 = LLONG_MIN ; long long max2 = LLONG_MIN ; long long max3 = LLONG_MIN ; int i ; for ( i = 0 ; i < numsSize ; i ++ ) { if ( nums [ i ] > max1 ) { max3 = max2 ; max2 = max1 ; max1 = nums [ i ]; } if ( nums [ i ] < max1 && nums [ i ] > max2 ) { max3 = max2 ; max2 = nums [ i ]; } if ( nums [ i ] < max2 && nums [ i ] > max3 ) { max3 = nums [ i ]; } } if ( max3 == LLONG_MIN ) { return max1 ; } return max3 ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/42/readme/","text":"42. \u63a5\u96e8\u6c34 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002 \u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002 \u611f\u8c22 Marcos \u8d21\u732e\u6b64\u56fe\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165: [0,1,0,2,1,0,1,3,2,1,2,1] \u8f93\u51fa: 6 2. \u89e3\u9898\u601d\u8def \u00b6 int trap ( int * height , int heightSize ){ int left = 0 ; int right = heightSize - 1 ; int ans = 0 ; while ( left < right ) { if ( height [ left ] <= height [ right ]) { if ( height [ left + 1 ] < height [ left ] && left + 1 < right ) { ans += height [ left ] - height [ left + 1 ]; height [ left + 1 ] = height [ left ]; } left ++ ; } else { if ( height [ right ] > height [ right - 1 ] && right - 1 > left ) { ans += height [ right ] - height [ right - 1 ]; height [ right - 1 ] = height [ right ]; } right -- ; } } return ans ; }","title":"[42. \u63a5\u96e8\u6c34](https://leetcode-cn.com/problems/trapping-rain-water/)"},{"location":"leetcode/42/readme/#42","text":"","title":"42. \u63a5\u96e8\u6c34"},{"location":"leetcode/42/readme/#1","text":"\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002 \u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002 \u611f\u8c22 Marcos \u8d21\u732e\u6b64\u56fe\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165: [0,1,0,2,1,0,1,3,2,1,2,1] \u8f93\u51fa: 6","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/42/readme/#2","text":"int trap ( int * height , int heightSize ){ int left = 0 ; int right = heightSize - 1 ; int ans = 0 ; while ( left < right ) { if ( height [ left ] <= height [ right ]) { if ( height [ left + 1 ] < height [ left ] && left + 1 < right ) { ans += height [ left ] - height [ left + 1 ]; height [ left + 1 ] = height [ left ]; } left ++ ; } else { if ( height [ right ] > height [ right - 1 ] && right - 1 > left ) { ans += height [ right ] - height [ right - 1 ]; height [ right - 1 ] = height [ right ]; } right -- ; } } return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/456/456/index.c.html","text":"456.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <stdbool.h> bool find132pattern ( int * nums , int numsSize ){ if ( nums == NULL || numsSize < 3 ) return false ; int * mins = ( int * ) malloc ( sizeof ( int ) * numsSize ); mins [ 0 ] = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { if ( nums [ i ] < mins [ i - 1 ]) { mins [ i ] = nums [ i ]; } else { mins [ i ] = mins [ i - 1 ]; } } for ( int i = 0 ; i < numsSize ; i ++ ) printf ( \"%d, \" , mins [ i ]); int * stack = ( int * ) malloc ( sizeof ( int ) * numsSize ); int top = 0 ; for ( int i = numsSize - 1 ; i >= 0 ; i -- ) { if ( nums [ i ] > mins [ i ]) { while ( top > 0 && stack [ top - 1 ] <= mins [ i ]) { top -- ; } if ( top > 0 && stack [ top - 1 ] < nums [ i ]) { return true ; } stack [ top ++ ] = nums [ i ]; } } return false ; } int main () { int nums [] = { 1 , 3 , 2 , 4 , 5 , 6 , 9 , 1 , 6 , 5 }; int size = sizeof ( nums ) / sizeof ( int ); bool ans = find132pattern ( nums , size ); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"456.c"},{"location":"leetcode/456/456/index.c.html#456c","text":"#include <stdio.h> #include <stdlib.h> #include <stdbool.h> bool find132pattern ( int * nums , int numsSize ){ if ( nums == NULL || numsSize < 3 ) return false ; int * mins = ( int * ) malloc ( sizeof ( int ) * numsSize ); mins [ 0 ] = nums [ 0 ]; for ( int i = 1 ; i < numsSize ; i ++ ) { if ( nums [ i ] < mins [ i - 1 ]) { mins [ i ] = nums [ i ]; } else { mins [ i ] = mins [ i - 1 ]; } } for ( int i = 0 ; i < numsSize ; i ++ ) printf ( \"%d, \" , mins [ i ]); int * stack = ( int * ) malloc ( sizeof ( int ) * numsSize ); int top = 0 ; for ( int i = numsSize - 1 ; i >= 0 ; i -- ) { if ( nums [ i ] > mins [ i ]) { while ( top > 0 && stack [ top - 1 ] <= mins [ i ]) { top -- ; } if ( top > 0 && stack [ top - 1 ] < nums [ i ]) { return true ; } stack [ top ++ ] = nums [ i ]; } } return false ; } int main () { int nums [] = { 1 , 3 , 2 , 4 , 5 , 6 , 9 , 1 , 6 , 5 }; int size = sizeof ( nums ) / sizeof ( int ); bool ans = find132pattern ( nums , size ); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"456.c"},{"location":"leetcode/456/456/index.cpp.html","text":"456.cpp \u00b6 #include <vector> #include <stack> using namespace std ; class Solution { public : bool find132pattern ( vector < int >& nums ) { if ( nums . size () < 3 ) return false ; vector < int > mins ( nums . size (), 0 ); mins [ 0 ] = nums [ 0 ]; for ( int i = 1 ; i < nums . size (); i ++ ) { mins [ i ] = min ( mins [ i - 1 ], nums [ i ]); } stack < int > s ; for ( int i = nums . size () - 1 ; i >= 0 ; i -- ) { // \u524d\u9762\u6ca1\u6709\u66f4\u5c0f\u7684\u6570\u5b57\uff0c\u4e0b\u4e00\u8f6e if ( nums [ i ] <= mins [ i ]) continue ; // \u5f39\u51fa\u5c0f\u4e8e\u7b49\u4e8emins[i]\u7684 while ( ! s . empty () && s . top () <= mins [ i ]) s . pop (); // \u627e\u5230ak\u5c31\u8fd4\u56de if ( ! s . empty () && s . top () < nums [ i ]) return true ; // \u5426\u5219\u5c31\u5165\u6808\uff0c\u7ee7\u7eed\u4e0b\u4e00\u8f6e s . push ( nums [ i ]); } return false ; } }; int main () { vector < int > nums = { 1 , 3 , 4 , 2 }; Solution * s = new Solution (); bool ans = s -> find132pattern ( nums ); return 0 ; }","title":"456.cpp"},{"location":"leetcode/456/456/index.cpp.html#456cpp","text":"#include <vector> #include <stack> using namespace std ; class Solution { public : bool find132pattern ( vector < int >& nums ) { if ( nums . size () < 3 ) return false ; vector < int > mins ( nums . size (), 0 ); mins [ 0 ] = nums [ 0 ]; for ( int i = 1 ; i < nums . size (); i ++ ) { mins [ i ] = min ( mins [ i - 1 ], nums [ i ]); } stack < int > s ; for ( int i = nums . size () - 1 ; i >= 0 ; i -- ) { // \u524d\u9762\u6ca1\u6709\u66f4\u5c0f\u7684\u6570\u5b57\uff0c\u4e0b\u4e00\u8f6e if ( nums [ i ] <= mins [ i ]) continue ; // \u5f39\u51fa\u5c0f\u4e8e\u7b49\u4e8emins[i]\u7684 while ( ! s . empty () && s . top () <= mins [ i ]) s . pop (); // \u627e\u5230ak\u5c31\u8fd4\u56de if ( ! s . empty () && s . top () < nums [ i ]) return true ; // \u5426\u5219\u5c31\u5165\u6808\uff0c\u7ee7\u7eed\u4e0b\u4e00\u8f6e s . push ( nums [ i ]); } return false ; } }; int main () { vector < int > nums = { 1 , 3 , 4 , 2 }; Solution * s = new Solution (); bool ans = s -> find132pattern ( nums ); return 0 ; }","title":"456.cpp"},{"location":"leetcode/456/456/index.py.html","text":"456.py \u00b6 from typing import List class Solution : def find132pattern ( self , nums : List [ int ]) -> bool : if len ( nums ) < 3 : return False # \u8ba1\u7b97\u524d\u7f00\u6700\u5c0f\u503c mins = [ 0 ] * len ( nums ) mins [ 0 ] = nums [ 0 ] for i in range ( 1 , len ( nums )): mins [ i ] = min ( mins [ i - 1 ], nums [ i ]) stack = [] for i in reversed ( range ( 0 , len ( nums ))): if nums [ i ] <= mins [ i ]: continue while ( len ( stack ) > 0 and stack [ - 1 ] <= mins [ i ]): stack . pop () if ( len ( stack ) > 0 and stack [ - 1 ] < nums [ i ]): return True stack . append ( nums [ i ]) return False nums = [ 1 , 4 , 3 , 2 ] s = Solution () ans = s . find132pattern ( nums ) print ( ans )","title":"456.py"},{"location":"leetcode/456/456/index.py.html#456py","text":"from typing import List class Solution : def find132pattern ( self , nums : List [ int ]) -> bool : if len ( nums ) < 3 : return False # \u8ba1\u7b97\u524d\u7f00\u6700\u5c0f\u503c mins = [ 0 ] * len ( nums ) mins [ 0 ] = nums [ 0 ] for i in range ( 1 , len ( nums )): mins [ i ] = min ( mins [ i - 1 ], nums [ i ]) stack = [] for i in reversed ( range ( 0 , len ( nums ))): if nums [ i ] <= mins [ i ]: continue while ( len ( stack ) > 0 and stack [ - 1 ] <= mins [ i ]): stack . pop () if ( len ( stack ) > 0 and stack [ - 1 ] < nums [ i ]): return True stack . append ( nums [ i ]) return False nums = [ 1 , 4 , 3 , 2 ] s = Solution () ans = s . find132pattern ( nums ) print ( ans )","title":"456.py"},{"location":"leetcode/456/readme/","text":"456. 132\u6a21\u5f0f \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff1aa1, a2, ..., an\uff0c\u4e00\u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217 ai, aj, ak \u88ab\u5b9a\u4e49\u4e3a\uff1a\u5f53 i < j < k \u65f6\uff0cai < ak < aj\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5f53\u7ed9\u5b9a\u6709 n \u4e2a\u6570\u5b57\u7684\u5e8f\u5217\u65f6\uff0c\u9a8c\u8bc1\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u662f\u5426\u542b\u6709132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002 \u6ce8\u610f\uff1an \u7684\u503c\u5c0f\u4e8e15000\u3002 \u793a\u4f8b1: 1 2 3 4 5 \u8f93\u5165: [1, 2, 3, 4] \u8f93\u51fa: False \u89e3\u91ca: \u5e8f\u5217\u4e2d\u4e0d\u5b58\u5728132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: [3, 1, 4, 2] \u8f93\u51fa: True \u89e3\u91ca: \u5e8f\u5217\u4e2d\u6709 1 \u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\uff1a [1, 4, 2]. \u793a\u4f8b 3: 1 2 3 4 5 \u8f93\u5165: [-1, 3, 2, 0] \u8f93\u51fa: True \u89e3\u91ca: \u5e8f\u5217\u4e2d\u6709 3 \u4e2a132\u6a21\u5f0f\u7684\u7684\u5b50\u5e8f\u5217: [-1, 3, 2], [-1, 3, 0] \u548c [-1, 2, 0]. 2. \u89e3\u9898\u601d\u8def \u00b6 ai\u6700\u5c0f\uff0c aj\u6700\u5927\uff0c \u518d\u4ece(j, end)\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u5728(ai, aj)\u4e4b\u95f4\u7684\u6570\u5b57\u5c31\u53ef\u4ee5\u3002 \u5bf9\u4e8e\u4efb\u610f\u7684aj, \u627e\u5230[0, j)\u533a\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u5b83\u662f\u6700\u4f73\u7684ai. \u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6c42\u524d\u7f00\u6700\u5c0f\u503c\u5b9e\u73b0\uff0c\u8017\u65f6O(n). \u786e\u5b9aai, aj\u4e4b\u540e\uff0c\u4ece(j, end)\u533a\u95f4\u627e\u4e00\u4e2a\u5c0f\u4e8eaj\u7684\u5143\u7d20\uff0c \u5982\u679c\u80fd\u591f\u627e\u5230\uff0c\u8bf4\u660e\u6709132\u6a21\u5f0f\u3002 \u4f7f\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4(j, end)\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u4fdd\u6301\u5728\u6808\u4e2d\u7684\u5143\u7d20\u964d\u5e8f\uff0c\u6808\u9876\u7684\u5143\u7d20\u6700\u5c0f\u3002 \u7b97\u6cd5\u63cf\u8ff0\uff1a \u904d\u5386\u4e00\u904d\u6c42mins, mins[i]\u8868\u793a[0, i]\u5185\u6700\u5c0f\u7684\u5143\u7d20 for j in [n-1,0], if a[j] <= mins[j], j--; \u5982\u679c\u4ece\u524d\u9762\u627e\u4e0d\u5230\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u503c\uff0c\u8df3\u8fc7 if a[j] > mins[j], \u6b64\u65f6 ai = mins[j], aj = a[j], \u5982\u679c\u6808\u975e\u7a7a\uff0c \u5f39\u51fa\u6808\u9876\u5143\u7d20\u76f4\u5230\u5927\u4e8eai, \u5982\u679c\u6808\u975e\u7a7a\uff0c \u6808\u9876\u5143\u7d20\u5c0f\u4e8eaj, \u5219\u8fd4\u56detrue \u5426\u5219\uff0c\u628aa[j]\u538b\u5165\u6808\u4e2d\uff0c j--, \u7ee7\u7eed\u4e0b\u4e2a\u5faa\u73af \u6808\u4e2d\u7ef4\u62a4\u7684\u59cb\u7ec8\u662fj\u4e4b\u540e\u7684\u5143\u7d20\uff0c\u800c\u4e14\u662f\u5927\u4e8eai\u7684\u5143\u7d20\uff0c\u4e00\u65e6\u627e\u5230\u5c0f\u4e8eaj\u7684\u5c31\u53ef\u4ee5\u8fd4\u56de\uff0c\u5982\u679c\u904d\u5386\u5b8c\u8fd8\u6ca1\u6709\u8fd4\u56de\uff0c\u8bf4\u660e\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684132\u6a21\u5f0f\u3002 3. AC\u4ee3\u7801 \u00b6 C C++ Python","title":"[456. 132\u6a21\u5f0f](https://leetcode-cn.com/problems/132-pattern)"},{"location":"leetcode/456/readme/#456-132","text":"","title":"456. 132\u6a21\u5f0f"},{"location":"leetcode/456/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff1aa1, a2, ..., an\uff0c\u4e00\u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217 ai, aj, ak \u88ab\u5b9a\u4e49\u4e3a\uff1a\u5f53 i < j < k \u65f6\uff0cai < ak < aj\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5f53\u7ed9\u5b9a\u6709 n \u4e2a\u6570\u5b57\u7684\u5e8f\u5217\u65f6\uff0c\u9a8c\u8bc1\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u662f\u5426\u542b\u6709132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002 \u6ce8\u610f\uff1an \u7684\u503c\u5c0f\u4e8e15000\u3002 \u793a\u4f8b1: 1 2 3 4 5 \u8f93\u5165: [1, 2, 3, 4] \u8f93\u51fa: False \u89e3\u91ca: \u5e8f\u5217\u4e2d\u4e0d\u5b58\u5728132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: [3, 1, 4, 2] \u8f93\u51fa: True \u89e3\u91ca: \u5e8f\u5217\u4e2d\u6709 1 \u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\uff1a [1, 4, 2]. \u793a\u4f8b 3: 1 2 3 4 5 \u8f93\u5165: [-1, 3, 2, 0] \u8f93\u51fa: True \u89e3\u91ca: \u5e8f\u5217\u4e2d\u6709 3 \u4e2a132\u6a21\u5f0f\u7684\u7684\u5b50\u5e8f\u5217: [-1, 3, 2], [-1, 3, 0] \u548c [-1, 2, 0].","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/456/readme/#2","text":"ai\u6700\u5c0f\uff0c aj\u6700\u5927\uff0c \u518d\u4ece(j, end)\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u5728(ai, aj)\u4e4b\u95f4\u7684\u6570\u5b57\u5c31\u53ef\u4ee5\u3002 \u5bf9\u4e8e\u4efb\u610f\u7684aj, \u627e\u5230[0, j)\u533a\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u5b83\u662f\u6700\u4f73\u7684ai. \u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6c42\u524d\u7f00\u6700\u5c0f\u503c\u5b9e\u73b0\uff0c\u8017\u65f6O(n). \u786e\u5b9aai, aj\u4e4b\u540e\uff0c\u4ece(j, end)\u533a\u95f4\u627e\u4e00\u4e2a\u5c0f\u4e8eaj\u7684\u5143\u7d20\uff0c \u5982\u679c\u80fd\u591f\u627e\u5230\uff0c\u8bf4\u660e\u6709132\u6a21\u5f0f\u3002 \u4f7f\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4(j, end)\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u4fdd\u6301\u5728\u6808\u4e2d\u7684\u5143\u7d20\u964d\u5e8f\uff0c\u6808\u9876\u7684\u5143\u7d20\u6700\u5c0f\u3002 \u7b97\u6cd5\u63cf\u8ff0\uff1a \u904d\u5386\u4e00\u904d\u6c42mins, mins[i]\u8868\u793a[0, i]\u5185\u6700\u5c0f\u7684\u5143\u7d20 for j in [n-1,0], if a[j] <= mins[j], j--; \u5982\u679c\u4ece\u524d\u9762\u627e\u4e0d\u5230\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u503c\uff0c\u8df3\u8fc7 if a[j] > mins[j], \u6b64\u65f6 ai = mins[j], aj = a[j], \u5982\u679c\u6808\u975e\u7a7a\uff0c \u5f39\u51fa\u6808\u9876\u5143\u7d20\u76f4\u5230\u5927\u4e8eai, \u5982\u679c\u6808\u975e\u7a7a\uff0c \u6808\u9876\u5143\u7d20\u5c0f\u4e8eaj, \u5219\u8fd4\u56detrue \u5426\u5219\uff0c\u628aa[j]\u538b\u5165\u6808\u4e2d\uff0c j--, \u7ee7\u7eed\u4e0b\u4e2a\u5faa\u73af \u6808\u4e2d\u7ef4\u62a4\u7684\u59cb\u7ec8\u662fj\u4e4b\u540e\u7684\u5143\u7d20\uff0c\u800c\u4e14\u662f\u5927\u4e8eai\u7684\u5143\u7d20\uff0c\u4e00\u65e6\u627e\u5230\u5c0f\u4e8eaj\u7684\u5c31\u53ef\u4ee5\u8fd4\u56de\uff0c\u5982\u679c\u904d\u5386\u5b8c\u8fd8\u6ca1\u6709\u8fd4\u56de\uff0c\u8bf4\u660e\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684132\u6a21\u5f0f\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/456/readme/#3-ac","text":"C C++ Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/463/readme/","text":"463. \u5c9b\u5c7f\u7684\u5468\u957f \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b 0 \u548c 1 \u7684\u4e8c\u7ef4\u7f51\u683c\u5730\u56fe\uff0c\u5176\u4e2d 1 \u8868\u793a\u9646\u5730 0 \u8868\u793a\u6c34\u57df\u3002 \u7f51\u683c\u4e2d\u7684\u683c\u5b50\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u76f8\u8fde\uff08\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0d\u76f8\u8fde\uff09\u3002\u6574\u4e2a\u7f51\u683c\u88ab\u6c34\u5b8c\u5168\u5305\u56f4\uff0c\u4f46\u5176\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u5c9b\u5c7f\uff08\u6216\u8005\u8bf4\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u793a\u9646\u5730\u7684\u683c\u5b50\u76f8\u8fde\u7ec4\u6210\u7684\u5c9b\u5c7f\uff09\u3002 \u5c9b\u5c7f\u4e2d\u6ca1\u6709\u201c\u6e56\u201d\uff08\u201c\u6e56\u201d \u6307\u6c34\u57df\u5728\u5c9b\u5c7f\u5185\u90e8\u4e14\u4e0d\u548c\u5c9b\u5c7f\u5468\u56f4\u7684\u6c34\u76f8\u8fde\uff09\u3002\u683c\u5b50\u662f\u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u3002\u7f51\u683c\u4e3a\u957f\u65b9\u5f62\uff0c\u4e14\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5747\u4e0d\u8d85\u8fc7 100 \u3002\u8ba1\u7b97\u8fd9\u4e2a\u5c9b\u5c7f\u7684\u5468\u957f\u3002 \u793a\u4f8b : 1 2 3 4 5 6 7 8 9 \u8f93\u5165: [[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]] \u8f93\u51fa: 16 \u89e3\u91ca: \u5b83\u7684\u5468\u957f\u662f\u4e0b\u9762\u56fe\u7247\u4e2d\u7684 16 \u4e2a\u9ec4\u8272\u7684\u8fb9\uff1a 2. \u89e3\u9898\u601d\u8def \u00b6 int get ( int ** grid , int gridSize , int col , int i , int j ) { int count = 4 ; if ( i - 1 >= 0 && grid [ i - 1 ][ j ] == 1 ) { count -- ; } if ( i + 1 < gridSize && grid [ i + 1 ][ j ] == 1 ) { count -- ; } if ( j - 1 >= 0 && grid [ i ][ j - 1 ] == 1 ) { count -- ; } if ( j + 1 < col && grid [ i ][ j + 1 ] == 1 ) { count -- ; } //printf(\"%d \", count); return count ; } int islandPerimeter ( int ** grid , int gridSize , int * gridColSize ){ int i , j ; int ans = 0 ; for ( i = 0 ; i < gridSize ; i ++ ) { for ( j = 0 ; j < gridColSize [ i ]; j ++ ) { if ( grid [ i ][ j ] == 1 ) { ans += get ( grid , gridSize , gridColSize [ i ], i , j ); } } } return ans ; }","title":"[463. \u5c9b\u5c7f\u7684\u5468\u957f](https://leetcode-cn.com/problems/island-perimeter/)"},{"location":"leetcode/463/readme/#463","text":"","title":"463. \u5c9b\u5c7f\u7684\u5468\u957f"},{"location":"leetcode/463/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b 0 \u548c 1 \u7684\u4e8c\u7ef4\u7f51\u683c\u5730\u56fe\uff0c\u5176\u4e2d 1 \u8868\u793a\u9646\u5730 0 \u8868\u793a\u6c34\u57df\u3002 \u7f51\u683c\u4e2d\u7684\u683c\u5b50\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u76f8\u8fde\uff08\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0d\u76f8\u8fde\uff09\u3002\u6574\u4e2a\u7f51\u683c\u88ab\u6c34\u5b8c\u5168\u5305\u56f4\uff0c\u4f46\u5176\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u5c9b\u5c7f\uff08\u6216\u8005\u8bf4\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u793a\u9646\u5730\u7684\u683c\u5b50\u76f8\u8fde\u7ec4\u6210\u7684\u5c9b\u5c7f\uff09\u3002 \u5c9b\u5c7f\u4e2d\u6ca1\u6709\u201c\u6e56\u201d\uff08\u201c\u6e56\u201d \u6307\u6c34\u57df\u5728\u5c9b\u5c7f\u5185\u90e8\u4e14\u4e0d\u548c\u5c9b\u5c7f\u5468\u56f4\u7684\u6c34\u76f8\u8fde\uff09\u3002\u683c\u5b50\u662f\u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u3002\u7f51\u683c\u4e3a\u957f\u65b9\u5f62\uff0c\u4e14\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5747\u4e0d\u8d85\u8fc7 100 \u3002\u8ba1\u7b97\u8fd9\u4e2a\u5c9b\u5c7f\u7684\u5468\u957f\u3002 \u793a\u4f8b : 1 2 3 4 5 6 7 8 9 \u8f93\u5165: [[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]] \u8f93\u51fa: 16 \u89e3\u91ca: \u5b83\u7684\u5468\u957f\u662f\u4e0b\u9762\u56fe\u7247\u4e2d\u7684 16 \u4e2a\u9ec4\u8272\u7684\u8fb9\uff1a","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/463/readme/#2","text":"int get ( int ** grid , int gridSize , int col , int i , int j ) { int count = 4 ; if ( i - 1 >= 0 && grid [ i - 1 ][ j ] == 1 ) { count -- ; } if ( i + 1 < gridSize && grid [ i + 1 ][ j ] == 1 ) { count -- ; } if ( j - 1 >= 0 && grid [ i ][ j - 1 ] == 1 ) { count -- ; } if ( j + 1 < col && grid [ i ][ j + 1 ] == 1 ) { count -- ; } //printf(\"%d \", count); return count ; } int islandPerimeter ( int ** grid , int gridSize , int * gridColSize ){ int i , j ; int ans = 0 ; for ( i = 0 ; i < gridSize ; i ++ ) { for ( j = 0 ; j < gridColSize [ i ]; j ++ ) { if ( grid [ i ][ j ] == 1 ) { ans += get ( grid , gridSize , gridColSize [ i ], i , j ); } } } return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/468/468/index.c.html","text":"468.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define N 20 void setAns ( char * ans , int ipType ) { if ( ipType == 1 ) { ans [ 0 ] = 'I' ; ans [ 1 ] = 'P' ; ans [ 2 ] = 'v' ; ans [ 3 ] = '4' ; ans [ 4 ] = '\\0' ; } else if ( ipType == 2 ) { ans [ 0 ] = 'I' ; ans [ 1 ] = 'P' ; ans [ 2 ] = 'v' ; ans [ 3 ] = '6' ; ans [ 4 ] = '\\0' ; } else { ans [ 0 ] = 'N' ; ans [ 1 ] = 'e' ; ans [ 2 ] = 'i' ; ans [ 3 ] = 't' ; ans [ 4 ] = 'h' ; ans [ 5 ] = 'e' ; ans [ 6 ] = 'r' ; ans [ 7 ] = '\\0' ; } } int find ( char * IP , char c ) { const int n = strlen ( IP ); int i ; for ( i = 0 ; i < n ; i ++ ) { if ( IP [ i ] == c ) { return 1 ; } } return 0 ; } // \u662f ipv4\u5730\u5740\u8fd4\u56de 1 int isIpv4 ( char * IP ) { // \u6309\u7167 . \u5206\u5272\u62104\u4e2a\u6570\u5b57\uff0c\u68c0\u67e54\u4e2a\u6570\u7ec4\u662f\u5426\u5408\u6cd5 const int n = strlen ( IP ); int i = 0 ; int num = 0 ; int count = 0 ; while ( i < n ) { if ( IP [ i ] >= '0' && IP [ i ] <= '9' ){ if ( num == 0 && IP [ i ] == '0' ) { // \u6709\u524d\u5bfc0\u4e0d\u5408\u6cd5 if ( i + 1 < n && IP [ i + 1 ] == '.' ) { i ++ ; continue ; } if ( i + 1 == n ) { i ++ ; continue ; } return 10 ; } if ( num >= 256 ) { return 10 ; } num = num * 10 + IP [ i ] - '0' ; } else if ( IP [ i ] == '.' ) { count ++ ; if ( num < 0 || num >= 256 ) { // \u8d85\u51fa\u6570\u636e\u8303\u56f4\u4e0d\u5408\u6cd5 return 10 ; } if ( i == n - 1 ) { // \u6700\u540e\u4e00\u4e2a\u4e0d\u80fd\u662f . return 10 ; } if ( i + 1 < n && IP [ i + 1 ] == '.' ) { // . \u4e0d\u80fd\u76f4\u63a5\u76f8\u8fde return 10 ; } num = 0 ; } else { return 10 ; } i ++ ; } // \u6700\u540e\u4e00\u7ec4\u7684\u6570\u5b57\u4e5f\u8981\u5408\u6cd5 if ( num < 0 || num >= 256 ) { return 10 ; } // \u5e94\u8be5\u6070\u597d\u6709 3 \u4e2a\u70b9\u53f7\uff0c\u5206\u62104\u7ec4 if ( count != 3 ) { return 10 ; } return 1 ; } // \u662f ipv6 \u5730\u5740\u8fd4\u56de 2 int isIpv6 ( char * IP ) { const int n = strlen ( IP ); int i , j ; int count = 0 ; // : \u7684\u4e2a\u6570 int every_count = 0 ; // \u6bcf\u4e2a\u7ec4\u5185\u90e8\u4e0d\u5e94\u8be5\u8d85\u8fc74\u4f4d i = 0 ; while ( i < n ) { if ( ( IP [ i ] >= '0' && IP [ i ] <= '9' ) || ( IP [ i ] >= 'a' && IP [ i ] <= 'f' ) || ( IP [ i ] >= 'A' && IP [ i ] <= 'F' ) ) { every_count ++ ; } else if ( IP [ i ] == ':' ) { count ++ ; if ( i == n - 1 ) { return 10 ; } else if ( i + 1 < n && IP [ i + 1 ] == ':' ) { return 10 ; } if ( every_count > 4 ) { return 10 ; } every_count = 0 ; } else { return 10 ; } i ++ ; } if ( every_count > 4 ) { return 10 ; } if ( count >= 8 ) { return 10 ; } return 2 ; } char * validIPAddress ( char * IP ){ char * ans ; int ipType ; ans = ( char * ) malloc ( sizeof ( char ) * N ); if ( find ( IP , '.' )) { ipType = isIpv4 ( IP ); } else if ( find ( IP , ':' )) { ipType = isIpv6 ( IP ); } else { ipType = 3 ; } setAns ( ans , ipType ); return ans ; }","title":"468.c"},{"location":"leetcode/468/468/index.c.html#468c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define N 20 void setAns ( char * ans , int ipType ) { if ( ipType == 1 ) { ans [ 0 ] = 'I' ; ans [ 1 ] = 'P' ; ans [ 2 ] = 'v' ; ans [ 3 ] = '4' ; ans [ 4 ] = '\\0' ; } else if ( ipType == 2 ) { ans [ 0 ] = 'I' ; ans [ 1 ] = 'P' ; ans [ 2 ] = 'v' ; ans [ 3 ] = '6' ; ans [ 4 ] = '\\0' ; } else { ans [ 0 ] = 'N' ; ans [ 1 ] = 'e' ; ans [ 2 ] = 'i' ; ans [ 3 ] = 't' ; ans [ 4 ] = 'h' ; ans [ 5 ] = 'e' ; ans [ 6 ] = 'r' ; ans [ 7 ] = '\\0' ; } } int find ( char * IP , char c ) { const int n = strlen ( IP ); int i ; for ( i = 0 ; i < n ; i ++ ) { if ( IP [ i ] == c ) { return 1 ; } } return 0 ; } // \u662f ipv4\u5730\u5740\u8fd4\u56de 1 int isIpv4 ( char * IP ) { // \u6309\u7167 . \u5206\u5272\u62104\u4e2a\u6570\u5b57\uff0c\u68c0\u67e54\u4e2a\u6570\u7ec4\u662f\u5426\u5408\u6cd5 const int n = strlen ( IP ); int i = 0 ; int num = 0 ; int count = 0 ; while ( i < n ) { if ( IP [ i ] >= '0' && IP [ i ] <= '9' ){ if ( num == 0 && IP [ i ] == '0' ) { // \u6709\u524d\u5bfc0\u4e0d\u5408\u6cd5 if ( i + 1 < n && IP [ i + 1 ] == '.' ) { i ++ ; continue ; } if ( i + 1 == n ) { i ++ ; continue ; } return 10 ; } if ( num >= 256 ) { return 10 ; } num = num * 10 + IP [ i ] - '0' ; } else if ( IP [ i ] == '.' ) { count ++ ; if ( num < 0 || num >= 256 ) { // \u8d85\u51fa\u6570\u636e\u8303\u56f4\u4e0d\u5408\u6cd5 return 10 ; } if ( i == n - 1 ) { // \u6700\u540e\u4e00\u4e2a\u4e0d\u80fd\u662f . return 10 ; } if ( i + 1 < n && IP [ i + 1 ] == '.' ) { // . \u4e0d\u80fd\u76f4\u63a5\u76f8\u8fde return 10 ; } num = 0 ; } else { return 10 ; } i ++ ; } // \u6700\u540e\u4e00\u7ec4\u7684\u6570\u5b57\u4e5f\u8981\u5408\u6cd5 if ( num < 0 || num >= 256 ) { return 10 ; } // \u5e94\u8be5\u6070\u597d\u6709 3 \u4e2a\u70b9\u53f7\uff0c\u5206\u62104\u7ec4 if ( count != 3 ) { return 10 ; } return 1 ; } // \u662f ipv6 \u5730\u5740\u8fd4\u56de 2 int isIpv6 ( char * IP ) { const int n = strlen ( IP ); int i , j ; int count = 0 ; // : \u7684\u4e2a\u6570 int every_count = 0 ; // \u6bcf\u4e2a\u7ec4\u5185\u90e8\u4e0d\u5e94\u8be5\u8d85\u8fc74\u4f4d i = 0 ; while ( i < n ) { if ( ( IP [ i ] >= '0' && IP [ i ] <= '9' ) || ( IP [ i ] >= 'a' && IP [ i ] <= 'f' ) || ( IP [ i ] >= 'A' && IP [ i ] <= 'F' ) ) { every_count ++ ; } else if ( IP [ i ] == ':' ) { count ++ ; if ( i == n - 1 ) { return 10 ; } else if ( i + 1 < n && IP [ i + 1 ] == ':' ) { return 10 ; } if ( every_count > 4 ) { return 10 ; } every_count = 0 ; } else { return 10 ; } i ++ ; } if ( every_count > 4 ) { return 10 ; } if ( count >= 8 ) { return 10 ; } return 2 ; } char * validIPAddress ( char * IP ){ char * ans ; int ipType ; ans = ( char * ) malloc ( sizeof ( char ) * N ); if ( find ( IP , '.' )) { ipType = isIpv4 ( IP ); } else if ( find ( IP , ':' )) { ipType = isIpv6 ( IP ); } else { ipType = 3 ; } setAns ( ans , ipType ); return ans ; }","title":"468.c"},{"location":"leetcode/468/468/index.cpp.html","text":"468.cpp \u00b6","title":"468.cpp"},{"location":"leetcode/468/468/index.cpp.html#468cpp","text":"","title":"468.cpp"},{"location":"leetcode/468/468/index.py.html","text":"468.py \u00b6","title":"468.py"},{"location":"leetcode/468/468/index.py.html#468py","text":"","title":"468.py"},{"location":"leetcode/468/readme/","text":"468. \u9a8c\u8bc1IP\u5730\u5740 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u7684 IPv4 \u6216 IPv6 \u5730\u5740\u3002 IPv4 \u5730\u5740\u7531\u5341\u8fdb\u5236\u6570\u548c\u70b9\u6765\u8868\u793a\uff0c\u6bcf\u4e2a\u5730\u5740\u5305\u542b4\u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5176\u8303\u56f4\u4e3a 0 - 255\uff0c \u7528(\".\")\u5206\u5272\u3002\u6bd4\u5982\uff0c172.16.254.1\uff1b \u540c\u65f6\uff0cIPv4 \u5730\u5740\u5185\u7684\u6570\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002\u6bd4\u5982\uff0c\u5730\u5740 172.16.254.01 \u662f\u4e0d\u5408\u6cd5\u7684\u3002 IPv6 \u5730\u5740\u75318\u7ec416\u8fdb\u5236\u7684\u6570\u5b57\u6765\u8868\u793a\uff0c\u6bcf\u7ec4\u8868\u793a 16 \u6bd4\u7279\u3002\u8fd9\u4e9b\u7ec4\u6570\u5b57\u901a\u8fc7 (\":\")\u5206\u5272\u3002\u6bd4\u5982, 2001:0db8:85a3:0000:0000:8a2e:0370:7334 \u662f\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u3002\u800c\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u5165\u4e00\u4e9b\u4ee5 0 \u5f00\u5934\u7684\u6570\u5b57\uff0c\u5b57\u6bcd\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c0f\u5199\u3002\u6240\u4ee5\uff0c 2001:db8:85a3:0:0:8A2E:0370:7334 \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 address\u5730\u5740 (\u5373\uff0c\u5ffd\u7565 0 \u5f00\u5934\uff0c\u5ffd\u7565\u5927\u5c0f\u5199)\u3002 \u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u56e0\u4e3a\u67d0\u4e2a\u7ec4\u7684\u503c\u4e3a 0\uff0c\u800c\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684\u7ec4\uff0c\u4ee5\u81f3\u4e8e\u51fa\u73b0 (::) \u7684\u60c5\u51b5\u3002 \u6bd4\u5982\uff0c 2001:0db8:85a3::8A2E:0370:7334 \u662f\u65e0\u6548\u7684 IPv6 \u5730\u5740\u3002 \u540c\u65f6\uff0c\u5728 IPv6 \u5730\u5740\u4e2d\uff0c\u591a\u4f59\u7684 0 \u4e5f\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u6bd4\u5982\uff0c 02001:0db8:85a3:0000:0000:8a2e:0370:7334 \u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u91cc\u6ca1\u6709\u7a7a\u683c\u6216\u8005\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u3002 \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: \"172.16.254.1\" \u8f93\u51fa: \"IPv4\" \u89e3\u91ca: \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv4 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de \"IPv4\"\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: \"2001:0db8:85a3:0:0:8A2E:0370:7334\" \u8f93\u51fa: \"IPv6\" \u89e3\u91ca: \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de \"IPv6\"\u3002 \u793a\u4f8b 3: 1 2 3 4 5 \u8f93\u5165: \"256.256.256.256\" \u8f93\u51fa: \"Neither\" \u89e3\u91ca: \u8fd9\u4e2a\u5730\u5740\u65e2\u4e0d\u662f IPv4 \u4e5f\u4e0d\u662f IPv6 \u5730\u5740\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u6309\u7167\u9898\u76ee\u63cf\u8ff0\u5206\u60c5\u51b5\u8ba8\u8bba 3. AC\u4ee3\u7801 \u00b6 C","title":"[468. \u9a8c\u8bc1IP\u5730\u5740](https://leetcode-cn.com/problems/validate-ip-address)"},{"location":"leetcode/468/readme/#468-ip","text":"","title":"468. \u9a8c\u8bc1IP\u5730\u5740"},{"location":"leetcode/468/readme/#1","text":"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u7684 IPv4 \u6216 IPv6 \u5730\u5740\u3002 IPv4 \u5730\u5740\u7531\u5341\u8fdb\u5236\u6570\u548c\u70b9\u6765\u8868\u793a\uff0c\u6bcf\u4e2a\u5730\u5740\u5305\u542b4\u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5176\u8303\u56f4\u4e3a 0 - 255\uff0c \u7528(\".\")\u5206\u5272\u3002\u6bd4\u5982\uff0c172.16.254.1\uff1b \u540c\u65f6\uff0cIPv4 \u5730\u5740\u5185\u7684\u6570\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002\u6bd4\u5982\uff0c\u5730\u5740 172.16.254.01 \u662f\u4e0d\u5408\u6cd5\u7684\u3002 IPv6 \u5730\u5740\u75318\u7ec416\u8fdb\u5236\u7684\u6570\u5b57\u6765\u8868\u793a\uff0c\u6bcf\u7ec4\u8868\u793a 16 \u6bd4\u7279\u3002\u8fd9\u4e9b\u7ec4\u6570\u5b57\u901a\u8fc7 (\":\")\u5206\u5272\u3002\u6bd4\u5982, 2001:0db8:85a3:0000:0000:8a2e:0370:7334 \u662f\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u3002\u800c\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u5165\u4e00\u4e9b\u4ee5 0 \u5f00\u5934\u7684\u6570\u5b57\uff0c\u5b57\u6bcd\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c0f\u5199\u3002\u6240\u4ee5\uff0c 2001:db8:85a3:0:0:8A2E:0370:7334 \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 address\u5730\u5740 (\u5373\uff0c\u5ffd\u7565 0 \u5f00\u5934\uff0c\u5ffd\u7565\u5927\u5c0f\u5199)\u3002 \u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u56e0\u4e3a\u67d0\u4e2a\u7ec4\u7684\u503c\u4e3a 0\uff0c\u800c\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684\u7ec4\uff0c\u4ee5\u81f3\u4e8e\u51fa\u73b0 (::) \u7684\u60c5\u51b5\u3002 \u6bd4\u5982\uff0c 2001:0db8:85a3::8A2E:0370:7334 \u662f\u65e0\u6548\u7684 IPv6 \u5730\u5740\u3002 \u540c\u65f6\uff0c\u5728 IPv6 \u5730\u5740\u4e2d\uff0c\u591a\u4f59\u7684 0 \u4e5f\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u6bd4\u5982\uff0c 02001:0db8:85a3:0000:0000:8a2e:0370:7334 \u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e: \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u91cc\u6ca1\u6709\u7a7a\u683c\u6216\u8005\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u3002 \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: \"172.16.254.1\" \u8f93\u51fa: \"IPv4\" \u89e3\u91ca: \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv4 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de \"IPv4\"\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: \"2001:0db8:85a3:0:0:8A2E:0370:7334\" \u8f93\u51fa: \"IPv6\" \u89e3\u91ca: \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de \"IPv6\"\u3002 \u793a\u4f8b 3: 1 2 3 4 5 \u8f93\u5165: \"256.256.256.256\" \u8f93\u51fa: \"Neither\" \u89e3\u91ca: \u8fd9\u4e2a\u5730\u5740\u65e2\u4e0d\u662f IPv4 \u4e5f\u4e0d\u662f IPv6 \u5730\u5740\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/468/readme/#2","text":"\u6309\u7167\u9898\u76ee\u63cf\u8ff0\u5206\u60c5\u51b5\u8ba8\u8bba","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/468/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/472/472/index.c.html","text":"472.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_WORD 256 // \u5355\u8bcd\u6700\u5927\u957f\u5ea6 #define MAX_CHAR 26 // \u5b57\u6bcd\u79cd\u7c7b\uff0c 26\u4e2a\u5c0f\u5199\u5b57\u6bcd typedef struct node { struct node * children [ MAX_CHAR ]; // \u6307\u5411\u5b69\u5b50\u4eec\u7684\u6307\u9488\u6570\u7ec4 char c ; // \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u5b57\u6bcd bool isWord ; // \u8bb0\u5f55\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0 bool isUsed ; // \u6807\u8bb0\u662f\u5426\u641c\u7d22\u8fc7 } Trie ; Trie * groot = NULL ; void initChildren ( Trie ** children , int size ) { for ( int i = 0 ; i < size ; i ++ ) { children [ i ] = NULL ; } } Trie * trieCreate () { Trie * root = ( Trie * ) malloc ( sizeof ( Trie )); root -> c = ' ' ; root -> isWord = false ; initChildren ( root -> children , MAX_CHAR ); return root ; } /** Inserts a word into the trie. */ void trieInsert ( Trie * obj , char * word ) { if ( word == NULL ) return ; const int n = strlen ( word ); if ( n == 0 ) return ; Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; // \u8f6c\u6362\u6210\u7d22\u5f15 if ( curr -> children [ index ] == NULL ) { // \u8be5\u5b57\u7b26\u8fd8\u4e0d\u5b58\u5728\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ i ]; newNode -> isWord = ( i == n - 1 ) ? true : false ; initChildren ( newNode -> children , MAX_CHAR ); curr -> children [ index ] = newNode ; curr = newNode ; } else { // \u5982\u679c\u5b58\u5728\uff0c\u5224\u65ad\u662f\u5426\u5230\u4e86\u6700\u540e\u4e00\u4e2a if ( i == n - 1 ) { curr -> children [ index ] -> isWord = true ; } curr = curr -> children [ index ]; } } return ; } int compare ( const void * p , const void * q ) { char * a = * ( char ** ) p ; char * b = * ( char ** ) q ; if ( strlen ( a ) != strlen ( b )) { return strlen ( a ) - strlen ( b ); } return strcmp ( a , b ); } // \u8fd4\u56de\u5355\u8bcd\u662f\u5426\u53ef\u62c6\u5206 bool dfs ( char * word , int index , Trie * node , bool split ) { if ( index >= strlen ( word )) return false ; char ic = word [ index ] - 'a' ; if ( node -> children [ ic ] == NULL && split == false ) { // \u524d\u7f00\u6811\u4e2d\u6ca1\u6709\u5f53\u524d\u5b57\u6bcd\uff0c \u4e14\u6ca1\u6709\u62c6\u5206\uff0c\u52a0\u5165\u524d\u7f00\u6811 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ index ]; newNode -> isWord = ( index == strlen ( word ) - 1 ) ? true : false ; initChildren ( newNode -> children , MAX_CHAR ); node -> children [ ic ] = newNode ; return dfs ( word , index + 1 , newNode , split ); } else if ( node -> children [ ic ] == NULL && split == true ) { // \u5355\u8bcd\u5df2\u7ecf\u62c6\u5206\uff0c\u76f4\u63a5\u8fd4\u56defalse return false ; } else if ( node -> children [ ic ] -> isWord && index == strlen ( word ) - 1 && split == true ) { // \u5339\u914d\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd return true ; } if ( node -> children [ ic ] -> isWord ) { // \u62c6\u5206\u7684\u65f6\u5019\u8bbe\u7f6e\u8be5\u5355\u8bcd\u7ef4\u5df2\u7ecf\u4f7f\u7528\uff0c\u5426\u5219\u53ef\u80fd\u4f7f\u7528\u5230\u91cd\u590d\u7684\u5355\u8bcd bool is = dfs ( word , index + 1 , groot , true ); if ( is ) { return true ; } } return dfs ( word , index + 1 , node -> children [ ic ], split ); } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findAllConcatenatedWordsInADict ( char ** words , int wordsSize , int * returnSize ){ * returnSize = 0 ; if ( words == NULL || wordsSize <= 0 ) return NULL ; char ** ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); int ansEnd = 0 ; qsort ( words , wordsSize , sizeof ( words [ 0 ]), compare ); Trie * root = trieCreate (); groot = root ; // groot \u4fdd\u5b58\u5168\u5c40\u7684\u6839\u8282\u70b9 for ( int i = 0 ; i < wordsSize ; i ++ ) { bool is = dfs ( words [ i ], 0 , root , false ); if ( is ) { ans [ ansEnd ++ ] = words [ i ]; } } * returnSize = ansEnd ; return ans ; } int main () { char * words [ 8 ] = { \"cat\" , \"cats\" , \"catsdogcats\" , \"dog\" , \"dogcatsdog\" , \"hippopotamuses\" , \"rat\" , \"ratcatdogcat\" }; int wordsSize = 8 ; int returnSize = 0 ; char ** ans = findAllConcatenatedWordsInADict ( words , wordsSize , & returnSize ); return 0 ; } /* \u6267\u884c\u7528\u65f6 :308 ms, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8647.52%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017 :211.8 MB, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 */","title":"472.c"},{"location":"leetcode/472/472/index.c.html#472c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> #define MAX_WORD 256 // \u5355\u8bcd\u6700\u5927\u957f\u5ea6 #define MAX_CHAR 26 // \u5b57\u6bcd\u79cd\u7c7b\uff0c 26\u4e2a\u5c0f\u5199\u5b57\u6bcd typedef struct node { struct node * children [ MAX_CHAR ]; // \u6307\u5411\u5b69\u5b50\u4eec\u7684\u6307\u9488\u6570\u7ec4 char c ; // \u5f53\u524d\u8282\u70b9\u8868\u793a\u7684\u5b57\u6bcd bool isWord ; // \u8bb0\u5f55\u5355\u8bcd\u7ed3\u675f\u6807\u8bb0 bool isUsed ; // \u6807\u8bb0\u662f\u5426\u641c\u7d22\u8fc7 } Trie ; Trie * groot = NULL ; void initChildren ( Trie ** children , int size ) { for ( int i = 0 ; i < size ; i ++ ) { children [ i ] = NULL ; } } Trie * trieCreate () { Trie * root = ( Trie * ) malloc ( sizeof ( Trie )); root -> c = ' ' ; root -> isWord = false ; initChildren ( root -> children , MAX_CHAR ); return root ; } /** Inserts a word into the trie. */ void trieInsert ( Trie * obj , char * word ) { if ( word == NULL ) return ; const int n = strlen ( word ); if ( n == 0 ) return ; Trie * curr = obj ; for ( int i = 0 ; i < n ; i ++ ) { int index = word [ i ] - 'a' ; // \u8f6c\u6362\u6210\u7d22\u5f15 if ( curr -> children [ index ] == NULL ) { // \u8be5\u5b57\u7b26\u8fd8\u4e0d\u5b58\u5728\uff0c\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ i ]; newNode -> isWord = ( i == n - 1 ) ? true : false ; initChildren ( newNode -> children , MAX_CHAR ); curr -> children [ index ] = newNode ; curr = newNode ; } else { // \u5982\u679c\u5b58\u5728\uff0c\u5224\u65ad\u662f\u5426\u5230\u4e86\u6700\u540e\u4e00\u4e2a if ( i == n - 1 ) { curr -> children [ index ] -> isWord = true ; } curr = curr -> children [ index ]; } } return ; } int compare ( const void * p , const void * q ) { char * a = * ( char ** ) p ; char * b = * ( char ** ) q ; if ( strlen ( a ) != strlen ( b )) { return strlen ( a ) - strlen ( b ); } return strcmp ( a , b ); } // \u8fd4\u56de\u5355\u8bcd\u662f\u5426\u53ef\u62c6\u5206 bool dfs ( char * word , int index , Trie * node , bool split ) { if ( index >= strlen ( word )) return false ; char ic = word [ index ] - 'a' ; if ( node -> children [ ic ] == NULL && split == false ) { // \u524d\u7f00\u6811\u4e2d\u6ca1\u6709\u5f53\u524d\u5b57\u6bcd\uff0c \u4e14\u6ca1\u6709\u62c6\u5206\uff0c\u52a0\u5165\u524d\u7f00\u6811 Trie * newNode = ( Trie * ) malloc ( sizeof ( Trie )); newNode -> c = word [ index ]; newNode -> isWord = ( index == strlen ( word ) - 1 ) ? true : false ; initChildren ( newNode -> children , MAX_CHAR ); node -> children [ ic ] = newNode ; return dfs ( word , index + 1 , newNode , split ); } else if ( node -> children [ ic ] == NULL && split == true ) { // \u5355\u8bcd\u5df2\u7ecf\u62c6\u5206\uff0c\u76f4\u63a5\u8fd4\u56defalse return false ; } else if ( node -> children [ ic ] -> isWord && index == strlen ( word ) - 1 && split == true ) { // \u5339\u914d\u5230\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd return true ; } if ( node -> children [ ic ] -> isWord ) { // \u62c6\u5206\u7684\u65f6\u5019\u8bbe\u7f6e\u8be5\u5355\u8bcd\u7ef4\u5df2\u7ecf\u4f7f\u7528\uff0c\u5426\u5219\u53ef\u80fd\u4f7f\u7528\u5230\u91cd\u590d\u7684\u5355\u8bcd bool is = dfs ( word , index + 1 , groot , true ); if ( is ) { return true ; } } return dfs ( word , index + 1 , node -> children [ ic ], split ); } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findAllConcatenatedWordsInADict ( char ** words , int wordsSize , int * returnSize ){ * returnSize = 0 ; if ( words == NULL || wordsSize <= 0 ) return NULL ; char ** ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); int ansEnd = 0 ; qsort ( words , wordsSize , sizeof ( words [ 0 ]), compare ); Trie * root = trieCreate (); groot = root ; // groot \u4fdd\u5b58\u5168\u5c40\u7684\u6839\u8282\u70b9 for ( int i = 0 ; i < wordsSize ; i ++ ) { bool is = dfs ( words [ i ], 0 , root , false ); if ( is ) { ans [ ansEnd ++ ] = words [ i ]; } } * returnSize = ansEnd ; return ans ; } int main () { char * words [ 8 ] = { \"cat\" , \"cats\" , \"catsdogcats\" , \"dog\" , \"dogcatsdog\" , \"hippopotamuses\" , \"rat\" , \"ratcatdogcat\" }; int wordsSize = 8 ; int returnSize = 0 ; char ** ans = findAllConcatenatedWordsInADict ( words , wordsSize , & returnSize ); return 0 ; } /* \u6267\u884c\u7528\u65f6 :308 ms, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8647.52%\u7684\u7528\u6237 \u5185\u5b58\u6d88\u8017 :211.8 MB, \u5728\u6240\u6709 C \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237 */","title":"472.c"},{"location":"leetcode/472/readme/","text":"472. \u8fde\u63a5\u8bcd \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5355\u8bcd\u7684\u5217\u8868\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u6240\u6709\u7684\u8fde\u63a5\u8bcd\u3002 \u8fde\u63a5\u8bcd\u7684\u5b9a\u4e49\u4e3a\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b8c\u5168\u662f\u7531\u81f3\u5c11\u4e24\u4e2a\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"] \u8f93\u51fa: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"] \u89e3\u91ca: \"catsdogcats\"\u7531\"cats\", \"dog\" \u548c \"cats\"\u7ec4\u6210; \"dogcatsdog\"\u7531\"dog\", \"cats\"\u548c\"dog\"\u7ec4\u6210; \"ratcatdogcat\"\u7531\"rat\", \"cat\", \"dog\"\u548c\"cat\"\u7ec4\u6210\u3002 \u8bf4\u660e: 1 2 3 4 \u7ed9\u5b9a\u6570\u7ec4\u7684\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc7 10000\u3002 \u7ed9\u5b9a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u957f\u5ea6\u603b\u548c\u4e0d\u8d85\u8fc7 600000\u3002 \u6240\u6709\u8f93\u5165\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u4e0d\u9700\u8981\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u6309\u7167\u5355\u8bcd\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u9010\u4e2a\u5355\u8bcd\u63d2\u5165\u524d\u7f00\u6811\uff0c\u63d2\u5165\u4e4b\u524d\u5728\u6811\u4e2d\u67e5\u627e\uff0c\u4e00\u65e6\u627e\u5230\u4ece\u6839\u5f00\u59cb\u63d2\u5165 \u5982\u679c\u80fd\u591f\u627e\u5230\uff0c\u8fd9\u4e2a\u5355\u8bcd\u8ba1\u5165\u7ed3\u679c\uff0c\u4e0d\u63d2\u5165\u6811\u4e2d \u5982\u679c\u6700\u7ec8\u6ca1\u80fd\u627e\u5230\uff0c\u628a\u8be5\u5355\u8bcd\u63d2\u5165\u524d\u7f00\u6811 C","title":"[472. \u8fde\u63a5\u8bcd](https://leetcode-cn.com/problems/concatenated-words/)"},{"location":"leetcode/472/readme/#472","text":"","title":"472. \u8fde\u63a5\u8bcd"},{"location":"leetcode/472/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5355\u8bcd\u7684\u5217\u8868\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u6240\u6709\u7684\u8fde\u63a5\u8bcd\u3002 \u8fde\u63a5\u8bcd\u7684\u5b9a\u4e49\u4e3a\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b8c\u5168\u662f\u7531\u81f3\u5c11\u4e24\u4e2a\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u3002 \u793a\u4f8b: 1 2 3 4 5 6 7 \u8f93\u5165: [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"] \u8f93\u51fa: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"] \u89e3\u91ca: \"catsdogcats\"\u7531\"cats\", \"dog\" \u548c \"cats\"\u7ec4\u6210; \"dogcatsdog\"\u7531\"dog\", \"cats\"\u548c\"dog\"\u7ec4\u6210; \"ratcatdogcat\"\u7531\"rat\", \"cat\", \"dog\"\u548c\"cat\"\u7ec4\u6210\u3002 \u8bf4\u660e: 1 2 3 4 \u7ed9\u5b9a\u6570\u7ec4\u7684\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc7 10000\u3002 \u7ed9\u5b9a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u957f\u5ea6\u603b\u548c\u4e0d\u8d85\u8fc7 600000\u3002 \u6240\u6709\u8f93\u5165\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u4e0d\u9700\u8981\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/472/readme/#2","text":"\u6309\u7167\u5355\u8bcd\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u9010\u4e2a\u5355\u8bcd\u63d2\u5165\u524d\u7f00\u6811\uff0c\u63d2\u5165\u4e4b\u524d\u5728\u6811\u4e2d\u67e5\u627e\uff0c\u4e00\u65e6\u627e\u5230\u4ece\u6839\u5f00\u59cb\u63d2\u5165 \u5982\u679c\u80fd\u591f\u627e\u5230\uff0c\u8fd9\u4e2a\u5355\u8bcd\u8ba1\u5165\u7ed3\u679c\uff0c\u4e0d\u63d2\u5165\u6811\u4e2d \u5982\u679c\u6700\u7ec8\u6ca1\u80fd\u627e\u5230\uff0c\u628a\u8be5\u5355\u8bcd\u63d2\u5165\u524d\u7f00\u6811 C","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/495/readme/","text":"495. \u63d0\u83ab\u653b\u51fb \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5728\u300a\u82f1\u96c4\u8054\u76df\u300b\u7684\u4e16\u754c\u4e2d\uff0c\u6709\u4e00\u4e2a\u53eb \u201c\u63d0\u83ab\u201d \u7684\u82f1\u96c4\uff0c\u4ed6\u7684\u653b\u51fb\u53ef\u4ee5\u8ba9\u654c\u65b9\u82f1\u96c4\u827e\u5e0c\uff08\u7f16\u8005\u6ce8\uff1a\u5bd2\u51b0\u5c04\u624b\uff09\u8fdb\u5165\u4e2d\u6bd2\u72b6\u6001\u3002\u73b0\u5728\uff0c\u7ed9\u51fa\u63d0\u83ab\u5bf9\u827e\u5e0c\u7684\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u827e\u5e0c\u7684\u4e2d\u6bd2\u72b6\u6001\u603b\u65f6\u957f\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u63d0\u83ab\u5728\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\u8fdb\u884c\u653b\u51fb\uff0c\u5e76\u7acb\u5373\u4f7f\u827e\u5e0c\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u3002 \u793a\u4f8b1: 1 2 3 4 5 \u8f93\u5165: [1,4], 2 \u8f93\u51fa: 4 \u539f\u56e0: \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002 \u7b2c 4 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u827e\u5e0c\uff0c\u4f7f\u5f97\u827e\u5e0c\u83b7\u5f97\u53e6\u5916 2 \u79d2\u4e2d\u6bd2\u65f6\u95f4\u3002 \u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 4 \u79d2\u3002 \u793a\u4f8b2: 1 2 3 4 5 6 \u8f93\u5165: [1,2], 2 \u8f93\u51fa: 3 \u539f\u56e0: \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002 \u4f46\u662f\u7b2c 2 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u4e86\u5df2\u7ecf\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u7684\u827e\u5e0c\u3002 \u7531\u4e8e\u4e2d\u6bd2\u72b6\u6001\u4e0d\u53ef\u53e0\u52a0\uff0c\u63d0\u83ab\u5728\u7b2c 2 \u79d2\u521d\u7684\u8fd9\u6b21\u653b\u51fb\u4f1a\u5728\u7b2c 3 \u79d2\u672b\u7ed3\u675f\u3002 \u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 3 \u3002 \u63d0\u793a\uff1a 1 2 \u4f60\u53ef\u4ee5\u5047\u5b9a\u65f6\u95f4\u5e8f\u5217\u6570\u7ec4\u7684\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 10000\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u63d0\u83ab\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u8d85\u8fc7 10,000,000\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u4e2d\u6bd2\u6301\u7eed\u622a\u81f3\u65f6\u95f4\u7684\u53d8\u91cfend, \u626b\u63cf\u6bcf\u4e2a\u65f6\u95f4\u70b9\uff0c\u5982\u679c\u5f53\u524d\u65f6\u95f4\u70b9\u5927\u4e8e\u7b49\u4e8eend, \u6301\u7eed\u65f6\u95f4+duration \u5982\u679c\u5f53\u524d\u65f6\u95f4\u70b9\u5c0f\u4e8eend, \u8bf4\u660e\u4e2d\u6bd2\u65f6\u95f4\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u4e2d\u6bd2\u65f6\u95f4\u6709\u635f\u5931\uff0c\u4e3a time + duration - end. \u626b\u63cf\u4e00\u904d\u5373\u53ef\u5f97\u5230\u7ed3\u679c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n). class Solution ( object ): def findPoisonedDuration ( self , timeSeries , duration ): \"\"\" :type timeSeries: List[int] :type duration: int :rtype: int \"\"\" dead = 0 end = 0 for time in timeSeries : if time >= end : dead += duration else : dead += time + duration - end end = time + duration return dead","title":"[495. \u63d0\u83ab\u653b\u51fb](https://leetcode-cn.com/problems/teemo-attacking/)"},{"location":"leetcode/495/readme/#495","text":"","title":"495. \u63d0\u83ab\u653b\u51fb"},{"location":"leetcode/495/readme/#1","text":"\u5728\u300a\u82f1\u96c4\u8054\u76df\u300b\u7684\u4e16\u754c\u4e2d\uff0c\u6709\u4e00\u4e2a\u53eb \u201c\u63d0\u83ab\u201d \u7684\u82f1\u96c4\uff0c\u4ed6\u7684\u653b\u51fb\u53ef\u4ee5\u8ba9\u654c\u65b9\u82f1\u96c4\u827e\u5e0c\uff08\u7f16\u8005\u6ce8\uff1a\u5bd2\u51b0\u5c04\u624b\uff09\u8fdb\u5165\u4e2d\u6bd2\u72b6\u6001\u3002\u73b0\u5728\uff0c\u7ed9\u51fa\u63d0\u83ab\u5bf9\u827e\u5e0c\u7684\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u827e\u5e0c\u7684\u4e2d\u6bd2\u72b6\u6001\u603b\u65f6\u957f\u3002 \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u63d0\u83ab\u5728\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\u8fdb\u884c\u653b\u51fb\uff0c\u5e76\u7acb\u5373\u4f7f\u827e\u5e0c\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u3002 \u793a\u4f8b1: 1 2 3 4 5 \u8f93\u5165: [1,4], 2 \u8f93\u51fa: 4 \u539f\u56e0: \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002 \u7b2c 4 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u827e\u5e0c\uff0c\u4f7f\u5f97\u827e\u5e0c\u83b7\u5f97\u53e6\u5916 2 \u79d2\u4e2d\u6bd2\u65f6\u95f4\u3002 \u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 4 \u79d2\u3002 \u793a\u4f8b2: 1 2 3 4 5 6 \u8f93\u5165: [1,2], 2 \u8f93\u51fa: 3 \u539f\u56e0: \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002 \u4f46\u662f\u7b2c 2 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u4e86\u5df2\u7ecf\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u7684\u827e\u5e0c\u3002 \u7531\u4e8e\u4e2d\u6bd2\u72b6\u6001\u4e0d\u53ef\u53e0\u52a0\uff0c\u63d0\u83ab\u5728\u7b2c 2 \u79d2\u521d\u7684\u8fd9\u6b21\u653b\u51fb\u4f1a\u5728\u7b2c 3 \u79d2\u672b\u7ed3\u675f\u3002 \u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 3 \u3002 \u63d0\u793a\uff1a 1 2 \u4f60\u53ef\u4ee5\u5047\u5b9a\u65f6\u95f4\u5e8f\u5217\u6570\u7ec4\u7684\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 10000\u3002 \u4f60\u53ef\u4ee5\u5047\u5b9a\u63d0\u83ab\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u8d85\u8fc7 10,000,000\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/495/readme/#2","text":"\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u4e2d\u6bd2\u6301\u7eed\u622a\u81f3\u65f6\u95f4\u7684\u53d8\u91cfend, \u626b\u63cf\u6bcf\u4e2a\u65f6\u95f4\u70b9\uff0c\u5982\u679c\u5f53\u524d\u65f6\u95f4\u70b9\u5927\u4e8e\u7b49\u4e8eend, \u6301\u7eed\u65f6\u95f4+duration \u5982\u679c\u5f53\u524d\u65f6\u95f4\u70b9\u5c0f\u4e8eend, \u8bf4\u660e\u4e2d\u6bd2\u65f6\u95f4\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u4e2d\u6bd2\u65f6\u95f4\u6709\u635f\u5931\uff0c\u4e3a time + duration - end. \u626b\u63cf\u4e00\u904d\u5373\u53ef\u5f97\u5230\u7ed3\u679c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n). class Solution ( object ): def findPoisonedDuration ( self , timeSeries , duration ): \"\"\" :type timeSeries: List[int] :type duration: int :rtype: int \"\"\" dead = 0 end = 0 for time in timeSeries : if time >= end : dead += duration else : dead += time + duration - end end = time + duration return dead","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/5/readme/","text":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002 \u793a\u4f8b \u793a\u4f8b 1\uff1a \u8f93\u5165: \"babad\" \u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"cbbd\" \u8f93\u51fa: \"bb\" 2. \u89e3\u9898\u601d\u8def1 \u00b6 \u66b4\u529b\u65b9\u6cd5\uff0c\u5206\u522b\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u67e5\u627e\u6700\u957f\u7684\u56de\u6587\u4e32\uff0c\u4fdd\u5b58\u6700\u957f\u7684\u90a3\u4e2a\u7684\u4e0b\u6807\uff0c\u8fd4\u56de\u3002 \u65f6\u95f4\u590d\u6742\u5ea6O(n^2),\u53ef\u4ee5\u901a\u8fc7\u3002 2.1 C++ \u00b6 class Solution { public : string longestPalindrome ( string s ) { if ( s . size () <= 1 ) return s ; int start = 0 , end = 0 ; for ( int i = 0 ; i < s . size (); i ++ ) { int left , right , tmpLen = 0 ; // \u4ee5s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = right = i ; while ( left >= 0 && right < s . size () && s [ left ] == s [ right ]) { left -- , right ++ ; } tmpLen = max ( tmpLen , right - left - 1 ); // \u4ee5s[i],s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = i , right = i + 1 ; while ( left >= 0 && right < s . size () && s [ left ] == s [ right ]) { left -- , right ++ ; } tmpLen = max ( tmpLen , right - left - 1 ); // \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0start, end if ( tmpLen > end - start + 1 ) { start = i - ( tmpLen - 1 ) / 2 ; end = i + tmpLen / 2 ; } } return s . substr ( start , end - start + 1 ); } }; 2.2 python \u00b6 class Solution : def longestPalindrome ( self , s : str ) -> str : start = 0 end = 0 for i in range ( len ( s )): tmp_max = 0 # s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = i right = i while left >= 0 and right < len ( s ) and s [ left ] == s [ right ]: left -= 1 right += 1 tmp_max = max ( tmp_max , right - left - 1 ) # s[i], s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = i right = i + 1 while left >= 0 and right < len ( s ) and s [ left ] == s [ right ]: left -= 1 right += 1 tmp_max = max ( tmp_max , right - left - 1 ) # \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0\u8bb0\u5f55\u7684\u4e0b\u6807 if tmp_max > end - start + 1 : start = i - ( tmp_max - 1 ) // 2 end = i + tmp_max // 2 return s [ start : end + 1 ] 3. \u89e3\u9898\u601d\u8def2 \u00b6 \u4f7f\u7528Manacher\u7b97\u6cd5\u53ef\u4ee5\u8fbe\u5230O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 https://segmentfault.com/a/1190000008484167 3.1 python \u00b6 ```python class Solution(object): def longestPalindrome(self, s): \"\"\" :type s: str :rtype: str \"\"\" # \u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u63d2\u5165\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5b57\u7b26 '#' s = '#' + \"\".join([c + '#' for c in s]) s = '^' + s + '$' # \u9996\u5c3e\u9644\u52a0\u4e0d\u540c\u5b57\u7b26\u907f\u514d\u8fb9\u754c\u5224\u65ad n = len(s) lps = [1] * n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 lid, mid, rid = 0, 0, 0 i = 1 # s[0] \u662f '^'\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97 center = 0 # \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u7528\u6765\u751f\u6210\u56de\u6587 ans = 0 # \u6700\u957f\u56de\u6587\u7684\u957f\u5ea6 while i < n - 1: if i < rid: # i' = 2 * mid - i \u662f i \u5173\u4e8e mid \u7684\u5bf9\u79f0\u70b9 lps[i] = min(lps[2 * mid - i], rid - i) # lps[i] \u521d\u59cb\u5316\u4e3a1\uff0c\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u90fd\u662f\u534a\u5f84\u4e3a1\u7684\u56de\u6587 # \u4ee5 i \u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62 # \u56e0\u4e3a\u9996\u5c3e\u65b0\u589e\u4e86\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u5230\u8fb9\u754c\u4e00\u5b9a\u4f1a\u505c\u6b62 while s[i - lps[i]] == s[i + lps[i]]: lps[i] += 1 # \u901a\u8fc7\u4e0a\u9762\u7684\u5faa\u73af\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u51fa lps[i] # \u5982\u679c i + lps[i] > rid, \u8bf4\u660e\u7ecf\u8fc7\u6269\u5c55\u8fb9\u754c\u5df2\u7ecf\u8d85\u8fc7 rid # \u66f4\u65b0 mid \u4e3a i, \u56e0\u4e3a lps[i] \u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230 # \u66f4\u65b0 rid \u4e3a mid + lps[mid] if rid < i + lps[i]: mid = i rid = mid + lps[mid] if ans < lps[i] - 1: ans = lps[i] - 1 center = i # \u5982\u679c i + lps[i] < rid, \u8bf4\u660e i \u7684\u8fb9\u754c\u8fd8\u6ca1\u6709\u8d8a\u8fc7 mid \u7684\u8fb9\u754c # \u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97 i + 1, \u4f9d\u65e7\u5229\u7528 mid \u7684\u5806\u79f0\u4fe1\u606f i += 1 string = s[center-ans : center + ans] string = string.replace(\"#\", \"\") return string ```","title":"Readme"},{"location":"leetcode/5/readme/#5","text":"","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"leetcode/5/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002 \u793a\u4f8b \u793a\u4f8b 1\uff1a \u8f93\u5165: \"babad\" \u8f93\u51fa: \"bab\" \u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"cbbd\" \u8f93\u51fa: \"bb\"","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/5/readme/#2-1","text":"\u66b4\u529b\u65b9\u6cd5\uff0c\u5206\u522b\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u67e5\u627e\u6700\u957f\u7684\u56de\u6587\u4e32\uff0c\u4fdd\u5b58\u6700\u957f\u7684\u90a3\u4e2a\u7684\u4e0b\u6807\uff0c\u8fd4\u56de\u3002 \u65f6\u95f4\u590d\u6742\u5ea6O(n^2),\u53ef\u4ee5\u901a\u8fc7\u3002","title":"2. \u89e3\u9898\u601d\u8def1"},{"location":"leetcode/5/readme/#21-c","text":"class Solution { public : string longestPalindrome ( string s ) { if ( s . size () <= 1 ) return s ; int start = 0 , end = 0 ; for ( int i = 0 ; i < s . size (); i ++ ) { int left , right , tmpLen = 0 ; // \u4ee5s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = right = i ; while ( left >= 0 && right < s . size () && s [ left ] == s [ right ]) { left -- , right ++ ; } tmpLen = max ( tmpLen , right - left - 1 ); // \u4ee5s[i],s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = i , right = i + 1 ; while ( left >= 0 && right < s . size () && s [ left ] == s [ right ]) { left -- , right ++ ; } tmpLen = max ( tmpLen , right - left - 1 ); // \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0start, end if ( tmpLen > end - start + 1 ) { start = i - ( tmpLen - 1 ) / 2 ; end = i + tmpLen / 2 ; } } return s . substr ( start , end - start + 1 ); } };","title":"2.1 C++"},{"location":"leetcode/5/readme/#22-python","text":"class Solution : def longestPalindrome ( self , s : str ) -> str : start = 0 end = 0 for i in range ( len ( s )): tmp_max = 0 # s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = i right = i while left >= 0 and right < len ( s ) and s [ left ] == s [ right ]: left -= 1 right += 1 tmp_max = max ( tmp_max , right - left - 1 ) # s[i], s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32 left = i right = i + 1 while left >= 0 and right < len ( s ) and s [ left ] == s [ right ]: left -= 1 right += 1 tmp_max = max ( tmp_max , right - left - 1 ) # \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0\u8bb0\u5f55\u7684\u4e0b\u6807 if tmp_max > end - start + 1 : start = i - ( tmp_max - 1 ) // 2 end = i + tmp_max // 2 return s [ start : end + 1 ]","title":"2.2 python"},{"location":"leetcode/5/readme/#3-2","text":"\u4f7f\u7528Manacher\u7b97\u6cd5\u53ef\u4ee5\u8fbe\u5230O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 https://segmentfault.com/a/1190000008484167","title":"3. \u89e3\u9898\u601d\u8def2"},{"location":"leetcode/5/readme/#31-python","text":"```python class Solution(object): def longestPalindrome(self, s): \"\"\" :type s: str :rtype: str \"\"\" # \u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u63d2\u5165\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5b57\u7b26 '#' s = '#' + \"\".join([c + '#' for c in s]) s = '^' + s + '$' # \u9996\u5c3e\u9644\u52a0\u4e0d\u540c\u5b57\u7b26\u907f\u514d\u8fb9\u754c\u5224\u65ad n = len(s) lps = [1] * n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 lid, mid, rid = 0, 0, 0 i = 1 # s[0] \u662f '^'\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97 center = 0 # \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u7528\u6765\u751f\u6210\u56de\u6587 ans = 0 # \u6700\u957f\u56de\u6587\u7684\u957f\u5ea6 while i < n - 1: if i < rid: # i' = 2 * mid - i \u662f i \u5173\u4e8e mid \u7684\u5bf9\u79f0\u70b9 lps[i] = min(lps[2 * mid - i], rid - i) # lps[i] \u521d\u59cb\u5316\u4e3a1\uff0c\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u90fd\u662f\u534a\u5f84\u4e3a1\u7684\u56de\u6587 # \u4ee5 i \u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62 # \u56e0\u4e3a\u9996\u5c3e\u65b0\u589e\u4e86\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u5230\u8fb9\u754c\u4e00\u5b9a\u4f1a\u505c\u6b62 while s[i - lps[i]] == s[i + lps[i]]: lps[i] += 1 # \u901a\u8fc7\u4e0a\u9762\u7684\u5faa\u73af\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u51fa lps[i] # \u5982\u679c i + lps[i] > rid, \u8bf4\u660e\u7ecf\u8fc7\u6269\u5c55\u8fb9\u754c\u5df2\u7ecf\u8d85\u8fc7 rid # \u66f4\u65b0 mid \u4e3a i, \u56e0\u4e3a lps[i] \u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230 # \u66f4\u65b0 rid \u4e3a mid + lps[mid] if rid < i + lps[i]: mid = i rid = mid + lps[mid] if ans < lps[i] - 1: ans = lps[i] - 1 center = i # \u5982\u679c i + lps[i] < rid, \u8bf4\u660e i \u7684\u8fb9\u754c\u8fd8\u6ca1\u6709\u8d8a\u8fc7 mid \u7684\u8fb9\u754c # \u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97 i + 1, \u4f9d\u65e7\u5229\u7528 mid \u7684\u5806\u79f0\u4fe1\u606f i += 1 string = s[center-ans : center + ans] string = string.replace(\"#\", \"\") return string ```","title":"3.1 python"},{"location":"leetcode/515/readme/","text":"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165: 1 / \\ 3 2 / \\ \\ 5 3 9 \u8f93\u51fa: [1, 3, 9] 2. \u89e3\u9898\u601d\u8def \u00b6 \u5c42\u6b21\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u5c42\u6c42\u4e00\u4e2a\u6700\u5927\u503c\uff0c \u5c42\u6b21\u7684\u533a\u5206\u4f7f\u7528\u961f\u5217\u3002 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution ( object ): def largestValues ( self , root ): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" ans = [] if root is None : return ans count = 1 deque = [] deque . append ( root ) ans . append ( root . val ) while len ( deque ) > 0 : cur = deque . pop ( 0 ) if cur . left : deque . append ( cur . left ) if cur . right : deque . append ( cur . right ) count -= 1 if count == 0 and len ( deque ) > 0 : ans . append ( max ([ node . val for node in deque ]) ) count = len ( deque ) return ans","title":"[515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c](https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/)"},{"location":"leetcode/515/readme/#515","text":"","title":"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c"},{"location":"leetcode/515/readme/#1","text":"\u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 \u8f93\u5165: 1 / \\ 3 2 / \\ \\ 5 3 9 \u8f93\u51fa: [1, 3, 9]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/515/readme/#2","text":"\u5c42\u6b21\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u5c42\u6c42\u4e00\u4e2a\u6700\u5927\u503c\uff0c \u5c42\u6b21\u7684\u533a\u5206\u4f7f\u7528\u961f\u5217\u3002 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution ( object ): def largestValues ( self , root ): \"\"\" :type root: TreeNode :rtype: List[int] \"\"\" ans = [] if root is None : return ans count = 1 deque = [] deque . append ( root ) ans . append ( root . val ) while len ( deque ) > 0 : cur = deque . pop ( 0 ) if cur . left : deque . append ( cur . left ) if cur . right : deque . append ( cur . right ) count -= 1 if count == 0 and len ( deque ) > 0 : ans . append ( max ([ node . val for node in deque ]) ) count = len ( deque ) return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/516/516/index.py.html","text":"516.py \u00b6 class Solution : def longestPalindromeSubseq ( self , s : str ) -> int : text1 = s text2 = s [:: - 1 ] n1 = len ( text1 ) n2 = len ( text2 ) if n1 == 0 or n2 == 0 : return 0 dp = [ [ 0 for _ in range ( n2 + 1 )] for _ in range ( n1 + 1 ) ] for i in range ( 1 , n1 + 1 ): for j in range ( 1 , n2 + 1 ): if text1 [ i - 1 ] == text2 [ j - 1 ]: dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 else : dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i ][ j - 1 ] ) return dp [ n1 ][ n2 ] s = Solution () text1 = \"bbbab\" expected = 4 ans = s . longestPalindromeSubseq ( text1 ) assert ans == expected end = 10","title":"516.py"},{"location":"leetcode/516/516/index.py.html#516py","text":"class Solution : def longestPalindromeSubseq ( self , s : str ) -> int : text1 = s text2 = s [:: - 1 ] n1 = len ( text1 ) n2 = len ( text2 ) if n1 == 0 or n2 == 0 : return 0 dp = [ [ 0 for _ in range ( n2 + 1 )] for _ in range ( n1 + 1 ) ] for i in range ( 1 , n1 + 1 ): for j in range ( 1 , n2 + 1 ): if text1 [ i - 1 ] == text2 [ j - 1 ]: dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 else : dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i ][ j - 1 ] ) return dp [ n1 ][ n2 ] s = Solution () text1 = \"bbbab\" expected = 4 ans = s . longestPalindromeSubseq ( text1 ) assert ans == expected end = 10","title":"516.py"},{"location":"leetcode/516/readme/","text":"516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u8be5\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u53ef\u4ee5\u5047\u8bbes\u7684\u6700\u5927\u957f\u5ea6\u4e3a1000\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 2 3 4 5 \"bbbab\" \u8f93\u51fa: 4 \u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a \"bbbb\"\u3002 \u793a\u4f8b 2: \u8f93\u5165: 1 2 3 4 5 \"cbbd\" \u8f93\u51fa: 2 \u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a \"bb\"\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u8f6c\u5316\u4e3a\u6c42 string \u548c\u5176 \u9006\u5e8f\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 3. AC\u4ee3\u7801 \u00b6 Pyhton","title":"[516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217](https://leetcode-cn.com/problems/longest-palindromic-subsequence/)"},{"location":"leetcode/516/readme/#516","text":"","title":"516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217"},{"location":"leetcode/516/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u8be5\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u53ef\u4ee5\u5047\u8bbes\u7684\u6700\u5927\u957f\u5ea6\u4e3a1000\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1 2 3 4 5 \"bbbab\" \u8f93\u51fa: 4 \u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a \"bbbb\"\u3002 \u793a\u4f8b 2: \u8f93\u5165: 1 2 3 4 5 \"cbbd\" \u8f93\u51fa: 2 \u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a \"bb\"\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/516/readme/#2","text":"\u8f6c\u5316\u4e3a\u6c42 string \u548c\u5176 \u9006\u5e8f\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/516/readme/#3-ac","text":"Pyhton","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/541/readme/","text":"541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u9694 2k \u4e2a\u5b57\u7b26\u7684\u524d k \u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002 \u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c11\u4e8e k \u4e2a\uff0c\u5219\u5c06\u5269\u4f59\u5b57\u7b26\u5168\u90e8\u53cd\u8f6c\u3002 \u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5176\u4f59\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165: s = \"abcdefg\", k = 2 \u8f93\u51fa: \"bacdfeg\" \u63d0\u793a\uff1a 1 2 \u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728 [1, 10000] \u8303\u56f4\u5185\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 void reverse ( char * s , int start , int end ) { char tmp ; while ( start < end ) { tmp = s [ start ]; s [ start ] = s [ end ]; s [ end ] = tmp ; start ++ ; end -- ; } } char * reverseStr ( char * s , int k ){ int n = strlen ( s ); int count2k = n / ( 2 * k ); int last = n - count2k * k * 2 ; int start = - 1 ; int end = - 1 ; int i ; for ( i = 0 ; i < count2k ; i ++ ) { start = i * 2 * k ; end = start + k - 1 ; reverse ( s , start , end ); } start = count2k * 2 * k ; if ( last >= k ) { end = start + k - 1 ; reverse ( s , start , end ); } else { end = n - 1 ; reverse ( s , start , end ); } return s ; }","title":"[541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II](https://leetcode-cn.com/problems/reverse-string-ii/)"},{"location":"leetcode/541/readme/#541-ii","text":"","title":"541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II"},{"location":"leetcode/541/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u9694 2k \u4e2a\u5b57\u7b26\u7684\u524d k \u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002 \u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c11\u4e8e k \u4e2a\uff0c\u5219\u5c06\u5269\u4f59\u5b57\u7b26\u5168\u90e8\u53cd\u8f6c\u3002 \u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5176\u4f59\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165: s = \"abcdefg\", k = 2 \u8f93\u51fa: \"bacdfeg\" \u63d0\u793a\uff1a 1 2 \u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002 \u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728 [1, 10000] \u8303\u56f4\u5185\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/541/readme/#2","text":"void reverse ( char * s , int start , int end ) { char tmp ; while ( start < end ) { tmp = s [ start ]; s [ start ] = s [ end ]; s [ end ] = tmp ; start ++ ; end -- ; } } char * reverseStr ( char * s , int k ){ int n = strlen ( s ); int count2k = n / ( 2 * k ); int last = n - count2k * k * 2 ; int start = - 1 ; int end = - 1 ; int i ; for ( i = 0 ; i < count2k ; i ++ ) { start = i * 2 * k ; end = start + k - 1 ; reverse ( s , start , end ); } start = count2k * 2 * k ; if ( last >= k ) { end = start + k - 1 ; reverse ( s , start , end ); } else { end = n - 1 ; reverse ( s , start , end ); } return s ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/547/547/index.py.html","text":"547.py \u00b6 from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def findCircleNum ( self , M : List [ List [ int ]]) -> int : n = len ( M ) if n == 0 : return 0 self . create ( n ) for i in range ( n ): for j in range ( n ): if i != j and M [ i ][ j ] == 1 : self . merge ( i , j ) return self . n s = Solution () M = [[ 1 , 1 , 0 ],[ 1 , 1 , 1 ],[ 0 , 1 , 1 ]] ans = s . findCircleNum ( M ) end = 10","title":"547.py"},{"location":"leetcode/547/547/index.py.html#547py","text":"from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def findCircleNum ( self , M : List [ List [ int ]]) -> int : n = len ( M ) if n == 0 : return 0 self . create ( n ) for i in range ( n ): for j in range ( n ): if i != j and M [ i ][ j ] == 1 : self . merge ( i , j ) return self . n s = Solution () M = [[ 1 , 1 , 0 ],[ 1 , 1 , 1 ],[ 0 , 1 , 1 ]] ans = s . findCircleNum ( M ) end = 10","title":"547.py"},{"location":"leetcode/547/readme/","text":"547. \u670b\u53cb\u5708 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u73ed\u4e0a\u6709 N \u540d\u5b66\u751f\u3002\u5176\u4e2d\u6709\u4e9b\u4eba\u662f\u670b\u53cb\uff0c\u6709\u4e9b\u5219\u4e0d\u662f\u3002\u4ed6\u4eec\u7684\u53cb\u8c0a\u5177\u6709\u662f\u4f20\u9012\u6027\u3002\u5982\u679c\u5df2\u77e5 A \u662f B \u7684\u670b\u53cb\uff0cB \u662f C \u7684\u670b\u53cb\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a A \u4e5f\u662f C \u7684\u670b\u53cb\u3002\u6240\u8c13\u7684\u670b\u53cb\u5708\uff0c\u662f\u6307\u6240\u6709\u670b\u53cb\u7684\u96c6\u5408\u3002 \u7ed9\u5b9a\u4e00\u4e2a N * N \u7684\u77e9\u9635 M\uff0c\u8868\u793a\u73ed\u7ea7\u4e2d\u5b66\u751f\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u3002\u5982\u679cM[i][j] = 1\uff0c\u8868\u793a\u5df2\u77e5\u7b2c i \u4e2a\u548c j \u4e2a\u5b66\u751f\u4e92\u4e3a\u670b\u53cb\u5173\u7cfb\uff0c\u5426\u5219\u4e3a\u4e0d\u77e5\u9053\u3002\u4f60\u5fc5\u987b\u8f93\u51fa\u6240\u6709\u5b66\u751f\u4e2d\u7684\u5df2\u77e5\u7684\u670b\u53cb\u5708\u603b\u6570\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 \u8f93\u5165: [[1,1,0], [1,1,0], [0,0,1]] \u8f93\u51fa: 2 \u8bf4\u660e\uff1a\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u4ed6\u4eec\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002 \u7b2c2\u4e2a\u5b66\u751f\u81ea\u5df1\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\u6240\u4ee5\u8fd4\u56de2\u3002 \u793a\u4f8b 2: 1 2 3 4 5 6 \u8f93\u5165: [[1,1,0], [1,1,1], [0,1,1]] \u8f93\u51fa: 1 \u8bf4\u660e\uff1a\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u5b66\u751f1\u548c\u5b66\u751f2\u4e92\u4e3a\u670b\u53cb\uff0c\u6240\u4ee5\u5b66\u751f0\u548c\u5b66\u751f2\u4e5f\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e09\u4e2a\u5728\u4e00\u4e2a\u670b\u53cb\u5708\uff0c\u8fd4\u56de1\u3002 \u6ce8\u610f\uff1a 1 2 3 N \u5728[1,200]\u7684\u8303\u56f4\u5185\u3002 \u5bf9\u4e8e\u6240\u6709\u5b66\u751f\uff0c\u6709M[i][i] = 1\u3002 \u5982\u679c\u6709M[i][j] = 1\uff0c\u5219\u6709M[j][i] = 1\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u670b\u53cb\u5708\uff0c\u6700\u540e\u7edf\u8ba1\u4e2a\u6570\u8f93\u51fa\u3002 python","title":"[547. \u670b\u53cb\u5708](https://leetcode-cn.com/problems/friend-circles/)"},{"location":"leetcode/547/readme/#547","text":"","title":"547. \u670b\u53cb\u5708"},{"location":"leetcode/547/readme/#1","text":"\u73ed\u4e0a\u6709 N \u540d\u5b66\u751f\u3002\u5176\u4e2d\u6709\u4e9b\u4eba\u662f\u670b\u53cb\uff0c\u6709\u4e9b\u5219\u4e0d\u662f\u3002\u4ed6\u4eec\u7684\u53cb\u8c0a\u5177\u6709\u662f\u4f20\u9012\u6027\u3002\u5982\u679c\u5df2\u77e5 A \u662f B \u7684\u670b\u53cb\uff0cB \u662f C \u7684\u670b\u53cb\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a A \u4e5f\u662f C \u7684\u670b\u53cb\u3002\u6240\u8c13\u7684\u670b\u53cb\u5708\uff0c\u662f\u6307\u6240\u6709\u670b\u53cb\u7684\u96c6\u5408\u3002 \u7ed9\u5b9a\u4e00\u4e2a N * N \u7684\u77e9\u9635 M\uff0c\u8868\u793a\u73ed\u7ea7\u4e2d\u5b66\u751f\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u3002\u5982\u679cM[i][j] = 1\uff0c\u8868\u793a\u5df2\u77e5\u7b2c i \u4e2a\u548c j \u4e2a\u5b66\u751f\u4e92\u4e3a\u670b\u53cb\u5173\u7cfb\uff0c\u5426\u5219\u4e3a\u4e0d\u77e5\u9053\u3002\u4f60\u5fc5\u987b\u8f93\u51fa\u6240\u6709\u5b66\u751f\u4e2d\u7684\u5df2\u77e5\u7684\u670b\u53cb\u5708\u603b\u6570\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 \u8f93\u5165: [[1,1,0], [1,1,0], [0,0,1]] \u8f93\u51fa: 2 \u8bf4\u660e\uff1a\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u4ed6\u4eec\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002 \u7b2c2\u4e2a\u5b66\u751f\u81ea\u5df1\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\u6240\u4ee5\u8fd4\u56de2\u3002 \u793a\u4f8b 2: 1 2 3 4 5 6 \u8f93\u5165: [[1,1,0], [1,1,1], [0,1,1]] \u8f93\u51fa: 1 \u8bf4\u660e\uff1a\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u5b66\u751f1\u548c\u5b66\u751f2\u4e92\u4e3a\u670b\u53cb\uff0c\u6240\u4ee5\u5b66\u751f0\u548c\u5b66\u751f2\u4e5f\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e09\u4e2a\u5728\u4e00\u4e2a\u670b\u53cb\u5708\uff0c\u8fd4\u56de1\u3002 \u6ce8\u610f\uff1a 1 2 3 N \u5728[1,200]\u7684\u8303\u56f4\u5185\u3002 \u5bf9\u4e8e\u6240\u6709\u5b66\u751f\uff0c\u6709M[i][i] = 1\u3002 \u5982\u679c\u6709M[i][j] = 1\uff0c\u5219\u6709M[j][i] = 1\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/547/readme/#2","text":"\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u670b\u53cb\u5708\uff0c\u6700\u540e\u7edf\u8ba1\u4e2a\u6570\u8f93\u51fa\u3002 python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/605/readme/","text":"605. \u79cd\u82b1\u95ee\u9898 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u82b1\u575b\uff0c\u4e00\u90e8\u5206\u5730\u5757\u79cd\u690d\u4e86\u82b1\uff0c\u53e6\u4e00\u90e8\u5206\u5374\u6ca1\u6709\u3002\u53ef\u662f\uff0c\u82b1\u5349\u4e0d\u80fd\u79cd\u690d\u5728\u76f8\u90bb\u7684\u5730\u5757\u4e0a\uff0c\u5b83\u4eec\u4f1a\u4e89\u593a\u6c34\u6e90\uff0c\u4e24\u8005\u90fd\u4f1a\u6b7b\u53bb\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u82b1\u575b\uff08\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u7ec4\u5305\u542b0\u548c1\uff0c\u5176\u4e2d0\u8868\u793a\u6ca1\u79cd\u690d\u82b1\uff0c1\u8868\u793a\u79cd\u690d\u4e86\u82b1\uff09\uff0c\u548c\u4e00\u4e2a\u6570 n \u3002\u80fd\u5426\u5728\u4e0d\u6253\u7834\u79cd\u690d\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\u79cd\u5165 n \u6735\u82b1\uff1f\u80fd\u5219\u8fd4\u56deTrue\uff0c\u4e0d\u80fd\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: flowerbed = [1,0,0,0,1], n = 1 \u8f93\u51fa: True \u793a\u4f8b 2: 1 2 \u8f93\u5165: flowerbed = [1,0,0,0,1], n = 2 \u8f93\u51fa: False \u6ce8\u610f: 1 2 3 \u6570\u7ec4\u5185\u5df2\u79cd\u597d\u7684\u82b1\u4e0d\u4f1a\u8fdd\u53cd\u79cd\u690d\u89c4\u5219\u3002 \u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1, 20000]\u3002 n \u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u4e0d\u4f1a\u8d85\u8fc7\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5148\u5904\u7406\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5 \u5bf9\u4e8e\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5143\u7d20\uff0c\u5224\u65ad\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u5426\u80fd\u79cd\u82b1\uff0c\u5982\u679c\u80fd\u79cd\uff0c n - 1 \u540c\u65f6\u5c06\u8be5\u4f4d\u7f6e\u79cd\u4e0a\u82b1\u3002 \u6700\u540e\u5224\u65adN\u662f\u5426\u4e3a0. bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n){ int i; // \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5355\u72ec\u5904\u7406 if (flowerbedSize == 1 && flowerbed[0] == 0 && n == 1) { return true; } for (i = 0; i < flowerbedSize; i++) { if (flowerbed[i] == 1) { continue; } // \u5982\u679c\u4f4d\u4e8e\u8d77\u59cb\u4f4d\u7f6e\uff0c\u53ea\u8981\u540e\u9762\u4e00\u4e2a\u4e0d\u662f1\uff0c\u5c31\u53ef\u4ee5\u79cd\u82b1 if (i == 0 && i + 1 < flowerbedSize && flowerbed[i + 1] == 0) { n = n - 1; flowerbed[i] = 1; } // \u5982\u679c\u4f4d\u4e8e\u6700\u540e\uff0c\u53ea\u8981\u524d\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u662f1\uff0c\u5c31\u53ef\u4ee5\u79cd\u82b1 if (i == flowerbedSize - 1 && i - 1 >= 0 && flowerbed[i - 1] == 0) { n = n - 1; flowerbed[i] = 1; } if (i - 1 >= 0 && i + 1 < flowerbedSize && flowerbed[i - 1] == 0 && flowerbed[i + 1] == 0) { n = n - 1; flowerbed[i] = 1; } } if (n > 0) { return false; } return true; }","title":"[605. \u79cd\u82b1\u95ee\u9898](https://leetcode-cn.com/problems/can-place-flowers/)"},{"location":"leetcode/605/readme/#605","text":"","title":"605. \u79cd\u82b1\u95ee\u9898"},{"location":"leetcode/605/readme/#1","text":"\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u82b1\u575b\uff0c\u4e00\u90e8\u5206\u5730\u5757\u79cd\u690d\u4e86\u82b1\uff0c\u53e6\u4e00\u90e8\u5206\u5374\u6ca1\u6709\u3002\u53ef\u662f\uff0c\u82b1\u5349\u4e0d\u80fd\u79cd\u690d\u5728\u76f8\u90bb\u7684\u5730\u5757\u4e0a\uff0c\u5b83\u4eec\u4f1a\u4e89\u593a\u6c34\u6e90\uff0c\u4e24\u8005\u90fd\u4f1a\u6b7b\u53bb\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u82b1\u575b\uff08\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u7ec4\u5305\u542b0\u548c1\uff0c\u5176\u4e2d0\u8868\u793a\u6ca1\u79cd\u690d\u82b1\uff0c1\u8868\u793a\u79cd\u690d\u4e86\u82b1\uff09\uff0c\u548c\u4e00\u4e2a\u6570 n \u3002\u80fd\u5426\u5728\u4e0d\u6253\u7834\u79cd\u690d\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\u79cd\u5165 n \u6735\u82b1\uff1f\u80fd\u5219\u8fd4\u56deTrue\uff0c\u4e0d\u80fd\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: flowerbed = [1,0,0,0,1], n = 1 \u8f93\u51fa: True \u793a\u4f8b 2: 1 2 \u8f93\u5165: flowerbed = [1,0,0,0,1], n = 2 \u8f93\u51fa: False \u6ce8\u610f: 1 2 3 \u6570\u7ec4\u5185\u5df2\u79cd\u597d\u7684\u82b1\u4e0d\u4f1a\u8fdd\u53cd\u79cd\u690d\u89c4\u5219\u3002 \u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1, 20000]\u3002 n \u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u4e0d\u4f1a\u8d85\u8fc7\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/605/readme/#2","text":"\u5148\u5904\u7406\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5 \u5bf9\u4e8e\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5143\u7d20\uff0c\u5224\u65ad\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u5426\u80fd\u79cd\u82b1\uff0c\u5982\u679c\u80fd\u79cd\uff0c n - 1 \u540c\u65f6\u5c06\u8be5\u4f4d\u7f6e\u79cd\u4e0a\u82b1\u3002 \u6700\u540e\u5224\u65adN\u662f\u5426\u4e3a0. bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n){ int i; // \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5355\u72ec\u5904\u7406 if (flowerbedSize == 1 && flowerbed[0] == 0 && n == 1) { return true; } for (i = 0; i < flowerbedSize; i++) { if (flowerbed[i] == 1) { continue; } // \u5982\u679c\u4f4d\u4e8e\u8d77\u59cb\u4f4d\u7f6e\uff0c\u53ea\u8981\u540e\u9762\u4e00\u4e2a\u4e0d\u662f1\uff0c\u5c31\u53ef\u4ee5\u79cd\u82b1 if (i == 0 && i + 1 < flowerbedSize && flowerbed[i + 1] == 0) { n = n - 1; flowerbed[i] = 1; } // \u5982\u679c\u4f4d\u4e8e\u6700\u540e\uff0c\u53ea\u8981\u524d\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u662f1\uff0c\u5c31\u53ef\u4ee5\u79cd\u82b1 if (i == flowerbedSize - 1 && i - 1 >= 0 && flowerbed[i - 1] == 0) { n = n - 1; flowerbed[i] = 1; } if (i - 1 >= 0 && i + 1 < flowerbedSize && flowerbed[i - 1] == 0 && flowerbed[i + 1] == 0) { n = n - 1; flowerbed[i] = 1; } } if (n > 0) { return false; } return true; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/609/609/index.c.html","text":"609.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <uthash.h> #define MAXN 10000 struct HashMap { char text [ MAXN ]; // \u6587\u4ef6\u5185\u5bb9 char * paths [ MAXN ]; // \u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 int pathsNum ; // \u7edd\u5bf9\u8def\u5f84\u7684\u4e2a\u6570 UT_hash_handle hh ; }; typedef struct HashMap FilePath ; char * substr ( char * string , int start , int end ) { char * ans = ( char * ) malloc ( sizeof ( char ) * ( end - start + 2 )); int ansEnd = 0 ; for ( int i = start ; i <= end ; i ++ ) { ans [ ansEnd ++ ] = string [ i ]; } ans [ ansEnd ] = '\\0' ; return ans ; } char * addpath ( char * str1 , char * str2 ) { int n1 = strlen ( str1 ); int n2 = strlen ( str2 ); char * ans = ( char * ) malloc ( sizeof ( char ) * ( n1 + n2 + 4 )); int ansEnd = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { ans [ ansEnd ++ ] = str1 [ i ]; } ans [ ansEnd ++ ] = '/' ; for ( int i = 0 ; i < n2 ; i ++ ) { ans [ ansEnd ++ ] = str2 [ i ]; } ans [ ansEnd ] = '\\0' ; return ans ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ char *** findDuplicate ( char ** paths , int pathsSize , int * returnSize , int ** returnColumnSizes ){ char *** ans = ( char *** ) malloc ( sizeof ( char ** ) * MAXN ); int ansEnd = 0 ; int * colsSize = ( int * ) malloc ( sizeof ( int ) * MAXN ); int colsEnd = 0 ; FilePath * map = NULL ; FilePath * curr = NULL ; for ( int i = 0 ; i < pathsSize ; i ++ ) { char * originPathStr = paths [ i ]; int n = strlen ( originPathStr ); int * space = ( int * ) malloc ( sizeof ( int ) * n ); int spaceEnd = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( originPathStr [ j ] == ' ' ) { space [ spaceEnd ++ ] = j ; } } char * path1 = substr ( originPathStr , 0 , space [ 0 ] - 1 ); char * path2 = NULL ; for ( int j = 0 ; j < spaceEnd ; j ++ ) { if ( j == spaceEnd - 1 ) { path2 = substr ( originPathStr , space [ j ] + 1 , n - 1 ); } else { path2 = substr ( originPathStr , space [ j ] + 1 , space [ j + 1 ] - 1 ); } int start = - 1 ; int end = - 1 ; for ( int k = 0 ; k < strlen ( path2 ); k ++ ) { if ( path2 [ k ] == '(' ) { start = k ; } if ( path2 [ k ] == ')' ) { end = k ; } } char * filename = substr ( path2 , 0 , start - 1 ); char * filecontent = substr ( path2 , start + 1 , end - 1 ); HASH_FIND_STR ( map , filecontent , curr ); if ( curr == NULL ) { curr = ( FilePath * ) malloc ( sizeof ( FilePath )); strcpy ( curr -> text , filecontent ); curr -> text [ strlen ( filecontent )] = '\\0' ; curr -> paths [ 0 ] = addpath ( path1 , filename ); curr -> pathsNum = 1 ; HASH_ADD_STR ( map , text , curr ); } else { curr -> paths [ curr -> pathsNum ] = addpath ( path1 , filename ); curr -> pathsNum += 1 ; } free ( filename ); free ( filecontent ); free ( path2 ); } free ( space ); free ( path1 ); } for ( curr = map ; curr != NULL ; curr = curr -> hh . next ) { if ( curr -> pathsNum > 1 ) { ans [ ansEnd ++ ] = curr -> paths ; colsSize [ colsEnd ++ ] = curr -> pathsNum ; } } * returnSize = ansEnd ; * returnColumnSizes = colsSize ; return ans ; }","title":"609.c"},{"location":"leetcode/609/609/index.c.html#609c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <uthash.h> #define MAXN 10000 struct HashMap { char text [ MAXN ]; // \u6587\u4ef6\u5185\u5bb9 char * paths [ MAXN ]; // \u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 int pathsNum ; // \u7edd\u5bf9\u8def\u5f84\u7684\u4e2a\u6570 UT_hash_handle hh ; }; typedef struct HashMap FilePath ; char * substr ( char * string , int start , int end ) { char * ans = ( char * ) malloc ( sizeof ( char ) * ( end - start + 2 )); int ansEnd = 0 ; for ( int i = start ; i <= end ; i ++ ) { ans [ ansEnd ++ ] = string [ i ]; } ans [ ansEnd ] = '\\0' ; return ans ; } char * addpath ( char * str1 , char * str2 ) { int n1 = strlen ( str1 ); int n2 = strlen ( str2 ); char * ans = ( char * ) malloc ( sizeof ( char ) * ( n1 + n2 + 4 )); int ansEnd = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { ans [ ansEnd ++ ] = str1 [ i ]; } ans [ ansEnd ++ ] = '/' ; for ( int i = 0 ; i < n2 ; i ++ ) { ans [ ansEnd ++ ] = str2 [ i ]; } ans [ ansEnd ] = '\\0' ; return ans ; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ char *** findDuplicate ( char ** paths , int pathsSize , int * returnSize , int ** returnColumnSizes ){ char *** ans = ( char *** ) malloc ( sizeof ( char ** ) * MAXN ); int ansEnd = 0 ; int * colsSize = ( int * ) malloc ( sizeof ( int ) * MAXN ); int colsEnd = 0 ; FilePath * map = NULL ; FilePath * curr = NULL ; for ( int i = 0 ; i < pathsSize ; i ++ ) { char * originPathStr = paths [ i ]; int n = strlen ( originPathStr ); int * space = ( int * ) malloc ( sizeof ( int ) * n ); int spaceEnd = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( originPathStr [ j ] == ' ' ) { space [ spaceEnd ++ ] = j ; } } char * path1 = substr ( originPathStr , 0 , space [ 0 ] - 1 ); char * path2 = NULL ; for ( int j = 0 ; j < spaceEnd ; j ++ ) { if ( j == spaceEnd - 1 ) { path2 = substr ( originPathStr , space [ j ] + 1 , n - 1 ); } else { path2 = substr ( originPathStr , space [ j ] + 1 , space [ j + 1 ] - 1 ); } int start = - 1 ; int end = - 1 ; for ( int k = 0 ; k < strlen ( path2 ); k ++ ) { if ( path2 [ k ] == '(' ) { start = k ; } if ( path2 [ k ] == ')' ) { end = k ; } } char * filename = substr ( path2 , 0 , start - 1 ); char * filecontent = substr ( path2 , start + 1 , end - 1 ); HASH_FIND_STR ( map , filecontent , curr ); if ( curr == NULL ) { curr = ( FilePath * ) malloc ( sizeof ( FilePath )); strcpy ( curr -> text , filecontent ); curr -> text [ strlen ( filecontent )] = '\\0' ; curr -> paths [ 0 ] = addpath ( path1 , filename ); curr -> pathsNum = 1 ; HASH_ADD_STR ( map , text , curr ); } else { curr -> paths [ curr -> pathsNum ] = addpath ( path1 , filename ); curr -> pathsNum += 1 ; } free ( filename ); free ( filecontent ); free ( path2 ); } free ( space ); free ( path1 ); } for ( curr = map ; curr != NULL ; curr = curr -> hh . next ) { if ( curr -> pathsNum > 1 ) { ans [ ansEnd ++ ] = curr -> paths ; colsSize [ colsEnd ++ ] = curr -> pathsNum ; } } * returnSize = ansEnd ; * returnColumnSizes = colsSize ; return ans ; }","title":"609.c"},{"location":"leetcode/609/609/index.cpp.html","text":"609.cpp \u00b6","title":"609.cpp"},{"location":"leetcode/609/609/index.cpp.html#609cpp","text":"","title":"609.cpp"},{"location":"leetcode/609/609/index.py.html","text":"609.py \u00b6","title":"609.py"},{"location":"leetcode/609/609/index.py.html#609py","text":"","title":"609.py"},{"location":"leetcode/609/readme/","text":"609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4fe1\u606f\u5217\u8868\uff0c\u5305\u62ec\u76ee\u5f55\u8def\u5f84\uff0c\u4ee5\u53ca\u8be5\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5305\u542b\u5185\u5bb9\u7684\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u627e\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u91cd\u590d\u6587\u4ef6\u7ec4\u7684\u8def\u5f84\u3002\u4e00\u7ec4\u91cd\u590d\u7684\u6587\u4ef6\u81f3\u5c11\u5305\u62ec\u4e8c\u4e2a\u5177\u6709\u5b8c\u5168\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u3002 \u8f93\u5165\u5217\u8868\u4e2d\u7684\u5355\u4e2a\u76ee\u5f55\u4fe1\u606f\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5982\u4e0b\uff1a \"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\" \u8fd9\u610f\u5473\u7740\u6709 n \u4e2a\u6587\u4ef6\uff08f1.txt, f2.txt ... fn.txt \u7684\u5185\u5bb9\u5206\u522b\u662f f1_content, f2_content ... fn_content\uff09\u5728\u76ee\u5f55 root/d1/d2/.../dm \u4e0b\u3002\u6ce8\u610f\uff1an>=1 \u4e14 m>=0\u3002\u5982\u679c m=0\uff0c\u5219\u8868\u793a\u8be5\u76ee\u5f55\u662f\u6839\u76ee\u5f55\u3002 \u8be5\u8f93\u51fa\u662f\u91cd\u590d\u6587\u4ef6\u8def\u5f84\u7ec4\u7684\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5b83\u5305\u542b\u5177\u6709\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u8def\u5f84\u3002\u6587\u4ef6\u8def\u5f84\u662f\u5177\u6709\u4e0b\u5217\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff1a \"directory_path/file_name.txt\" \u793a\u4f8b 1\uff1a 1 2 3 4 \u8f93\u5165\uff1a [\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\", \"root/c/d 4.txt(efgh)\", \"root 4.txt(efgh)\"] \u8f93\u51fa\uff1a [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]] 2. \u89e3\u9898\u601d\u8def \u00b6 \u8f6c\u6362\u6210\u8def\u5f84\uff0c \u6587\u4ef6\u540d\uff0c\u7136\u540e\u5229\u7528\u54c8\u5e0c\u8868\u67e5\u627e\u91cd\u590d 3. AC\u4ee3\u7801 \u00b6 C","title":"[609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6](https://leetcode-cn.com/problems/find-duplicate-file-in-system)"},{"location":"leetcode/609/readme/#609","text":"","title":"609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6"},{"location":"leetcode/609/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4fe1\u606f\u5217\u8868\uff0c\u5305\u62ec\u76ee\u5f55\u8def\u5f84\uff0c\u4ee5\u53ca\u8be5\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5305\u542b\u5185\u5bb9\u7684\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u627e\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u91cd\u590d\u6587\u4ef6\u7ec4\u7684\u8def\u5f84\u3002\u4e00\u7ec4\u91cd\u590d\u7684\u6587\u4ef6\u81f3\u5c11\u5305\u62ec\u4e8c\u4e2a\u5177\u6709\u5b8c\u5168\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u3002 \u8f93\u5165\u5217\u8868\u4e2d\u7684\u5355\u4e2a\u76ee\u5f55\u4fe1\u606f\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5982\u4e0b\uff1a \"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\" \u8fd9\u610f\u5473\u7740\u6709 n \u4e2a\u6587\u4ef6\uff08f1.txt, f2.txt ... fn.txt \u7684\u5185\u5bb9\u5206\u522b\u662f f1_content, f2_content ... fn_content\uff09\u5728\u76ee\u5f55 root/d1/d2/.../dm \u4e0b\u3002\u6ce8\u610f\uff1an>=1 \u4e14 m>=0\u3002\u5982\u679c m=0\uff0c\u5219\u8868\u793a\u8be5\u76ee\u5f55\u662f\u6839\u76ee\u5f55\u3002 \u8be5\u8f93\u51fa\u662f\u91cd\u590d\u6587\u4ef6\u8def\u5f84\u7ec4\u7684\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5b83\u5305\u542b\u5177\u6709\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u8def\u5f84\u3002\u6587\u4ef6\u8def\u5f84\u662f\u5177\u6709\u4e0b\u5217\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff1a \"directory_path/file_name.txt\" \u793a\u4f8b 1\uff1a 1 2 3 4 \u8f93\u5165\uff1a [\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\", \"root/c/d 4.txt(efgh)\", \"root 4.txt(efgh)\"] \u8f93\u51fa\uff1a [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/609/readme/#2","text":"\u8f6c\u6362\u6210\u8def\u5f84\uff0c \u6587\u4ef6\u540d\uff0c\u7136\u540e\u5229\u7528\u54c8\u5e0c\u8868\u67e5\u627e\u91cd\u590d","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/609/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/621/621/index.py.html","text":"621.py \u00b6 from typing import List from functools import cmp_to_key class Solution : def leastInterval ( self , tasks : List [ str ], n : int ) -> int : def compare ( a , b ): return b [ 1 ] - a [ 1 ] # 1. \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570 dic = {} for task in tasks : if task not in dic : dic [ task ] = 1 else : dic [ task ] += 1 # 2. \u6309\u7167\u51fa\u73b0\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f listcount = list ( dic . items ()) listcount = sorted ( listcount , key = cmp_to_key ( compare )) # 3. \u53d6\u51fa\u6700\u5927\u503c maxcount = listcount [ 0 ][ 1 ] space = ( maxcount - 1 ) * n # \u7a7a\u4f4d\u7f6e\u6570\u91cf ans = space + maxcount # \u5f53\u524d\u6d88\u8017\u65f6\u95f4 # \u904d\u5386\u5269\u4e0b\u7684\uff0c\u5982\u679c\u6709\u7a7a\u4f59\u7684\u7a7a\u95f4\uff0c\u5c31\u51cf\u5c11\u5269\u4f59\u7a7a\u95f4\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u6dfb\u52a0 for i in range ( 1 , len ( listcount )): if listcount [ i ][ 1 ] == maxcount : ans += 1 if space >= maxcount - 1 : space -= ( maxcount - 1 ) else : return len ( tasks ) else : if space >= listcount [ i ][ 1 ]: space -= listcount [ i ][ 1 ] else : return len ( tasks ) return ans tasks = [ \"A\" , \"A\" , \"A\" , \"B\" , \"B\" , \"B\" ] n = 2 s = Solution () ans = s . leastInterval ( tasks , n ) end = 10","title":"621.py"},{"location":"leetcode/621/621/index.py.html#621py","text":"from typing import List from functools import cmp_to_key class Solution : def leastInterval ( self , tasks : List [ str ], n : int ) -> int : def compare ( a , b ): return b [ 1 ] - a [ 1 ] # 1. \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570 dic = {} for task in tasks : if task not in dic : dic [ task ] = 1 else : dic [ task ] += 1 # 2. \u6309\u7167\u51fa\u73b0\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f listcount = list ( dic . items ()) listcount = sorted ( listcount , key = cmp_to_key ( compare )) # 3. \u53d6\u51fa\u6700\u5927\u503c maxcount = listcount [ 0 ][ 1 ] space = ( maxcount - 1 ) * n # \u7a7a\u4f4d\u7f6e\u6570\u91cf ans = space + maxcount # \u5f53\u524d\u6d88\u8017\u65f6\u95f4 # \u904d\u5386\u5269\u4e0b\u7684\uff0c\u5982\u679c\u6709\u7a7a\u4f59\u7684\u7a7a\u95f4\uff0c\u5c31\u51cf\u5c11\u5269\u4f59\u7a7a\u95f4\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u6dfb\u52a0 for i in range ( 1 , len ( listcount )): if listcount [ i ][ 1 ] == maxcount : ans += 1 if space >= maxcount - 1 : space -= ( maxcount - 1 ) else : return len ( tasks ) else : if space >= listcount [ i ][ 1 ]: space -= listcount [ i ][ 1 ] else : return len ( tasks ) return ans tasks = [ \"A\" , \"A\" , \"A\" , \"B\" , \"B\" , \"B\" ] n = 2 s = Solution () ans = s . leastInterval ( tasks , n ) end = 10","title":"621.py"},{"location":"leetcode/621/621_2/index.py.html","text":"621_2.py \u00b6 from typing import List class Solution : def leastInterval ( self , tasks : List [ str ], n : int ) -> int : # 1. \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570 dic = {} for task in tasks : if task not in dic : dic [ task ] = 1 else : dic [ task ] += 1 maxv = max ( dic . values ()) p = 0 for key , value in dic . items (): if value == maxv : p += 1 ans = ( maxv - 1 ) * ( n + 1 ) + p ans = max ( ans , len ( tasks )) return ans","title":"621 2.py"},{"location":"leetcode/621/621_2/index.py.html#621_2py","text":"from typing import List class Solution : def leastInterval ( self , tasks : List [ str ], n : int ) -> int : # 1. \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570 dic = {} for task in tasks : if task not in dic : dic [ task ] = 1 else : dic [ task ] += 1 maxv = max ( dic . values ()) p = 0 for key , value in dic . items (): if value == maxv : p += 1 ans = ( maxv - 1 ) * ( n + 1 ) + p ans = max ( ans , len ( tasks )) return ans","title":"621_2.py"},{"location":"leetcode/621/readme/","text":"621. \u4efb\u52a1\u8c03\u5ea6\u5668 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4\u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528\u5927\u5199\u7684 A - Z \u5b57\u6bcd\u8868\u793a\u768426 \u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002CPU \u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u7136\u800c\uff0c\u4e24\u4e2a\u76f8\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a n \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed n \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u793a\u4f8b \uff1a 1 2 3 4 \u8f93\u5165\uff1atasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 \u8f93\u51fa\uff1a8 \u89e3\u91ca\uff1aA -> B -> (\u5f85\u547d) -> A -> B -> (\u5f85\u547d) -> A -> B. \u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u95f4\u9694\u957f\u5ea6\u4e3a n = 2 \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u800c\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u6240\u4ee5\u4e2d\u95f4\u51fa\u73b0\u4e86\uff08\u5f85\u547d\uff09\u72b6\u6001\u3002 \u63d0\u793a\uff1a 1 2 \u4efb\u52a1\u7684\u603b\u4e2a\u6570\u4e3a [1, 10000]\u3002 n \u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u7edf\u8ba1\u6bcf\u4e2a\u4efb\u52a1\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6309\u7167\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \u5047\u8bbe\u6700\u5927\u7684\u6b21\u6570\u4e3ac, \u90a3\u4e48\u81f3\u5c11\u9700\u8981 (c-1) * n + c \u4e2a\u65f6\u95f4\u624d\u80fd\u6267\u884c\u5b8c \u521d\u59cb\u5316ans = (c-1) * n + c, space = (c-1) * n \u8868\u793a\u7a7a\u95f2\u7684\u4f4d\u7f6e\u4e2a\u6570 \u904d\u5386\u5269\u4e0b\u7684\u4efb\u52a1\uff0c\u5982\u679c\u51fa\u73b0\u6b21\u6570\u662fc, \u5219ans+=1, \u56e0\u4e3a\u9700\u8981\u5728\u6700\u540e\u589e\u52a0\u4e00\u4e2a\u65f6\u95f4\u6765\u6267\u884c\u5b83\uff1b \u5982\u679c\u5c0f\u4e8ec, \u5219\u80af\u5b9a\u53ef\u4ee5\u5b89\u6392\u5728\u4e4b\u524d\u7684\u7a7a\u95f2\u4f4d\u7f6e\u4e0a\u3002 \u5b89\u6392\u4e4b\u524d\uff0c\u68c0\u67e5space, \u5982\u679cspace\u5c0f\u4e8e\u5f53\u524d\u8981\u5b89\u6392\u7684\u4efb\u52a1\u6570\u91cf\uff0c \u90a3\u4e48\u5f53\u524d\u7684\u7a7a\u95f2\u88ab\u5360\u6ee1\uff0c\u6700\u540e\u7684\u7ed3\u679c\u662f len(tasks) \u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4e00\u4e2a\u7a7a\u95f2\u7a7a\u95f4\u90fd\u6ca1\u6709\u4e86\uff0c\u4e5f\u80fd\u6ee1\u8db3\u95f4\u9694\u4e3an. \u5982\u679cspace\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8981\u5b89\u6392\u7684\u4efb\u52a1\u6570\u91cf\uff0c \u66f4\u65b0space. 3. AC\u4ee3\u7801 \u00b6 Python Python","title":"[621. \u4efb\u52a1\u8c03\u5ea6\u5668](https://leetcode-cn.com/problems/task-scheduler/)"},{"location":"leetcode/621/readme/#621","text":"","title":"621. \u4efb\u52a1\u8c03\u5ea6\u5668"},{"location":"leetcode/621/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4\u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528\u5927\u5199\u7684 A - Z \u5b57\u6bcd\u8868\u793a\u768426 \u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002CPU \u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u7136\u800c\uff0c\u4e24\u4e2a\u76f8\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a n \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed n \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002 \u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u793a\u4f8b \uff1a 1 2 3 4 \u8f93\u5165\uff1atasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 \u8f93\u51fa\uff1a8 \u89e3\u91ca\uff1aA -> B -> (\u5f85\u547d) -> A -> B -> (\u5f85\u547d) -> A -> B. \u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u95f4\u9694\u957f\u5ea6\u4e3a n = 2 \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u800c\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u6240\u4ee5\u4e2d\u95f4\u51fa\u73b0\u4e86\uff08\u5f85\u547d\uff09\u72b6\u6001\u3002 \u63d0\u793a\uff1a 1 2 \u4efb\u52a1\u7684\u603b\u4e2a\u6570\u4e3a [1, 10000]\u3002 n \u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/621/readme/#2","text":"\u7edf\u8ba1\u6bcf\u4e2a\u4efb\u52a1\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6309\u7167\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \u5047\u8bbe\u6700\u5927\u7684\u6b21\u6570\u4e3ac, \u90a3\u4e48\u81f3\u5c11\u9700\u8981 (c-1) * n + c \u4e2a\u65f6\u95f4\u624d\u80fd\u6267\u884c\u5b8c \u521d\u59cb\u5316ans = (c-1) * n + c, space = (c-1) * n \u8868\u793a\u7a7a\u95f2\u7684\u4f4d\u7f6e\u4e2a\u6570 \u904d\u5386\u5269\u4e0b\u7684\u4efb\u52a1\uff0c\u5982\u679c\u51fa\u73b0\u6b21\u6570\u662fc, \u5219ans+=1, \u56e0\u4e3a\u9700\u8981\u5728\u6700\u540e\u589e\u52a0\u4e00\u4e2a\u65f6\u95f4\u6765\u6267\u884c\u5b83\uff1b \u5982\u679c\u5c0f\u4e8ec, \u5219\u80af\u5b9a\u53ef\u4ee5\u5b89\u6392\u5728\u4e4b\u524d\u7684\u7a7a\u95f2\u4f4d\u7f6e\u4e0a\u3002 \u5b89\u6392\u4e4b\u524d\uff0c\u68c0\u67e5space, \u5982\u679cspace\u5c0f\u4e8e\u5f53\u524d\u8981\u5b89\u6392\u7684\u4efb\u52a1\u6570\u91cf\uff0c \u90a3\u4e48\u5f53\u524d\u7684\u7a7a\u95f2\u88ab\u5360\u6ee1\uff0c\u6700\u540e\u7684\u7ed3\u679c\u662f len(tasks) \u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4e00\u4e2a\u7a7a\u95f2\u7a7a\u95f4\u90fd\u6ca1\u6709\u4e86\uff0c\u4e5f\u80fd\u6ee1\u8db3\u95f4\u9694\u4e3an. \u5982\u679cspace\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8981\u5b89\u6392\u7684\u4efb\u52a1\u6570\u91cf\uff0c \u66f4\u65b0space.","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/621/readme/#3-ac","text":"Python Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/639/readme/","text":"639. \u89e3\u7801\u65b9\u6cd5 2 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u9664\u4e86\u4e0a\u8ff0\u7684\u6761\u4ef6\u4ee5\u5916\uff0c\u73b0\u5728\u52a0\u5bc6\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u5b57\u7b26 ' '\u4e86\uff0c\u5b57\u7b26' '\u53ef\u4ee5\u88ab\u5f53\u505a1\u52309\u5f53\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u3002 \u7ed9\u5b9a\u4e00\u6761\u5305\u542b\u6570\u5b57\u548c\u5b57\u7b26'*'\u7684\u52a0\u5bc6\u4fe1\u606f\uff0c\u8bf7\u786e\u5b9a\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u540c\u65f6\uff0c\u7531\u4e8e\u7ed3\u679c\u503c\u53ef\u80fd\u4f1a\u76f8\u5f53\u7684\u5927\uff0c\u6240\u4ee5\u4f60\u5e94\u5f53\u5bf9109 + 7\u53d6\u6a21\u3002\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u6b64\u5904\u53d6\u6a21\u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6ea2\u51fa\uff09 \u793a\u4f8b 1 : 1 2 3 \u8f93\u5165: \"*\" \u8f93\u51fa: 9 \u89e3\u91ca: \u52a0\u5bc6\u7684\u4fe1\u606f\u53ef\u4ee5\u88ab\u89e3\u5bc6\u4e3a: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\". \u793a\u4f8b 2 : 1 2 3 4 5 6 \u8f93\u5165: \"1*\" \u8f93\u51fa: 9 + 9 = 18\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u8fd9\u91cc1*\u53ef\u4ee5\u5206\u89e3\u4e3a1,* \u6216\u8005\u5f53\u505a1*\u6765\u5904\u7406\uff0c\u6240\u4ee5\u7ed3\u679c\u662f9+9=18\uff09 \u8bf4\u660e : \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8303\u56f4\u662f [1, 105]\u3002 \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u4f1a\u5305\u542b\u5b57\u7b26 '*' \u548c \u6570\u5b57'0' - '9'\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4e0e 91.\u89e3\u7801\u65b9\u6cd5 \u7c7b\u4f3c\uff0c\u90fd\u662f\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u4ece\u540e\u5411\u524d\u89e3\u51b3\u3002 \u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a 1. * \u53d6\u503c\u7684\u8303\u56f4\u662f1-9\uff0c \u4e0d\u5305\u62ec0\uff0c ** \u53ef\u4ee5\u53d6\u503c11-19\uff0c 21-26\u517115\u4e2a\u5143\u7d20 2. \u89e3\u7801\u65b9\u6cd5\u6570\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u9700\u8981\u7528\u5230 9 * nextCount , \u8fd9\u91cc\u53ef\u80fd\u4f1a\u8d85\u51fa int \u7684\u8868\u793a\u8303\u56f4\uff0c \u6240\u4ee5\u7ed3\u679c\u9700\u8981\u7528 long long \u7c7b\u578b\u4fdd\u5b58\u3002 #define M 1000000007 /* \"12*3\", * \u53ef\u4ee5\u8868\u793a 1-9 \u4efb\u610f\u6570\u5b57 \u8bbe dp[i] \u8868\u793a s[i...n] \u7684\u89e3\u7801\u6570\u91cf\uff0c dp[n] = 1 if s[i] != '*', dp[i] = dp[i+1] + dp[i+2], \u4e0e 91 \u89e3\u7801\u65b9\u6cd5\u4e2d\u5bf9\u5e94\u7684\u60c5\u51b5\u4e00\u6837 if s[i] == '*', dp[i] \u53ef\u5355\u72ec\u89e3\u6790\u6210 0-9 \u51719\u79cd\u60c5\u51b5\uff0c dp[i] = 9 * dp[i + 1] dp[i], dp[i+1] \u89e3\u6790\u6210\u5b57\u6bcd\u7684\u60c5\u51b5\uff0c if s[i+1] in [0,6], * \u53ef\u4ee5\u53d6 1\uff0c 2 \u5171\u4e24\u79cd\u60c5\u51b5 if s[i+1] not in [0, 6], * \u53ef\u4ee5\u53d6 1 \u5171\u4e00\u79cd\u60c5\u51b5 */ int numDecodings ( char * s ){ if ( s == NULL ) return 0 ; int n = strlen ( s ); long long nextNext = 1 ; long long next = ( s [ n - 1 ] == '0' ) ? 0 : 1 ; long long curr ; if ( s [ n - 1 ] == '*' ) next = 9 ; // * \u53ef\u4ee5\u53d6 1-9 \u5171 9 \u79cd\u60c5\u51b5 for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s [ i ] == '*' ) { curr = 0 ; if ( s [ i + 1 ] >= '0' && s [ i + 1 ] <= '6' ) { curr = 2 ; // *[0-6], *\u53ef\u4ee5\u53d6\u503c 1\uff0c 2 } else if ( s [ i + 1 ] == '*' ) { curr = 15 ; // **, \u53ef\u4ee5\u53d611-19\uff0c 21-26\uff0c \u6ce8\u610f00-10\uff0c 20\u662f\u4e0d\u80fd\u53d6\u7684 } else { curr = 1 ; // *[7-9], *\u53ea\u80fd\u53d6 1\uff0c \u56e0\u4e3a 26 \u662f\u6700\u5927\u503c\uff0c 27\u662f\u65e0\u6cd5\u89e3\u7801\u7684 } curr = curr * nextNext ; // \u5bf9\u5e94\u4e24\u4f4d\u6570\u5b57\u89e3\u7801\u4e00\u4e2a\u5b57\u6bcd\u7684\u60c5\u51b5 curr += 9 * next ; // \u5bf9\u5e94 * \u53d61-9\u5e76\u4e14\u5355\u72ec\u89e3\u7801\u7684\u60c5\u51b5 } else if ( s [ i ] == '0' ) { curr = 0 ; // 0 \u65e0\u6cd5\u89e3\u7801\uff0c \u5373\u4f7f\u662f0*\u4e5f\u4e0d\u80fd } else { curr = 0 ; if ( s [ i + 1 ] == '*' ) { if ( s [ i ] == '1' ) curr = 9 ; // 11-19 \u53ef\u4ee5\u67099\u4e2d\u89e3\u7801\u65b9\u6cd5 if ( s [ i ] == '2' ) curr = 6 ; // 21-26 \u53ef\u4ee5\u67096\u79cd\u89e3\u7801\u65b9\u6cd5 } else { int number = ( s [ i ] - '0' ) * 10 + s [ i + 1 ] - '0' ; if ( number >= 1 && number <= 26 ) { curr = 1 ; } } curr = curr * nextNext ; curr += next ; } nextNext = next ; next = curr % M ; } return next ; }","title":"[639. \u89e3\u7801\u65b9\u6cd5 2](https://leetcode-cn.com/problems/decode-ways-ii/)"},{"location":"leetcode/639/readme/#639-2","text":"","title":"639. \u89e3\u7801\u65b9\u6cd5 2"},{"location":"leetcode/639/readme/#1","text":"\u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u9664\u4e86\u4e0a\u8ff0\u7684\u6761\u4ef6\u4ee5\u5916\uff0c\u73b0\u5728\u52a0\u5bc6\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u5b57\u7b26 ' '\u4e86\uff0c\u5b57\u7b26' '\u53ef\u4ee5\u88ab\u5f53\u505a1\u52309\u5f53\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u3002 \u7ed9\u5b9a\u4e00\u6761\u5305\u542b\u6570\u5b57\u548c\u5b57\u7b26'*'\u7684\u52a0\u5bc6\u4fe1\u606f\uff0c\u8bf7\u786e\u5b9a\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u540c\u65f6\uff0c\u7531\u4e8e\u7ed3\u679c\u503c\u53ef\u80fd\u4f1a\u76f8\u5f53\u7684\u5927\uff0c\u6240\u4ee5\u4f60\u5e94\u5f53\u5bf9109 + 7\u53d6\u6a21\u3002\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u6b64\u5904\u53d6\u6a21\u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6ea2\u51fa\uff09 \u793a\u4f8b 1 : 1 2 3 \u8f93\u5165: \"*\" \u8f93\u51fa: 9 \u89e3\u91ca: \u52a0\u5bc6\u7684\u4fe1\u606f\u53ef\u4ee5\u88ab\u89e3\u5bc6\u4e3a: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\". \u793a\u4f8b 2 : 1 2 3 4 5 6 \u8f93\u5165: \"1*\" \u8f93\u51fa: 9 + 9 = 18\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u8fd9\u91cc1*\u53ef\u4ee5\u5206\u89e3\u4e3a1,* \u6216\u8005\u5f53\u505a1*\u6765\u5904\u7406\uff0c\u6240\u4ee5\u7ed3\u679c\u662f9+9=18\uff09 \u8bf4\u660e : \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8303\u56f4\u662f [1, 105]\u3002 \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u4f1a\u5305\u542b\u5b57\u7b26 '*' \u548c \u6570\u5b57'0' - '9'\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/639/readme/#2","text":"\u4e0e 91.\u89e3\u7801\u65b9\u6cd5 \u7c7b\u4f3c\uff0c\u90fd\u662f\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u4ece\u540e\u5411\u524d\u89e3\u51b3\u3002 \u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a 1. * \u53d6\u503c\u7684\u8303\u56f4\u662f1-9\uff0c \u4e0d\u5305\u62ec0\uff0c ** \u53ef\u4ee5\u53d6\u503c11-19\uff0c 21-26\u517115\u4e2a\u5143\u7d20 2. \u89e3\u7801\u65b9\u6cd5\u6570\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u9700\u8981\u7528\u5230 9 * nextCount , \u8fd9\u91cc\u53ef\u80fd\u4f1a\u8d85\u51fa int \u7684\u8868\u793a\u8303\u56f4\uff0c \u6240\u4ee5\u7ed3\u679c\u9700\u8981\u7528 long long \u7c7b\u578b\u4fdd\u5b58\u3002 #define M 1000000007 /* \"12*3\", * \u53ef\u4ee5\u8868\u793a 1-9 \u4efb\u610f\u6570\u5b57 \u8bbe dp[i] \u8868\u793a s[i...n] \u7684\u89e3\u7801\u6570\u91cf\uff0c dp[n] = 1 if s[i] != '*', dp[i] = dp[i+1] + dp[i+2], \u4e0e 91 \u89e3\u7801\u65b9\u6cd5\u4e2d\u5bf9\u5e94\u7684\u60c5\u51b5\u4e00\u6837 if s[i] == '*', dp[i] \u53ef\u5355\u72ec\u89e3\u6790\u6210 0-9 \u51719\u79cd\u60c5\u51b5\uff0c dp[i] = 9 * dp[i + 1] dp[i], dp[i+1] \u89e3\u6790\u6210\u5b57\u6bcd\u7684\u60c5\u51b5\uff0c if s[i+1] in [0,6], * \u53ef\u4ee5\u53d6 1\uff0c 2 \u5171\u4e24\u79cd\u60c5\u51b5 if s[i+1] not in [0, 6], * \u53ef\u4ee5\u53d6 1 \u5171\u4e00\u79cd\u60c5\u51b5 */ int numDecodings ( char * s ){ if ( s == NULL ) return 0 ; int n = strlen ( s ); long long nextNext = 1 ; long long next = ( s [ n - 1 ] == '0' ) ? 0 : 1 ; long long curr ; if ( s [ n - 1 ] == '*' ) next = 9 ; // * \u53ef\u4ee5\u53d6 1-9 \u5171 9 \u79cd\u60c5\u51b5 for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s [ i ] == '*' ) { curr = 0 ; if ( s [ i + 1 ] >= '0' && s [ i + 1 ] <= '6' ) { curr = 2 ; // *[0-6], *\u53ef\u4ee5\u53d6\u503c 1\uff0c 2 } else if ( s [ i + 1 ] == '*' ) { curr = 15 ; // **, \u53ef\u4ee5\u53d611-19\uff0c 21-26\uff0c \u6ce8\u610f00-10\uff0c 20\u662f\u4e0d\u80fd\u53d6\u7684 } else { curr = 1 ; // *[7-9], *\u53ea\u80fd\u53d6 1\uff0c \u56e0\u4e3a 26 \u662f\u6700\u5927\u503c\uff0c 27\u662f\u65e0\u6cd5\u89e3\u7801\u7684 } curr = curr * nextNext ; // \u5bf9\u5e94\u4e24\u4f4d\u6570\u5b57\u89e3\u7801\u4e00\u4e2a\u5b57\u6bcd\u7684\u60c5\u51b5 curr += 9 * next ; // \u5bf9\u5e94 * \u53d61-9\u5e76\u4e14\u5355\u72ec\u89e3\u7801\u7684\u60c5\u51b5 } else if ( s [ i ] == '0' ) { curr = 0 ; // 0 \u65e0\u6cd5\u89e3\u7801\uff0c \u5373\u4f7f\u662f0*\u4e5f\u4e0d\u80fd } else { curr = 0 ; if ( s [ i + 1 ] == '*' ) { if ( s [ i ] == '1' ) curr = 9 ; // 11-19 \u53ef\u4ee5\u67099\u4e2d\u89e3\u7801\u65b9\u6cd5 if ( s [ i ] == '2' ) curr = 6 ; // 21-26 \u53ef\u4ee5\u67096\u79cd\u89e3\u7801\u65b9\u6cd5 } else { int number = ( s [ i ] - '0' ) * 10 + s [ i + 1 ] - '0' ; if ( number >= 1 && number <= 26 ) { curr = 1 ; } } curr = curr * nextNext ; curr += next ; } nextNext = next ; next = curr % M ; } return next ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/658/readme/","text":"658. \u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u4e24\u4e2a\u6574\u6570 k \u548c x\uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u9760\u8fd1 x\uff08\u4e24\u6570\u4e4b\u5dee\u6700\u5c0f\uff09\u7684 k \u4e2a\u6570\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5fc5\u987b\u8981\u662f\u6309\u5347\u5e8f\u6392\u597d\u7684\u3002\u5982\u679c\u6709\u4e24\u4e2a\u6570\u4e0e x \u7684\u5dee\u503c\u4e00\u6837\uff0c\u4f18\u5148\u9009\u62e9\u6570\u503c\u8f83\u5c0f\u7684\u90a3\u4e2a\u6570\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [1,2,3,4,5], k=4, x=3 \u8f93\u51fa: [1,2,3,4] \u793a\u4f8b 2: 1 2 \u8f93\u5165: [1,2,3,4,5], k=4, x=-1 \u8f93\u51fa: [1,2,3,4] \u8bf4\u660e: 1 2 3 k \u7684\u503c\u4e3a\u6b63\u6570\uff0c\u4e14\u603b\u662f\u5c0f\u4e8e\u7ed9\u5b9a\u6392\u5e8f\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u6570\u7ec4\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc7 104 \u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0e x \u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 104 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230 x \u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e \u4f7f\u7528\u53cc\u6307\u9488\u641c\u7d22\u9644\u8fd1\u5143\u7d20\uff0c\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684K\u4e2a \u6392\u5e8f\u8f93\u51fa #define ABS(a) ((a) >= 0 ? (a) : (-(a))) /** * Note: The returned array must be malloced, assume caller calls free(). */ void swap ( int * arr , int index1 , int index2 ) { int tmp ; if ( index1 == index2 ) { return ; } tmp = arr [ index1 ]; arr [ index1 ] = arr [ index2 ]; arr [ index2 ] = tmp ; return ; } int partition ( int * arr , int start , int end ) { int x , i , j ; x = arr [ end ]; j = start - 1 ; for ( i = start ; i < end ; i ++ ) { if ( arr [ i ] <= x ) { j = j + 1 ; swap ( arr , j , i ); } } swap ( arr , j + 1 , end ); return j + 1 ; } void sorted ( int * arr , int start , int end ) { int mid ; if ( start >= end ) { return ; } mid = partition ( arr , start , end ); sorted ( arr , start , mid - 1 ); sorted ( arr , mid + 1 , end ); return ; } int BinaryFind ( int * arr , int arrSize , int target ) { int left = 0 ; int right = arrSize - 1 ; int mid ; while ( left < right ) { mid = ( left + right ) / 2 ; if ( arr [ mid ] == target ) { return mid ; } else if ( arr [ mid ] > target ) { right = mid - 1 ; } else { left = mid + 1 ; } } return left ; } int * findClosestElements ( int * arr , int arrSize , int k , int x , int * returnSize ){ int * ans ; int ansEnd = 0 ; int left , right , pos ; if ( arr == NULL || arrSize == 0 ) { return NULL ; } // \u4e8c\u5206\u67e5\u627e\u627e\u5230 x \u5e94\u8be5\u63d2\u5165 arr \u7684\u4f4d\u7f6e pos = BinaryFind ( arr , arrSize , x ); // \u4ece pos \u5f00\u59cb\u53cc\u6307\u9488\u5de6\u53f3\u641c\u7d22\uff0c \u627e\u4e0e x \u5dee\u503c\u6700\u5c0f\u7684\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d ans = ( int * ) malloc ( sizeof ( int ) * k ); left = pos - 1 ; right = pos ; while ( ansEnd < k ) { if ( left >= 0 && right < arrSize ) { if ( ABS ( arr [ left ] - x ) <= ABS ( arr [ right ] - x )) { ans [ ansEnd ++ ] = arr [ left ]; left -= 1 ; } else { ans [ ansEnd ++ ] = arr [ right ]; right += 1 ; } } else if ( left >= 0 ) { ans [ ansEnd ++ ] = arr [ left ]; left -= 1 ; } else { ans [ ansEnd ++ ] = arr [ right ]; right += 1 ; } } sorted ( ans , 0 , ansEnd - 1 ); * returnSize = ansEnd ; return ans ; }","title":"[658. \u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20](https://leetcode-cn.com/problems/find-k-closest-elements/)"},{"location":"leetcode/658/readme/#658-k","text":"","title":"658. \u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20"},{"location":"leetcode/658/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u4e24\u4e2a\u6574\u6570 k \u548c x\uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u9760\u8fd1 x\uff08\u4e24\u6570\u4e4b\u5dee\u6700\u5c0f\uff09\u7684 k \u4e2a\u6570\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5fc5\u987b\u8981\u662f\u6309\u5347\u5e8f\u6392\u597d\u7684\u3002\u5982\u679c\u6709\u4e24\u4e2a\u6570\u4e0e x \u7684\u5dee\u503c\u4e00\u6837\uff0c\u4f18\u5148\u9009\u62e9\u6570\u503c\u8f83\u5c0f\u7684\u90a3\u4e2a\u6570\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: [1,2,3,4,5], k=4, x=3 \u8f93\u51fa: [1,2,3,4] \u793a\u4f8b 2: 1 2 \u8f93\u5165: [1,2,3,4,5], k=4, x=-1 \u8f93\u51fa: [1,2,3,4] \u8bf4\u660e: 1 2 3 k \u7684\u503c\u4e3a\u6b63\u6570\uff0c\u4e14\u603b\u662f\u5c0f\u4e8e\u7ed9\u5b9a\u6392\u5e8f\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u6570\u7ec4\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc7 104 \u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0e x \u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 104","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/658/readme/#2","text":"\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230 x \u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e \u4f7f\u7528\u53cc\u6307\u9488\u641c\u7d22\u9644\u8fd1\u5143\u7d20\uff0c\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684K\u4e2a \u6392\u5e8f\u8f93\u51fa #define ABS(a) ((a) >= 0 ? (a) : (-(a))) /** * Note: The returned array must be malloced, assume caller calls free(). */ void swap ( int * arr , int index1 , int index2 ) { int tmp ; if ( index1 == index2 ) { return ; } tmp = arr [ index1 ]; arr [ index1 ] = arr [ index2 ]; arr [ index2 ] = tmp ; return ; } int partition ( int * arr , int start , int end ) { int x , i , j ; x = arr [ end ]; j = start - 1 ; for ( i = start ; i < end ; i ++ ) { if ( arr [ i ] <= x ) { j = j + 1 ; swap ( arr , j , i ); } } swap ( arr , j + 1 , end ); return j + 1 ; } void sorted ( int * arr , int start , int end ) { int mid ; if ( start >= end ) { return ; } mid = partition ( arr , start , end ); sorted ( arr , start , mid - 1 ); sorted ( arr , mid + 1 , end ); return ; } int BinaryFind ( int * arr , int arrSize , int target ) { int left = 0 ; int right = arrSize - 1 ; int mid ; while ( left < right ) { mid = ( left + right ) / 2 ; if ( arr [ mid ] == target ) { return mid ; } else if ( arr [ mid ] > target ) { right = mid - 1 ; } else { left = mid + 1 ; } } return left ; } int * findClosestElements ( int * arr , int arrSize , int k , int x , int * returnSize ){ int * ans ; int ansEnd = 0 ; int left , right , pos ; if ( arr == NULL || arrSize == 0 ) { return NULL ; } // \u4e8c\u5206\u67e5\u627e\u627e\u5230 x \u5e94\u8be5\u63d2\u5165 arr \u7684\u4f4d\u7f6e pos = BinaryFind ( arr , arrSize , x ); // \u4ece pos \u5f00\u59cb\u53cc\u6307\u9488\u5de6\u53f3\u641c\u7d22\uff0c \u627e\u4e0e x \u5dee\u503c\u6700\u5c0f\u7684\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d ans = ( int * ) malloc ( sizeof ( int ) * k ); left = pos - 1 ; right = pos ; while ( ansEnd < k ) { if ( left >= 0 && right < arrSize ) { if ( ABS ( arr [ left ] - x ) <= ABS ( arr [ right ] - x )) { ans [ ansEnd ++ ] = arr [ left ]; left -= 1 ; } else { ans [ ansEnd ++ ] = arr [ right ]; right += 1 ; } } else if ( left >= 0 ) { ans [ ansEnd ++ ] = arr [ left ]; left -= 1 ; } else { ans [ ansEnd ++ ] = arr [ right ]; right += 1 ; } } sorted ( ans , 0 , ansEnd - 1 ); * returnSize = ansEnd ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/684/684/index.py.html","text":"684.py \u00b6 from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def findRedundantConnection ( self , edges : List [ List [ int ]]) -> List [ int ]: n = len ( edges ) self . create ( n ) ans = None for edge in edges : if self . parent ( edge [ 0 ] - 1 ) != self . parent ( edge [ 1 ] - 1 ): self . merge ( edge [ 0 ] - 1 , edge [ 1 ] - 1 ) else : ans = edge return ans s = Solution () edges = [[ 1 , 2 ], [ 1 , 3 ], [ 2 , 3 ]] expected = [ 2 , 3 ] ans = s . findRedundantConnection ( edges ) assert ans == expected edges = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 1 , 4 ], [ 1 , 5 ]] expected = [ 1 , 4 ] ans = s . findRedundantConnection ( edges ) assert expected == ans end = 1","title":"684.py"},{"location":"leetcode/684/684/index.py.html#684py","text":"from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def findRedundantConnection ( self , edges : List [ List [ int ]]) -> List [ int ]: n = len ( edges ) self . create ( n ) ans = None for edge in edges : if self . parent ( edge [ 0 ] - 1 ) != self . parent ( edge [ 1 ] - 1 ): self . merge ( edge [ 0 ] - 1 , edge [ 1 ] - 1 ) else : ans = edge return ans s = Solution () edges = [[ 1 , 2 ], [ 1 , 3 ], [ 2 , 3 ]] expected = [ 2 , 3 ] ans = s . findRedundantConnection ( edges ) assert ans == expected edges = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 1 , 4 ], [ 1 , 5 ]] expected = [ 1 , 4 ] ans = s . findRedundantConnection ( edges ) assert expected == ans end = 1","title":"684.py"},{"location":"leetcode/684/685/index.py.html","text":"685.py \u00b6 from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def findRedundantDirectedConnection ( self , edges : List [ List [ int ]]) -> List [ int ]: n = len ( edges ) self . create ( n ) ans = None for edge in edges : if self . parent ( edge [ 0 ] - 1 ) != self . parent ( edge [ 1 ] - 1 ): self . merge ( edge [ 0 ] - 1 , edge [ 1 ] - 1 ) else : ans = edge return ans s = Solution () edges = [[ 1 , 2 ], [ 1 , 3 ], [ 2 , 3 ]] expected = [ 2 , 3 ] ans = s . findRedundantDirectedConnection ( edges ) assert ans == expected edges = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 4 , 1 ], [ 1 , 5 ]] expected = [ 4 , 1 ] ans = s . findRedundantDirectedConnection ( edges ) assert expected == ans end = 1","title":"685.py"},{"location":"leetcode/684/685/index.py.html#685py","text":"from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def findRedundantDirectedConnection ( self , edges : List [ List [ int ]]) -> List [ int ]: n = len ( edges ) self . create ( n ) ans = None for edge in edges : if self . parent ( edge [ 0 ] - 1 ) != self . parent ( edge [ 1 ] - 1 ): self . merge ( edge [ 0 ] - 1 , edge [ 1 ] - 1 ) else : ans = edge return ans s = Solution () edges = [[ 1 , 2 ], [ 1 , 3 ], [ 2 , 3 ]] expected = [ 2 , 3 ] ans = s . findRedundantDirectedConnection ( edges ) assert ans == expected edges = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 4 , 1 ], [ 1 , 5 ]] expected = [ 4 , 1 ] ans = s . findRedundantDirectedConnection ( edges ) assert expected == ans end = 1","title":"685.py"},{"location":"leetcode/684/readme/","text":"684. \u5197\u4f59\u8fde\u63a5 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5728\u672c\u95ee\u9898\u4e2d, \u6811\u6307\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u4e14\u65e0\u73af\u7684\u65e0\u5411\u56fe\u3002 \u8f93\u5165\u4e00\u4e2a\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002 \u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u6bcf\u4e00\u4e2a\u8fb9\u7684\u5143\u7d20\u662f\u4e00\u5bf9[u, v] \uff0c\u6ee1\u8db3 u < v\uff0c\u8868\u793a\u8fde\u63a5\u9876\u70b9u \u548cv\u7684\u65e0\u5411\u56fe\u7684\u8fb9\u3002 \u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002\u7b54\u6848\u8fb9 [u, v] \u5e94\u6ee1\u8db3\u76f8\u540c\u7684\u683c\u5f0f u < v\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 \u8f93\u5165: [[1,2], [1,3], [2,3]] \u8f93\u51fa: [2,3] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 1 / \\ 2 - 3 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 \u8f93\u5165: [[1,2], [2,3], [3,4], [1,4], [1,5]] \u8f93\u51fa: [1,4] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 5 - 1 - 2 | | 4 - 3 \u6ce8\u610f: 1 2 \u8f93\u5165\u7684\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u5728 3 \u5230 1000\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2dN\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u987a\u5e8f\u8bfb\u53d6\u7ed9\u51fa\u7684\u8fb9 \u4f7f\u7528\u5e76\u67e5\u96c6merge\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\uff0c\u5982\u679cmerge\u4e4b\u524d\u53d1\u73b0\u5df2\u7ecf\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\uff0c\u8fd9\u6761\u8fb9\u662f\u591a\u4f59\u7684\u3002 \u4e00\u65e6\u627e\u5230\uff0c\u8f93\u51fa\u5b83 python","title":"[684. \u5197\u4f59\u8fde\u63a5](https://leetcode-cn.com/problems/redundant-connection/)"},{"location":"leetcode/684/readme/#684","text":"","title":"684. \u5197\u4f59\u8fde\u63a5"},{"location":"leetcode/684/readme/#1","text":"\u5728\u672c\u95ee\u9898\u4e2d, \u6811\u6307\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u4e14\u65e0\u73af\u7684\u65e0\u5411\u56fe\u3002 \u8f93\u5165\u4e00\u4e2a\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002 \u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u6bcf\u4e00\u4e2a\u8fb9\u7684\u5143\u7d20\u662f\u4e00\u5bf9[u, v] \uff0c\u6ee1\u8db3 u < v\uff0c\u8868\u793a\u8fde\u63a5\u9876\u70b9u \u548cv\u7684\u65e0\u5411\u56fe\u7684\u8fb9\u3002 \u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002\u7b54\u6848\u8fb9 [u, v] \u5e94\u6ee1\u8db3\u76f8\u540c\u7684\u683c\u5f0f u < v\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 \u8f93\u5165: [[1,2], [1,3], [2,3]] \u8f93\u51fa: [2,3] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 1 / \\ 2 - 3 \u793a\u4f8b 2\uff1a 1 2 3 4 5 6 \u8f93\u5165: [[1,2], [2,3], [3,4], [1,4], [1,5]] \u8f93\u51fa: [1,4] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a: 5 - 1 - 2 | | 4 - 3 \u6ce8\u610f: 1 2 \u8f93\u5165\u7684\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u5728 3 \u5230 1000\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2dN\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/684/readme/#2","text":"\u987a\u5e8f\u8bfb\u53d6\u7ed9\u51fa\u7684\u8fb9 \u4f7f\u7528\u5e76\u67e5\u96c6merge\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\uff0c\u5982\u679cmerge\u4e4b\u524d\u53d1\u73b0\u5df2\u7ecf\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\uff0c\u8fd9\u6761\u8fb9\u662f\u591a\u4f59\u7684\u3002 \u4e00\u65e6\u627e\u5230\uff0c\u8f93\u51fa\u5b83 python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/685/685/index.py.html","text":"685.py \u00b6 from typing import List N = 1000 class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def isValid ( self , edges , i ): \"\"\" \u5220\u9664\u8fb9edges[i]\u4e4b\u540e\u56fe\u662f\u5426\u8fde\u901a \"\"\" self . create ( len ( edges )) for j in range ( len ( edges )): if j != i : pu = self . parent ( edges [ j ][ 0 ] - 1 ) pv = self . parent ( edges [ j ][ 1 ] - 1 ) if pu != pv : self . merge ( edges [ j ][ 0 ] - 1 , edges [ j ][ 1 ] - 1 ) return self . n == 1 def findRedundantDirectedConnection ( self , edges : List [ List [ int ]]) -> List [ int ]: n = len ( edges ) # \u8282\u70b9\u6570\u91cf enterPoints = [ 0 for _ in range ( n )] # \u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6 for i in range ( n ): enterPoints [ edges [ i ][ 1 ] - 1 ] += 1 # \u9898\u76ee\u4e2d\u7684\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb for i in reversed ( range ( n )): if enterPoints [ edges [ i ][ 1 ] - 1 ] == 2 : ans = self . isValid ( edges , i ) if ans == True : return edges [ i ] for i in reversed ( range ( n )): if enterPoints [ edges [ i ][ 1 ] - 1 ] == 1 : ans = self . isValid ( edges , i ) if ans == True : return edges [ i ] return [] s = Solution () edges = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 4 , 1 ], [ 1 , 5 ]] ans = s . findRedundantDirectedConnection ( edges ) end = 10","title":"685.py"},{"location":"leetcode/685/685/index.py.html#685py","text":"from typing import List N = 1000 class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def isValid ( self , edges , i ): \"\"\" \u5220\u9664\u8fb9edges[i]\u4e4b\u540e\u56fe\u662f\u5426\u8fde\u901a \"\"\" self . create ( len ( edges )) for j in range ( len ( edges )): if j != i : pu = self . parent ( edges [ j ][ 0 ] - 1 ) pv = self . parent ( edges [ j ][ 1 ] - 1 ) if pu != pv : self . merge ( edges [ j ][ 0 ] - 1 , edges [ j ][ 1 ] - 1 ) return self . n == 1 def findRedundantDirectedConnection ( self , edges : List [ List [ int ]]) -> List [ int ]: n = len ( edges ) # \u8282\u70b9\u6570\u91cf enterPoints = [ 0 for _ in range ( n )] # \u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6 for i in range ( n ): enterPoints [ edges [ i ][ 1 ] - 1 ] += 1 # \u9898\u76ee\u4e2d\u7684\u70b9\u7f16\u53f7\u4ece1\u5f00\u59cb for i in reversed ( range ( n )): if enterPoints [ edges [ i ][ 1 ] - 1 ] == 2 : ans = self . isValid ( edges , i ) if ans == True : return edges [ i ] for i in reversed ( range ( n )): if enterPoints [ edges [ i ][ 1 ] - 1 ] == 1 : ans = self . isValid ( edges , i ) if ans == True : return edges [ i ] return [] s = Solution () edges = [[ 1 , 2 ], [ 2 , 3 ], [ 3 , 4 ], [ 4 , 1 ], [ 1 , 5 ]] ans = s . findRedundantDirectedConnection ( edges ) end = 10","title":"685.py"},{"location":"leetcode/685/readme/","text":"685. \u5197\u4f59\u8fde\u63a5 II \u00b6 \u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6709\u6839\u6811\u6307\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6709\u5411\u56fe\u3002\u8be5\u6811\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u662f\u8be5\u6839\u8282\u70b9\u7684\u540e\u7ee7\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\u3002 \u8f93\u5165\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002 \u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002 \u6bcf\u4e00\u4e2a\u8fb9 \u7684\u5143\u7d20\u662f\u4e00\u5bf9 [u, v]\uff0c\u7528\u4ee5\u8868\u793a\u6709\u5411\u56fe\u4e2d\u8fde\u63a5\u9876\u70b9 u and v\u548c\u9876\u70b9\u7684\u8fb9\uff0c\u5176\u4e2d\u7236\u8282\u70b9u\u662f\u5b50\u8282\u70b9v\u7684\u4e00\u4e2a\u7236\u8282\u70b9\u3002 \u8fd4\u56de\u4e00\u6761\u80fd\u5220\u9664\u7684\u8fb9\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u56fe\u662f\u6709N\u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\u3002\u82e5\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6700\u540e\u51fa\u73b0\u5728\u7ed9\u5b9a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b54\u6848\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 \u8f93\u5165: [[1,2], [1,3], [2,3]] \u8f93\u51fa: [2,3] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b: 1 / \\ v v 2-->3 \u793a\u4f8b 2: 1 2 3 4 5 6 7 \u8f93\u5165: [[1,2], [2,3], [3,4], [4,1], [1,5]] \u8f93\u51fa: [4,1] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b: 5 <- 1 -> 2 ^ | | v 4 <- 3 \u6ce8\u610f: 1 2 \u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u7684\u57283\u52301000\u8303\u56f4\u5185\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2d N \u662f\u4e8c\u7ef4\u6570\u7ec4\u7684\u5927\u5c0f\u3002 1. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u5e76\u67e5\u96c6\uff0c \u989d\u5916\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u3002 \u5148\u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u70b9\uff0c\u5c1d\u8bd5\u53bb\u6389\u4e00\u4e2a\u8fb9\uff0c\u68c0\u67e5\u7ed3\u679c\u662f\u5426\u7b26\u5408\u8981\u6c42 \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u70b9\uff0c\u5c1d\u8bd5\u5165\u5ea6\u4e3a1\u7684\u70b9\u53bb\u6389\u8fb9 \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u662f\u8f93\u51fa\u6700\u540e\u51fa\u73b0\u7684\uff0c\u6240\u4ee5\u4ece\u540e\u5f80\u524d\u904d\u5386 Python","title":"[685. \u5197\u4f59\u8fde\u63a5 II](https://leetcode-cn.com/problems/redundant-connection-ii)"},{"location":"leetcode/685/readme/#685-ii","text":"\u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6709\u6839\u6811\u6307\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6709\u5411\u56fe\u3002\u8be5\u6811\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u662f\u8be5\u6839\u8282\u70b9\u7684\u540e\u7ee7\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\u3002 \u8f93\u5165\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002 \u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002 \u6bcf\u4e00\u4e2a\u8fb9 \u7684\u5143\u7d20\u662f\u4e00\u5bf9 [u, v]\uff0c\u7528\u4ee5\u8868\u793a\u6709\u5411\u56fe\u4e2d\u8fde\u63a5\u9876\u70b9 u and v\u548c\u9876\u70b9\u7684\u8fb9\uff0c\u5176\u4e2d\u7236\u8282\u70b9u\u662f\u5b50\u8282\u70b9v\u7684\u4e00\u4e2a\u7236\u8282\u70b9\u3002 \u8fd4\u56de\u4e00\u6761\u80fd\u5220\u9664\u7684\u8fb9\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u56fe\u662f\u6709N\u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\u3002\u82e5\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6700\u540e\u51fa\u73b0\u5728\u7ed9\u5b9a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b54\u6848\u3002 \u793a\u4f8b 1: 1 2 3 4 5 6 7 \u8f93\u5165: [[1,2], [1,3], [2,3]] \u8f93\u51fa: [2,3] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b: 1 / \\ v v 2-->3 \u793a\u4f8b 2: 1 2 3 4 5 6 7 \u8f93\u5165: [[1,2], [2,3], [3,4], [4,1], [1,5]] \u8f93\u51fa: [4,1] \u89e3\u91ca: \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b: 5 <- 1 -> 2 ^ | | v 4 <- 3 \u6ce8\u610f: 1 2 \u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u7684\u57283\u52301000\u8303\u56f4\u5185\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2d N \u662f\u4e8c\u7ef4\u6570\u7ec4\u7684\u5927\u5c0f\u3002","title":"685. \u5197\u4f59\u8fde\u63a5 II"},{"location":"leetcode/685/readme/#1","text":"\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c \u989d\u5916\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u3002 \u5148\u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u70b9\uff0c\u5c1d\u8bd5\u53bb\u6389\u4e00\u4e2a\u8fb9\uff0c\u68c0\u67e5\u7ed3\u679c\u662f\u5426\u7b26\u5408\u8981\u6c42 \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u70b9\uff0c\u5c1d\u8bd5\u5165\u5ea6\u4e3a1\u7684\u70b9\u53bb\u6389\u8fb9 \u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u662f\u8f93\u51fa\u6700\u540e\u51fa\u73b0\u7684\uff0c\u6240\u4ee5\u4ece\u540e\u5f80\u524d\u904d\u5386 Python","title":"1. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/739/readme/","text":"739. \u6bcf\u65e5\u6e29\u5ea6 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u8bf7\u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u51fa\u4e3a\uff1a\u8981\u60f3\u89c2\u6d4b\u5230\u66f4\u9ad8\u7684\u6c14\u6e29\uff0c\u81f3\u5c11\u9700\u8981\u7b49\u5f85\u7684\u5929\u6570\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f [1, 1, 4, 2, 1, 1, 0, 0]\u3002 \u63d0\u793a\uff1a\u6c14\u6e29 \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f [1, 30000]\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u5747\u4e3a\u534e\u6c0f\u5ea6\uff0c\u90fd\u662f\u5728 [30, 100] \u8303\u56f4\u5185\u7684\u6574\u6570\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u66b4\u529b\u65b9\u6cd5\uff0c\u4e24\u5c42\u5faa\u73af\uff0c\u6700\u540e\u4e24\u4e2a\u7528\u4f8b\u65e0\u6cd5\u901a\u8fc7\u3002 35 / 37 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b /** * Note: The returned array must be malloced, assume caller calls free(). */ int * dailyTemperatures ( int * T , int TSize , int * returnSize ){ int * ans ; int i , j ; ans = ( int * ) malloc ( sizeof ( int ) * TSize ); memset ( ans , 0 , sizeof ( int ) * TSize ); for ( i = 0 ; i < TSize - 1 ; i ++ ) { for ( j = i + 1 ; j < TSize ; j ++ ) { if ( T [ j ] > T [ i ]) { ans [ i ] = j - i ; break ; } } } * returnSize = TSize ; return ans ; } \u66b4\u529b\u65b9\u6cd5\u6bcf\u6b21\u90fd\u5230\u626b\u63cf\u5230\u6700\u540e\uff0c\u65e0\u6cd5\u5229\u7528\u524d\u4e00\u6b21\u626b\u63cf\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8\u3002 \u6211\u4eec\u91c7\u53d6\u4ece\u540e\u9053\u524d\u7684\u65b9\u6cd5\u626b\u63cf\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c \u5f53 nums[i] < nums[i+1] \u65f6\uff0c ans[i] = 1 \u5f53nums[i] >= nums[i+1] \u65f6\uff0c \u9700\u8981\u5411\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enums[i]\u7684\u6570\u5b57 \u5728\u5411\u540e\u627e\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5df2\u7ecf\u77e5\u9053\u4e86\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5b83\u7684\u6570\u5b57\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5fc5\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u800c\u662f\u8df3\u8dc3\u7740\u627e\uff0c\u8fd9\u6837\u660e\u663e\u53ef\u4ee5\u5feb\u5f88\u591a\u3002 /** * Note: The returned array must be malloced, assume caller calls free(). */ int * dailyTemperatures ( int * T , int TSize , int * returnSize ){ int * ans ; int i , j ; ans = ( int * ) malloc ( sizeof ( int ) * TSize ); memset ( ans , 0 , sizeof ( int ) * TSize ); for ( i = TSize - 2 ; i >= 0 ; i -- ) { if ( T [ i ] < T [ i + 1 ]) { ans [ i ] = 1 ; } else { j = i + 1 ; while ( j < TSize && T [ i ] >= T [ j ]) { if ( ans [ j ] == 0 ) { break ; } j = j + ans [ j ]; } if ( j < TSize && j > i && T [ j ] > T [ i ]) { ans [ i ] = j - i ; } } } * returnSize = TSize ; return ans ; }","title":"[739. \u6bcf\u65e5\u6e29\u5ea6](https://leetcode-cn.com/problems/daily-temperatures/)"},{"location":"leetcode/739/readme/#739","text":"","title":"739. \u6bcf\u65e5\u6e29\u5ea6"},{"location":"leetcode/739/readme/#1","text":"\u8bf7\u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u51fa\u4e3a\uff1a\u8981\u60f3\u89c2\u6d4b\u5230\u66f4\u9ad8\u7684\u6c14\u6e29\uff0c\u81f3\u5c11\u9700\u8981\u7b49\u5f85\u7684\u5929\u6570\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f [1, 1, 4, 2, 1, 1, 0, 0]\u3002 \u63d0\u793a\uff1a\u6c14\u6e29 \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f [1, 30000]\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u5747\u4e3a\u534e\u6c0f\u5ea6\uff0c\u90fd\u662f\u5728 [30, 100] \u8303\u56f4\u5185\u7684\u6574\u6570\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/739/readme/#2","text":"\u66b4\u529b\u65b9\u6cd5\uff0c\u4e24\u5c42\u5faa\u73af\uff0c\u6700\u540e\u4e24\u4e2a\u7528\u4f8b\u65e0\u6cd5\u901a\u8fc7\u3002 35 / 37 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b /** * Note: The returned array must be malloced, assume caller calls free(). */ int * dailyTemperatures ( int * T , int TSize , int * returnSize ){ int * ans ; int i , j ; ans = ( int * ) malloc ( sizeof ( int ) * TSize ); memset ( ans , 0 , sizeof ( int ) * TSize ); for ( i = 0 ; i < TSize - 1 ; i ++ ) { for ( j = i + 1 ; j < TSize ; j ++ ) { if ( T [ j ] > T [ i ]) { ans [ i ] = j - i ; break ; } } } * returnSize = TSize ; return ans ; } \u66b4\u529b\u65b9\u6cd5\u6bcf\u6b21\u90fd\u5230\u626b\u63cf\u5230\u6700\u540e\uff0c\u65e0\u6cd5\u5229\u7528\u524d\u4e00\u6b21\u626b\u63cf\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8\u3002 \u6211\u4eec\u91c7\u53d6\u4ece\u540e\u9053\u524d\u7684\u65b9\u6cd5\u626b\u63cf\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c \u5f53 nums[i] < nums[i+1] \u65f6\uff0c ans[i] = 1 \u5f53nums[i] >= nums[i+1] \u65f6\uff0c \u9700\u8981\u5411\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enums[i]\u7684\u6570\u5b57 \u5728\u5411\u540e\u627e\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5df2\u7ecf\u77e5\u9053\u4e86\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5b83\u7684\u6570\u5b57\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5fc5\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u800c\u662f\u8df3\u8dc3\u7740\u627e\uff0c\u8fd9\u6837\u660e\u663e\u53ef\u4ee5\u5feb\u5f88\u591a\u3002 /** * Note: The returned array must be malloced, assume caller calls free(). */ int * dailyTemperatures ( int * T , int TSize , int * returnSize ){ int * ans ; int i , j ; ans = ( int * ) malloc ( sizeof ( int ) * TSize ); memset ( ans , 0 , sizeof ( int ) * TSize ); for ( i = TSize - 2 ; i >= 0 ; i -- ) { if ( T [ i ] < T [ i + 1 ]) { ans [ i ] = 1 ; } else { j = i + 1 ; while ( j < TSize && T [ i ] >= T [ j ]) { if ( ans [ j ] == 0 ) { break ; } j = j + ans [ j ]; } if ( j < TSize && j > i && T [ j ] > T [ i ]) { ans [ i ] = j - i ; } } } * returnSize = TSize ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/743/743/index.py.html","text":"743.py \u00b6 from typing import List import heapq INF = float ( 'inf' ) class Solution : def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance def networkDelayTime ( self , times : List [ List [ int ]], N : int , K : int ) -> int : g = [ [ INF for _ in range ( N )] for _ in range ( N )] for u , v , w in times : g [ u - 1 ][ v - 1 ] = w for i in range ( N ): g [ i ][ i ] = 0 distance = self . dijkstra ( g , K - 1 ) ans = max ( distance ) if ans == INF : return - 1 return ans s = Solution () times = [[ 2 , 1 , 1 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] N = 4 K = 2 expected = 2 ans = s . networkDelayTime ( times , N , K ) assert expected == ans end = 10","title":"743.py"},{"location":"leetcode/743/743/index.py.html#743py","text":"from typing import List import heapq INF = float ( 'inf' ) class Solution : def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance def networkDelayTime ( self , times : List [ List [ int ]], N : int , K : int ) -> int : g = [ [ INF for _ in range ( N )] for _ in range ( N )] for u , v , w in times : g [ u - 1 ][ v - 1 ] = w for i in range ( N ): g [ i ][ i ] = 0 distance = self . dijkstra ( g , K - 1 ) ans = max ( distance ) if ans == INF : return - 1 return ans s = Solution () times = [[ 2 , 1 , 1 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] N = 4 K = 2 expected = 2 ans = s . networkDelayTime ( times , N , K ) assert expected == ans end = 10","title":"743.py"},{"location":"leetcode/743/743_2/index.py.html","text":"743_2.py \u00b6 from typing import List import heapq import numpy as np INF = float ( 'inf' ) class Solution : def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance def networkDelayTime ( self , times : List [ List [ int ]], N : int , K : int ) -> int : times = [[ u - 1 , v - 1 , w ] for u , v , w in times ] distance = self . BellmanFord ( times , K - 1 , N ) ans = max ( distance ) if ans == INF : return - 1 return int ( ans ) s = Solution () times = [[ 2 , 1 , 1 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] N = 4 K = 2 expected = 2 times = [[ 1 , 2 , 1 ],[ 2 , 1 , 3 ]] N = 2 K = 2 expected = 3 ans = s . networkDelayTime ( times , N , K ) assert expected == ans end = 10","title":"743 2.py"},{"location":"leetcode/743/743_2/index.py.html#743_2py","text":"from typing import List import heapq import numpy as np INF = float ( 'inf' ) class Solution : def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance def networkDelayTime ( self , times : List [ List [ int ]], N : int , K : int ) -> int : times = [[ u - 1 , v - 1 , w ] for u , v , w in times ] distance = self . BellmanFord ( times , K - 1 , N ) ans = max ( distance ) if ans == INF : return - 1 return int ( ans ) s = Solution () times = [[ 2 , 1 , 1 ],[ 2 , 3 , 1 ],[ 3 , 4 , 1 ]] N = 4 K = 2 expected = 2 times = [[ 1 , 2 , 1 ],[ 2 , 1 , 3 ]] N = 2 K = 2 expected = 3 ans = s . networkDelayTime ( times , N , K ) assert expected == ans end = 10","title":"743_2.py"},{"location":"leetcode/743/readme/","text":"743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709 N \u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a 1 \u5230 N\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 times\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7\u6709\u5411\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002 times[i] = (u, v, w)\uff0c\u5176\u4e2d u \u662f\u6e90\u8282\u70b9\uff0cv \u662f\u76ee\u6807\u8282\u70b9\uff0c w \u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4ece\u67d0\u4e2a\u8282\u70b9 K \u53d1\u51fa\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de -1\u3002 \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1atimes = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2 \u8f93\u51fa\uff1a2 \u6ce8\u610f: 1 2 3 4 N \u7684\u8303\u56f4\u5728 [1, 100] \u4e4b\u95f4\u3002 K \u7684\u8303\u56f4\u5728 [1, N] \u4e4b\u95f4\u3002 times \u7684\u957f\u5ea6\u5728 [1, 6000] \u4e4b\u95f4\u3002 \u6240\u6709\u7684\u8fb9 times[i] = (u, v, w) \u90fd\u6709 1 <= u, v <= N \u4e14 0 <= w <= 100\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528 dijkstra \u786e\u5b9a\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c \u7136\u540e\u6c42\u548c Python","title":"[743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4](https://leetcode-cn.com/problems/network-delay-time/)"},{"location":"leetcode/743/readme/#743","text":"","title":"743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4"},{"location":"leetcode/743/readme/#1","text":"\u6709 N \u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a 1 \u5230 N\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 times\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7\u6709\u5411\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002 times[i] = (u, v, w)\uff0c\u5176\u4e2d u \u662f\u6e90\u8282\u70b9\uff0cv \u662f\u76ee\u6807\u8282\u70b9\uff0c w \u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4ece\u67d0\u4e2a\u8282\u70b9 K \u53d1\u51fa\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de -1\u3002 \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1atimes = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2 \u8f93\u51fa\uff1a2 \u6ce8\u610f: 1 2 3 4 N \u7684\u8303\u56f4\u5728 [1, 100] \u4e4b\u95f4\u3002 K \u7684\u8303\u56f4\u5728 [1, N] \u4e4b\u95f4\u3002 times \u7684\u957f\u5ea6\u5728 [1, 6000] \u4e4b\u95f4\u3002 \u6240\u6709\u7684\u8fb9 times[i] = (u, v, w) \u90fd\u6709 1 <= u, v <= N \u4e14 0 <= w <= 100\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/743/readme/#2","text":"\u4f7f\u7528 dijkstra \u786e\u5b9a\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c \u7136\u540e\u6c42\u548c Python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/767/767/index.cpp.html","text":"767.cpp \u00b6 #include <stdbool.h> #include <deque> #include <string> using namespace std ; class Solution { public : string reorganizeString ( string S ) { } };","title":"767.cpp"},{"location":"leetcode/767/767/index.cpp.html#767cpp","text":"#include <stdbool.h> #include <deque> #include <string> using namespace std ; class Solution { public : string reorganizeString ( string S ) { } };","title":"767.cpp"},{"location":"leetcode/767/readme/","text":"767. \u91cd\u6784\u5b57\u7b26\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32S\uff0c\u68c0\u67e5\u662f\u5426\u80fd\u91cd\u65b0\u6392\u5e03\u5176\u4e2d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u4e24\u76f8\u90bb\u7684\u5b57\u7b26\u4e0d\u540c\u3002 \u82e5\u53ef\u884c\uff0c\u8f93\u51fa\u4efb\u610f\u53ef\u884c\u7684\u7ed3\u679c\u3002\u82e5\u4e0d\u53ef\u884c\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: S = \"aab\" \u8f93\u51fa: \"aba\" \u793a\u4f8b 2: 1 2 \u8f93\u5165: S = \"aaab\" \u8f93\u51fa: \"\" \u6ce8\u610f: 1 S \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u5e76\u4e14\u957f\u5ea6\u5728[1, 500]\u533a\u95f4\u5185\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5904\u7406\u6210\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c \u6309\u7167\u6b21\u6570\u5efa\u7acb\u5927\u9876\u5806\u3002 \u6bcf\u6b21\u53d6\u5806\u9876\u4e0e\u524d\u4e00\u6b21\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u8c03\u6574\u5806\u3002 \u76f4\u5230\u53d6\u5b8c\u6216\u8005\u627e\u4e0d\u5230\u4e0d\u540c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002 N = 600 class Solution ( object ): def reorganizeString ( self , S ): \"\"\" :type S: str :rtype: str \"\"\" dic = {} for c in S : if c not in dic : dic [ c ] = 1 else : dic [ c ] += 1 maps = [] for key , value in dic . iteritems (): maps . append ( [ N - value , value , key ] ) heapq . heapify ( maps ) hp = maps ans = \"\" while ( len ( hp ) > 0 ): index , value , key = heapq . heappop ( hp ) if len ( ans ) == 0 or ans [ - 1 ] != key : ans += key value = value - 1 if value > 0 : heapq . heappush ( hp , [ N - value , value , key ]) else : if len ( hp ) == 0 : return \"\" index , value2 , key2 = heapq . heappop ( hp ) ans += key2 value2 = value2 - 1 if value2 > 0 : heapq . heappush ( hp , [ N - value2 , value2 , key2 ] ) heapq . heappush ( hp , [ N - value , value , key ]) return ans","title":"[767. \u91cd\u6784\u5b57\u7b26\u4e32](https://leetcode-cn.com/problems/reorganize-string/)"},{"location":"leetcode/767/readme/#767","text":"","title":"767. \u91cd\u6784\u5b57\u7b26\u4e32"},{"location":"leetcode/767/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32S\uff0c\u68c0\u67e5\u662f\u5426\u80fd\u91cd\u65b0\u6392\u5e03\u5176\u4e2d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u4e24\u76f8\u90bb\u7684\u5b57\u7b26\u4e0d\u540c\u3002 \u82e5\u53ef\u884c\uff0c\u8f93\u51fa\u4efb\u610f\u53ef\u884c\u7684\u7ed3\u679c\u3002\u82e5\u4e0d\u53ef\u884c\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: S = \"aab\" \u8f93\u51fa: \"aba\" \u793a\u4f8b 2: 1 2 \u8f93\u5165: S = \"aaab\" \u8f93\u51fa: \"\" \u6ce8\u610f: 1 S \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u5e76\u4e14\u957f\u5ea6\u5728[1, 500]\u533a\u95f4\u5185\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/767/readme/#2","text":"\u5904\u7406\u6210\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c \u6309\u7167\u6b21\u6570\u5efa\u7acb\u5927\u9876\u5806\u3002 \u6bcf\u6b21\u53d6\u5806\u9876\u4e0e\u524d\u4e00\u6b21\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u8c03\u6574\u5806\u3002 \u76f4\u5230\u53d6\u5b8c\u6216\u8005\u627e\u4e0d\u5230\u4e0d\u540c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002 N = 600 class Solution ( object ): def reorganizeString ( self , S ): \"\"\" :type S: str :rtype: str \"\"\" dic = {} for c in S : if c not in dic : dic [ c ] = 1 else : dic [ c ] += 1 maps = [] for key , value in dic . iteritems (): maps . append ( [ N - value , value , key ] ) heapq . heapify ( maps ) hp = maps ans = \"\" while ( len ( hp ) > 0 ): index , value , key = heapq . heappop ( hp ) if len ( ans ) == 0 or ans [ - 1 ] != key : ans += key value = value - 1 if value > 0 : heapq . heappush ( hp , [ N - value , value , key ]) else : if len ( hp ) == 0 : return \"\" index , value2 , key2 = heapq . heappop ( hp ) ans += key2 value2 = value2 - 1 if value2 > 0 : heapq . heappush ( hp , [ N - value2 , value2 , key2 ] ) heapq . heappush ( hp , [ N - value , value , key ]) return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/768/readme/","text":"768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u8fd9\u4e2a\u95ee\u9898\u548c\u201c\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757\u201d\u76f8\u4f3c\uff0c\u4f46\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff0c\u8f93\u5165\u6570\u7ec4\u6700\u5927\u957f\u5ea6\u4e3a2000\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6700\u5927\u4e3a10**8\u3002 arr\u662f\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002 \u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: arr = [5,4,3,2,1] \u8f93\u51fa: 1 \u89e3\u91ca: \u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u5206\u6210 [5, 4], [3, 2, 1] \u7684\u7ed3\u679c\u662f [4, 5, 1, 2, 3]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: arr = [2,1,3,4,4] \u8f93\u51fa: 4 \u89e3\u91ca: \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [2, 1], [3, 4, 4]\u3002 \u7136\u800c\uff0c\u5206\u6210 [2, 1], [3], [4], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002 \u6ce8\u610f: 1 2 arr\u7684\u957f\u5ea6\u5728[1, 2000]\u4e4b\u95f4\u3002 arr[i]\u7684\u5927\u5c0f\u5728[0, 10**8]\u4e4b\u95f4\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5148\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u4efb\u4f55\u533a\u95f4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u626b\u63cf\u4e00\u8d9f\uff0c\u627e\u5230\u6392\u5e8f\u4e4b\u540e\u7684\u6570\u7ec4\u548c\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u53ca\u5176\u4e2a\u6570\u90fd\u76f8\u540c\u7684\u70b9 \u4e00\u65e6\u627e\u5230\uff0c\u7ed3\u679c\u5c31\u589e\u52a01\uff0c\u66f4\u65b0\u5faa\u73af\u53d8\u91cf\uff0c\u63a5\u7740\u5f80\u4e0b\u627e class Solution ( object ): def maxChunksToSorted ( self , arr ): \"\"\" :type arr: List[int] :rtype: int \"\"\" def getMaxMin ( arr ): minv = min ( arr ) minc = arr . count ( minv ) maxv = max ( arr ) maxc = arr . count ( maxv ) return ( minv , minc ), ( maxv , maxc ) ans = 0 i = 0 n = len ( arr ) start = i sorted_arr = sorted ( arr ) while i < n : minv , maxv = getMaxMin ( sorted_arr [ start : i + 1 ]) arrMin , arrMax = getMaxMin ( arr [ start : i + 1 ]) if minv == arrMin and maxv == arrMax : ans += 1 start = i + 1 i = i + 1 return ans","title":"[768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II](https://leetcode-cn.com/problems/max-chunks-to-make-sorted-ii/)"},{"location":"leetcode/768/readme/#768-ii","text":"","title":"768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II"},{"location":"leetcode/768/readme/#1","text":"\u8fd9\u4e2a\u95ee\u9898\u548c\u201c\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757\u201d\u76f8\u4f3c\uff0c\u4f46\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff0c\u8f93\u5165\u6570\u7ec4\u6700\u5927\u957f\u5ea6\u4e3a2000\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6700\u5927\u4e3a10**8\u3002 arr\u662f\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002 \u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: arr = [5,4,3,2,1] \u8f93\u51fa: 1 \u89e3\u91ca: \u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u5206\u6210 [5, 4], [3, 2, 1] \u7684\u7ed3\u679c\u662f [4, 5, 1, 2, 3]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: arr = [2,1,3,4,4] \u8f93\u51fa: 4 \u89e3\u91ca: \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [2, 1], [3, 4, 4]\u3002 \u7136\u800c\uff0c\u5206\u6210 [2, 1], [3], [4], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002 \u6ce8\u610f: 1 2 arr\u7684\u957f\u5ea6\u5728[1, 2000]\u4e4b\u95f4\u3002 arr[i]\u7684\u5927\u5c0f\u5728[0, 10**8]\u4e4b\u95f4\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/768/readme/#2","text":"\u5148\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u4efb\u4f55\u533a\u95f4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u626b\u63cf\u4e00\u8d9f\uff0c\u627e\u5230\u6392\u5e8f\u4e4b\u540e\u7684\u6570\u7ec4\u548c\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u53ca\u5176\u4e2a\u6570\u90fd\u76f8\u540c\u7684\u70b9 \u4e00\u65e6\u627e\u5230\uff0c\u7ed3\u679c\u5c31\u589e\u52a01\uff0c\u66f4\u65b0\u5faa\u73af\u53d8\u91cf\uff0c\u63a5\u7740\u5f80\u4e0b\u627e class Solution ( object ): def maxChunksToSorted ( self , arr ): \"\"\" :type arr: List[int] :rtype: int \"\"\" def getMaxMin ( arr ): minv = min ( arr ) minc = arr . count ( minv ) maxv = max ( arr ) maxc = arr . count ( maxv ) return ( minv , minc ), ( maxv , maxc ) ans = 0 i = 0 n = len ( arr ) start = i sorted_arr = sorted ( arr ) while i < n : minv , maxv = getMaxMin ( sorted_arr [ start : i + 1 ]) arrMin , arrMax = getMaxMin ( arr [ start : i + 1 ]) if minv == arrMin and maxv == arrMax : ans += 1 start = i + 1 i = i + 1 return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/769/readme/","text":"769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6570\u7ec4arr\u662f[0, 1, ..., arr.length - 1]\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002 \u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: arr = [4,3,2,1,0] \u8f93\u51fa: 1 \u89e3\u91ca: \u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u5206\u6210 [4, 3], [2, 1, 0] \u7684\u7ed3\u679c\u662f [3, 4, 0, 1, 2]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: arr = [1,0,2,3,4] \u8f93\u51fa: 4 \u89e3\u91ca: \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [1, 0], [2, 3, 4]\u3002 \u7136\u800c\uff0c\u5206\u6210 [1, 0], [2], [3], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002 \u6ce8\u610f: 1 2 arr \u7684\u957f\u5ea6\u5728 [1, 10] \u4e4b\u95f4\u3002 arr[i]\u662f [0, 1, ..., arr.length - 1]\u7684\u4e00\u79cd\u6392\u5217\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u76f8\u5f53\u4e8e\u627e\u51fa\u5c40\u90e8\u4e71\u5e8f\u7684\u5b50\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u6309\u7167\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u5224\u65ad \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7b26\u5408\u539f\u59cb\u6570\u7ec4\u7684\u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u91cd\u6392 class Solution ( object ): def maxChunksToSorted ( self , arr ): \"\"\" :type arr: List[int] :rtype: int \"\"\" def getMaxMin ( arr , start , end ): maxv = max ( arr [ start : end + 1 ]) minv = min ( arr [ start : end + 1 ]) return minv , maxv ans = 0 i = 0 n = len ( arr ) start = i end = - 1 while i < n : minv , maxv = start , i arrMin , arrMax = getMaxMin ( arr , start , i ) if minv == arrMin and maxv == arrMax : ans += 1 start = i + 1 i = i + 1 return ans","title":"[769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757](https://leetcode-cn.com/problems/max-chunks-to-make-sorted/)"},{"location":"leetcode/769/readme/#769","text":"","title":"769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757"},{"location":"leetcode/769/readme/#1","text":"\u6570\u7ec4arr\u662f[0, 1, ..., arr.length - 1]\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002 \u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f \u793a\u4f8b 1: 1 2 3 4 5 \u8f93\u5165: arr = [4,3,2,1,0] \u8f93\u51fa: 1 \u89e3\u91ca: \u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u5206\u6210 [4, 3], [2, 1, 0] \u7684\u7ed3\u679c\u662f [3, 4, 0, 1, 2]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002 \u793a\u4f8b 2: 1 2 3 4 5 \u8f93\u5165: arr = [1,0,2,3,4] \u8f93\u51fa: 4 \u89e3\u91ca: \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [1, 0], [2, 3, 4]\u3002 \u7136\u800c\uff0c\u5206\u6210 [1, 0], [2], [3], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002 \u6ce8\u610f: 1 2 arr \u7684\u957f\u5ea6\u5728 [1, 10] \u4e4b\u95f4\u3002 arr[i]\u662f [0, 1, ..., arr.length - 1]\u7684\u4e00\u79cd\u6392\u5217\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/769/readme/#2","text":"\u76f8\u5f53\u4e8e\u627e\u51fa\u5c40\u90e8\u4e71\u5e8f\u7684\u5b50\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u6309\u7167\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u5224\u65ad \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7b26\u5408\u539f\u59cb\u6570\u7ec4\u7684\u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u91cd\u6392 class Solution ( object ): def maxChunksToSorted ( self , arr ): \"\"\" :type arr: List[int] :rtype: int \"\"\" def getMaxMin ( arr , start , end ): maxv = max ( arr [ start : end + 1 ]) minv = min ( arr [ start : end + 1 ]) return minv , maxv ans = 0 i = 0 n = len ( arr ) start = i end = - 1 while i < n : minv , maxv = start , i arrMin , arrMax = getMaxMin ( arr , start , i ) if minv == arrMin and maxv == arrMax : ans += 1 start = i + 1 i = i + 1 return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/792/readme/","text":"792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u5b57\u7b26\u4e32 S \u548c\u5355\u8bcd\u5b57\u5178 words, \u6c42 words[i] \u4e2d\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: S = \"abcde\" words = [\"a\", \"bb\", \"acd\", \"ace\"] \u8f93\u51fa: 3 \u89e3\u91ca: \u6709\u4e09\u4e2a\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: \"a\", \"acd\", \"ace\"\u3002 \u6ce8\u610f: 1 2 3 4 \u6240\u6709\u5728words\u548c S \u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 S \u7684\u957f\u5ea6\u5728 [1, 50000]\u3002 words \u7684\u957f\u5ea6\u5728 [1, 5000]\u3002 words[i]\u7684\u957f\u5ea6\u5728[1, 50]\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u66b4\u529b\u67e5\u627e class Solution ( object ): def match ( self , dic , word ): cur = - 1 for c in word : if c in dic : indexs = dic [ c ] flag = True for index in indexs : if index > cur : cur = index flag = False break if flag : return False else : return False return True def numMatchingSubseq ( self , S , words ): \"\"\" :type S: str :type words: List[str] :rtype: int \"\"\" ans = 0 dic = {} for i , c in enumerate ( S ): if c not in dic : dic [ c ] = [ i ] else : dic [ c ] . append ( i ) for word in words : if self . match ( dic , word ): ans += 1 return ans","title":"[792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570](https://leetcode-cn.com/problems/number-of-matching-subsequences/)"},{"location":"leetcode/792/readme/#792","text":"","title":"792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570"},{"location":"leetcode/792/readme/#1","text":"\u7ed9\u5b9a\u5b57\u7b26\u4e32 S \u548c\u5355\u8bcd\u5b57\u5178 words, \u6c42 words[i] \u4e2d\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002 \u793a\u4f8b: \u8f93\u5165: S = \"abcde\" words = [\"a\", \"bb\", \"acd\", \"ace\"] \u8f93\u51fa: 3 \u89e3\u91ca: \u6709\u4e09\u4e2a\u662f S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: \"a\", \"acd\", \"ace\"\u3002 \u6ce8\u610f: 1 2 3 4 \u6240\u6709\u5728words\u548c S \u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002 S \u7684\u957f\u5ea6\u5728 [1, 50000]\u3002 words \u7684\u957f\u5ea6\u5728 [1, 5000]\u3002 words[i]\u7684\u957f\u5ea6\u5728[1, 50]\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/792/readme/#2","text":"\u66b4\u529b\u67e5\u627e class Solution ( object ): def match ( self , dic , word ): cur = - 1 for c in word : if c in dic : indexs = dic [ c ] flag = True for index in indexs : if index > cur : cur = index flag = False break if flag : return False else : return False return True def numMatchingSubseq ( self , S , words ): \"\"\" :type S: str :type words: List[str] :rtype: int \"\"\" ans = 0 dic = {} for i , c in enumerate ( S ): if c not in dic : dic [ c ] = [ i ] else : dic [ c ] . append ( i ) for word in words : if self . match ( dic , word ): ans += 1 return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/797/797/index.c.html","text":"797.c \u00b6","title":"797.c"},{"location":"leetcode/797/797/index.c.html#797c","text":"","title":"797.c"},{"location":"leetcode/797/797/index.cpp.html","text":"797.cpp \u00b6","title":"797.cpp"},{"location":"leetcode/797/797/index.cpp.html#797cpp","text":"","title":"797.cpp"},{"location":"leetcode/797/797/index.py.html","text":"797.py \u00b6","title":"797.py"},{"location":"leetcode/797/797/index.py.html#797py","text":"","title":"797.py"},{"location":"leetcode/797/readme/","text":"797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4e00\u4e2a\u6709 n \u4e2a\u7ed3\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u627e\u5230\u6240\u6709\u4ece 0 \u5230 n-1 \u7684\u8def\u5f84\u5e76\u8f93\u51fa\uff08\u4e0d\u8981\u6c42\u6309\u987a\u5e8f\uff09 \u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2c i \u4e2a\u6570\u7ec4\u4e2d\u7684\u5355\u5143\u90fd\u8868\u793a\u6709\u5411\u56fe\u4e2d i \u53f7\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u4e0b\u4e00\u4e9b\u7ed3\u70b9\uff08\u8bd1\u8005\u6ce8\uff1a\u6709\u5411\u56fe\u662f\u6709\u65b9\u5411\u7684\uff0c\u5373\u89c4\u5b9a\u4e86a\u2192b\u4f60\u5c31\u4e0d\u80fd\u4eceb\u2192a\uff09\u7a7a\u5c31\u662f\u6ca1\u6709\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e86\u3002 \u793a\u4f8b: \u8f93\u5165: [[1,2], [3], [3], []] \u8f93\u51fa: [[0,1,3],[0,2,3]] \u89e3\u91ca: \u56fe\u662f\u8fd9\u6837\u7684: 0--->1 | | v v 2--->3 \u8fd9\u6709\u4e24\u6761\u8def: 0 -> 1 -> 3 \u548c 0 -> 2 -> 3 . \u63d0\u793a: 1 2 \u7ed3\u70b9\u7684\u6570\u91cf\u4f1a\u5728\u8303\u56f4 [2, 15] \u5185\u3002 \u4f60\u53ef\u4ee5\u628a\u8def\u5f84\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u5728\u8def\u5f84\u5185\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5fc5\u987b\u4fdd\u8bc1\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u6216\u8005 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u90fd\u53ef\u4ee5\u5b8c\u6210\u6b64\u9898\u76ee\u3002 3. AC\u4ee3\u7801 \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22C\u8bed\u8a00\u5b9e\u73b0\u7248 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22C\u8bed\u8a00\u5b9e\u73b0\u7248","title":"[797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84](https://leetcode-cn.com/problems/all-paths-from-source-to-target)"},{"location":"leetcode/797/readme/#797","text":"","title":"797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84"},{"location":"leetcode/797/readme/#1","text":"\u7ed9\u4e00\u4e2a\u6709 n \u4e2a\u7ed3\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u627e\u5230\u6240\u6709\u4ece 0 \u5230 n-1 \u7684\u8def\u5f84\u5e76\u8f93\u51fa\uff08\u4e0d\u8981\u6c42\u6309\u987a\u5e8f\uff09 \u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2c i \u4e2a\u6570\u7ec4\u4e2d\u7684\u5355\u5143\u90fd\u8868\u793a\u6709\u5411\u56fe\u4e2d i \u53f7\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u4e0b\u4e00\u4e9b\u7ed3\u70b9\uff08\u8bd1\u8005\u6ce8\uff1a\u6709\u5411\u56fe\u662f\u6709\u65b9\u5411\u7684\uff0c\u5373\u89c4\u5b9a\u4e86a\u2192b\u4f60\u5c31\u4e0d\u80fd\u4eceb\u2192a\uff09\u7a7a\u5c31\u662f\u6ca1\u6709\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e86\u3002 \u793a\u4f8b: \u8f93\u5165: [[1,2], [3], [3], []] \u8f93\u51fa: [[0,1,3],[0,2,3]] \u89e3\u91ca: \u56fe\u662f\u8fd9\u6837\u7684: 0--->1 | | v v 2--->3 \u8fd9\u6709\u4e24\u6761\u8def: 0 -> 1 -> 3 \u548c 0 -> 2 -> 3 . \u63d0\u793a: 1 2 \u7ed3\u70b9\u7684\u6570\u91cf\u4f1a\u5728\u8303\u56f4 [2, 15] \u5185\u3002 \u4f60\u53ef\u4ee5\u628a\u8def\u5f84\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u5728\u8def\u5f84\u5185\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5fc5\u987b\u4fdd\u8bc1\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/797/readme/#2","text":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u6216\u8005 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u90fd\u53ef\u4ee5\u5b8c\u6210\u6b64\u9898\u76ee\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/797/readme/#3-ac","text":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22C\u8bed\u8a00\u5b9e\u73b0\u7248 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22C\u8bed\u8a00\u5b9e\u73b0\u7248","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/82/82/index.c.html","text":"82.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * deleteDuplicates ( struct ListNode * head ){ if ( head == NULL || head -> next == NULL ) return head ; struct ListNode * preStart , * start , * end ; struct ListNode * g = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); g -> next = head ; preStart = g ; start = g -> next ; end = start -> next ; int same = 0 ; while ( end ) { same = 0 ; while ( end && end -> val == start -> val ) { same = 1 ; end = end -> next ; } if ( same ) { preStart -> next = end ; start = end ; end = ( end == NULL ? NULL : end -> next ); } else { preStart = start ; start = end ; end = end -> next ; } } return g -> next ; }","title":"82.c"},{"location":"leetcode/82/82/index.c.html#82c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * deleteDuplicates ( struct ListNode * head ){ if ( head == NULL || head -> next == NULL ) return head ; struct ListNode * preStart , * start , * end ; struct ListNode * g = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); g -> next = head ; preStart = g ; start = g -> next ; end = start -> next ; int same = 0 ; while ( end ) { same = 0 ; while ( end && end -> val == start -> val ) { same = 1 ; end = end -> next ; } if ( same ) { preStart -> next = end ; start = end ; end = ( end == NULL ? NULL : end -> next ); } else { preStart = start ; start = end ; end = end -> next ; } } return g -> next ; }","title":"82.c"},{"location":"leetcode/82/82/index.cpp.html","text":"82.cpp \u00b6","title":"82.cpp"},{"location":"leetcode/82/82/index.cpp.html#82cpp","text":"","title":"82.cpp"},{"location":"leetcode/82/82/index.py.html","text":"82.py \u00b6","title":"82.py"},{"location":"leetcode/82/82/index.py.html#82py","text":"","title":"82.py"},{"location":"leetcode/82/readme/","text":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: 1 2 \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3 2. \u89e3\u9898\u601d\u8def \u00b6 3. AC\u4ee3\u7801 \u00b6 C","title":"[82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii)"},{"location":"leetcode/82/readme/#82-ii","text":"","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II"},{"location":"leetcode/82/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: 1->2->3->3->4->4->5 \u8f93\u51fa: 1->2->5 \u793a\u4f8b 2: 1 2 \u8f93\u5165: 1->1->1->2->3 \u8f93\u51fa: 2->3","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/82/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/82/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/83/83/index.c.html","text":"83.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * deleteDuplicates ( struct ListNode * head ){ struct ListNode * iter = head ; while ( iter && iter -> next ) { if ( iter -> val == iter -> next -> val ) { iter -> next = iter -> next -> next ; } else { iter = iter -> next ; } } return head ; }","title":"83.c"},{"location":"leetcode/83/83/index.c.html#83c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> //Definition for singly-linked list. struct ListNode { int val ; struct ListNode * next ; }; struct ListNode * deleteDuplicates ( struct ListNode * head ){ struct ListNode * iter = head ; while ( iter && iter -> next ) { if ( iter -> val == iter -> next -> val ) { iter -> next = iter -> next -> next ; } else { iter = iter -> next ; } } return head ; }","title":"83.c"},{"location":"leetcode/83/83/index.cpp.html","text":"83.cpp \u00b6","title":"83.cpp"},{"location":"leetcode/83/83/index.cpp.html#83cpp","text":"","title":"83.cpp"},{"location":"leetcode/83/83/index.py.html","text":"83.py \u00b6","title":"83.py"},{"location":"leetcode/83/83/index.py.html#83py","text":"","title":"83.py"},{"location":"leetcode/83/readme/","text":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: 1 2 \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3 2. \u89e3\u9898\u601d\u8def \u00b6 3. AC\u4ee3\u7801 \u00b6 C","title":"[83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list)"},{"location":"leetcode/83/readme/#83","text":"","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20"},{"location":"leetcode/83/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u793a\u4f8b 1: 1 2 \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u793a\u4f8b 2: 1 2 \u8f93\u5165: 1->1->2->3->3 \u8f93\u51fa: 1->2->3","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/83/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/83/readme/#3-ac","text":"C","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/838/readme/","text":"838. \u63a8\u591a\u7c73\u8bfa \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u4e00\u884c\u4e2d\u6709 N \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6211\u4eec\u5c06\u6bcf\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u5782\u76f4\u7ad6\u7acb\u3002 \u5728\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u540c\u65f6\u628a\u4e00\u4e9b\u591a\u7c73\u8bfa\u9aa8\u724c\u5411\u5de6\u6216\u5411\u53f3\u63a8\u3002 \u6bcf\u8fc7\u4e00\u79d2\uff0c\u5012\u5411\u5de6\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4f1a\u63a8\u52a8\u5176\u5de6\u4fa7\u76f8\u90bb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u3002 \u540c\u6837\u5730\uff0c\u5012\u5411\u53f3\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e5f\u4f1a\u63a8\u52a8\u7ad6\u7acb\u5728\u5176\u53f3\u4fa7\u7684\u76f8\u90bb\u591a\u7c73\u8bfa\u9aa8\u724c\u3002 \u5982\u679c\u540c\u65f6\u6709\u591a\u7c73\u8bfa\u9aa8\u724c\u843d\u5728\u4e00\u5f20\u5782\u76f4\u7ad6\u7acb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u7684\u4e24\u8fb9\uff0c\u7531\u4e8e\u53d7\u529b\u5e73\u8861\uff0c \u8be5\u9aa8\u724c\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\u3002 \u5c31\u8fd9\u4e2a\u95ee\u9898\u800c\u8a00\uff0c\u6211\u4eec\u4f1a\u8ba4\u4e3a\u6b63\u5728\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e0d\u4f1a\u5bf9\u5176\u5b83\u6b63\u5728\u4e0b\u964d\u6216\u5df2\u7ecf\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002 \u7ed9\u5b9a\u8868\u793a\u521d\u59cb\u72b6\u6001\u7684\u5b57\u7b26\u4e32 \"S\" \u3002\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u5de6\u8fb9\uff0c\u5219 S[i] = 'L'\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u53f3\u8fb9\uff0c\u5219 S[i] = 'R'\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u88ab\u63a8\u52a8\uff0c\u5219 S[i] = '.'\u3002 \u8fd4\u56de\u8868\u793a\u6700\u7ec8\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a\".L.R...LR..L..\" \u8f93\u51fa\uff1a\"LL.RR.LLRRLL..\" \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1a\"RR.L\" \u8f93\u51fa\uff1a\"RR.L\" \u8bf4\u660e\uff1a\u7b2c\u4e00\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u7ed9\u7b2c\u4e8c\u5f20\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002 \u63d0\u793a\uff1a 1 2 0 <= N <= 10^5 \u8868\u793a\u591a\u7c73\u8bfa\u9aa8\u724c\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709 'L'\uff0c'R'; \u4ee5\u53ca '.'; 2. \u89e3\u9898\u601d\u8def \u00b6 \u66b4\u529b\u65b9\u6cd5\uff0c\u5206\u60c5\u51b5\u8ba8\u8bba\uff0c\u53ef\u4ee5\u901a\u8fc7\u5168\u90e8\u7528\u4f8b char * pushDominoes ( char * dominoes ) { if ( dominoes == NULL ) return NULL ; // start\u6307\u5411\u524d\u9762\u7684LR\uff0cend\u6307\u5411\u540e\u9762\u7684LR int n = strlen ( dominoes ); int start = - 1 ; int end = - 1 ; char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 2 )); int ansEnd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dominoes [ i ] == 'L' || dominoes [ i ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else { start = i - 1 ; while ( start >= 0 ) { if ( dominoes [ start ] == 'L' || dominoes [ start ] == 'R' ) { break ; } start -- ; } end = i + 1 ; while ( end < n ) { if ( dominoes [ end ] == 'L' || dominoes [ end ] == 'R' ) { break ; } end ++ ; } if ( start < 0 && end >= n ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else if ( start < 0 ) { if ( dominoes [ end ] == 'L' ) { ans [ ansEnd ++ ] = dominoes [ end ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } else if ( end >= n ) { if ( dominoes [ start ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ start ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } else { int ll = i - start ; int rr = end - i ; if ( dominoes [ start ] == 'L' && dominoes [ end ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else if ( dominoes [ start ] == dominoes [ end ]) { ans [ ansEnd ++ ] = dominoes [ start ]; } else if ( ll == rr ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else if ( ll > rr ) { if ( dominoes [ end ] == 'L' ) { ans [ ansEnd ++ ] = dominoes [ end ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } else if ( ll < rr ) { if ( dominoes [ start ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ start ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } } } } ans [ ansEnd ] = '\\0' ; return ans ; } \u4fee\u6539\u4e00\u4e0b\u7b56\u7565\uff0c\u6bcf\u6b21\u8bb0\u5f55\u524d\u540e\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7701\u5f88\u591a\u3002 char * pushDominoes ( char * dominoes ) { if ( dominoes == NULL ) return NULL ; // start\u6307\u5411\u524d\u9762\u7684LR\uff0cend\u6307\u5411\u540e\u9762\u7684LR int n = strlen ( dominoes ); int start = - 1 ; int end = - 1 ; char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 2 )); int ansEnd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dominoes [ i ] == 'L' || dominoes [ i ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ i ]; start = i ; } else { // \u5982\u679cend\u5c0f\u4e8e\u5f53\u524d\u7d22\u5f15\uff0c\u5411\u540e\u67e5\u627e\u786e\u5b9aend\u7684\u4f4d\u7f6e if ( end < i ) { end = i + 1 ; while ( end < n && dominoes [ end ] == '.' ) end ++ ; } if ( start < 0 && end >= n ) { ans [ ansEnd ++ ] = '.' ; } else if ( start < 0 && dominoes [ end ] == 'L' ) { ans [ ansEnd ++ ] = 'L' ; } else if ( start < 0 && dominoes [ end ] != 'L' ) { ans [ ansEnd ++ ] = '.' ; } else if ( end >= n && dominoes [ start ] == 'R' ) { ans [ ansEnd ++ ] = 'R' ; } else if ( end >= n && dominoes [ start ] != 'R' ) { ans [ ansEnd ++ ] = '.' ; } else if ( dominoes [ start ] == dominoes [ end ]) { ans [ ansEnd ++ ] = dominoes [ start ]; } else if ( dominoes [ start ] == 'L' && dominoes [ end ] == 'R' ) { ans [ ansEnd ++ ] = '.' ; } else { int ll = i - start ; int rr = end - i ; if ( ll == rr ) { ans [ ansEnd ++ ] = '.' ; } else if ( ll < rr ) { ans [ ansEnd ++ ] = dominoes [ start ]; } else { ans [ ansEnd ++ ] = dominoes [ end ]; } } } } ans [ ansEnd ] = '\\0' ; return ans ; }","title":"[838. \u63a8\u591a\u7c73\u8bfa](https://leetcode-cn.com/problems/push-dominoes/)"},{"location":"leetcode/838/readme/#838","text":"","title":"838. \u63a8\u591a\u7c73\u8bfa"},{"location":"leetcode/838/readme/#1","text":"\u4e00\u884c\u4e2d\u6709 N \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6211\u4eec\u5c06\u6bcf\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u5782\u76f4\u7ad6\u7acb\u3002 \u5728\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u540c\u65f6\u628a\u4e00\u4e9b\u591a\u7c73\u8bfa\u9aa8\u724c\u5411\u5de6\u6216\u5411\u53f3\u63a8\u3002 \u6bcf\u8fc7\u4e00\u79d2\uff0c\u5012\u5411\u5de6\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4f1a\u63a8\u52a8\u5176\u5de6\u4fa7\u76f8\u90bb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u3002 \u540c\u6837\u5730\uff0c\u5012\u5411\u53f3\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e5f\u4f1a\u63a8\u52a8\u7ad6\u7acb\u5728\u5176\u53f3\u4fa7\u7684\u76f8\u90bb\u591a\u7c73\u8bfa\u9aa8\u724c\u3002 \u5982\u679c\u540c\u65f6\u6709\u591a\u7c73\u8bfa\u9aa8\u724c\u843d\u5728\u4e00\u5f20\u5782\u76f4\u7ad6\u7acb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u7684\u4e24\u8fb9\uff0c\u7531\u4e8e\u53d7\u529b\u5e73\u8861\uff0c \u8be5\u9aa8\u724c\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\u3002 \u5c31\u8fd9\u4e2a\u95ee\u9898\u800c\u8a00\uff0c\u6211\u4eec\u4f1a\u8ba4\u4e3a\u6b63\u5728\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e0d\u4f1a\u5bf9\u5176\u5b83\u6b63\u5728\u4e0b\u964d\u6216\u5df2\u7ecf\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002 \u7ed9\u5b9a\u8868\u793a\u521d\u59cb\u72b6\u6001\u7684\u5b57\u7b26\u4e32 \"S\" \u3002\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u5de6\u8fb9\uff0c\u5219 S[i] = 'L'\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u53f3\u8fb9\uff0c\u5219 S[i] = 'R'\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u88ab\u63a8\u52a8\uff0c\u5219 S[i] = '.'\u3002 \u8fd4\u56de\u8868\u793a\u6700\u7ec8\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a\".L.R...LR..L..\" \u8f93\u51fa\uff1a\"LL.RR.LLRRLL..\" \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1a\"RR.L\" \u8f93\u51fa\uff1a\"RR.L\" \u8bf4\u660e\uff1a\u7b2c\u4e00\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u7ed9\u7b2c\u4e8c\u5f20\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002 \u63d0\u793a\uff1a 1 2 0 <= N <= 10^5 \u8868\u793a\u591a\u7c73\u8bfa\u9aa8\u724c\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709 'L'\uff0c'R'; \u4ee5\u53ca '.';","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/838/readme/#2","text":"\u66b4\u529b\u65b9\u6cd5\uff0c\u5206\u60c5\u51b5\u8ba8\u8bba\uff0c\u53ef\u4ee5\u901a\u8fc7\u5168\u90e8\u7528\u4f8b char * pushDominoes ( char * dominoes ) { if ( dominoes == NULL ) return NULL ; // start\u6307\u5411\u524d\u9762\u7684LR\uff0cend\u6307\u5411\u540e\u9762\u7684LR int n = strlen ( dominoes ); int start = - 1 ; int end = - 1 ; char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 2 )); int ansEnd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dominoes [ i ] == 'L' || dominoes [ i ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else { start = i - 1 ; while ( start >= 0 ) { if ( dominoes [ start ] == 'L' || dominoes [ start ] == 'R' ) { break ; } start -- ; } end = i + 1 ; while ( end < n ) { if ( dominoes [ end ] == 'L' || dominoes [ end ] == 'R' ) { break ; } end ++ ; } if ( start < 0 && end >= n ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else if ( start < 0 ) { if ( dominoes [ end ] == 'L' ) { ans [ ansEnd ++ ] = dominoes [ end ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } else if ( end >= n ) { if ( dominoes [ start ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ start ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } else { int ll = i - start ; int rr = end - i ; if ( dominoes [ start ] == 'L' && dominoes [ end ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else if ( dominoes [ start ] == dominoes [ end ]) { ans [ ansEnd ++ ] = dominoes [ start ]; } else if ( ll == rr ) { ans [ ansEnd ++ ] = dominoes [ i ]; } else if ( ll > rr ) { if ( dominoes [ end ] == 'L' ) { ans [ ansEnd ++ ] = dominoes [ end ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } else if ( ll < rr ) { if ( dominoes [ start ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ start ]; } else { ans [ ansEnd ++ ] = dominoes [ i ]; } } } } } ans [ ansEnd ] = '\\0' ; return ans ; } \u4fee\u6539\u4e00\u4e0b\u7b56\u7565\uff0c\u6bcf\u6b21\u8bb0\u5f55\u524d\u540e\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7701\u5f88\u591a\u3002 char * pushDominoes ( char * dominoes ) { if ( dominoes == NULL ) return NULL ; // start\u6307\u5411\u524d\u9762\u7684LR\uff0cend\u6307\u5411\u540e\u9762\u7684LR int n = strlen ( dominoes ); int start = - 1 ; int end = - 1 ; char * ans = ( char * ) malloc ( sizeof ( char ) * ( n + 2 )); int ansEnd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dominoes [ i ] == 'L' || dominoes [ i ] == 'R' ) { ans [ ansEnd ++ ] = dominoes [ i ]; start = i ; } else { // \u5982\u679cend\u5c0f\u4e8e\u5f53\u524d\u7d22\u5f15\uff0c\u5411\u540e\u67e5\u627e\u786e\u5b9aend\u7684\u4f4d\u7f6e if ( end < i ) { end = i + 1 ; while ( end < n && dominoes [ end ] == '.' ) end ++ ; } if ( start < 0 && end >= n ) { ans [ ansEnd ++ ] = '.' ; } else if ( start < 0 && dominoes [ end ] == 'L' ) { ans [ ansEnd ++ ] = 'L' ; } else if ( start < 0 && dominoes [ end ] != 'L' ) { ans [ ansEnd ++ ] = '.' ; } else if ( end >= n && dominoes [ start ] == 'R' ) { ans [ ansEnd ++ ] = 'R' ; } else if ( end >= n && dominoes [ start ] != 'R' ) { ans [ ansEnd ++ ] = '.' ; } else if ( dominoes [ start ] == dominoes [ end ]) { ans [ ansEnd ++ ] = dominoes [ start ]; } else if ( dominoes [ start ] == 'L' && dominoes [ end ] == 'R' ) { ans [ ansEnd ++ ] = '.' ; } else { int ll = i - start ; int rr = end - i ; if ( ll == rr ) { ans [ ansEnd ++ ] = '.' ; } else if ( ll < rr ) { ans [ ansEnd ++ ] = dominoes [ start ]; } else { ans [ ansEnd ++ ] = dominoes [ end ]; } } } } ans [ ansEnd ] = '\\0' ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/839/839/index.cpp.html","text":"839.cpp \u00b6 #include <vector> #include <string> using namespace std ; class Solution { public : int size ; // \u5e76\u67e5\u96c6\u4e2d\u6709\u51e0\u4e2a\u96c6\u5408 vector < int > create ( int n ) { vector < int > array ( n ); for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = i ; } size = n ; return array ; } int parent ( vector < int > & array , int i ) { if ( array [ i ] == i ) { return i ; } array [ i ] = parent ( array , array [ i ]); return array [ i ]; } void merge ( vector < int > & array , int i , int j ) { int pi = parent ( array , i ); int pj = parent ( array , j ); if ( pi != pj ) { array [ pj ] = pi ; size -= 1 ; } } bool similar ( string & a , string & b ) { if ( a . size () != b . size ()) { return false ; } int diff = 0 ; for ( int i = 0 ; i < a . size (); i ++ ) { if ( a [ i ] != b [ i ]) { diff += 1 ; } if ( diff > 2 ) { return false ; } } if ( diff == 0 || diff == 2 ) { return true ; } return false ; } int numSimilarGroups ( vector < string >& A ) { if ( A . size () == 0 ) { return 0 ; } vector < int > array = create ( A . size ()); for ( int i = 0 ; i < A . size () - 1 ; i ++ ) { for ( int j = i + 1 ; j < A . size (); j ++ ) { if ( similar ( A [ i ], A [ j ])) { merge ( array , i , j ); } } } return size ; } }; int main () { Solution * s = new Solution (); vector < string > A = { \"tars\" , \"rats\" , \"arts\" , \"star\" }; int ans = s -> numSimilarGroups ( A ); return 0 ; }","title":"839.cpp"},{"location":"leetcode/839/839/index.cpp.html#839cpp","text":"#include <vector> #include <string> using namespace std ; class Solution { public : int size ; // \u5e76\u67e5\u96c6\u4e2d\u6709\u51e0\u4e2a\u96c6\u5408 vector < int > create ( int n ) { vector < int > array ( n ); for ( int i = 0 ; i < n ; i ++ ) { array [ i ] = i ; } size = n ; return array ; } int parent ( vector < int > & array , int i ) { if ( array [ i ] == i ) { return i ; } array [ i ] = parent ( array , array [ i ]); return array [ i ]; } void merge ( vector < int > & array , int i , int j ) { int pi = parent ( array , i ); int pj = parent ( array , j ); if ( pi != pj ) { array [ pj ] = pi ; size -= 1 ; } } bool similar ( string & a , string & b ) { if ( a . size () != b . size ()) { return false ; } int diff = 0 ; for ( int i = 0 ; i < a . size (); i ++ ) { if ( a [ i ] != b [ i ]) { diff += 1 ; } if ( diff > 2 ) { return false ; } } if ( diff == 0 || diff == 2 ) { return true ; } return false ; } int numSimilarGroups ( vector < string >& A ) { if ( A . size () == 0 ) { return 0 ; } vector < int > array = create ( A . size ()); for ( int i = 0 ; i < A . size () - 1 ; i ++ ) { for ( int j = i + 1 ; j < A . size (); j ++ ) { if ( similar ( A [ i ], A [ j ])) { merge ( array , i , j ); } } } return size ; } }; int main () { Solution * s = new Solution (); vector < string > A = { \"tars\" , \"rats\" , \"arts\" , \"star\" }; int ans = s -> numSimilarGroups ( A ); return 0 ; }","title":"839.cpp"},{"location":"leetcode/839/839/index.py.html","text":"839.py \u00b6 from typing import List # 34 / 63 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def numSimilarGroups ( self , A : List [ str ]) -> int : def similar ( a , b ): m = len ( a ) n = len ( b ) if m != n : return False cc = 0 for i in range ( n ): if a [ i ] != b [ i ]: cc += 1 if cc > 2 : break if cc == 2 or cc == 0 : return True return False n = len ( A ) if n == 0 : return 0 self . create ( n ) for i in range ( n - 1 ): for j in range ( i + 1 , n ): if i != j and similar ( A [ i ], A [ j ]): self . merge ( i , j ) return self . n s = Solution () A = [ \"tars\" , \"rats\" , \"arts\" , \"star\" ] expected = 2 ans = s . numSimilarGroups ( A ) assert ans == expected end = 1","title":"839.py"},{"location":"leetcode/839/839/index.py.html#839py","text":"from typing import List # 34 / 63 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def numSimilarGroups ( self , A : List [ str ]) -> int : def similar ( a , b ): m = len ( a ) n = len ( b ) if m != n : return False cc = 0 for i in range ( n ): if a [ i ] != b [ i ]: cc += 1 if cc > 2 : break if cc == 2 or cc == 0 : return True return False n = len ( A ) if n == 0 : return 0 self . create ( n ) for i in range ( n - 1 ): for j in range ( i + 1 , n ): if i != j and similar ( A [ i ], A [ j ]): self . merge ( i , j ) return self . n s = Solution () A = [ \"tars\" , \"rats\" , \"arts\" , \"star\" ] expected = 2 ans = s . numSimilarGroups ( A ) assert ans == expected end = 1","title":"839.py"},{"location":"leetcode/839/readme/","text":"839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5982\u679c\u6211\u4eec\u4ea4\u6362\u5b57\u7b26\u4e32 X \u4e2d\u7684\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u5b83\u548c\u5b57\u7b26\u4e32 Y \u76f8\u7b49\uff0c\u90a3\u4e48\u79f0 X \u548c Y \u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab\u662f\u76f8\u7b49\u7684\uff0c\u90a3\u5b83\u4eec\u4e5f\u662f\u76f8\u4f3c\u7684\u3002 \u4f8b\u5982\uff0c\"tars\" \u548c \"rats\" \u662f\u76f8\u4f3c\u7684 (\u4ea4\u6362 0 \u4e0e 2 \u7684\u4f4d\u7f6e)\uff1b \"rats\" \u548c \"arts\" \u4e5f\u662f\u76f8\u4f3c\u7684\uff0c\u4f46\u662f \"star\" \u4e0d\u4e0e \"tars\"\uff0c\"rats\"\uff0c\u6216 \"arts\" \u76f8\u4f3c\u3002 \u603b\u4e4b\uff0c\u5b83\u4eec\u901a\u8fc7\u76f8\u4f3c\u6027\u5f62\u6210\u4e86\u4e24\u4e2a\u5173\u8054\u7ec4\uff1a{\"tars\", \"rats\", \"arts\"} \u548c {\"star\"}\u3002\u6ce8\u610f\uff0c\"tars\" \u548c \"arts\" \u662f\u5728\u540c\u4e00\u7ec4\u4e2d\uff0c\u5373\u4f7f\u5b83\u4eec\u5e76\u4e0d\u76f8\u4f3c\u3002\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u6bcf\u4e2a\u7ec4\u800c\u8a00\uff0c\u8981\u786e\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5728\u7ec4\u4e2d\uff0c\u53ea\u9700\u8981\u8fd9\u4e2a\u8bcd\u548c\u8be5\u7ec4\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5355\u8bcd\u76f8\u4f3c\u3002 \u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4e0d\u5305\u542b\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u5217\u8868 A\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f A \u4e2d\u5176\u5b83\u6240\u6709\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\u8bf7\u95ee A \u4e2d\u6709\u591a\u5c11\u4e2a\u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4\uff1f \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1a[\"tars\",\"rats\",\"arts\",\"star\"] \u8f93\u51fa\uff1a2 \u63d0\u793a\uff1a 1 2 3 4 5 6 A.length <= 2000 A[i].length <= 1000 A.length * A[i].length <= 20000 A \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 A \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4e14\u662f\u5f7c\u6b64\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u6b64\u95ee\u9898\u7684\u5224\u65ad\u9650\u5236\u65f6\u95f4\u5df2\u7ecf\u5ef6\u957f\u3002 \u5907\u6ce8\uff1a \u5b57\u6bcd\u5f02\u4f4d\u8bcd[anagram]\uff0c\u4e00\u79cd\u628a\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff08\u987a\u5e8f\uff09\u52a0\u4ee5\u6539\u6362\u6240\u5f62\u6210\u7684\u65b0\u8bcd\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5224\u65ad\u662f\u5426\u76f8\u4f3c\uff0c \u5982\u679c\u76f8\u4f3c\uff0c\u5c31\u5229\u7528\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u6700\u540e\u7edf\u8ba1\u5e76\u67e5\u96c6\u4e2d\u6709\u591a\u5c11\u4e2a\u7ec4\u3002 \u8be5\u65b9\u6cd5\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u53ea\u80fd\u901a\u8fc7\u4e00\u822c\u7684\u7528\u4f8b\u3002 python \u4f7f\u7528C++\uff0c\u540c\u6837\u7684\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7\u3002 c++","title":"[839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4](https://leetcode-cn.com/problems/similar-string-groups)"},{"location":"leetcode/839/readme/#839","text":"","title":"839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4"},{"location":"leetcode/839/readme/#1","text":"\u5982\u679c\u6211\u4eec\u4ea4\u6362\u5b57\u7b26\u4e32 X \u4e2d\u7684\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u5b83\u548c\u5b57\u7b26\u4e32 Y \u76f8\u7b49\uff0c\u90a3\u4e48\u79f0 X \u548c Y \u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab\u662f\u76f8\u7b49\u7684\uff0c\u90a3\u5b83\u4eec\u4e5f\u662f\u76f8\u4f3c\u7684\u3002 \u4f8b\u5982\uff0c\"tars\" \u548c \"rats\" \u662f\u76f8\u4f3c\u7684 (\u4ea4\u6362 0 \u4e0e 2 \u7684\u4f4d\u7f6e)\uff1b \"rats\" \u548c \"arts\" \u4e5f\u662f\u76f8\u4f3c\u7684\uff0c\u4f46\u662f \"star\" \u4e0d\u4e0e \"tars\"\uff0c\"rats\"\uff0c\u6216 \"arts\" \u76f8\u4f3c\u3002 \u603b\u4e4b\uff0c\u5b83\u4eec\u901a\u8fc7\u76f8\u4f3c\u6027\u5f62\u6210\u4e86\u4e24\u4e2a\u5173\u8054\u7ec4\uff1a{\"tars\", \"rats\", \"arts\"} \u548c {\"star\"}\u3002\u6ce8\u610f\uff0c\"tars\" \u548c \"arts\" \u662f\u5728\u540c\u4e00\u7ec4\u4e2d\uff0c\u5373\u4f7f\u5b83\u4eec\u5e76\u4e0d\u76f8\u4f3c\u3002\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u6bcf\u4e2a\u7ec4\u800c\u8a00\uff0c\u8981\u786e\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5728\u7ec4\u4e2d\uff0c\u53ea\u9700\u8981\u8fd9\u4e2a\u8bcd\u548c\u8be5\u7ec4\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5355\u8bcd\u76f8\u4f3c\u3002 \u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4e0d\u5305\u542b\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u5217\u8868 A\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f A \u4e2d\u5176\u5b83\u6240\u6709\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\u8bf7\u95ee A \u4e2d\u6709\u591a\u5c11\u4e2a\u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4\uff1f \u793a\u4f8b\uff1a 1 2 \u8f93\u5165\uff1a[\"tars\",\"rats\",\"arts\",\"star\"] \u8f93\u51fa\uff1a2 \u63d0\u793a\uff1a 1 2 3 4 5 6 A.length <= 2000 A[i].length <= 1000 A.length * A[i].length <= 20000 A \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 A \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4e14\u662f\u5f7c\u6b64\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u6b64\u95ee\u9898\u7684\u5224\u65ad\u9650\u5236\u65f6\u95f4\u5df2\u7ecf\u5ef6\u957f\u3002 \u5907\u6ce8\uff1a \u5b57\u6bcd\u5f02\u4f4d\u8bcd[anagram]\uff0c\u4e00\u79cd\u628a\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff08\u987a\u5e8f\uff09\u52a0\u4ee5\u6539\u6362\u6240\u5f62\u6210\u7684\u65b0\u8bcd\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/839/readme/#2","text":"\u5224\u65ad\u662f\u5426\u76f8\u4f3c\uff0c \u5982\u679c\u76f8\u4f3c\uff0c\u5c31\u5229\u7528\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u6700\u540e\u7edf\u8ba1\u5e76\u67e5\u96c6\u4e2d\u6709\u591a\u5c11\u4e2a\u7ec4\u3002 \u8be5\u65b9\u6cd5\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u53ea\u80fd\u901a\u8fc7\u4e00\u822c\u7684\u7528\u4f8b\u3002 python \u4f7f\u7528C++\uff0c\u540c\u6837\u7684\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7\u3002 c++","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/848/readme/","text":"848. \u5b57\u6bcd\u79fb\u4f4d \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 S\uff0c\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 shifts\u3002 \u6211\u4eec\u5c06\u5b57\u6bcd\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u79f0\u4e3a\u539f\u5b57\u6bcd\u7684 \u79fb\u4f4d\uff08\u7531\u4e8e\u5b57\u6bcd\u8868\u662f\u73af\u7ed5\u7684\uff0c 'z' \u5c06\u4f1a\u53d8\u6210 'a'\uff09\u3002 \u4f8b\u5982\u00b7\uff0cshift('a') = 'b'\uff0c shift('t') = 'u',\uff0c \u4ee5\u53ca shift('z') = 'a'\u3002 \u5bf9\u4e8e\u6bcf\u4e2a shifts[i] = x \uff0c \u6211\u4eec\u4f1a\u5c06 S \u4e2d\u7684\u524d i+1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d x \u6b21\u3002 \u8fd4\u56de\u5c06\u6240\u6709\u8fd9\u4e9b\u79fb\u4f4d\u90fd\u5e94\u7528\u5230 S \u540e\u6700\u7ec8\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aS = \"abc\", shifts = [3,5,9] \u8f93\u51fa\uff1a\"rpl\" \u89e3\u91ca\uff1a \u6211\u4eec\u4ee5 \"abc\" \u5f00\u59cb\u3002 \u5c06 S \u4e2d\u7684\u7b2c 1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 3 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 \"dbc\"\u3002 \u518d\u5c06 S \u4e2d\u7684\u524d 2 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 5 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 \"igc\"\u3002 \u6700\u540e\u5c06 S \u4e2d\u7684\u8fd9 3 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 9 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7b54\u6848 \"rpl\"\u3002 \u63d0\u793a\uff1a 1 2 1 <= S.length = shifts.length <= 20000 0 <= shifts[i] <= 10 ^ 9 2. \u89e3\u9898\u601d\u8def \u00b6 \u66b4\u529b\u6a21\u62df\u79fb\u52a8 void shift ( char * S , int i , int count ) { int num ; num = S [ i ] - 'a' ; num = ( num + count % 26 ) % 26 ; S [ i ] = num + 'a' ; } char * shiftingLetters ( char * S , int * shifts , int shiftsSize ){ int i ; for ( i = shiftsSize - 2 ; i >= 0 ; i -- ) { shifts [ i ] = ( shifts [ i + 1 ] % 26 + shifts [ i ] % 26 ) % 26 ; } for ( i = 0 ; i < shiftsSize ; i ++ ) { shift ( S , i , shifts [ i ]); } return S ; }","title":"[848. \u5b57\u6bcd\u79fb\u4f4d](https://leetcode-cn.com/problems/shifting-letters/)"},{"location":"leetcode/848/readme/#848","text":"","title":"848. \u5b57\u6bcd\u79fb\u4f4d"},{"location":"leetcode/848/readme/#1","text":"\u6709\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 S\uff0c\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 shifts\u3002 \u6211\u4eec\u5c06\u5b57\u6bcd\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u79f0\u4e3a\u539f\u5b57\u6bcd\u7684 \u79fb\u4f4d\uff08\u7531\u4e8e\u5b57\u6bcd\u8868\u662f\u73af\u7ed5\u7684\uff0c 'z' \u5c06\u4f1a\u53d8\u6210 'a'\uff09\u3002 \u4f8b\u5982\u00b7\uff0cshift('a') = 'b'\uff0c shift('t') = 'u',\uff0c \u4ee5\u53ca shift('z') = 'a'\u3002 \u5bf9\u4e8e\u6bcf\u4e2a shifts[i] = x \uff0c \u6211\u4eec\u4f1a\u5c06 S \u4e2d\u7684\u524d i+1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d x \u6b21\u3002 \u8fd4\u56de\u5c06\u6240\u6709\u8fd9\u4e9b\u79fb\u4f4d\u90fd\u5e94\u7528\u5230 S \u540e\u6700\u7ec8\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1aS = \"abc\", shifts = [3,5,9] \u8f93\u51fa\uff1a\"rpl\" \u89e3\u91ca\uff1a \u6211\u4eec\u4ee5 \"abc\" \u5f00\u59cb\u3002 \u5c06 S \u4e2d\u7684\u7b2c 1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 3 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 \"dbc\"\u3002 \u518d\u5c06 S \u4e2d\u7684\u524d 2 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 5 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 \"igc\"\u3002 \u6700\u540e\u5c06 S \u4e2d\u7684\u8fd9 3 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 9 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7b54\u6848 \"rpl\"\u3002 \u63d0\u793a\uff1a 1 2 1 <= S.length = shifts.length <= 20000 0 <= shifts[i] <= 10 ^ 9","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/848/readme/#2","text":"\u66b4\u529b\u6a21\u62df\u79fb\u52a8 void shift ( char * S , int i , int count ) { int num ; num = S [ i ] - 'a' ; num = ( num + count % 26 ) % 26 ; S [ i ] = num + 'a' ; } char * shiftingLetters ( char * S , int * shifts , int shiftsSize ){ int i ; for ( i = shiftsSize - 2 ; i >= 0 ; i -- ) { shifts [ i ] = ( shifts [ i + 1 ] % 26 + shifts [ i ] % 26 ) % 26 ; } for ( i = 0 ; i < shiftsSize ; i ++ ) { shift ( S , i , shifts [ i ]); } return S ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/854/854/index.py.html","text":"854.py \u00b6 class Solution : def kSimilarity ( self , A : str , B : str ) -> int : def diff ( str1 , str2 ): for i in range ( len ( str1 )): if str1 [ i ] != str2 [ i ]: return i return len ( str1 ) def swap ( str , i , j ): tmp = list ( str ) tmp [ i ], tmp [ j ] = tmp [ j ], tmp [ i ] return \"\" . join ( tmp ) deque = [ A ] seen = set () seen . add ( A ) ans = 0 while len ( deque ) > 0 : # \u6bcf\u6b21\u53d6\u51fa\u961f\u5217\u4e2d\u6240\u6709\u5143\u7d20\uff0c\u4f5c\u4e3a\u4e00\u5c42 size = len ( deque ) for _ in range ( size ): curr = deque . pop ( 0 ) if curr == B : return ans s = diff ( curr , B ) for j in range ( s + 1 , len ( A )): # \u6b64\u5904\u6ce8\u610f\uff0c\u8981\u9009\u62e9curr, B, s, j \u4e92\u4e0d\u76f8\u540c\u7684\u8fdb\u884c\u4e0b\u4e00\u4e2a\u67e5\u627e if curr [ j ] == B [ s ] and curr [ j ] != B [ j ]: nextStr = swap ( curr , s , j ) # \u5982\u679c\u5df2\u7ecf\u641c\u7d22\u8fc7\u8fd9\u4e2a\u5355\u8bcd\uff0c\u4e0d\u8981\u518d\u7ee7\u7eed\u641c\u7d22\uff0c\u56e0\u4e3a\u4e4b\u524d\u641c\u7d22\u8fc7\u7684\u7ed3\u679c\u80af\u5b9a\u66f4\u5c0f if nextStr not in seen : deque . append ( nextStr ) seen . add ( nextStr ) ans += 1 return ans s = Solution () A = \"cdebcdeadedaaaebfbcf\" B = \"baaddacfedebefdabecc\" ans = s . kSimilarity ( A , B ) end = 10","title":"854.py"},{"location":"leetcode/854/854/index.py.html#854py","text":"class Solution : def kSimilarity ( self , A : str , B : str ) -> int : def diff ( str1 , str2 ): for i in range ( len ( str1 )): if str1 [ i ] != str2 [ i ]: return i return len ( str1 ) def swap ( str , i , j ): tmp = list ( str ) tmp [ i ], tmp [ j ] = tmp [ j ], tmp [ i ] return \"\" . join ( tmp ) deque = [ A ] seen = set () seen . add ( A ) ans = 0 while len ( deque ) > 0 : # \u6bcf\u6b21\u53d6\u51fa\u961f\u5217\u4e2d\u6240\u6709\u5143\u7d20\uff0c\u4f5c\u4e3a\u4e00\u5c42 size = len ( deque ) for _ in range ( size ): curr = deque . pop ( 0 ) if curr == B : return ans s = diff ( curr , B ) for j in range ( s + 1 , len ( A )): # \u6b64\u5904\u6ce8\u610f\uff0c\u8981\u9009\u62e9curr, B, s, j \u4e92\u4e0d\u76f8\u540c\u7684\u8fdb\u884c\u4e0b\u4e00\u4e2a\u67e5\u627e if curr [ j ] == B [ s ] and curr [ j ] != B [ j ]: nextStr = swap ( curr , s , j ) # \u5982\u679c\u5df2\u7ecf\u641c\u7d22\u8fc7\u8fd9\u4e2a\u5355\u8bcd\uff0c\u4e0d\u8981\u518d\u7ee7\u7eed\u641c\u7d22\uff0c\u56e0\u4e3a\u4e4b\u524d\u641c\u7d22\u8fc7\u7684\u7ed3\u679c\u80af\u5b9a\u66f4\u5c0f if nextStr not in seen : deque . append ( nextStr ) seen . add ( nextStr ) ans += 1 return ans s = Solution () A = \"cdebcdeadedaaaebfbcf\" B = \"baaddacfedebefdabecc\" ans = s . kSimilarity ( A , B ) end = 10","title":"854.py"},{"location":"leetcode/854/854_2/index.py.html","text":"854_2.py \u00b6 class Solution : def kSimilarity ( self , A : str , B : str ) -> int : def swap ( str , i , j ): tmp = list ( str ) tmp [ i ], tmp [ j ] = tmp [ j ], tmp [ i ] return \"\" . join ( tmp ) def dfs ( i , word , line , ans ): #print(i, word, line, ans) if line > ans : return ans if i == len ( word ): return line if word [ i ] == B [ i ]: return dfs ( i + 1 , word , line , ans ) for j in range ( i + 1 , n ): if word [ j ] == B [ i ] and word [ j ] != B [ j ]: word = swap ( word , i , j ) minv = dfs ( i + 1 , word , line + 1 , ans ) ans = min ( ans , minv ) word = swap ( word , i , j ) return ans n = len ( A ) line = 0 ans = float ( 'inf' ) res = dfs ( 0 , A , line , ans ) return res s = Solution () A = \"cdebcdeadedaaaebfbcf\" B = \"baaddacfedebefdabecc\" ans = s . kSimilarity ( A , B ) end = 10","title":"854 2.py"},{"location":"leetcode/854/854_2/index.py.html#854_2py","text":"class Solution : def kSimilarity ( self , A : str , B : str ) -> int : def swap ( str , i , j ): tmp = list ( str ) tmp [ i ], tmp [ j ] = tmp [ j ], tmp [ i ] return \"\" . join ( tmp ) def dfs ( i , word , line , ans ): #print(i, word, line, ans) if line > ans : return ans if i == len ( word ): return line if word [ i ] == B [ i ]: return dfs ( i + 1 , word , line , ans ) for j in range ( i + 1 , n ): if word [ j ] == B [ i ] and word [ j ] != B [ j ]: word = swap ( word , i , j ) minv = dfs ( i + 1 , word , line + 1 , ans ) ans = min ( ans , minv ) word = swap ( word , i , j ) return ans n = len ( A ) line = 0 ans = float ( 'inf' ) res = dfs ( 0 , A , line , ans ) return res s = Solution () A = \"cdebcdeadedaaaebfbcf\" B = \"baaddacfedebefdabecc\" ans = s . kSimilarity ( A , B ) end = 10","title":"854_2.py"},{"location":"leetcode/854/854_3/index.py.html","text":"854_3.py \u00b6","title":"854 3.py"},{"location":"leetcode/854/854_3/index.py.html#854_3py","text":"","title":"854_3.py"},{"location":"leetcode/854/readme/","text":"854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5c06 A \u4e2d\u7684\u4e24\u4e2a\u5c0f\u5199\u5b57\u6bcd\u7cbe\u786e\u5730\u4ea4\u6362\u4f4d\u7f6e K \u6b21\u5f97\u5230\u4e0e B \u76f8\u7b49\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u79f0\u5b57\u7b26\u4e32 A \u548c B \u7684\u76f8\u4f3c\u5ea6\u4e3a K\uff08K \u4e3a\u975e\u8d1f\u6574\u6570\uff09\u3002 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd A \u548c B \uff0c\u8fd4\u56de A \u548c B \u7684\u76f8\u4f3c\u5ea6 K \u7684\u6700\u5c0f\u503c\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1aA = \"ab\", B = \"ba\" \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aA = \"abc\", B = \"bca\" \u8f93\u51fa\uff1a2 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aA = \"abac\", B = \"baca\" \u8f93\u51fa\uff1a2 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1aA = \"aabc\", B = \"abca\" \u8f93\u51fa\uff1a2 \u63d0\u793a\uff1a 1 2 1 <= A.length == B.length <= 20 A \u548c B \u53ea\u5305\u542b\u96c6\u5408 {'a', 'b', 'c', 'd', 'e', 'f'} \u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 2.1 \u65b9\u6cd5\u4e00 \u00b6 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 + \u526a\u679d A B\u4e24\u4e2a\u5b57\u7b26\u4e32\u9010\u4e2a\u6bd4\u8f83\u5b57\u7b26\uff0c\u9047\u5230\u4e0d\u76f8\u540c\u7684\u5b57\u6bcd, \u8bb0\u5f55\u7d22\u5f15\u4e3a s, \u5411\u540e\u5bfb\u627e A[j] == B[s] && A[j] != B[j] \u7684\u6240\u6709j, \u5168\u90e8\u52a0\u5165\u961f\u5217\uff0c \u7ed3\u679c+1\uff0c \u7ee7\u7eed\u3002\u4e00\u65e6\u641c\u7d22\u5230B\uff0c\u5c31\u7ed3\u675f\u3002 \u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u8bb0\u5f55\u5df2\u7ecf\u641c\u7d22\u7684\u8282\u70b9\uff0c\u5982\u679c\u540e\u7eed\u751f\u6210\u7684\u5b57\u7b26\u4e32\u5df2\u7ecf\u641c\u7d22\u8fc7\uff0c\u8bf4\u660e\u5df2\u7ecf\u6709\u66f4\u77ed\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u5e94\u8be5\u8df3\u8fc7 A[j] == B[j] \u53ef\u4ee5\u8df3\u8fc7\u662f\u56e0\u4e3a \u66ff\u6362\u4e4b\u540e\u4e5f\u4e0d\u4f1a\u89e3\u51b3\u95ee\u9898\uff0c\u4f9d\u7136\u8fd8\u662f\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\uff0c\u53ea\u4e0d\u8fc7\u628a\u4f4d\u7f6e\u5411\u540e\u79fb\u52a8\u4e86\uff0c\u4e4b\u540e\u8fd8\u8981\u89e3\u51b3\u5b83\u3002 Python 2.2 \u65b9\u6cd5\u4e8c \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 + \u526a\u679d \u601d\u8def\u540c\u65b9\u6cd5\u4e00\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u4f18\u5148\u641c\u7d22\u5230\u5e95\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u591a\u641c\u7d22\uff0c\u4f46\u662f\u5185\u5b58\u6d88\u8017\u5c11\uff0c\u53ea\u9700\u8981\u4fdd\u5b58\u4e00\u6b21\u6df1\u641c\u7684\u7ed3\u679c\u3002 Python","title":"[854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32](https://leetcode-cn.com/problems/k-similar-strings/)"},{"location":"leetcode/854/readme/#854-k","text":"","title":"854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32"},{"location":"leetcode/854/readme/#1","text":"\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5c06 A \u4e2d\u7684\u4e24\u4e2a\u5c0f\u5199\u5b57\u6bcd\u7cbe\u786e\u5730\u4ea4\u6362\u4f4d\u7f6e K \u6b21\u5f97\u5230\u4e0e B \u76f8\u7b49\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u79f0\u5b57\u7b26\u4e32 A \u548c B \u7684\u76f8\u4f3c\u5ea6\u4e3a K\uff08K \u4e3a\u975e\u8d1f\u6574\u6570\uff09\u3002 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd A \u548c B \uff0c\u8fd4\u56de A \u548c B \u7684\u76f8\u4f3c\u5ea6 K \u7684\u6700\u5c0f\u503c\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1aA = \"ab\", B = \"ba\" \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aA = \"abc\", B = \"bca\" \u8f93\u51fa\uff1a2 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1aA = \"abac\", B = \"baca\" \u8f93\u51fa\uff1a2 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1aA = \"aabc\", B = \"abca\" \u8f93\u51fa\uff1a2 \u63d0\u793a\uff1a 1 2 1 <= A.length == B.length <= 20 A \u548c B \u53ea\u5305\u542b\u96c6\u5408 {'a', 'b', 'c', 'd', 'e', 'f'} \u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/854/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/854/readme/#21","text":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 + \u526a\u679d A B\u4e24\u4e2a\u5b57\u7b26\u4e32\u9010\u4e2a\u6bd4\u8f83\u5b57\u7b26\uff0c\u9047\u5230\u4e0d\u76f8\u540c\u7684\u5b57\u6bcd, \u8bb0\u5f55\u7d22\u5f15\u4e3a s, \u5411\u540e\u5bfb\u627e A[j] == B[s] && A[j] != B[j] \u7684\u6240\u6709j, \u5168\u90e8\u52a0\u5165\u961f\u5217\uff0c \u7ed3\u679c+1\uff0c \u7ee7\u7eed\u3002\u4e00\u65e6\u641c\u7d22\u5230B\uff0c\u5c31\u7ed3\u675f\u3002 \u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u8bb0\u5f55\u5df2\u7ecf\u641c\u7d22\u7684\u8282\u70b9\uff0c\u5982\u679c\u540e\u7eed\u751f\u6210\u7684\u5b57\u7b26\u4e32\u5df2\u7ecf\u641c\u7d22\u8fc7\uff0c\u8bf4\u660e\u5df2\u7ecf\u6709\u66f4\u77ed\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u5e94\u8be5\u8df3\u8fc7 A[j] == B[j] \u53ef\u4ee5\u8df3\u8fc7\u662f\u56e0\u4e3a \u66ff\u6362\u4e4b\u540e\u4e5f\u4e0d\u4f1a\u89e3\u51b3\u95ee\u9898\uff0c\u4f9d\u7136\u8fd8\u662f\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\uff0c\u53ea\u4e0d\u8fc7\u628a\u4f4d\u7f6e\u5411\u540e\u79fb\u52a8\u4e86\uff0c\u4e4b\u540e\u8fd8\u8981\u89e3\u51b3\u5b83\u3002 Python","title":"2.1 \u65b9\u6cd5\u4e00"},{"location":"leetcode/854/readme/#22","text":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 + \u526a\u679d \u601d\u8def\u540c\u65b9\u6cd5\u4e00\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u4f18\u5148\u641c\u7d22\u5230\u5e95\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u591a\u641c\u7d22\uff0c\u4f46\u662f\u5185\u5b58\u6d88\u8017\u5c11\uff0c\u53ea\u9700\u8981\u4fdd\u5b58\u4e00\u6b21\u6df1\u641c\u7684\u7ed3\u679c\u3002 Python","title":"2.2 \u65b9\u6cd5\u4e8c"},{"location":"leetcode/870/readme/","text":"870. \u4f18\u52bf\u6d17\u724c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u76f8\u7b49\u7684\u6570\u7ec4 A \u548c B\uff0cA \u76f8\u5bf9\u4e8e B \u7684\u4f18\u52bf\u53ef\u4ee5\u7528\u6ee1\u8db3 A[i] > B[i] \u7684\u7d22\u5f15 i \u7684\u6570\u76ee\u6765\u63cf\u8ff0\u3002 \u8fd4\u56de A \u7684\u4efb\u610f\u6392\u5217\uff0c\u4f7f\u5176\u76f8\u5bf9\u4e8e B \u7684\u4f18\u52bf\u6700\u5927\u5316\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1aA = [2,7,11,15], B = [1,10,4,11] \u8f93\u51fa\uff1a[2,11,7,15] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aA = [12,24,8,32], B = [13,25,32,11] \u8f93\u51fa\uff1a[24,32,8,12] \u63d0\u793a\uff1a 1 2 3 1 <= A.length = B.length <= 10000 0 <= A[i] <= 10^9 0 <= B[i] <= 10^9 2. \u89e3\u9898\u601d\u8def \u00b6 \u8d2a\u5fc3\u6cd5\u89e3\u9898\uff0c\u5148\u628aA\u6392\u5e8f\uff0c\u904d\u5386B\u4e2d\u6bcf\u4e2a\u5143\u7d20\uff0c\u4eceA\u4e2d\u627e\u5230\u521a\u597d\u5927\u4e8e\u5b83\u7684\u6700\u5c0f\u5143\u7d20\u653e\u5165\u7ed3\u679c\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u5927\u4e8e\u7684\u5143\u7d20\uff0c\u5c31\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u653e\u8fdb\u53bb\u3002 \u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u7684\u7528\u4f8b\u3002(59 / 67 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b) class Solution ( object ) : def advantageCount ( self , A , B ) : \"\"\" : type A : List [ int ] : type B : List [ int ] : rtype : List [ int ] \"\"\" A = sorted ( A ) ans = [] for i in range ( len ( B )) : find = False for j in range ( len ( A )) : if A [ j ] > B [ i ] : ans . append ( A [ j ]) del A [ j ] find = True break if not find : ans . append ( A [ 0 ]) del A [ 0 ] return ans \u4f18\u5316\u67e5\u627e\u8fc7\u7a0b\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u52a0\u5feb\u901f\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7684\u7528\u4f8b class Solution ( object ): def advantageCount ( self , A , B ): \"\"\" :type A: List[int] :type B: List[int] :rtype: List[int] \"\"\" def find ( number ): \"\"\" \u627e\u5230A\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8enumber\u7684\u6570\u5b57\u7684\u4e0b\u6807 \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deA\u4e2d\u6700\u5c0f\u6570\u5b57\u7684\u4e0b\u6807 \"\"\" n = len ( A ) left = 0 right = n - 1 while left <= right : mid = ( left + right ) // 2 if A [ mid ] > number : right = mid - 1 else : left = mid + 1 if left < n and A [ left ] > number : return left else : return 0 A = sorted ( A ) ans = [] for i in range ( len ( B )): index = find ( B [ i ]) #print(\"{0} {1} {2}\\n\".format(A[index], B[i], index)) ans . append ( A [ index ]) del A [ index ] return ans","title":"[870. \u4f18\u52bf\u6d17\u724c](https://leetcode-cn.com/problems/advantage-shuffle/)"},{"location":"leetcode/870/readme/#870","text":"","title":"870. \u4f18\u52bf\u6d17\u724c"},{"location":"leetcode/870/readme/#1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u76f8\u7b49\u7684\u6570\u7ec4 A \u548c B\uff0cA \u76f8\u5bf9\u4e8e B \u7684\u4f18\u52bf\u53ef\u4ee5\u7528\u6ee1\u8db3 A[i] > B[i] \u7684\u7d22\u5f15 i \u7684\u6570\u76ee\u6765\u63cf\u8ff0\u3002 \u8fd4\u56de A \u7684\u4efb\u610f\u6392\u5217\uff0c\u4f7f\u5176\u76f8\u5bf9\u4e8e B \u7684\u4f18\u52bf\u6700\u5927\u5316\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1aA = [2,7,11,15], B = [1,10,4,11] \u8f93\u51fa\uff1a[2,11,7,15] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1aA = [12,24,8,32], B = [13,25,32,11] \u8f93\u51fa\uff1a[24,32,8,12] \u63d0\u793a\uff1a 1 2 3 1 <= A.length = B.length <= 10000 0 <= A[i] <= 10^9 0 <= B[i] <= 10^9","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/870/readme/#2","text":"\u8d2a\u5fc3\u6cd5\u89e3\u9898\uff0c\u5148\u628aA\u6392\u5e8f\uff0c\u904d\u5386B\u4e2d\u6bcf\u4e2a\u5143\u7d20\uff0c\u4eceA\u4e2d\u627e\u5230\u521a\u597d\u5927\u4e8e\u5b83\u7684\u6700\u5c0f\u5143\u7d20\u653e\u5165\u7ed3\u679c\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u5927\u4e8e\u7684\u5143\u7d20\uff0c\u5c31\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u653e\u8fdb\u53bb\u3002 \u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u7684\u7528\u4f8b\u3002(59 / 67 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b) class Solution ( object ) : def advantageCount ( self , A , B ) : \"\"\" : type A : List [ int ] : type B : List [ int ] : rtype : List [ int ] \"\"\" A = sorted ( A ) ans = [] for i in range ( len ( B )) : find = False for j in range ( len ( A )) : if A [ j ] > B [ i ] : ans . append ( A [ j ]) del A [ j ] find = True break if not find : ans . append ( A [ 0 ]) del A [ 0 ] return ans \u4f18\u5316\u67e5\u627e\u8fc7\u7a0b\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u52a0\u5feb\u901f\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7684\u7528\u4f8b class Solution ( object ): def advantageCount ( self , A , B ): \"\"\" :type A: List[int] :type B: List[int] :rtype: List[int] \"\"\" def find ( number ): \"\"\" \u627e\u5230A\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8enumber\u7684\u6570\u5b57\u7684\u4e0b\u6807 \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deA\u4e2d\u6700\u5c0f\u6570\u5b57\u7684\u4e0b\u6807 \"\"\" n = len ( A ) left = 0 right = n - 1 while left <= right : mid = ( left + right ) // 2 if A [ mid ] > number : right = mid - 1 else : left = mid + 1 if left < n and A [ left ] > number : return left else : return 0 A = sorted ( A ) ans = [] for i in range ( len ( B )): index = find ( B [ i ]) #print(\"{0} {1} {2}\\n\".format(A[index], B[i], index)) ans . append ( A [ index ]) del A [ index ] return ans","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/881/readme/","text":"881. \u6551\u751f\u8247 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7b2c i \u4e2a\u4eba\u7684\u4f53\u91cd\u4e3a people[i]\uff0c\u6bcf\u8258\u8239\u53ef\u4ee5\u627f\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a limit\u3002 \u6bcf\u8258\u8239\u6700\u591a\u53ef\u540c\u65f6\u8f7d\u4e24\u4eba\uff0c\u4f46\u6761\u4ef6\u662f\u8fd9\u4e9b\u4eba\u7684\u91cd\u91cf\u4e4b\u548c\u6700\u591a\u4e3a limit\u3002 \u8fd4\u56de\u8f7d\u5230\u6bcf\u4e00\u4e2a\u4eba\u6240\u9700\u7684\u6700\u5c0f\u8239\u6570\u3002(\u4fdd\u8bc1\u6bcf\u4e2a\u4eba\u90fd\u80fd\u88ab\u8239\u8f7d)\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1apeople = [1,2], limit = 3 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a1 \u8258\u8239\u8f7d (1, 2) \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1apeople = [3,2,2,1], limit = 3 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a3 \u8258\u8239\u5206\u522b\u8f7d (1, 2), (2) \u548c (3) \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1apeople = [3,5,3,4], limit = 5 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a4 \u8258\u8239\u5206\u522b\u8f7d (3), (3), (4), (5) \u63d0\u793a\uff1a 1 2 1 <= people.length <= 50000 1 <= people[i] <= limit <= 30000 2. \u89e3\u9898\u601d\u8def \u00b6 int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; return b - a ; } int numRescueBoats ( int * people , int peopleSize , int limit ) { if ( people == NULL || peopleSize <= 0 || limit <= 0 ) { return 0 ; } qsort ( people , peopleSize , sizeof ( int ), compare ); int ans = 0 ; int start = 0 ; int end = peopleSize - 1 ; while ( start < end ) { // \u5982\u679c\u6700\u5927\u7684\u548c\u6700\u5c0f\u7684\u8d85\u8fc7limit\u9650\u5236\uff0c\u672c\u6b21\u4e00\u8258\u8239\u53ea\u80fd\u8fd0\u9001\u4e00\u4e2a\u4eba if ( people [ start ] + people [ end ] > limit ) { start ++ ; } else { start ++ ; end -- ; } ans ++ ; } if ( start == end ) ans ++ ; return ans ; }","title":"[881. \u6551\u751f\u8247](https://leetcode-cn.com/problems/boats-to-save-people/)"},{"location":"leetcode/881/readme/#881","text":"","title":"881. \u6551\u751f\u8247"},{"location":"leetcode/881/readme/#1","text":"\u7b2c i \u4e2a\u4eba\u7684\u4f53\u91cd\u4e3a people[i]\uff0c\u6bcf\u8258\u8239\u53ef\u4ee5\u627f\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a limit\u3002 \u6bcf\u8258\u8239\u6700\u591a\u53ef\u540c\u65f6\u8f7d\u4e24\u4eba\uff0c\u4f46\u6761\u4ef6\u662f\u8fd9\u4e9b\u4eba\u7684\u91cd\u91cf\u4e4b\u548c\u6700\u591a\u4e3a limit\u3002 \u8fd4\u56de\u8f7d\u5230\u6bcf\u4e00\u4e2a\u4eba\u6240\u9700\u7684\u6700\u5c0f\u8239\u6570\u3002(\u4fdd\u8bc1\u6bcf\u4e2a\u4eba\u90fd\u80fd\u88ab\u8239\u8f7d)\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1apeople = [1,2], limit = 3 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a1 \u8258\u8239\u8f7d (1, 2) \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1apeople = [3,2,2,1], limit = 3 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a3 \u8258\u8239\u5206\u522b\u8f7d (1, 2), (2) \u548c (3) \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1apeople = [3,5,3,4], limit = 5 \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a4 \u8258\u8239\u5206\u522b\u8f7d (3), (3), (4), (5) \u63d0\u793a\uff1a 1 2 1 <= people.length <= 50000 1 <= people[i] <= limit <= 30000","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/881/readme/#2","text":"int compare ( const void * p , const void * q ) { int a = * ( int * ) p ; int b = * ( int * ) q ; return b - a ; } int numRescueBoats ( int * people , int peopleSize , int limit ) { if ( people == NULL || peopleSize <= 0 || limit <= 0 ) { return 0 ; } qsort ( people , peopleSize , sizeof ( int ), compare ); int ans = 0 ; int start = 0 ; int end = peopleSize - 1 ; while ( start < end ) { // \u5982\u679c\u6700\u5927\u7684\u548c\u6700\u5c0f\u7684\u8d85\u8fc7limit\u9650\u5236\uff0c\u672c\u6b21\u4e00\u8258\u8239\u53ea\u80fd\u8fd0\u9001\u4e00\u4e2a\u4eba if ( people [ start ] + people [ end ] > limit ) { start ++ ; } else { start ++ ; end -- ; } ans ++ ; } if ( start == end ) ans ++ ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/890/readme/","text":"890. \u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u4f60\u6709\u4e00\u4e2a\u5355\u8bcd\u5217\u8868 words \u548c\u4e00\u4e2a\u6a21\u5f0f pattern\uff0c\u4f60\u60f3\u77e5\u9053 words \u4e2d\u7684\u54ea\u4e9b\u5355\u8bcd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002 \u5982\u679c\u5b58\u5728\u5b57\u6bcd\u7684\u6392\u5217 p \uff0c\u4f7f\u5f97\u5c06\u6a21\u5f0f\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd x \u66ff\u6362\u4e3a p(x) \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6240\u9700\u7684\u5355\u8bcd\uff0c\u90a3\u4e48\u5355\u8bcd\u4e0e\u6a21\u5f0f\u662f\u5339\u914d\u7684\u3002 \uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u5b57\u6bcd\u7684\u6392\u5217\u662f\u4ece\u5b57\u6bcd\u5230\u5b57\u6bcd\u7684\u53cc\u5c04\uff1a\u6bcf\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6ca1\u6709\u4e24\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002\uff09 \u8fd4\u56de words \u4e2d\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u5339\u914d\u7684\u5355\u8bcd\u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 \u8f93\u5165\uff1awords = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\" \u8f93\u51fa\uff1a[\"mee\",\"aqq\"] \u89e3\u91ca\uff1a \"mee\" \u4e0e\u6a21\u5f0f\u5339\u914d\uff0c\u56e0\u4e3a\u5b58\u5728\u6392\u5217 {a -> m, b -> e, ...}\u3002 \"ccc\" \u4e0e\u6a21\u5f0f\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a {a -> c, b -> c, ...} \u4e0d\u662f\u6392\u5217\u3002 \u56e0\u4e3a a \u548c b \u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002 \u63d0\u793a\uff1a 1 2 1 <= words.length <= 50 1 <= pattern.length = words[i].length <= 20 2. \u89e3\u9898\u601d\u8def \u00b6 #define N 26 int map [ N ]; int unique [ N ]; void init ( int * array , int value ) { int i ; for ( i = 0 ; i < N ; i ++ ) { array [ i ] = value ; } } int isMatch ( char * str , char * pattern ) { int i ; char a , b ; int aa , bb ; int n1 = strlen ( str ); int n2 = strlen ( pattern ); if ( n1 != n2 ) { return false ; } for ( i = 0 ; i < n1 ; i ++ ) { a = str [ i ]; b = pattern [ i ]; aa = a - 'a' ; bb = b - 'a' ; if ( map [ aa ] == - 1 ) { map [ aa ] = bb ; } else if ( map [ aa ] != bb ) { return false ; } if ( unique [ bb ] == - 1 ) { unique [ bb ] = aa ; } else if ( unique [ bb ] != aa ) { return false ; } } return true ; } char * copystr ( char * str ) { int n = strlen ( str ); int i ; char * newstr ; newstr = ( char * ) malloc ( sizeof ( char ) * ( n + 1 )); for ( i = 0 ; i < n ; i ++ ) { newstr [ i ] = str [ i ]; } newstr [ i ] = '\\0' ; return newstr ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findAndReplacePattern ( char ** words , int wordsSize , char * pattern , int * returnSize ){ int i ; char ** ans ; int ansEnd = 0 ; ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); for ( i = 0 ; i < wordsSize ; i ++ ) { init ( map , - 1 ); init ( unique , - 1 ); if ( isMatch ( words [ i ], pattern )) { ans [ ansEnd ++ ] = copystr ( words [ i ]); } } * returnSize = ansEnd ; return ans ; }","title":"[890. \u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f](https://leetcode-cn.com/problems/find-and-replace-pattern/)"},{"location":"leetcode/890/readme/#890","text":"","title":"890. \u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f"},{"location":"leetcode/890/readme/#1","text":"\u4f60\u6709\u4e00\u4e2a\u5355\u8bcd\u5217\u8868 words \u548c\u4e00\u4e2a\u6a21\u5f0f pattern\uff0c\u4f60\u60f3\u77e5\u9053 words \u4e2d\u7684\u54ea\u4e9b\u5355\u8bcd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002 \u5982\u679c\u5b58\u5728\u5b57\u6bcd\u7684\u6392\u5217 p \uff0c\u4f7f\u5f97\u5c06\u6a21\u5f0f\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd x \u66ff\u6362\u4e3a p(x) \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6240\u9700\u7684\u5355\u8bcd\uff0c\u90a3\u4e48\u5355\u8bcd\u4e0e\u6a21\u5f0f\u662f\u5339\u914d\u7684\u3002 \uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u5b57\u6bcd\u7684\u6392\u5217\u662f\u4ece\u5b57\u6bcd\u5230\u5b57\u6bcd\u7684\u53cc\u5c04\uff1a\u6bcf\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6ca1\u6709\u4e24\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002\uff09 \u8fd4\u56de words \u4e2d\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u5339\u914d\u7684\u5355\u8bcd\u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 \u8f93\u5165\uff1awords = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\" \u8f93\u51fa\uff1a[\"mee\",\"aqq\"] \u89e3\u91ca\uff1a \"mee\" \u4e0e\u6a21\u5f0f\u5339\u914d\uff0c\u56e0\u4e3a\u5b58\u5728\u6392\u5217 {a -> m, b -> e, ...}\u3002 \"ccc\" \u4e0e\u6a21\u5f0f\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a {a -> c, b -> c, ...} \u4e0d\u662f\u6392\u5217\u3002 \u56e0\u4e3a a \u548c b \u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002 \u63d0\u793a\uff1a 1 2 1 <= words.length <= 50 1 <= pattern.length = words[i].length <= 20","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/890/readme/#2","text":"#define N 26 int map [ N ]; int unique [ N ]; void init ( int * array , int value ) { int i ; for ( i = 0 ; i < N ; i ++ ) { array [ i ] = value ; } } int isMatch ( char * str , char * pattern ) { int i ; char a , b ; int aa , bb ; int n1 = strlen ( str ); int n2 = strlen ( pattern ); if ( n1 != n2 ) { return false ; } for ( i = 0 ; i < n1 ; i ++ ) { a = str [ i ]; b = pattern [ i ]; aa = a - 'a' ; bb = b - 'a' ; if ( map [ aa ] == - 1 ) { map [ aa ] = bb ; } else if ( map [ aa ] != bb ) { return false ; } if ( unique [ bb ] == - 1 ) { unique [ bb ] = aa ; } else if ( unique [ bb ] != aa ) { return false ; } } return true ; } char * copystr ( char * str ) { int n = strlen ( str ); int i ; char * newstr ; newstr = ( char * ) malloc ( sizeof ( char ) * ( n + 1 )); for ( i = 0 ; i < n ; i ++ ) { newstr [ i ] = str [ i ]; } newstr [ i ] = '\\0' ; return newstr ; } /** * Note: The returned array must be malloced, assume caller calls free(). */ char ** findAndReplacePattern ( char ** words , int wordsSize , char * pattern , int * returnSize ){ int i ; char ** ans ; int ansEnd = 0 ; ans = ( char ** ) malloc ( sizeof ( char * ) * wordsSize ); for ( i = 0 ; i < wordsSize ; i ++ ) { init ( map , - 1 ); init ( unique , - 1 ); if ( isMatch ( words [ i ], pattern )) { ans [ ansEnd ++ ] = copystr ( words [ i ]); } } * returnSize = ansEnd ; return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/9/readme/","text":"9. \u56de\u6587\u6570 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b \u793a\u4f8b 1: \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3: \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 2. \u89e3\u9898\u601d\u8def1 \u00b6 \u4f7f\u752864\u4f4d\u6570\u5b57\u4f5c\u4e3a\u5bb9\u5668\u53cd\u8f6cint\u7c7b\u578b\u7684\u6570\u5b57\uff0c\u5982\u679c\u53cd\u8f6c\u4e4b\u540e\u5927\u5c0f\u4e00\u6837\u5219\u662f\u56de\u6587\u6570\u5b57\u3002 2.1 C++ \u00b6 class Solution { public : bool isPalindrome ( int x ) { if ( x < 0 ) return false ; long int v = 0 ; long int xx = x ; while ( x ) { v = v * 10 + x % 10 ; x = x / 10 ; } if ( xx == v ) { return true ; } return false ; } }; 2.2 python \u00b6 class Solution : def isPalindrome ( self , x : int ) -> bool : if x < 0 : return False xx = x v = 0 while ( x ): v = v * 10 + x % 10 x = x // 10 if v == xx : return True return False 3. \u89e3\u9898\u601d\u8def2 \u00b6 \u601d\u8def\u4e00\u904d\u5386\u7684\u4e00\u6b21\u624d\u5f97\u5230\u7ed3\u679c\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u904d\u5386\u4e8c\u5206\u4e4b\u4e00\u5373\u53ef\u5f97\u5230\u7ed3\u679c\u3002 3.1 C++ \u00b6 3.2 python \u00b6","title":"Readme"},{"location":"leetcode/9/readme/#9","text":"","title":"9. \u56de\u6587\u6570"},{"location":"leetcode/9/readme/#1","text":"\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b \u793a\u4f8b 1: \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2: \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3: \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/9/readme/#2-1","text":"\u4f7f\u752864\u4f4d\u6570\u5b57\u4f5c\u4e3a\u5bb9\u5668\u53cd\u8f6cint\u7c7b\u578b\u7684\u6570\u5b57\uff0c\u5982\u679c\u53cd\u8f6c\u4e4b\u540e\u5927\u5c0f\u4e00\u6837\u5219\u662f\u56de\u6587\u6570\u5b57\u3002","title":"2. \u89e3\u9898\u601d\u8def1"},{"location":"leetcode/9/readme/#21-c","text":"class Solution { public : bool isPalindrome ( int x ) { if ( x < 0 ) return false ; long int v = 0 ; long int xx = x ; while ( x ) { v = v * 10 + x % 10 ; x = x / 10 ; } if ( xx == v ) { return true ; } return false ; } };","title":"2.1 C++"},{"location":"leetcode/9/readme/#22-python","text":"class Solution : def isPalindrome ( self , x : int ) -> bool : if x < 0 : return False xx = x v = 0 while ( x ): v = v * 10 + x % 10 x = x // 10 if v == xx : return True return False","title":"2.2 python"},{"location":"leetcode/9/readme/#3-2","text":"\u601d\u8def\u4e00\u904d\u5386\u7684\u4e00\u6b21\u624d\u5f97\u5230\u7ed3\u679c\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u904d\u5386\u4e8c\u5206\u4e4b\u4e00\u5373\u53ef\u5f97\u5230\u7ed3\u679c\u3002","title":"3. \u89e3\u9898\u601d\u8def2"},{"location":"leetcode/9/readme/#31-c","text":"","title":"3.1 C++"},{"location":"leetcode/9/readme/#32-python","text":"","title":"3.2 python"},{"location":"leetcode/91/readme/","text":"91. \u89e3\u7801\u65b9\u6cd5 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u7528DFS\u7684\u65b9\u5f0f\u5728\u6bcf\u4e2a\u53ef\u4ee5\u5206\u5272\u7684\u5730\u65b9\u5c1d\u8bd5\u662f\u5426\u5206\u5272\u3002 \u4f8b\u5982 s = \"123412\", i = 0\u65f6 1 \u2192 A \u53ef\u4ee5\u89e3\u7801\uff0c \u53ef\u4ee5\u4ece\u8fd9\u91cc\u65ad\u5f00\uff0c \u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00 12 \u2192 L. void dfs ( char * s , int i , int * ans ) { int num ; if ( i == strlen ( s )) { ( * ans ) ++ ; return ; } // \u6d88\u8017\u4e00\u4e2a\u6570\u5b57 num = s [ i ] - '0' ; if ( num < 1 || num > 9 ) { return ; } else { dfs ( s , i + 1 , ans ); } // \u6d88\u8017\u4e24\u4e2a\u6570\u5b57 if ( i + 1 < strlen ( s )) { num = ( s [ i ] - '0' ) * 10 + ( s [ i + 1 ] - '0' ); if ( num >= 1 && num <= 26 ) { dfs ( s , i + 2 , ans ); } } return ; } int numDecodings ( char * s ){ int ans = 0 ; //dfs(s, 0, &ans); return ans ; } 239 / 258 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b. \u8fd9\u79cd\u65b9\u6cd5\u5b58\u5728\u5927\u91cf\u7684\u91cd\u590d\u8ba1\u7b97\uff0c\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u7528\u4f8b\u3002 \u628a\u4e0a\u9762\u7684\u7528\u4f8b\u6309\u7167\u9012\u5f52\u8fc7\u7a0b\u5c55\u5f00 1 - 1 2 - 2 3 - 3 4 - 4 5 - 1 6 - 2 --> 1,2,3,4,1,2 7 - 12 --> 1,2,3,4,12 8 - 23 9 - 4 10 - 1 11 - 2 --> 1,23,4,1,2 12 - 12 --> 1,23,4,12 13 - 12 14 - 3 15 - 4 16 - 1 17 - 2 --> 12,3,4,1,2 18 - 12 --> 12,3,4,12 \u53ef\u4ee5\u53d1\u73b03-7\u884c\u4e0e14-18\u884c\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c \u5f53\u5b57\u7b26\u4e32\u957f\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u91cd\u590d\u8ba1\u7b97\u66f4\u52a0\u660e\u663e\uff0c \u8fd9\u542f\u53d1\u6211\u4eec\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u3002 \u4e0b\u9762\u6211\u4eec\u5c1d\u8bd5\u4ece\u540e\u9762\u5f00\u59cb\u5411\u524d\u8fdb\u884c\u89e3\u7801\uff0c\u8bb0\u5f55\u5df2\u7ecf\u83b7\u5f97\u7684\u89e3\u7801\u6570\u91cf\uff0c\u7528\u6765\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 /* \u8bbedp[i] \u8868\u793a s[i...n) \u89e3\u7801\u7684\u6570\u91cf\uff0c dp[n] = 0, dp[n-1] = 1 if dp[n-1] in [1,9] else dp[n-1] = 0 \"0\" \u4e0d\u80fd\u89e3\u7801\uff0c \"01\" \u4e5f\u4e0d\u80fd\u89e3\u7801 dp[n-2] = dp[n] if s[n-2] s[n-1] in [1, 26], \u5bf9\u5e94\u60c5\u51b5\u662f s[n-1], s[n-2] \u4e24\u4e2a\u6570\u5b57\u89e3\u7801\u6210\u4e00\u4e2a\u5b57\u6bcd = dp[n-1], \u5bf9\u5e94\u60c5\u51b5\u662f s[n-2] \u5355\u72ec\u89e3\u7801\u6210\u4e00\u4e2a\u5b57\u6bcd dp[n-2] \u5c31\u662f\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u7684\u548c */ int numDecodings ( char * s ){ if ( s == NULL ) return 0 ; int n = strlen ( s ); int nextNext = 1 ; int next = ( s [ n - 1 ] == '0' ) ? 0 : 1 ; int curr ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { curr = 0 ; // '0' \u65e0\u6cd5\u89e3\u7801\uff0c\u5bf9\u5e94\u89e3\u7801\u65b9\u6cd5\u6570\u91cf\u4e3a0 } else { int number = ( s [ i ] - '0' ) * 10 + s [ i + 1 ] - '0' ; curr = 0 ; if ( number >= 1 && number <= 26 ) { curr = nextNext ; } curr += next ; } nextNext = next ; next = curr ; } return next ; }","title":"[91. \u89e3\u7801\u65b9\u6cd5](https://leetcode-cn.com/problems/decode-ways/)"},{"location":"leetcode/91/readme/#91","text":"","title":"91. \u89e3\u7801\u65b9\u6cd5"},{"location":"leetcode/91/readme/#1","text":"\u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a 'A' -> 1 'B' -> 2 ... 'Z' -> 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002 \u793a\u4f8b 1: 1 2 3 \u8f93\u5165: \"12\" \u8f93\u51fa: 2 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002 \u793a\u4f8b 2: 1 2 3 \u8f93\u5165: \"226\" \u8f93\u51fa: 3 \u89e3\u91ca: \u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/91/readme/#2","text":"\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u7528DFS\u7684\u65b9\u5f0f\u5728\u6bcf\u4e2a\u53ef\u4ee5\u5206\u5272\u7684\u5730\u65b9\u5c1d\u8bd5\u662f\u5426\u5206\u5272\u3002 \u4f8b\u5982 s = \"123412\", i = 0\u65f6 1 \u2192 A \u53ef\u4ee5\u89e3\u7801\uff0c \u53ef\u4ee5\u4ece\u8fd9\u91cc\u65ad\u5f00\uff0c \u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00 12 \u2192 L. void dfs ( char * s , int i , int * ans ) { int num ; if ( i == strlen ( s )) { ( * ans ) ++ ; return ; } // \u6d88\u8017\u4e00\u4e2a\u6570\u5b57 num = s [ i ] - '0' ; if ( num < 1 || num > 9 ) { return ; } else { dfs ( s , i + 1 , ans ); } // \u6d88\u8017\u4e24\u4e2a\u6570\u5b57 if ( i + 1 < strlen ( s )) { num = ( s [ i ] - '0' ) * 10 + ( s [ i + 1 ] - '0' ); if ( num >= 1 && num <= 26 ) { dfs ( s , i + 2 , ans ); } } return ; } int numDecodings ( char * s ){ int ans = 0 ; //dfs(s, 0, &ans); return ans ; } 239 / 258 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b. \u8fd9\u79cd\u65b9\u6cd5\u5b58\u5728\u5927\u91cf\u7684\u91cd\u590d\u8ba1\u7b97\uff0c\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u7528\u4f8b\u3002 \u628a\u4e0a\u9762\u7684\u7528\u4f8b\u6309\u7167\u9012\u5f52\u8fc7\u7a0b\u5c55\u5f00 1 - 1 2 - 2 3 - 3 4 - 4 5 - 1 6 - 2 --> 1,2,3,4,1,2 7 - 12 --> 1,2,3,4,12 8 - 23 9 - 4 10 - 1 11 - 2 --> 1,23,4,1,2 12 - 12 --> 1,23,4,12 13 - 12 14 - 3 15 - 4 16 - 1 17 - 2 --> 12,3,4,1,2 18 - 12 --> 12,3,4,12 \u53ef\u4ee5\u53d1\u73b03-7\u884c\u4e0e14-18\u884c\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c \u5f53\u5b57\u7b26\u4e32\u957f\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u91cd\u590d\u8ba1\u7b97\u66f4\u52a0\u660e\u663e\uff0c \u8fd9\u542f\u53d1\u6211\u4eec\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u3002 \u4e0b\u9762\u6211\u4eec\u5c1d\u8bd5\u4ece\u540e\u9762\u5f00\u59cb\u5411\u524d\u8fdb\u884c\u89e3\u7801\uff0c\u8bb0\u5f55\u5df2\u7ecf\u83b7\u5f97\u7684\u89e3\u7801\u6570\u91cf\uff0c\u7528\u6765\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 /* \u8bbedp[i] \u8868\u793a s[i...n) \u89e3\u7801\u7684\u6570\u91cf\uff0c dp[n] = 0, dp[n-1] = 1 if dp[n-1] in [1,9] else dp[n-1] = 0 \"0\" \u4e0d\u80fd\u89e3\u7801\uff0c \"01\" \u4e5f\u4e0d\u80fd\u89e3\u7801 dp[n-2] = dp[n] if s[n-2] s[n-1] in [1, 26], \u5bf9\u5e94\u60c5\u51b5\u662f s[n-1], s[n-2] \u4e24\u4e2a\u6570\u5b57\u89e3\u7801\u6210\u4e00\u4e2a\u5b57\u6bcd = dp[n-1], \u5bf9\u5e94\u60c5\u51b5\u662f s[n-2] \u5355\u72ec\u89e3\u7801\u6210\u4e00\u4e2a\u5b57\u6bcd dp[n-2] \u5c31\u662f\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u7684\u548c */ int numDecodings ( char * s ){ if ( s == NULL ) return 0 ; int n = strlen ( s ); int nextNext = 1 ; int next = ( s [ n - 1 ] == '0' ) ? 0 : 1 ; int curr ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { curr = 0 ; // '0' \u65e0\u6cd5\u89e3\u7801\uff0c\u5bf9\u5e94\u89e3\u7801\u65b9\u6cd5\u6570\u91cf\u4e3a0 } else { int number = ( s [ i ] - '0' ) * 10 + s [ i + 1 ] - '0' ; curr = 0 ; if ( number >= 1 && number <= 26 ) { curr = nextNext ; } curr += next ; } nextNext = next ; next = curr ; } return next ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/915/readme/","text":"915. \u5206\u5272\u6570\u7ec4 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A\uff0c\u5c06\u5176\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\uff08\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff09\u7684\u8fde\u7eed\u5b50\u6570\u7ec4 left \u548c right\uff0c \u4f7f\u5f97\uff1a left \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e right \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 left \u548c right \u90fd\u662f\u975e\u7a7a\u7684\u3002 left \u8981\u5c3d\u53ef\u80fd\u5c0f\u3002 \u5728\u5b8c\u6210\u8fd9\u6837\u7684\u5206\u7ec4\u540e\u8fd4\u56de left \u7684\u957f\u5ea6\u3002\u53ef\u4ee5\u4fdd\u8bc1\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\u65b9\u6cd5\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1a[5,0,3,8,6] \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1aleft = [5,0,3]\uff0cright = [8,6] \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1a[1,1,1,0,6,12] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1aleft = [1,1,1,0]\uff0cright = [6,12] \u63d0\u793a\uff1a 1 2 3 2 <= A.length <= 30000 0 <= A[i] <= 10^6 \u53ef\u4ee5\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u79cd\u65b9\u6cd5\u80fd\u591f\u6309\u9898\u76ee\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u5bf9 A \u8fdb\u884c\u5212\u5206\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 class Solution : def partitionDisjoint ( self , A ): n = len ( A ) left_max = A [ 0 ] right_min = min ( A [ 1 :]) right_count = A [ 1 :] . count ( right_min ) for i in range ( 1 , n ): if left_max <= right_min : return i # A[i] \u52a0\u5165\u5de6\u4fa7 if A [ i ] > left_max : left_max = A [ i ] # \u53f3\u4fa7\u6392\u9664 A[i] if A [ i ] == right_min : if right_count > 1 : right_count -= 1 else : right_min = min ( A [ i + 1 :]) right_count = A [ i + 1 :] . count ( right_min ) return - 1","title":"[915. \u5206\u5272\u6570\u7ec4](https://leetcode-cn.com/problems/partition-array-into-disjoint-intervals/)"},{"location":"leetcode/915/readme/#915","text":"","title":"915. \u5206\u5272\u6570\u7ec4"},{"location":"leetcode/915/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A\uff0c\u5c06\u5176\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\uff08\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff09\u7684\u8fde\u7eed\u5b50\u6570\u7ec4 left \u548c right\uff0c \u4f7f\u5f97\uff1a left \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e right \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 left \u548c right \u90fd\u662f\u975e\u7a7a\u7684\u3002 left \u8981\u5c3d\u53ef\u80fd\u5c0f\u3002 \u5728\u5b8c\u6210\u8fd9\u6837\u7684\u5206\u7ec4\u540e\u8fd4\u56de left \u7684\u957f\u5ea6\u3002\u53ef\u4ee5\u4fdd\u8bc1\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\u65b9\u6cd5\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1a[5,0,3,8,6] \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1aleft = [5,0,3]\uff0cright = [8,6] \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1a[1,1,1,0,6,12] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1aleft = [1,1,1,0]\uff0cright = [6,12] \u63d0\u793a\uff1a 1 2 3 2 <= A.length <= 30000 0 <= A[i] <= 10^6 \u53ef\u4ee5\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u79cd\u65b9\u6cd5\u80fd\u591f\u6309\u9898\u76ee\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u5bf9 A \u8fdb\u884c\u5212\u5206\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/915/readme/#2","text":"class Solution : def partitionDisjoint ( self , A ): n = len ( A ) left_max = A [ 0 ] right_min = min ( A [ 1 :]) right_count = A [ 1 :] . count ( right_min ) for i in range ( 1 , n ): if left_max <= right_min : return i # A[i] \u52a0\u5165\u5de6\u4fa7 if A [ i ] > left_max : left_max = A [ i ] # \u53f3\u4fa7\u6392\u9664 A[i] if A [ i ] == right_min : if right_count > 1 : right_count -= 1 else : right_min = min ( A [ i + 1 :]) right_count = A [ i + 1 :] . count ( right_min ) return - 1","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/921/921/index.c.html","text":"921.c \u00b6 #include <stdio.h> #include <string.h> #include <stdlib.h> int minAddToMakeValid ( char * S ){ int ans = 0 ; char * stack = ( char * ) malloc ( sizeof ( char ) * ( strlen ( S ))); int top = 0 ; for ( int i = 0 ; i < strlen ( S ); i ++ ) { if ( S [ i ] == '(' ) { stack [ top ++ ] = S [ i ]; } else if ( S [ i ] == ')' && top > 0 ) { top -- ; } else { ans += 1 ; } } free ( stack ); return ans + top ; } int main () { char s [] = \"(()()(((()((()))))\" ; int ans = minAddToMakeValid ( s ); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"921.c"},{"location":"leetcode/921/921/index.c.html#921c","text":"#include <stdio.h> #include <string.h> #include <stdlib.h> int minAddToMakeValid ( char * S ){ int ans = 0 ; char * stack = ( char * ) malloc ( sizeof ( char ) * ( strlen ( S ))); int top = 0 ; for ( int i = 0 ; i < strlen ( S ); i ++ ) { if ( S [ i ] == '(' ) { stack [ top ++ ] = S [ i ]; } else if ( S [ i ] == ')' && top > 0 ) { top -- ; } else { ans += 1 ; } } free ( stack ); return ans + top ; } int main () { char s [] = \"(()()(((()((()))))\" ; int ans = minAddToMakeValid ( s ); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"921.c"},{"location":"leetcode/921/921/index.cpp.html","text":"921.cpp \u00b6 #include <string> #include <stack> using namespace std ; class Solution { public : int minAddToMakeValid ( string S ) { int ans = 0 ; stack < char > st ; for ( int i = 0 ; i < S . size (); i ++ ) { if ( S [ i ] == '(' ) { st . push ( S [ i ]); } else { if ( ! st . empty ()) { st . pop (); } else { ans ++ ; } } } ans += st . size (); return ans ; } }; int main () { string str = \"(())))\" ; Solution * s = new Solution (); int ans = s -> minAddToMakeValid ( str ); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"921.cpp"},{"location":"leetcode/921/921/index.cpp.html#921cpp","text":"#include <string> #include <stack> using namespace std ; class Solution { public : int minAddToMakeValid ( string S ) { int ans = 0 ; stack < char > st ; for ( int i = 0 ; i < S . size (); i ++ ) { if ( S [ i ] == '(' ) { st . push ( S [ i ]); } else { if ( ! st . empty ()) { st . pop (); } else { ans ++ ; } } } ans += st . size (); return ans ; } }; int main () { string str = \"(())))\" ; Solution * s = new Solution (); int ans = s -> minAddToMakeValid ( str ); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"921.cpp"},{"location":"leetcode/921/921/index.py.html","text":"921.py \u00b6 class Solution : def minAddToMakeValid ( self , S : str ) -> int : ans = 0 stack = [] for c in S : if c == '(' : stack . append ( c ) else : if len ( stack ) > 0 : stack . pop () else : ans += 1 ans += len ( stack ) return ans s = Solution () ans = s . minAddToMakeValid ( \"(()())))(\" ) print ( ans )","title":"921.py"},{"location":"leetcode/921/921/index.py.html#921py","text":"class Solution : def minAddToMakeValid ( self , S : str ) -> int : ans = 0 stack = [] for c in S : if c == '(' : stack . append ( c ) else : if len ( stack ) > 0 : stack . pop () else : ans += 1 ans += len ( stack ) return ans s = Solution () ans = s . minAddToMakeValid ( \"(()())))(\" ) print ( ans )","title":"921.py"},{"location":"leetcode/921/readme/","text":"921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7531 '(' \u548c ')' \u62ec\u53f7\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 S\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6700\u5c11\u7684\u62ec\u53f7\uff08 '(' \u6216\u662f ')'\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\uff09\uff0c\u4ee5\u4f7f\u5f97\u5230\u7684\u62ec\u53f7\u5b57\u7b26\u4e32\u6709\u6548\u3002 \u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u53ea\u6709\u6ee1\u8db3\u4e0b\u9762\u51e0\u70b9\u4e4b\u4e00\uff0c\u62ec\u53f7\u5b57\u7b26\u4e32\u624d\u662f\u6709\u6548\u7684\uff1a 1 2 3 \u5b83\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6216\u8005 \u5b83\u53ef\u4ee5\u88ab\u5199\u6210 AB \uff08A \u4e0e B \u8fde\u63a5\uff09, \u5176\u4e2d A \u548c B \u90fd\u662f\u6709\u6548\u5b57\u7b26\u4e32\uff0c\u6216\u8005 \u5b83\u53ef\u4ee5\u88ab\u5199\u4f5c (A)\uff0c\u5176\u4e2d A \u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e3a\u4f7f\u7ed3\u679c\u5b57\u7b26\u4e32\u6709\u6548\u800c\u5fc5\u987b\u6dfb\u52a0\u7684\u6700\u5c11\u62ec\u53f7\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a\"())\" \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1a\"(((\" \u8f93\u51fa\uff1a3 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1a\"()\" \u8f93\u51fa\uff1a0 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1a\"()))((\" \u8f93\u51fa\uff1a4 \u63d0\u793a\uff1a 1 2 S.length <= 1000 S \u53ea\u5305\u542b '(' \u548c ')' \u5b57\u7b26\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u6808\u8bc6\u522b\u51fa\u5339\u914d\u7684\u62ec\u53f7\u6d88\u9664\u6389\u3002 \u7b97\u6cd5\uff1a 1. \u521d\u59cb\u5316\u7a7a\u6808s, ans = 0 2. \u987a\u5e8f\u904d\u5386\uff0c \u9047\u5230\u5de6\u62ec\u53f7\u5165\u6808\uff1b \u9047\u5230\u53f3\u62ec\u53f7\uff1a \u5982\u679c\u6808\u9876\u6709\u5de6\u62ec\u53f7\uff0c\u5f39\u51fa\u7ee7\u7eed\u4e0b\u4e00\u4e2a \u5982\u679c\u6808\u4e3a\u7a7a\uff0cans++ 3. \u5b8c\u6210\u904d\u5386\u4e4b\u540e\uff0c ans + len(stack), \u6808\u4e2d\u6240\u6709\u5269\u4f59\u7684\u5de6\u62ec\u53f7\u90fd\u9700\u8981\u5339\u914d 3. AC\u4ee3\u7801 \u00b6 C C++ Python","title":"[921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0](https://leetcode-cn.com/problems/minimum-add-to-make-parentheses-valid)"},{"location":"leetcode/921/readme/#921","text":"","title":"921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0"},{"location":"leetcode/921/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531 '(' \u548c ')' \u62ec\u53f7\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 S\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6700\u5c11\u7684\u62ec\u53f7\uff08 '(' \u6216\u662f ')'\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\uff09\uff0c\u4ee5\u4f7f\u5f97\u5230\u7684\u62ec\u53f7\u5b57\u7b26\u4e32\u6709\u6548\u3002 \u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u53ea\u6709\u6ee1\u8db3\u4e0b\u9762\u51e0\u70b9\u4e4b\u4e00\uff0c\u62ec\u53f7\u5b57\u7b26\u4e32\u624d\u662f\u6709\u6548\u7684\uff1a 1 2 3 \u5b83\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6216\u8005 \u5b83\u53ef\u4ee5\u88ab\u5199\u6210 AB \uff08A \u4e0e B \u8fde\u63a5\uff09, \u5176\u4e2d A \u548c B \u90fd\u662f\u6709\u6548\u5b57\u7b26\u4e32\uff0c\u6216\u8005 \u5b83\u53ef\u4ee5\u88ab\u5199\u4f5c (A)\uff0c\u5176\u4e2d A \u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e3a\u4f7f\u7ed3\u679c\u5b57\u7b26\u4e32\u6709\u6548\u800c\u5fc5\u987b\u6dfb\u52a0\u7684\u6700\u5c11\u62ec\u53f7\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a\"())\" \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1a\"(((\" \u8f93\u51fa\uff1a3 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1a\"()\" \u8f93\u51fa\uff1a0 \u793a\u4f8b 4\uff1a 1 2 \u8f93\u5165\uff1a\"()))((\" \u8f93\u51fa\uff1a4 \u63d0\u793a\uff1a 1 2 S.length <= 1000 S \u53ea\u5305\u542b '(' \u548c ')' \u5b57\u7b26\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/921/readme/#2","text":"\u4f7f\u7528\u6808\u8bc6\u522b\u51fa\u5339\u914d\u7684\u62ec\u53f7\u6d88\u9664\u6389\u3002 \u7b97\u6cd5\uff1a 1. \u521d\u59cb\u5316\u7a7a\u6808s, ans = 0 2. \u987a\u5e8f\u904d\u5386\uff0c \u9047\u5230\u5de6\u62ec\u53f7\u5165\u6808\uff1b \u9047\u5230\u53f3\u62ec\u53f7\uff1a \u5982\u679c\u6808\u9876\u6709\u5de6\u62ec\u53f7\uff0c\u5f39\u51fa\u7ee7\u7eed\u4e0b\u4e00\u4e2a \u5982\u679c\u6808\u4e3a\u7a7a\uff0cans++ 3. \u5b8c\u6210\u904d\u5386\u4e4b\u540e\uff0c ans + len(stack), \u6808\u4e2d\u6240\u6709\u5269\u4f59\u7684\u5de6\u62ec\u53f7\u90fd\u9700\u8981\u5339\u914d","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/921/readme/#3-ac","text":"C C++ Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/924/924/index.py.html","text":"924.py \u00b6 from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def get_count ( self , i ): \"\"\" \u83b7\u53d6\u8282\u70b9 i \u6240\u5728\u7684\u7ec4\u6709\u591a\u5c11\u4e2a\u5143\u7d20 \"\"\" if i < 0 : return 0 cc = 0 parent = self . parent ( i ) for ele in self . array : if parent == self . parent ( ele ): cc += 1 return cc def minMalwareSpread ( self , graph : List [ List [ int ]], initial : List [ int ]) -> int : n = len ( graph ) if n == 0 : return - 1 # \u5206\u6210\u51e0\u7ec4\u70b9 self . create ( n ) for i in range ( n ): for j in range ( n ): if i != j and graph [ i ][ j ] == 1 : self . merge ( i , j ) # \u5bf9\u4e8e\u6bcf\u4e2a\u6c61\u67d3\u7684\u70b9\uff0c\u67e5\u627e\u662f\u5426\u6709\u5176\u4ed6\u7684\u70b9\u4e0e\u5176\u5728\u540c\u4e00\u4e2a\u7ec4\uff0c\u5982\u679c\u5728\uff0c\u79fb\u9664\u8fd9\u4e2a\u7ec4\u7684\u6c61\u67d3\u70b9\u6ca1\u6709\u610f\u4e49 # \u5982\u679c\u4e0d\u548c\u5176\u4ed6\u6c61\u67d3\u70b9\u5728\u4e00\u7ec4\uff0c\u53ef\u4ee5\u79fb\u9664\u5b83\uff0c\u8bb0\u5f55\u83b7\u76ca\u7684\u70b9\u6570\uff0c\u53ea\u6709\u5f53\u4e0b\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6c61\u67d3\u70b9\u83b7\u76ca\u7684\u70b9\u6570\u5927\u4e8e\u5b83\u65f6\uff0c\u624d\u66f4\u65b0 # \u5982\u679c\u904d\u5386\u5b8c\u6210\u6ca1\u6709\u4efb\u4f55\u7ed3\u679c\uff0c\u8bf4\u660e\u79fb\u9664\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u8fd4\u56de\u4e00\u4e2a\u6700\u5c0f\u7684\u70b9\u5373\u53ef ans = - 1 max_count = 0 initial = sorted ( initial ) flag = [ 0 ] * len ( initial ) # \u662f\u5426\u8df3\u8fc7 for i in range ( len ( initial )): if flag [ i ]: continue single = True if i < len ( initial ) - 1 : for j in range ( i + 1 , len ( initial )): if self . parent ( initial [ i ]) == self . parent ( initial [ j ]): flag [ i ] = 1 flag [ j ] = 1 single = False if single : count = self . get_count ( initial [ i ]) if count > max_count : ans = initial [ i ] max_count = count # \u5982\u679cans \u6839\u672c\u672a\u66fe\u66f4\u65b0\u8fc7\uff0c\u8bf4\u660e\u6240\u6709\u70b9\u90fd\u4e0d\u662f\u5b64\u7acb\u7684 if ans == - 1 : ans = min ( initial ) return ans graph = [[ 1 , 0 , 0 , 0 ],[ 0 , 1 , 0 , 0 ],[ 0 , 0 , 1 , 1 ],[ 0 , 0 , 1 , 1 ]] initial = [ 3 , 1 ] expected = 1 s = Solution () ans = s . minMalwareSpread ( graph , initial ) graph = [[ 1 , 1 , 0 ],[ 1 , 1 , 0 ],[ 0 , 0 , 1 ]] initial = [ 0 , 1 , 2 ] expected = 2 ans = s . minMalwareSpread ( graph , initial ) assert ans == expected graph = [[ 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ],[ 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ],[ 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ],[ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ],[ 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ],[ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 ]] initial = [ 1 , 3 , 0 ] expected = 1 ans = s . minMalwareSpread ( graph , initial ) assert ans == expected graph = [[ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 ], [ 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 ], [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 ], [ 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 ], [ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 ]] initial = [ 3 , 1 , 9 ] expected = 1 ans = s . minMalwareSpread ( graph , initial ) assert ans == expected end = 10","title":"924.py"},{"location":"leetcode/924/924/index.py.html#924py","text":"from typing import List class Solution : def create ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def get_count ( self , i ): \"\"\" \u83b7\u53d6\u8282\u70b9 i \u6240\u5728\u7684\u7ec4\u6709\u591a\u5c11\u4e2a\u5143\u7d20 \"\"\" if i < 0 : return 0 cc = 0 parent = self . parent ( i ) for ele in self . array : if parent == self . parent ( ele ): cc += 1 return cc def minMalwareSpread ( self , graph : List [ List [ int ]], initial : List [ int ]) -> int : n = len ( graph ) if n == 0 : return - 1 # \u5206\u6210\u51e0\u7ec4\u70b9 self . create ( n ) for i in range ( n ): for j in range ( n ): if i != j and graph [ i ][ j ] == 1 : self . merge ( i , j ) # \u5bf9\u4e8e\u6bcf\u4e2a\u6c61\u67d3\u7684\u70b9\uff0c\u67e5\u627e\u662f\u5426\u6709\u5176\u4ed6\u7684\u70b9\u4e0e\u5176\u5728\u540c\u4e00\u4e2a\u7ec4\uff0c\u5982\u679c\u5728\uff0c\u79fb\u9664\u8fd9\u4e2a\u7ec4\u7684\u6c61\u67d3\u70b9\u6ca1\u6709\u610f\u4e49 # \u5982\u679c\u4e0d\u548c\u5176\u4ed6\u6c61\u67d3\u70b9\u5728\u4e00\u7ec4\uff0c\u53ef\u4ee5\u79fb\u9664\u5b83\uff0c\u8bb0\u5f55\u83b7\u76ca\u7684\u70b9\u6570\uff0c\u53ea\u6709\u5f53\u4e0b\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6c61\u67d3\u70b9\u83b7\u76ca\u7684\u70b9\u6570\u5927\u4e8e\u5b83\u65f6\uff0c\u624d\u66f4\u65b0 # \u5982\u679c\u904d\u5386\u5b8c\u6210\u6ca1\u6709\u4efb\u4f55\u7ed3\u679c\uff0c\u8bf4\u660e\u79fb\u9664\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u8fd4\u56de\u4e00\u4e2a\u6700\u5c0f\u7684\u70b9\u5373\u53ef ans = - 1 max_count = 0 initial = sorted ( initial ) flag = [ 0 ] * len ( initial ) # \u662f\u5426\u8df3\u8fc7 for i in range ( len ( initial )): if flag [ i ]: continue single = True if i < len ( initial ) - 1 : for j in range ( i + 1 , len ( initial )): if self . parent ( initial [ i ]) == self . parent ( initial [ j ]): flag [ i ] = 1 flag [ j ] = 1 single = False if single : count = self . get_count ( initial [ i ]) if count > max_count : ans = initial [ i ] max_count = count # \u5982\u679cans \u6839\u672c\u672a\u66fe\u66f4\u65b0\u8fc7\uff0c\u8bf4\u660e\u6240\u6709\u70b9\u90fd\u4e0d\u662f\u5b64\u7acb\u7684 if ans == - 1 : ans = min ( initial ) return ans graph = [[ 1 , 0 , 0 , 0 ],[ 0 , 1 , 0 , 0 ],[ 0 , 0 , 1 , 1 ],[ 0 , 0 , 1 , 1 ]] initial = [ 3 , 1 ] expected = 1 s = Solution () ans = s . minMalwareSpread ( graph , initial ) graph = [[ 1 , 1 , 0 ],[ 1 , 1 , 0 ],[ 0 , 0 , 1 ]] initial = [ 0 , 1 , 2 ] expected = 2 ans = s . minMalwareSpread ( graph , initial ) assert ans == expected graph = [[ 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ],[ 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ],[ 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ],[ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ],[ 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ],[ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ],[ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 ]] initial = [ 1 , 3 , 0 ] expected = 1 ans = s . minMalwareSpread ( graph , initial ) assert ans == expected graph = [[ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 ], [ 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 ], [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 ], [ 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 ], [ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 ]] initial = [ 3 , 1 , 9 ] expected = 1 ans = s . minMalwareSpread ( graph , initial ) assert ans == expected end = 10","title":"924.py"},{"location":"leetcode/924/readme/","text":"924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5728\u8282\u70b9\u7f51\u7edc\u4e2d\uff0c\u53ea\u6709\u5f53 graph[i][j] = 1 \u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9 i \u80fd\u591f\u76f4\u63a5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u8282\u70b9 j\u3002 \u4e00\u4e9b\u8282\u70b9 initial \u6700\u521d\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u53ea\u8981\u4e24\u4e2a\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u4e14\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u53d7\u5230\u6076\u610f\u8f6f\u4ef6\u7684\u611f\u67d3\uff0c\u90a3\u4e48\u4e24\u4e2a\u8282\u70b9\u90fd\u5c06\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u8fd9\u79cd\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u88ab\u8fd9\u79cd\u65b9\u5f0f\u611f\u67d3\u3002 \u5047\u8bbe M(initial) \u662f\u5728\u6076\u610f\u8f6f\u4ef6\u505c\u6b62\u4f20\u64ad\u4e4b\u540e\uff0c\u6574\u4e2a\u7f51\u7edc\u4e2d\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u7684\u6700\u7ec8\u8282\u70b9\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u4ece\u521d\u59cb\u5217\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u79fb\u9664\u8fd9\u4e00\u8282\u70b9\u5c06\u6700\u5c0f\u5316 M(initial)\uff0c \u5219\u8fd4\u56de\u8be5\u8282\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u8282\u70b9\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u5df2\u4ece\u53d7\u611f\u67d3\u8282\u70b9\u7684\u5217\u8868 initial \u4e2d\u5220\u9664\uff0c\u5b83\u4ee5\u540e\u53ef\u80fd\u4ecd\u7136\u56e0\u6076\u610f\u8f6f\u4ef6\u4f20\u64ad\u800c\u53d7\u5230\u611f\u67d3\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1agraph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] \u8f93\u51fa\uff1a0 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1agraph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2] \u8f93\u51fa\uff1a0 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1agraph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2] \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a 1 2 3 4 5 1 < graph.length = graph[0].length <= 300 0 <= graph[i][j] == graph[j][i] <= 1 graph[i][i] == 1 1 <= initial.length < graph.length 0 <= initial[i] < graph.length 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u5e76\u67e5\u96c6\u786e\u5b9a\u56fe\u4e2d\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff0c\u627e\u5230\u53ea\u6709\u4e00\u4e2a\u6c61\u67d3\u70b9\u7684\u6700\u5927\u7684\u8fde\u901a\u5206\u91cf\uff0c\u79fb\u9664\u8fd9\u4e2a\u6c61\u67d3\u70b9\u53ef\u4ee5\u83b7\u5f97\u6700\u5927\u7684\u6536\u76ca\u3002 \u56e0\u4e3a\uff0c \u5982\u679c\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6c61\u67d3\u70b9\uff0c\u79fb\u9664\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u5269\u4e0b\u7684\u8fd8\u662f\u4f1a\u5168\u90e8\u88ab\u6c61\u67d3\u3002 \u53ea\u6709\u4e00\u70b9\u6c61\u67d3\u70b9\u7684\u6240\u6709\u8fde\u901a\u5206\u91cf\uff0c\u79fb\u9664\u6700\u5927\u7684\u90a3\u4e2a\u4fdd\u62a4\u7684\u8282\u70b9\u6700\u591a\u3002 python","title":"[924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad](https://leetcode-cn.com/problems/minimize-malware-spread/)"},{"location":"leetcode/924/readme/#924","text":"","title":"924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad"},{"location":"leetcode/924/readme/#1","text":"\u5728\u8282\u70b9\u7f51\u7edc\u4e2d\uff0c\u53ea\u6709\u5f53 graph[i][j] = 1 \u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9 i \u80fd\u591f\u76f4\u63a5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u8282\u70b9 j\u3002 \u4e00\u4e9b\u8282\u70b9 initial \u6700\u521d\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u53ea\u8981\u4e24\u4e2a\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u4e14\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u53d7\u5230\u6076\u610f\u8f6f\u4ef6\u7684\u611f\u67d3\uff0c\u90a3\u4e48\u4e24\u4e2a\u8282\u70b9\u90fd\u5c06\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u8fd9\u79cd\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u88ab\u8fd9\u79cd\u65b9\u5f0f\u611f\u67d3\u3002 \u5047\u8bbe M(initial) \u662f\u5728\u6076\u610f\u8f6f\u4ef6\u505c\u6b62\u4f20\u64ad\u4e4b\u540e\uff0c\u6574\u4e2a\u7f51\u7edc\u4e2d\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u7684\u6700\u7ec8\u8282\u70b9\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u4ece\u521d\u59cb\u5217\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u79fb\u9664\u8fd9\u4e00\u8282\u70b9\u5c06\u6700\u5c0f\u5316 M(initial)\uff0c \u5219\u8fd4\u56de\u8be5\u8282\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u8282\u70b9\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u5df2\u4ece\u53d7\u611f\u67d3\u8282\u70b9\u7684\u5217\u8868 initial \u4e2d\u5220\u9664\uff0c\u5b83\u4ee5\u540e\u53ef\u80fd\u4ecd\u7136\u56e0\u6076\u610f\u8f6f\u4ef6\u4f20\u64ad\u800c\u53d7\u5230\u611f\u67d3\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1agraph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] \u8f93\u51fa\uff1a0 \u793a\u4f8b 2\uff1a 1 2 \u8f93\u5165\uff1agraph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2] \u8f93\u51fa\uff1a0 \u793a\u4f8b 3\uff1a 1 2 \u8f93\u5165\uff1agraph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2] \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a 1 2 3 4 5 1 < graph.length = graph[0].length <= 300 0 <= graph[i][j] == graph[j][i] <= 1 graph[i][i] == 1 1 <= initial.length < graph.length 0 <= initial[i] < graph.length","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/924/readme/#2","text":"\u4f7f\u7528\u5e76\u67e5\u96c6\u786e\u5b9a\u56fe\u4e2d\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff0c\u627e\u5230\u53ea\u6709\u4e00\u4e2a\u6c61\u67d3\u70b9\u7684\u6700\u5927\u7684\u8fde\u901a\u5206\u91cf\uff0c\u79fb\u9664\u8fd9\u4e2a\u6c61\u67d3\u70b9\u53ef\u4ee5\u83b7\u5f97\u6700\u5927\u7684\u6536\u76ca\u3002 \u56e0\u4e3a\uff0c \u5982\u679c\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6c61\u67d3\u70b9\uff0c\u79fb\u9664\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u5269\u4e0b\u7684\u8fd8\u662f\u4f1a\u5168\u90e8\u88ab\u6c61\u67d3\u3002 \u53ea\u6709\u4e00\u70b9\u6c61\u67d3\u70b9\u7684\u6240\u6709\u8fde\u901a\u5206\u91cf\uff0c\u79fb\u9664\u6700\u5927\u7684\u90a3\u4e2a\u4fdd\u62a4\u7684\u8282\u70b9\u6700\u591a\u3002 python","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/927/readme/","text":"927. \u4e09\u7b49\u5206 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4 A\uff0c\u5c06\u6570\u7ec4\u5206\u6210 3 \u4e2a\u975e\u7a7a\u7684\u90e8\u5206\uff0c\u4f7f\u5f97\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\u8868\u793a\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u503c\u3002 \u5982\u679c\u53ef\u4ee5\u505a\u5230\uff0c\u8bf7\u8fd4\u56de\u4efb\u4f55 [i, j]\uff0c\u5176\u4e2d i+1 < j\uff0c\u8fd9\u6837\u4e00\u6765\uff1a A[0], A[1], ..., A[i] \u7ec4\u6210\u7b2c\u4e00\u90e8\u5206\uff1b A[i+1], A[i+2], ..., A[j-1] \u4f5c\u4e3a\u7b2c\u4e8c\u90e8\u5206\uff1b A[j], A[j+1], ..., A[A.length - 1] \u662f\u7b2c\u4e09\u90e8\u5206\u3002 \u8fd9\u4e09\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u503c\u76f8\u7b49\u3002 \u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u5c31\u8fd4\u56de [-1, -1]\u3002 \u6ce8\u610f\uff0c\u5728\u8003\u8651\u6bcf\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u65f6\uff0c\u5e94\u5f53\u5c06\u5176\u770b\u4f5c\u4e00\u4e2a\u6574\u4f53\u3002\u4f8b\u5982\uff0c[1,1,0] \u8868\u793a\u5341\u8fdb\u5236\u4e2d\u7684 6\uff0c\u800c\u4e0d\u4f1a\u662f 3\u3002\u6b64\u5916\uff0c\u524d\u5bfc\u96f6\u4e5f\u662f\u88ab\u5141\u8bb8\u7684\uff0c\u6240\u4ee5 [0,1,1] \u548c [1,1] \u8868\u793a\u76f8\u540c\u7684\u503c\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a[1,0,1,0,1] \u8f93\u51fa\uff1a[0,3] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u51fa\uff1a[1,1,0,1,1] \u8f93\u51fa\uff1a[-1,-1] \u63d0\u793a\uff1a 1 2 3 <= A.length <= 30000 A[i] == 0 \u6216 A[i] == 1 2. \u89e3\u9898\u601d\u8def \u00b6 \u57fa\u672c\u601d\u8def\u662f\u9996\u5148\u4fdd\u8bc11\u7684\u4e2a\u6570\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u624d\u53ef\u80fd\u503c\u662f\u76f8\u7b49\u7684\u3002 \u524d\u5bfc0\u7684\u4e2a\u6570\u53ef\u4ee5\u4e0d\u540c\u3002 int * threeEqualParts ( int * A , int ASize , int * returnSize ){ int count = 0 ; int c1 ; int i , j , right ; int * ans ; ans = ( int * ) malloc ( sizeof ( int ) * 2 ); ans [ 0 ] = - 1 ; ans [ 1 ] = - 1 ; * returnSize = 2 ; for ( i = 0 ; i < ASize ; i ++ ) { if ( A [ i ] == 1 ) { count ++ ; } } if ( count == 0 ) { ans [ 0 ] = 0 ; ans [ 1 ] = 2 ; return ans ; } if ( count % 3 != 0 ) { return ans ; } c1 = count / 3 ; // \u6bcf\u4e2a\u503c\u5e94\u8be5\u5305\u542bc1\u4e2a1 for ( i = ASize - 1 ; i >= 0 ; i -- ) { if ( A [ i ] == 1 ) { c1 -- ; } if ( c1 == 0 ) { right = i ; break ; } } // right ... ASize-1 \u7ec4\u6210\u7684\u503c\u662f\u6700\u7ec8\u4e09\u4e2a\u7ec4\u90fd\u5e94\u8be5\u8fbe\u5230\u7684\u503c // \u4f46\u662fright\u53ef\u80fd\u4e0d\u662f\u7b2c\u4e09\u7ec4\u7684\u5f00\u59cb\uff0c\u5982\u679c\u67090\u53ef\u4ee5\u63d0\u524d // \u4ece\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\u7f6e\uff0c\u662f\u5426\u5b8c\u5168\u80fd\u548c right...ASize-1 \u5339\u914d // \u5982\u679c\u4e0d\u80fd\u5339\u914d\uff0c\u5c31\u8fd4\u56defalse // \u5982\u679c\u53ef\u4ee5\u5339\u914d\uff0c\u5c31\u786e\u5b9a\u4e86\u7b2c\u4e00\u7ec4\u7684\u4f4d\u7f6e i = 0 ; while ( i < ASize && A [ i ] == 0 ) { i ++ ; } j = right ; while ( i < ASize && j < ASize && A [ i ] == A [ j ]) { i ++ ; j ++ ; } if ( j < ASize ) { ans [ 0 ] = - 1 ; ans [ 1 ] = - 1 ; return ans ; } // \u7b2c\u4e00\u7ec4\u5339\u914d\u4e0a\u4e86\uff0c i \u7684\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e8c\u7ec4\u5f00\u59cb\u7684\u4f4d\u7f6e ans [ 0 ] = i - 1 ; while ( i < ASize && A [ i ] == 0 ) { i ++ ; } j = right ; while ( i < ASize && j < ASize && A [ i ] == A [ j ]) { i ++ ; j ++ ; } if ( j < ASize ) { ans [ 0 ] = - 1 ; ans [ 1 ] = - 1 ; return ans ; } if ( i == right ) { ans [ 1 ] = i ; } else { ans [ 1 ] = i ; } return ans ; }","title":"[927. \u4e09\u7b49\u5206](https://leetcode-cn.com/problems/three-equal-parts/)"},{"location":"leetcode/927/readme/#927","text":"","title":"927. \u4e09\u7b49\u5206"},{"location":"leetcode/927/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4 A\uff0c\u5c06\u6570\u7ec4\u5206\u6210 3 \u4e2a\u975e\u7a7a\u7684\u90e8\u5206\uff0c\u4f7f\u5f97\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\u8868\u793a\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u503c\u3002 \u5982\u679c\u53ef\u4ee5\u505a\u5230\uff0c\u8bf7\u8fd4\u56de\u4efb\u4f55 [i, j]\uff0c\u5176\u4e2d i+1 < j\uff0c\u8fd9\u6837\u4e00\u6765\uff1a A[0], A[1], ..., A[i] \u7ec4\u6210\u7b2c\u4e00\u90e8\u5206\uff1b A[i+1], A[i+2], ..., A[j-1] \u4f5c\u4e3a\u7b2c\u4e8c\u90e8\u5206\uff1b A[j], A[j+1], ..., A[A.length - 1] \u662f\u7b2c\u4e09\u90e8\u5206\u3002 \u8fd9\u4e09\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u503c\u76f8\u7b49\u3002 \u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u5c31\u8fd4\u56de [-1, -1]\u3002 \u6ce8\u610f\uff0c\u5728\u8003\u8651\u6bcf\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u65f6\uff0c\u5e94\u5f53\u5c06\u5176\u770b\u4f5c\u4e00\u4e2a\u6574\u4f53\u3002\u4f8b\u5982\uff0c[1,1,0] \u8868\u793a\u5341\u8fdb\u5236\u4e2d\u7684 6\uff0c\u800c\u4e0d\u4f1a\u662f 3\u3002\u6b64\u5916\uff0c\u524d\u5bfc\u96f6\u4e5f\u662f\u88ab\u5141\u8bb8\u7684\uff0c\u6240\u4ee5 [0,1,1] \u548c [1,1] \u8868\u793a\u76f8\u540c\u7684\u503c\u3002 \u793a\u4f8b 1\uff1a 1 2 \u8f93\u5165\uff1a[1,0,1,0,1] \u8f93\u51fa\uff1a[0,3] \u793a\u4f8b 2\uff1a 1 2 \u8f93\u51fa\uff1a[1,1,0,1,1] \u8f93\u51fa\uff1a[-1,-1] \u63d0\u793a\uff1a 1 2 3 <= A.length <= 30000 A[i] == 0 \u6216 A[i] == 1","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/927/readme/#2","text":"\u57fa\u672c\u601d\u8def\u662f\u9996\u5148\u4fdd\u8bc11\u7684\u4e2a\u6570\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u624d\u53ef\u80fd\u503c\u662f\u76f8\u7b49\u7684\u3002 \u524d\u5bfc0\u7684\u4e2a\u6570\u53ef\u4ee5\u4e0d\u540c\u3002 int * threeEqualParts ( int * A , int ASize , int * returnSize ){ int count = 0 ; int c1 ; int i , j , right ; int * ans ; ans = ( int * ) malloc ( sizeof ( int ) * 2 ); ans [ 0 ] = - 1 ; ans [ 1 ] = - 1 ; * returnSize = 2 ; for ( i = 0 ; i < ASize ; i ++ ) { if ( A [ i ] == 1 ) { count ++ ; } } if ( count == 0 ) { ans [ 0 ] = 0 ; ans [ 1 ] = 2 ; return ans ; } if ( count % 3 != 0 ) { return ans ; } c1 = count / 3 ; // \u6bcf\u4e2a\u503c\u5e94\u8be5\u5305\u542bc1\u4e2a1 for ( i = ASize - 1 ; i >= 0 ; i -- ) { if ( A [ i ] == 1 ) { c1 -- ; } if ( c1 == 0 ) { right = i ; break ; } } // right ... ASize-1 \u7ec4\u6210\u7684\u503c\u662f\u6700\u7ec8\u4e09\u4e2a\u7ec4\u90fd\u5e94\u8be5\u8fbe\u5230\u7684\u503c // \u4f46\u662fright\u53ef\u80fd\u4e0d\u662f\u7b2c\u4e09\u7ec4\u7684\u5f00\u59cb\uff0c\u5982\u679c\u67090\u53ef\u4ee5\u63d0\u524d // \u4ece\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\u7f6e\uff0c\u662f\u5426\u5b8c\u5168\u80fd\u548c right...ASize-1 \u5339\u914d // \u5982\u679c\u4e0d\u80fd\u5339\u914d\uff0c\u5c31\u8fd4\u56defalse // \u5982\u679c\u53ef\u4ee5\u5339\u914d\uff0c\u5c31\u786e\u5b9a\u4e86\u7b2c\u4e00\u7ec4\u7684\u4f4d\u7f6e i = 0 ; while ( i < ASize && A [ i ] == 0 ) { i ++ ; } j = right ; while ( i < ASize && j < ASize && A [ i ] == A [ j ]) { i ++ ; j ++ ; } if ( j < ASize ) { ans [ 0 ] = - 1 ; ans [ 1 ] = - 1 ; return ans ; } // \u7b2c\u4e00\u7ec4\u5339\u914d\u4e0a\u4e86\uff0c i \u7684\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e8c\u7ec4\u5f00\u59cb\u7684\u4f4d\u7f6e ans [ 0 ] = i - 1 ; while ( i < ASize && A [ i ] == 0 ) { i ++ ; } j = right ; while ( i < ASize && j < ASize && A [ i ] == A [ j ]) { i ++ ; j ++ ; } if ( j < ASize ) { ans [ 0 ] = - 1 ; ans [ 1 ] = - 1 ; return ans ; } if ( i == right ) { ans [ 1 ] = i ; } else { ans [ 1 ] = i ; } return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/93/readme/","text":"93. \u590d\u539fIP\u5730\u5740 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u590d\u539f\u5b83\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684 IP \u5730\u5740\u683c\u5f0f\u3002 \u6709\u6548\u7684 IP \u5730\u5740\u6b63\u597d\u7531\u56db\u4e2a\u6574\u6570\uff08\u6bcf\u4e2a\u6574\u6570\u4f4d\u4e8e 0 \u5230 255 \u4e4b\u95f4\u7ec4\u6210\uff09\uff0c\u6574\u6570\u4e4b\u95f4\u7528 '.' \u5206\u9694\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165: \"25525511135\" \u8f93\u51fa: [\"255.255.11.135\", \"255.255.111.35\"] 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c \u5224\u65ad\u5f53\u524d\u662f\u5426\u53ef\u4ee5\u5206\u5272\uff0c\u5982\u679c\u4e0d\u80fd\u5206\u5272\uff0c\u5411\u540e\u626b\u63cf\uff1b \u5982\u679c\u53ef\u4ee5\u5206\u5272\uff0c\u5c1d\u8bd5\u5206\u5272\u548c\u4e0d\u5206\u5272\u4e24\u79cd\u60c5\u51b5\u3002 \u6ce8\u610f0\u7684\u7279\u6b8a\u5904\u7406\uff0c\u524d\u5bfc0\u662f\u4e0d\u5141\u8bb8\u51fa\u73b0\u7684\uff0c 00 \u4e5f\u4e0d\u80fd\u4f5c\u4e3a\u5408\u6cd5\u7684IP\u5730\u5740\u7684\u7ec4\u6210\u90e8\u5206\u3002 class Solution : def restoreIpAddresses ( self , s : str ) -> List [ str ]: def dfs ( start , end , count , ip ): \"\"\" count = len(ip) \u8868\u793a\u5f53\u524d\u5df2\u7ecf\u89e3\u6790\u51fa\u6765\u7684IP\u5730\u5740\u7684\u6570\u91cf\uff0c example: len(2.244) = 2 [start, end] \u8868\u793a\u5f53\u524d\u7684\u4e0b\u6807\uff0c \u591a\u7ef4\u62a4\u4e00\u4e2acount\u907f\u514d\u6bcf\u6b21\u90fd\u53bb\u83b7\u53d6\u957f\u5ea6 \"\"\" # \u8d85\u8fc7 n \u76f4\u63a5\u9000\u51fa if start > n or end > n : return if start == end == n : # \u5982\u679c\u6ca1\u6709\u5206\u5272\u4e3a4\u4e2a\u90e8\u5206\uff0c\u4e22\u5f03\u6389\u7ed3\u679c if count != 4 : return ipString = [ str ( num ) for num in ip [:]] ipString = \".\" . join ( ipString ) ans . append ( ipString ) return # \u53ea\u6709\u67d0\u4e00\u4e2a\u4e3an\uff0c\u76f4\u63a5\u9000\u51fa if start == n or end == n : return max_leave = ( 3 - count ) * 3 # \u5982\u679c\u4ece end \u5904\u65ad\u5f00\uff0c \u6700\u5927\u5269\u4f59\u6570\u5b57\u4e2a\u6570 # \u5982\u679c\u5f53\u524d\u5269\u4f59\u7684\u6570\u5b57\u6570\u91cf\u8d85\u8fc7\u4e86\u6700\u5927\u9700\u8981\u7684\u6570\u91cf\uff0c \u4e0d\u80fd\u4ece\u8fd9\u91cc\u65ad\u5f00\uff0c end + 1 \u5411\u540e\u5c1d\u8bd5 # \u4f8b\u5982 s = \"2322512225\", ip = [23], count = 1, start = 2, end = 2, # max_leave = 6, \u4eceend\u5904\u65ad\u5f00\u5269\u4f597\u4e2a\u6570\u5b57\uff0c \u800c\u5269\u4e0b\u7684IP\u5730\u5740\u6700\u591a\u9700\u8981 6\u4e2a\u6570\u5b57\uff0c \u4e0d\u80fd\u4ece\u8fd9\u91cc\u65ad\u5f00 if n - 1 - end > max_leave : dfs ( start , end + 1 , count , ip ) return else : # \u5982\u679c\u6709\u524d\u5bfc0\uff0c\u5fc5\u987b\u53ea\u5305\u542b0\u4e00\u4e2a\u6570\u5b57 # 00\uff0c 01\uff0c 025 \u90fd\u662f\u975e\u6cd5\u7684 if s [ start ] == '0' : if end > start : return number = int ( s [ start : end + 1 ] ) # \u8f6c\u6362\u6210\u6570\u5b57 # \u6570\u5b57\u8d85\u8fc7\u8303\u56f4\uff0c\u8bf4\u660e\u5206\u5272\u5931\u8d25\uff0c\u8fd4\u56de if number > 255 : return # \u53ef\u4ee5\u4ece end \u5904\u5206\u5272\uff0c \u5c1d\u8bd5\u5206\u5272\u548c\u4e0d\u5206\u5272\u4e24\u79cd\u60c5\u51b5 # \u5206\u5272\u7684\u60c5\u51b5 ip . append ( number ) dfs ( end + 1 , end + 1 , count + 1 , ip ) ip . pop () # \u4e0d\u5206\u5272\u7684\u60c5\u51b5, \u4f4d\u6570\u5927\u4e8e\u7b49\u4e8e3\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u5fc5\u8981\u5c1d\u8bd5\u4e0d\u5206\u5272\u7684\u60c5\u51b5 if end - start + 1 < 3 : dfs ( start , end + 1 , count , ip ) return n = len ( s ) ip = [] ans = [] start , end , count = 0 , 0 , 0 dfs ( start , end , count , ip ) return ans \u6d4b\u8bd5\u7528\u4f8b\uff1a 010010","title":"[93. \u590d\u539fIP\u5730\u5740](https://leetcode-cn.com/problems/restore-ip-addresses/)"},{"location":"leetcode/93/readme/#93-ip","text":"","title":"93. \u590d\u539fIP\u5730\u5740"},{"location":"leetcode/93/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u590d\u539f\u5b83\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684 IP \u5730\u5740\u683c\u5f0f\u3002 \u6709\u6548\u7684 IP \u5730\u5740\u6b63\u597d\u7531\u56db\u4e2a\u6574\u6570\uff08\u6bcf\u4e2a\u6574\u6570\u4f4d\u4e8e 0 \u5230 255 \u4e4b\u95f4\u7ec4\u6210\uff09\uff0c\u6574\u6570\u4e4b\u95f4\u7528 '.' \u5206\u9694\u3002 \u793a\u4f8b: 1 2 \u8f93\u5165: \"25525511135\" \u8f93\u51fa: [\"255.255.11.135\", \"255.255.111.35\"]","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/93/readme/#2","text":"\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c \u5224\u65ad\u5f53\u524d\u662f\u5426\u53ef\u4ee5\u5206\u5272\uff0c\u5982\u679c\u4e0d\u80fd\u5206\u5272\uff0c\u5411\u540e\u626b\u63cf\uff1b \u5982\u679c\u53ef\u4ee5\u5206\u5272\uff0c\u5c1d\u8bd5\u5206\u5272\u548c\u4e0d\u5206\u5272\u4e24\u79cd\u60c5\u51b5\u3002 \u6ce8\u610f0\u7684\u7279\u6b8a\u5904\u7406\uff0c\u524d\u5bfc0\u662f\u4e0d\u5141\u8bb8\u51fa\u73b0\u7684\uff0c 00 \u4e5f\u4e0d\u80fd\u4f5c\u4e3a\u5408\u6cd5\u7684IP\u5730\u5740\u7684\u7ec4\u6210\u90e8\u5206\u3002 class Solution : def restoreIpAddresses ( self , s : str ) -> List [ str ]: def dfs ( start , end , count , ip ): \"\"\" count = len(ip) \u8868\u793a\u5f53\u524d\u5df2\u7ecf\u89e3\u6790\u51fa\u6765\u7684IP\u5730\u5740\u7684\u6570\u91cf\uff0c example: len(2.244) = 2 [start, end] \u8868\u793a\u5f53\u524d\u7684\u4e0b\u6807\uff0c \u591a\u7ef4\u62a4\u4e00\u4e2acount\u907f\u514d\u6bcf\u6b21\u90fd\u53bb\u83b7\u53d6\u957f\u5ea6 \"\"\" # \u8d85\u8fc7 n \u76f4\u63a5\u9000\u51fa if start > n or end > n : return if start == end == n : # \u5982\u679c\u6ca1\u6709\u5206\u5272\u4e3a4\u4e2a\u90e8\u5206\uff0c\u4e22\u5f03\u6389\u7ed3\u679c if count != 4 : return ipString = [ str ( num ) for num in ip [:]] ipString = \".\" . join ( ipString ) ans . append ( ipString ) return # \u53ea\u6709\u67d0\u4e00\u4e2a\u4e3an\uff0c\u76f4\u63a5\u9000\u51fa if start == n or end == n : return max_leave = ( 3 - count ) * 3 # \u5982\u679c\u4ece end \u5904\u65ad\u5f00\uff0c \u6700\u5927\u5269\u4f59\u6570\u5b57\u4e2a\u6570 # \u5982\u679c\u5f53\u524d\u5269\u4f59\u7684\u6570\u5b57\u6570\u91cf\u8d85\u8fc7\u4e86\u6700\u5927\u9700\u8981\u7684\u6570\u91cf\uff0c \u4e0d\u80fd\u4ece\u8fd9\u91cc\u65ad\u5f00\uff0c end + 1 \u5411\u540e\u5c1d\u8bd5 # \u4f8b\u5982 s = \"2322512225\", ip = [23], count = 1, start = 2, end = 2, # max_leave = 6, \u4eceend\u5904\u65ad\u5f00\u5269\u4f597\u4e2a\u6570\u5b57\uff0c \u800c\u5269\u4e0b\u7684IP\u5730\u5740\u6700\u591a\u9700\u8981 6\u4e2a\u6570\u5b57\uff0c \u4e0d\u80fd\u4ece\u8fd9\u91cc\u65ad\u5f00 if n - 1 - end > max_leave : dfs ( start , end + 1 , count , ip ) return else : # \u5982\u679c\u6709\u524d\u5bfc0\uff0c\u5fc5\u987b\u53ea\u5305\u542b0\u4e00\u4e2a\u6570\u5b57 # 00\uff0c 01\uff0c 025 \u90fd\u662f\u975e\u6cd5\u7684 if s [ start ] == '0' : if end > start : return number = int ( s [ start : end + 1 ] ) # \u8f6c\u6362\u6210\u6570\u5b57 # \u6570\u5b57\u8d85\u8fc7\u8303\u56f4\uff0c\u8bf4\u660e\u5206\u5272\u5931\u8d25\uff0c\u8fd4\u56de if number > 255 : return # \u53ef\u4ee5\u4ece end \u5904\u5206\u5272\uff0c \u5c1d\u8bd5\u5206\u5272\u548c\u4e0d\u5206\u5272\u4e24\u79cd\u60c5\u51b5 # \u5206\u5272\u7684\u60c5\u51b5 ip . append ( number ) dfs ( end + 1 , end + 1 , count + 1 , ip ) ip . pop () # \u4e0d\u5206\u5272\u7684\u60c5\u51b5, \u4f4d\u6570\u5927\u4e8e\u7b49\u4e8e3\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u5fc5\u8981\u5c1d\u8bd5\u4e0d\u5206\u5272\u7684\u60c5\u51b5 if end - start + 1 < 3 : dfs ( start , end + 1 , count , ip ) return n = len ( s ) ip = [] ans = [] start , end , count = 0 , 0 , 0 dfs ( start , end , count , ip ) return ans \u6d4b\u8bd5\u7528\u4f8b\uff1a 010010","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/946/946/index.c.html","text":"946.c \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> bool validateStackSequences ( int * pushed , int pushedSize , int * popped , int poppedSize ){ int * stack = ( int * ) malloc ( sizeof ( int ) * pushedSize ); int top = 0 ; int start = 0 ; for ( int i = 0 ; i < poppedSize ; i ++ ) { if ( start < pushedSize && popped [ i ] == pushed [ start ]) { start ++ ; } else if ( top > 0 && stack [ top - 1 ] == popped [ i ]) { top -- ; } else { while ( start < pushedSize && popped [ i ] != pushed [ start ]) { stack [ top ++ ] = pushed [ start ++ ]; } start ++ ; } } if ( top > 0 ) { return false ; } return true ; } int main () { int pushed [] = { 1 , 2 , 3 , 4 , 5 }; int poped [] = { 4 , 5 , 3 , 2 , 1 }; bool ans = validateStackSequences ( pushed , 5 , poped , 5 ); return 0 ; }","title":"946.c"},{"location":"leetcode/946/946/index.c.html#946c","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdbool.h> bool validateStackSequences ( int * pushed , int pushedSize , int * popped , int poppedSize ){ int * stack = ( int * ) malloc ( sizeof ( int ) * pushedSize ); int top = 0 ; int start = 0 ; for ( int i = 0 ; i < poppedSize ; i ++ ) { if ( start < pushedSize && popped [ i ] == pushed [ start ]) { start ++ ; } else if ( top > 0 && stack [ top - 1 ] == popped [ i ]) { top -- ; } else { while ( start < pushedSize && popped [ i ] != pushed [ start ]) { stack [ top ++ ] = pushed [ start ++ ]; } start ++ ; } } if ( top > 0 ) { return false ; } return true ; } int main () { int pushed [] = { 1 , 2 , 3 , 4 , 5 }; int poped [] = { 4 , 5 , 3 , 2 , 1 }; bool ans = validateStackSequences ( pushed , 5 , poped , 5 ); return 0 ; }","title":"946.c"},{"location":"leetcode/946/946/index.cpp.html","text":"946.cpp \u00b6 #include <vector> #include <stack> using namespace std ; class Solution { public : bool validateStackSequences ( vector < int >& pushed , vector < int >& popped ) { stack < int > s ; int start = 0 ; for ( size_t i = 0 ; i < popped . size (); i ++ ) { if ( start < pushed . size () && popped [ i ] == pushed [ start ]) { start ++ ; } else if ( ! s . empty () && s . top () == popped [ i ]) { s . pop (); } else { while ( start < pushed . size () && pushed [ start ] != popped [ i ]) { s . push ( pushed [ start ++ ]); } start ++ ; } } if ( s . empty ()) { return true ; } return false ; } }; int main () { vector < int > pushed = { 1 , 2 , 3 , 4 , 5 }; vector < int > poped = { 4 , 5 , 3 , 2 , 1 }; Solution * s = new Solution (); bool ans = s -> validateStackSequences ( pushed , poped ); return 0 ; }","title":"946.cpp"},{"location":"leetcode/946/946/index.cpp.html#946cpp","text":"#include <vector> #include <stack> using namespace std ; class Solution { public : bool validateStackSequences ( vector < int >& pushed , vector < int >& popped ) { stack < int > s ; int start = 0 ; for ( size_t i = 0 ; i < popped . size (); i ++ ) { if ( start < pushed . size () && popped [ i ] == pushed [ start ]) { start ++ ; } else if ( ! s . empty () && s . top () == popped [ i ]) { s . pop (); } else { while ( start < pushed . size () && pushed [ start ] != popped [ i ]) { s . push ( pushed [ start ++ ]); } start ++ ; } } if ( s . empty ()) { return true ; } return false ; } }; int main () { vector < int > pushed = { 1 , 2 , 3 , 4 , 5 }; vector < int > poped = { 4 , 5 , 3 , 2 , 1 }; Solution * s = new Solution (); bool ans = s -> validateStackSequences ( pushed , poped ); return 0 ; }","title":"946.cpp"},{"location":"leetcode/946/946/index.py.html","text":"946.py \u00b6 from typing import List class Solution : def validateStackSequences ( self , pushed : List [ int ], popped : List [ int ]) -> bool : stack = [] start = 0 for pop in popped : if start < len ( pushed ) and pushed [ start ] == pop : start += 1 elif len ( stack ) > 0 and stack [ - 1 ] == pop : stack . pop () else : while ( start < len ( pushed ) and pushed [ start ] != pop ): stack . append ( pushed [ start ]) start += 1 start += 1 if len ( stack ) == 0 : return True return False","title":"946.py"},{"location":"leetcode/946/946/index.py.html#946py","text":"from typing import List class Solution : def validateStackSequences ( self , pushed : List [ int ], popped : List [ int ]) -> bool : stack = [] start = 0 for pop in popped : if start < len ( pushed ) and pushed [ start ] == pop : start += 1 elif len ( stack ) > 0 and stack [ - 1 ] == pop : stack . pop () else : while ( start < len ( pushed ) and pushed [ start ] != pop ): stack . append ( pushed [ start ]) start += 1 start += 1 if len ( stack ) == 0 : return True return False","title":"946.py"},{"location":"leetcode/946/readme/","text":"946. \u9a8c\u8bc1\u6808\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a pushed \u548c popped \u4e24\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5e8f\u5217\u4e2d\u7684 \u503c\u90fd\u4e0d\u91cd\u590d\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u53ef\u80fd\u662f\u5728\u6700\u521d\u7a7a\u6808\u4e0a\u8fdb\u884c\u7684\u63a8\u5165 push \u548c\u5f39\u51fa pop \u64cd\u4f5c\u5e8f\u5217\u7684\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 \u8f93\u5165\uff1apushed = [1,2,3,4,5], popped = [4,5,3,2,1] \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\uff1a push(1), push(2), push(3), push(4), pop() -> 4, push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1apushed = [1,2,3,4,5], popped = [4,3,5,1,2] \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a1 \u4e0d\u80fd\u5728 2 \u4e4b\u524d\u5f39\u51fa\u3002 \u63d0\u793a\uff1a 1 2 3 0 <= pushed.length == popped.length <= 1000 0 <= pushed[i], popped[i] < 1000 pushed \u662f popped \u7684\u6392\u5217\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u904d\u5386poped\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c \u521d\u59cb\u5316 start = 0, stack = [] \u5bf9\u4e8epoped[i], \u5148\u6bd4\u8f83\u662f\u5426\u7b49\u4e8epushed[start], \u5982\u679c\u76f8\u7b49\uff0c\u8bf4\u660e\u5c1a\u672a\u5165\u6808\uff0c\u53ef\u4ee5\u5165\u6808\u9a6c\u4e0a\u5f39\u51fa\uff0c poped[i]\u6210\u529f\u5339\u914d \u518d\u6bd4\u8f83\u662f\u5426\u7b49\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0cpoped[i]\u6210\u529f\u5339\u914d\uff0c \u5426\u5219\uff0c\u6301\u7eed\u5165\u6808\u76f4\u5230\u4e0epoped[i]\u76f8\u7b49 \u904d\u5386\u5b8cpoped\u4e4b\u540e\uff0c\u6bcf\u4e2a\u90fd\u80fd\u5339\u914d\uff0c\u8fd4\u56detrue,\u5426\u5219\u8fd4\u56defalse 3. AC\u4ee3\u7801 \u00b6 C C++ Python","title":"[946. \u9a8c\u8bc1\u6808\u5e8f\u5217](https://leetcode-cn.com/problems/validate-stack-sequences)"},{"location":"leetcode/946/readme/#946","text":"","title":"946. \u9a8c\u8bc1\u6808\u5e8f\u5217"},{"location":"leetcode/946/readme/#1","text":"\u7ed9\u5b9a pushed \u548c popped \u4e24\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5e8f\u5217\u4e2d\u7684 \u503c\u90fd\u4e0d\u91cd\u590d\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u53ef\u80fd\u662f\u5728\u6700\u521d\u7a7a\u6808\u4e0a\u8fdb\u884c\u7684\u63a8\u5165 push \u548c\u5f39\u51fa pop \u64cd\u4f5c\u5e8f\u5217\u7684\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 \u8f93\u5165\uff1apushed = [1,2,3,4,5], popped = [4,5,3,2,1] \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\uff1a push(1), push(2), push(3), push(4), pop() -> 4, push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1apushed = [1,2,3,4,5], popped = [4,3,5,1,2] \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a1 \u4e0d\u80fd\u5728 2 \u4e4b\u524d\u5f39\u51fa\u3002 \u63d0\u793a\uff1a 1 2 3 0 <= pushed.length == popped.length <= 1000 0 <= pushed[i], popped[i] < 1000 pushed \u662f popped \u7684\u6392\u5217\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/946/readme/#2","text":"\u904d\u5386poped\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c \u521d\u59cb\u5316 start = 0, stack = [] \u5bf9\u4e8epoped[i], \u5148\u6bd4\u8f83\u662f\u5426\u7b49\u4e8epushed[start], \u5982\u679c\u76f8\u7b49\uff0c\u8bf4\u660e\u5c1a\u672a\u5165\u6808\uff0c\u53ef\u4ee5\u5165\u6808\u9a6c\u4e0a\u5f39\u51fa\uff0c poped[i]\u6210\u529f\u5339\u914d \u518d\u6bd4\u8f83\u662f\u5426\u7b49\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0cpoped[i]\u6210\u529f\u5339\u914d\uff0c \u5426\u5219\uff0c\u6301\u7eed\u5165\u6808\u76f4\u5230\u4e0epoped[i]\u76f8\u7b49 \u904d\u5386\u5b8cpoped\u4e4b\u540e\uff0c\u6bcf\u4e2a\u90fd\u80fd\u5339\u914d\uff0c\u8fd4\u56detrue,\u5426\u5219\u8fd4\u56defalse","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/946/readme/#3-ac","text":"C C++ Python","title":"3. AC\u4ee3\u7801"},{"location":"leetcode/973/readme/","text":"973. \u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u9762\u4e0a\u7684\u70b9\u7ec4\u6210\u7684\u5217\u8868 points\u3002\u9700\u8981\u4ece\u4e2d\u627e\u51fa K \u4e2a\u8ddd\u79bb\u539f\u70b9 (0, 0) \u6700\u8fd1\u7684\u70b9\u3002 \uff08\u8fd9\u91cc\uff0c\u5e73\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u3002\uff09 \u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u9664\u4e86\u70b9\u5750\u6807\u7684\u987a\u5e8f\u4e4b\u5916\uff0c\u7b54\u6848\u786e\u4fdd\u662f\u552f\u4e00\u7684\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1apoints = [[1,3],[-2,2]], K = 1 \u8f93\u51fa\uff1a[[-2,2]] \u89e3\u91ca\uff1a (1, 3) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(10)\uff0c (-2, 2) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(8)\uff0c \u7531\u4e8e sqrt(8) < sqrt(10)\uff0c(-2, 2) \u79bb\u539f\u70b9\u66f4\u8fd1\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684 K = 1 \u4e2a\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f [[-2,2]]\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1apoints = [[3,3],[5,-1],[-2,4]], K = 2 \u8f93\u51fa\uff1a[[3,3],[-2,4]] \uff08\u7b54\u6848 [[-2,4],[3,3]] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\uff09 \u63d0\u793a\uff1a 1 2 3 1 <= K <= points.length <= 10000 -10000 < points[i][0] < 10000 -10000 < points[i][1] < 10000 2. \u89e3\u9898\u601d\u8def \u00b6 void swap(int **points, int index1, int index2) { int tmp1, tmp2; tmp1 = points[index1][0]; tmp2 = points[index1][1]; points[index1][0] = points[index2][0]; points[index1][1] = points[index2][1]; points[index2][0] = tmp1; points[index2][1] = tmp2; return; } int less(int *a, int *b) { if ((a[0] * a[0] + a[1] * a[1]) <= (b[0] * b[0] + b[1] * b[1])) { return 1; } return 0; } int partition(int **points, int start, int end) { int *x = points[end]; int i; int j = start - 1; for (i = start; i < end; i++) { if (less(points[i], x) == 1) { j = j + 1; swap(points, i, j); } } swap(points, j + 1, end); return j + 1; } void sorted(int **points, int start, int end) { int mid; if (start >= end) { return; } mid = partition(points, start, end); sorted(points, start, mid - 1); sorted(points, mid + 1, end); return; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int** kClosest(int** points, int pointsSize, int* pointsColSize, int K, int* returnSize, int** returnColumnSizes){ int **ans; int *cols; int i, j; // \u4e3a\u7b54\u6848\u5f00\u8f9f\u7a7a\u95f4 ans = (int**)malloc(sizeof(int*) * K); for (i = 0; i < K; i++) { ans[i] = (int*)malloc(sizeof(int) * 2); } cols = (int*)malloc(sizeof(int) * K); // \u6309\u7167\u8ddd\u79bb\u539f\u70b9\u7684\u8ddd\u79bb\u6392\u5e8f sorted(points, 0, pointsSize - 1); // \u53d6\u524dK\u4e2a\u653e\u5165\u7ed3\u679c\u4e2d for (i = 0; i < K; i++) { ans[i][0] = points[i][0]; ans[i][1] = points[i][1]; cols[i] = 2; } *returnSize = K; *returnColumnSizes = cols; return ans; }","title":"[973. \u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9](https://leetcode-cn.com/problems/k-closest-points-to-origin/)"},{"location":"leetcode/973/readme/#973-k","text":"","title":"973. \u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9"},{"location":"leetcode/973/readme/#1","text":"\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u9762\u4e0a\u7684\u70b9\u7ec4\u6210\u7684\u5217\u8868 points\u3002\u9700\u8981\u4ece\u4e2d\u627e\u51fa K \u4e2a\u8ddd\u79bb\u539f\u70b9 (0, 0) \u6700\u8fd1\u7684\u70b9\u3002 \uff08\u8fd9\u91cc\uff0c\u5e73\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u3002\uff09 \u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u9664\u4e86\u70b9\u5750\u6807\u7684\u987a\u5e8f\u4e4b\u5916\uff0c\u7b54\u6848\u786e\u4fdd\u662f\u552f\u4e00\u7684\u3002 \u793a\u4f8b 1\uff1a 1 2 3 4 5 6 7 \u8f93\u5165\uff1apoints = [[1,3],[-2,2]], K = 1 \u8f93\u51fa\uff1a[[-2,2]] \u89e3\u91ca\uff1a (1, 3) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(10)\uff0c (-2, 2) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(8)\uff0c \u7531\u4e8e sqrt(8) < sqrt(10)\uff0c(-2, 2) \u79bb\u539f\u70b9\u66f4\u8fd1\u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684 K = 1 \u4e2a\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f [[-2,2]]\u3002 \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1apoints = [[3,3],[5,-1],[-2,4]], K = 2 \u8f93\u51fa\uff1a[[3,3],[-2,4]] \uff08\u7b54\u6848 [[-2,4],[3,3]] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\uff09 \u63d0\u793a\uff1a 1 2 3 1 <= K <= points.length <= 10000 -10000 < points[i][0] < 10000 -10000 < points[i][1] < 10000","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/973/readme/#2","text":"void swap(int **points, int index1, int index2) { int tmp1, tmp2; tmp1 = points[index1][0]; tmp2 = points[index1][1]; points[index1][0] = points[index2][0]; points[index1][1] = points[index2][1]; points[index2][0] = tmp1; points[index2][1] = tmp2; return; } int less(int *a, int *b) { if ((a[0] * a[0] + a[1] * a[1]) <= (b[0] * b[0] + b[1] * b[1])) { return 1; } return 0; } int partition(int **points, int start, int end) { int *x = points[end]; int i; int j = start - 1; for (i = start; i < end; i++) { if (less(points[i], x) == 1) { j = j + 1; swap(points, i, j); } } swap(points, j + 1, end); return j + 1; } void sorted(int **points, int start, int end) { int mid; if (start >= end) { return; } mid = partition(points, start, end); sorted(points, start, mid - 1); sorted(points, mid + 1, end); return; } /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int** kClosest(int** points, int pointsSize, int* pointsColSize, int K, int* returnSize, int** returnColumnSizes){ int **ans; int *cols; int i, j; // \u4e3a\u7b54\u6848\u5f00\u8f9f\u7a7a\u95f4 ans = (int**)malloc(sizeof(int*) * K); for (i = 0; i < K; i++) { ans[i] = (int*)malloc(sizeof(int) * 2); } cols = (int*)malloc(sizeof(int) * K); // \u6309\u7167\u8ddd\u79bb\u539f\u70b9\u7684\u8ddd\u79bb\u6392\u5e8f sorted(points, 0, pointsSize - 1); // \u53d6\u524dK\u4e2a\u653e\u5165\u7ed3\u679c\u4e2d for (i = 0; i < K; i++) { ans[i][0] = points[i][0]; ans[i][1] = points[i][1]; cols[i] = 2; } *returnSize = K; *returnColumnSizes = cols; return ans; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/974/readme/","text":"974. \u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 A\uff0c\u8fd4\u56de\u5176\u4e2d\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K \u6574\u9664\u7684\uff08\u8fde\u7eed\u3001\u975e\u7a7a\uff09\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aA = [4,5,0,-2,-3,1], K = 5 \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u6709 7 \u4e2a\u5b50\u6570\u7ec4\u6ee1\u8db3\u5176\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K = 5 \u6574\u9664\uff1a [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] \u63d0\u793a\uff1a 1 2 3 1 <= A.length <= 30000 -10000 <= A[i] <= 10000 2 <= K <= 10000 2. \u89e3\u9898\u601d\u8def \u00b6 \u7edf\u8ba1\u524d\u7f00\u548c\uff0c \u5229\u7528\u54c8\u5e0c\u8868\u8ba1\u7b97\u524d\u7f00\u548c\u6570\u7ec4\u5bf9K\u53d6\u4f59\u4e4b\u540e\u5269\u4e0b\u7684\u503c\uff0c \u8bb0\u5f55\u6bcf\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002 #define N 10001 int hashMap [ N ]; void init () { int i ; for ( i = 0 ; i < N ; i ++ ) { hashMap [ i ] = 0 ; } } int subarraysDivByK ( int * A , int ASize , int K ){ int * sums ; int i ; int ans = 0 ; sums = ( int * ) malloc ( sizeof ( int ) * ASize ); sums [ 0 ] = A [ 0 ]; for ( i = 1 ; i < ASize ; i ++ ) { sums [ i ] = sums [ i - 1 ] + A [ i ]; } init (); for ( i = 0 ; i < ASize ; i ++ ) { sums [ i ] = ( sums [ i ] % K + K ) % K ; hashMap [ sums [ i ]] ++ ; if ( sums [ i ] == 0 ) { ans ++ ; } } for ( i = 0 ; i < N ; i ++ ) { if ( hashMap [ i ] != 0 ) { ans += hashMap [ i ] * ( hashMap [ i ] - 1 ) / 2 ; } } return ans ; }","title":"[974. \u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4](https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/)"},{"location":"leetcode/974/readme/#974-k","text":"","title":"974. \u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4"},{"location":"leetcode/974/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 A\uff0c\u8fd4\u56de\u5176\u4e2d\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K \u6574\u9664\u7684\uff08\u8fde\u7eed\u3001\u975e\u7a7a\uff09\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 \u8f93\u5165\uff1aA = [4,5,0,-2,-3,1], K = 5 \u8f93\u51fa\uff1a7 \u89e3\u91ca\uff1a \u6709 7 \u4e2a\u5b50\u6570\u7ec4\u6ee1\u8db3\u5176\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K = 5 \u6574\u9664\uff1a [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] \u63d0\u793a\uff1a 1 2 3 1 <= A.length <= 30000 -10000 <= A[i] <= 10000 2 <= K <= 10000","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/974/readme/#2","text":"\u7edf\u8ba1\u524d\u7f00\u548c\uff0c \u5229\u7528\u54c8\u5e0c\u8868\u8ba1\u7b97\u524d\u7f00\u548c\u6570\u7ec4\u5bf9K\u53d6\u4f59\u4e4b\u540e\u5269\u4e0b\u7684\u503c\uff0c \u8bb0\u5f55\u6bcf\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002 #define N 10001 int hashMap [ N ]; void init () { int i ; for ( i = 0 ; i < N ; i ++ ) { hashMap [ i ] = 0 ; } } int subarraysDivByK ( int * A , int ASize , int K ){ int * sums ; int i ; int ans = 0 ; sums = ( int * ) malloc ( sizeof ( int ) * ASize ); sums [ 0 ] = A [ 0 ]; for ( i = 1 ; i < ASize ; i ++ ) { sums [ i ] = sums [ i - 1 ] + A [ i ]; } init (); for ( i = 0 ; i < ASize ; i ++ ) { sums [ i ] = ( sums [ i ] % K + K ) % K ; hashMap [ sums [ i ]] ++ ; if ( sums [ i ] == 0 ) { ans ++ ; } } for ( i = 0 ; i < N ; i ++ ) { if ( hashMap [ i ] != 0 ) { ans += hashMap [ i ] * ( hashMap [ i ] - 1 ) / 2 ; } } return ans ; }","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"leetcode/991/readme/","text":"991. \u574f\u4e86\u7684\u8ba1\u7b97\u5668 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5728\u663e\u793a\u7740\u6570\u5b57\u7684\u574f\u8ba1\u7b97\u5668\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a 1 2 \u53cc\u500d\uff08Double\uff09\uff1a\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u4e58 2\uff1b \u9012\u51cf\uff08Decrement\uff09\uff1a\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u51cf 1 \u3002 \u6700\u521d\uff0c\u8ba1\u7b97\u5668\u663e\u793a\u6570\u5b57 X\u3002 \u8fd4\u56de\u663e\u793a\u6570\u5b57 Y \u6240\u9700\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aX = 2, Y = 3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u5148\u8fdb\u884c\u53cc\u500d\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u8fdb\u884c\u9012\u51cf\u8fd0\u7b97 {2 -> 4 -> 3}. \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aX = 5, Y = 8 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u5148\u9012\u51cf\uff0c\u518d\u53cc\u500d {5 -> 4 -> 8}. \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1aX = 3, Y = 10 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u5148\u53cc\u500d\uff0c\u7136\u540e\u9012\u51cf\uff0c\u518d\u53cc\u500d {3 -> 6 -> 5 -> 10}. \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1aX = 1024, Y = 1 \u8f93\u51fa\uff1a1023 \u89e3\u91ca\uff1a\u6267\u884c\u9012\u51cf\u8fd0\u7b97 1023 \u6b21 \u63d0\u793a\uff1a 1 2 1 <= X <= 10^9 1 <= Y <= 10^9 2. \u89e3\u9898\u601d\u8def \u00b6 \u8003\u8651\u4eceY\u5f97\u5230X\u6bd4\u8f83\u5bb9\u6613\uff0c\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u6cd5\u3002 \u5982\u679cY\u662f\u5947\u6570\uff0c\u5148\u52a01\u518d\u96642 \u5982\u679cY\u662f\u5076\u6570\uff0c\u76f4\u63a5\u96642 \u77e5\u9053Y\u5c0f\u4e8eX\u7684\u65f6\u5019\uff0c \u518d\u6267\u884cX-Y\u6b21\u52a0\u6cd5\u64cd\u4f5c \u56e0\u4e3a\u96642\u53ef\u4ee5\u4e00\u6b21\u64cd\u4f5c\u51cf\u5c11\u4e00\u534a\uff0c\u53ef\u4ee5\u66f4\u5feb\u7684\u4f7fY\u903c\u8fd1X\u9644\u8fd1 class Solution ( object ): def brokenCalc ( self , X , Y ): \"\"\" :type X: int :type Y: int :rtype: int \"\"\" ans = 0 while Y > X : ans += 1 if Y % 2 : Y += 1 else : Y = Y // 2 return ans + X - Y","title":"[991. \u574f\u4e86\u7684\u8ba1\u7b97\u5668](https://leetcode-cn.com/problems/broken-calculator/)"},{"location":"leetcode/991/readme/#991","text":"","title":"991. \u574f\u4e86\u7684\u8ba1\u7b97\u5668"},{"location":"leetcode/991/readme/#1","text":"\u5728\u663e\u793a\u7740\u6570\u5b57\u7684\u574f\u8ba1\u7b97\u5668\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a 1 2 \u53cc\u500d\uff08Double\uff09\uff1a\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u4e58 2\uff1b \u9012\u51cf\uff08Decrement\uff09\uff1a\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u51cf 1 \u3002 \u6700\u521d\uff0c\u8ba1\u7b97\u5668\u663e\u793a\u6570\u5b57 X\u3002 \u8fd4\u56de\u663e\u793a\u6570\u5b57 Y \u6240\u9700\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\u3002 \u793a\u4f8b 1\uff1a 1 2 3 \u8f93\u5165\uff1aX = 2, Y = 3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u5148\u8fdb\u884c\u53cc\u500d\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u8fdb\u884c\u9012\u51cf\u8fd0\u7b97 {2 -> 4 -> 3}. \u793a\u4f8b 2\uff1a 1 2 3 \u8f93\u5165\uff1aX = 5, Y = 8 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u5148\u9012\u51cf\uff0c\u518d\u53cc\u500d {5 -> 4 -> 8}. \u793a\u4f8b 3\uff1a 1 2 3 \u8f93\u5165\uff1aX = 3, Y = 10 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u5148\u53cc\u500d\uff0c\u7136\u540e\u9012\u51cf\uff0c\u518d\u53cc\u500d {3 -> 6 -> 5 -> 10}. \u793a\u4f8b 4\uff1a 1 2 3 \u8f93\u5165\uff1aX = 1024, Y = 1 \u8f93\u51fa\uff1a1023 \u89e3\u91ca\uff1a\u6267\u884c\u9012\u51cf\u8fd0\u7b97 1023 \u6b21 \u63d0\u793a\uff1a 1 2 1 <= X <= 10^9 1 <= Y <= 10^9","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"leetcode/991/readme/#2","text":"\u8003\u8651\u4eceY\u5f97\u5230X\u6bd4\u8f83\u5bb9\u6613\uff0c\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u6cd5\u3002 \u5982\u679cY\u662f\u5947\u6570\uff0c\u5148\u52a01\u518d\u96642 \u5982\u679cY\u662f\u5076\u6570\uff0c\u76f4\u63a5\u96642 \u77e5\u9053Y\u5c0f\u4e8eX\u7684\u65f6\u5019\uff0c \u518d\u6267\u884cX-Y\u6b21\u52a0\u6cd5\u64cd\u4f5c \u56e0\u4e3a\u96642\u53ef\u4ee5\u4e00\u6b21\u64cd\u4f5c\u51cf\u5c11\u4e00\u534a\uff0c\u53ef\u4ee5\u66f4\u5feb\u7684\u4f7fY\u903c\u8fd1X\u9644\u8fd1 class Solution ( object ): def brokenCalc ( self , X , Y ): \"\"\" :type X: int :type Y: int :rtype: int \"\"\" ans = 0 while Y > X : ans += 1 if Y % 2 : Y += 1 else : Y = Y // 2 return ans + X - Y","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"lintcode/link/","text":"\u94fe\u8868\u76f8\u5173\u9898\u76ee \u00b6 1. \u53cd\u8f6c\u94fe\u8868 \u00b6 /** * 1. \u5982\u679c\u662f\u7a7a\u94fe\u8868\uff0c\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de\u5934\u8282\u70b9 * 2. pre --> head, iter --> head->next, pre->next = nullptr; * pre \u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0citer\u6307\u5411\u7b2c\u4e8c\u4e2a\u8282\u70b9(\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u8bf4\u660e\u5230\u8fbe\u4e86\u94fe\u8868\u7684\u7ed3\u5c3e)\uff0c\u65ad\u5f00\u524d\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5 * 3. while(iter!=nullptr) \u8f6c\u6362pre iter\u6307\u5411\u7684\u8282\u70b9\u7684\u8fde\u63a5\u3002 * \u9996\u5148\u7528\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u53d8\u91cf\u5b58\u50a8iter\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\uff0cnode = iter->next * iter->next = pre; * pre = iter; * iter = node; */ ListNode * reverse ( ListNode * head ){ if ( ! head || ! head -> next ) return head ; ListNode * pre = head ; ListNode * iter = head -> next ; pre -> next = nullptr ; while ( iter ){ ListNode * next = iter -> next ; iter -> next = pre ; pre = iter ; iter = next ; } return pre ; } 2. \u5c40\u90e8\u7ffb\u8f6c\u94fe\u8868 \u00b6 ListNode * reverseBetween ( ListNode * head , int m , int n ) { // \u7ffb\u8f6c\u4ecem\u5230n\u4e4b\u95f4\u7684\u94fe\u8868\uff0c\u8fde\u63a5\u5728\u539f\u6765\u7684\u94fe\u8868\u4e0a if ( ! head || ! head -> next || m <= 0 || n <= 0 || m >= n ) return head ; // 1. \u589e\u52a0\u4e00\u4e2a\u5934\u8282\u70b9 ListNode * g = new ListNode ( 0 ); g -> next = head ; head = g ; ListNode * pre_start = head ; ListNode * end_next = head ; // 1. \u627e\u5230\u7b2cm\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9 m = m - 1 ; while ( pre_start && m -- ){ pre_start = pre_start -> next ; } // 2. \u627e\u5230\u7b2cn\u4e2a\u8282\u70b9\u7684\u540e\u4e00\u4e2a\u8282\u70b9 n = n + 1 ; while ( end_next && n -- ){ end_next = end_next -> next ; } if ( m > 0 || n > 0 ) return head ; // 3. \u7ffb\u8f6cm \u5230 n\u4e4b\u95f4\u7684\u94fe\u8868 ListNode * stmp = pre_start -> next ; ListNode * start = pre_start -> next ; ListNode * end = start -> next ; start -> next = nullptr ; while ( end != end_next ){ ListNode * tmp = end -> next ; end -> next = start ; start = end ; end = tmp ; } // 4. \u8fde\u63a5\u5230\u539f\u6765\u7684\u94fe\u8868\u4e0a pre_start -> next = start ; stmp -> next = end ; return head -> next ; } 3. K\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u00b6 ListNode * reverseKGroup ( ListNode * head , int k ) { // \u6bcfK\u4e2a\u8282\u70b9\u7ffb\u8f6c\u4e00\u4e0b\u94fe\u8868 if ( ! head || k <= 1 ) return head ; // \u589e\u52a0\u4e00\u4e2a\u5934\u8282\u70b9 ListNode * g = new ListNode ( 0 ); g -> next = head ; head = g ; ListNode * pre_start = head ; ListNode * end_next = head ; while ( true ){ // 1. \u627e\u5230\u7b2cK\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 int cc = k + 1 ; while ( end_next && cc -- ){ end_next = end_next -> next ; } if ( cc > 0 ) break ; // \u4e0d\u8db3K\u4e2a\u8282\u70b9\u7684\u90e8\u5206\u4e0d\u7ffb\u8f6c // 2. \u7ffb\u8f6cK\u4e2a\u8282\u70b9 ListNode * start = pre_start -> next ; ListNode * stmp = pre_start -> next ; ListNode * end = start -> next ; while ( end && end != end_next ){ ListNode * tmp = end -> next ; end -> next = start ; start = end ; end = tmp ; } //3. \u8fde\u63a5\u5230\u539f\u6765\u7684\u94fe\u8868 pre_start -> next = start ; stmp -> next = end_next ; //4. \u7ef4\u62a4pre_start, end_start\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u5faa\u73af pre_start = end_next = stmp ; } return head -> next ; } 4. \u5220\u9664\u94fe\u8868\u4e2d\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9 \u00b6 \u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u904d\u5386\u4e00\u904d\u94fe\u8868\u5c31\u80fd\u89e3\u51b3\uff1b /** * \u5220\u9664\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5012\u6570\u7b2cK+1\u4e2a\u8282\u70b9 * 1. \u8bbe\u94fe\u8868\u7684\u957f\u5ea6\u662fn, 1<=k<=n * 2. \u7528\u4e24\u4e2a\u95f4\u9694\u662fK\u7684\u6307\u9488\uff0c\u5f53\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u7684null\u5143\u7d20\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5bfc\u6570\u7b2cK+1\u4e2a\u8282\u70b9 * 3. \u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u9762\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9guard; first --> guard * 4. second = guard->next; second\u5411\u540e\u79fb\u52a8K\u6b65\uff0c\u5982\u679c\u5728K\u5927\u4e8e0\u7684\u65f6\u5019\u5faa\u73af\u7ed3\u675f\uff0c\u8868\u793a\u6ca1\u6709\u5bfc\u6570\u7b2cK\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u539f\u6765\u7684\u94fe\u8868 * \u5faa\u73af\u9000\u51fa\u7684\u65f6\u5019\uff0cfirst \u548csecond\u95f4\u9694K\u4e2a\u8282\u70b9\uff0c\u6b64\u65f6\u540c\u65f6\u79fb\u52a8first second, second\u5230\u8fbe\u94fe\u8868\u7ed3\u5c3e\u7684\u65f6\u5019\uff0cfirst\u6307\u5411\u5bfc\u6570\u7b2cK+1\u4e2a\u8282\u70b9\uff0c * 5. \u5220\u9664\u8282\u70b9\uff1a first->next = first->next->next; */ ListNode * removeNthFromEnd ( ListNode * head , int n ) { ListNode * g = new ListNode ( 0 ); g -> next = head ; head = g ; ListNode * first = g ; ListNode * second = g -> next ; while ( second && n -- ){ second = second -> next ; } if ( n > 0 ) return head -> next ; // n\u8d85\u8fc7\u4e86\u94fe\u8868\u7684\u957f\u5ea6 while ( second ){ first = first -> next ; second = second -> next ; } first -> next = first -> next -> next ; return head -> next ; } 5. \u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af \u00b6 /** * 1. head=null \u6216\u8005 head->next = null\uff0c\u80af\u5b9a\u65e0\u73af * 2. first = second = head; * 3. do{}while(); first == second\u65f6\u5019\u5faa\u73af\u7ed3\u675f\uff0c\u8bf4\u660e\u94fe\u8868\u6709\u73af\uff1b * 4. \u4e00\u65e6\u627e\u5230\u73af\uff0c\u628afirst = head, \u7136\u540e\u4e00\u6b65\u4e00\u6b65\u7684\u79fb\u52a8first second, \u518d\u6b21\u76f8\u9047\u7684\u5730\u65b9\u5c31\u662f\u73af\u7684\u5165\u53e3\u3002 */ bool hasCycle ( ListNode * head ) { if ( ! head || ! head -> next ) return false ; ListNode * first = head ; ListNode * second = head ; do { first = first -> next ; second = second -> next -> next ; } while ( first && second && second -> next && second != first ); if ( ! first || ! second || ! second -> next ) return false ; // \u627e\u5230\u5165\u53e3\u8282\u70b9 first = head ; while ( first != second ){ first = first -> next ; second = second -> next ; } return true ; } 6. \u5224\u65ad\u94fe\u8868\u662f\u5426\u76f8\u4ea4 \u00b6 \u4e24\u79cd\u601d\u8def\uff1a \u4e00\u79cd\u5148\u904d\u5386\u4e00\u904d\u4e24\u4e2a\u94fe\u8868\uff0c\u5f97\u51fa\u6bcf\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5c06\u5c3e\u90e8\u5bf9\u5176\uff0c\u5224\u65ad \u53e6\u5916\u4e00\u79cd\uff0c\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u5c3e\u90e8\u8fde\u63a5\u5230\u5176\u5934\u7ed3\u70b9\uff0c\u4ece\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u8f6c\u6362\u6210\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af\u7684\u95ee\u9898\u3002 bool hasCycle ( ListNode * head , ListNode * & enter ) { if ( ! head || ! head -> next || ! head -> next -> next ) return false ; ListNode * first = head ; ListNode * second = head ; do { first = first -> next ; second = second -> next -> next ; } while ( first && second && second -> next && first != second ); if ( ! first || ! second || ! second -> next ) return false ; // \u627e\u5230\u5165\u53e3\u8282\u70b9 first = head ; while ( first != second ){ first = first -> next ; second = second -> next ; } enter = first ; return true ; } ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { if ( ! headA || ! headB ) return nullptr ; ListNode * iterA = headA ; while ( iterA -> next != nullptr ){ iterA = iterA -> next ; } iterA -> next = headA ; ListNode * enter ; hasCycle ( headB , enter ); return enter ; } 7. \u5408\u5e76K\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u00b6 \u7b2c\u4e00\u65b9\u6cd5\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58K\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u6bcf\u6b21\u90fd\u6bd4\u8f83K\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u9009\u51fa\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u94fe\u63a5\u5230\u65b0\u7684\u94fe\u8868\u7684\u7ed3\u5c3e\uff0c\u7136\u540e\u8be5\u94fe\u8868\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u4e00\u4f4d\u3002 \u5229\u7528\u4e0a\u9762\u7684\u601d\u8def\uff0c\u6bcf\u6b21\u90fd\u8981\u4eceK\u4e2a\u5143\u7d20\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aK\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u5806\u5b9e\u73b0\uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5229\u7528\u5f52\u5e76\u7684\u601d\u60f3\uff0c\u4e24\u4e24\u5408\u5e76\uff1b // \u7b2c\u4e00\u79cd\u65b9\u6cd5 // \u6bcf\u6b21\u627e\u51fa\u6700\u5c0f\u503c\u7684\u65b9\u5f0f ListNode * mergeKLists ( vector < ListNode *> & lists ) { // write your code here ListNode * guard = new ListNode ( 0 ); ListNode * head = guard ; // current \u6307\u5411K\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488 vector < ListNode *> currents ; for ( auto link : lists ){ if ( link != nullptr ) currents . push_back ( link ); } int index = 0 ; while ( ! currents . empty ()){ int minV = INT32_MAX ; for ( int i = 0 ; i < currents . size (); ++ i ){ // \u53bb\u6389\u5df2\u7ecf\u4e3a\u7a7a\u7684\u94fe\u8868 if ( currents [ i ] == nullptr ){ currents . erase ( currents . begin () + i ); } if ( currents [ i ] -> val < minV ){ index = i ; minV = currents [ i ] -> val ; } } guard -> next = currents [ index ]; guard = guard -> next ; if ( currents [ index ] -> next != nullptr ) currents [ index ] = currents [ index ] -> next ; else currents . erase ( currents . begin () + index ); } return head -> next ; } \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c \u6700\u5c0f\u5806 // \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c \u6700\u5c0f\u5806 ListNode * mergeKLists ( vector < ListNode *> & lists ) { priority_queue < ListNode * , vector < ListNode *> , bigger > minHeap ; if ( lists . empty ()) return nullptr ; for ( int i = 0 ; i < lists . size (); i ++ ){ if ( lists [ i ]) minHeap . push ( lists [ i ]); } ListNode * head = nullptr ; ListNode * iter = nullptr ; while ( ! minHeap . empty ()){ if ( head == nullptr ){ head = minHeap . top (); iter = head ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } else { iter -> next = minHeap . top (); iter = iter -> next ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } } return head ; } \u7b2c\u4e09\u79cd\u65b9\u6cd5,\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u5f0f // \u7b2c\u4e09\u79cd\u65b9\u6cd5,\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u5f0f // \u901a\u8fc7\u8c03\u7528\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868\u7684\u65b9\u5f0f\u5b9e\u73b0 ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { // write your code here ListNode * guard = new ListNode ( 0 ); ListNode * head = guard ; while ( l1 && l2 ){ if ( l1 -> val > l2 -> val ){ guard -> next = l2 ; guard = guard -> next ; l2 = l2 -> next ; } else { guard -> next = l1 ; guard = guard -> next ; l1 = l1 -> next ; } } if ( l1 ){ guard -> next = l1 ; } if ( l2 ){ guard -> next = l2 ; } return head -> next ; } ListNode * mergeKLists ( const vector < ListNode *> & lists ) { if ( lists . empty ()) return nullptr ; if ( lists . size () == 1 ) return lists [ 0 ]; if ( lists . size () == 2 ) return mergeTwoLists ( lists [ 0 ], lists [ 1 ]); size_t n = lists . size (); vector < ListNode *> left (( n + 1 ) / 2 ), right ( n - ( n + 1 ) / 2 ); copy ( lists . begin (), lists . begin () + ( n + 1 ) / 2 , left . begin ()); copy ( lists . begin () + ( n + 1 ) / 2 , lists . end (), right . begin ()); return mergeTwoLists ( mergeKLists ( left ), mergeKLists ( right )); } \u4e0a\u9762\u91c7\u7528\u7684\u662f\u81ea\u9876\u5411\u4e0b\u7684\u9012\u5f52\u5f52\u5e76\u7684\u65b9\u5f0f\uff0c\u4e0b\u9762\u91c7\u7528\u975e\u9012\u5f52\u7684\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0 // \u7b80\u5355\u7684\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7684\u5f52\u5e76\u6c42\u548c // \u81ea\u5e95\u5411\u4e0a\u5f52\u5e76 int solve ( vector < int > & v ){ size_t end = v . size () - 1 ; if ( end < 0 ) throw \"\" ; if ( end == 0 ) return v [ 0 ]; while ( end > 0 ){ int index = 0 ; for ( int i = 0 ; i <= end ; i += 2 ){ if ( i + 1 <= end ){ v [ index ] = add ( v [ i ], v [ i + 1 ]); index ++ ; } else { v [ index ] = v [ i ]; index ++ ; } } end = index - 1 ; } return v [ 0 ]; } ListNode * mergeKLists ( vector < ListNode *> & lists ) { if ( lists . empty ()) return nullptr ; if ( lists . size () == 1 ) return lists [ 0 ]; if ( lists . size () == 2 ) return mergeTwoLists ( lists [ 0 ], lists [ 1 ]); size_t end = lists . size () - 1 ; while ( end > 0 ){ int index = 0 ; for ( int i = 0 ; i <= end ; i += 2 ){ if ( i + 1 <= end ){ lists [ index ] = mergeTwoLists ( lists [ i ], lists [ i + 1 ]); index ++ ; } else { lists [ index ] = lists [ i ]; index ++ ; } } end = index - 1 ; } return lists [ 0 ]; } 8. \u5e26\u968f\u673a\u6307\u9488\u94fe\u8868\u7684\u590d\u5236|\u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u00b6 \u4f7f\u7528O\uff081\uff09\u7684\u989d\u5916\u7a7a\u95f4\u5b8c\u6210\u94fe\u8868\u7684\u590d\u5236\uff0c\u57fa\u672c\u601d\u8def\u662f\u628a\u62f7\u8d1d\u7684\u65b0\u8282\u70b9\u94fe\u63a5\u5728\u539f\u6765\u8282\u70b9\u7684\u540e\u9762\uff0c\u8bbe\u7f6e\u5b8c\u968f\u673a\u6307\u9488\u4e4b\u540e\u518d\u65ad\u5f00\u4e0e\u539f\u6765\u65e7\u94fe\u8868\u7684\u8fde\u63a5\u3002 RandomListNode * copyRandomList ( RandomListNode * head ) { // write your code here if ( ! head ) return head ; RandomListNode * iter = head ; // 1. \u590d\u5236\u6bcf\u4e2a\u8282\u70b9\u8fde\u63a5\u5728\u539f\u6765\u8282\u70b9\u7684\u540e\u9762 while ( iter ){ RandomListNode * node = new RandomListNode ( iter -> label ); node -> next = iter -> next ; iter -> next = node ; iter = node -> next ; } // 2. \u8bbe\u7f6e\u968f\u673a\u6307\u9488 RandomListNode * newHead = head -> next ; head -> next -> random = head -> random == nullptr ? nullptr : head -> random -> next ; iter = newHead -> next ; while ( iter ){ RandomListNode * next = iter -> next -> next ; iter -> next -> random = iter -> random == nullptr ? nullptr : iter -> random -> next ; iter = next ; } // 3. \u65ad\u5f00\u548c\u65e7\u94fe\u8868\u7684\u8fde\u63a5 iter = newHead ; while ( iter -> next ){ iter -> next = iter -> next -> next ; iter = iter -> next ; } return newHead ; } 9. \u5220\u9664\u94fe\u8868\u5143\u7d20 \u00b6 \u5220\u9664\u94fe\u8868\u8282\u70b9\u4e3a\u67d0\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u3002(\u67d0\u4e2a\u503c\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u4e5f\u53ef\u80fd\u5168\u90e8\u90fd\u662f) ListNode * removeElements ( ListNode * head , int val ) { // Write your code here ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; ListNode * pre = guard ; ListNode * tmp = guard -> next ; while ( tmp ){ if ( tmp -> val == val ){ pre -> next = tmp -> next ; tmp = tmp -> next ; } else { pre = tmp ; tmp = tmp -> next ; } } return head -> next ; } \u4e0d\u4f7f\u7528\u54e8\u5175\u7684\u65b9\u6cd5\uff0c\u5728\u8981\u6c42\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002 ListNode * removeElements ( ListNode * head , int val ) { // Write your code here // \u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503cval\u7684\u6240\u6709\u8282\u70b9 while ( head && head -> val == val ){ head = head -> next ; } if ( head == nullptr ) return head ; ListNode * pre = head ; ListNode * c = head -> next ; // \u5934\u7ed3\u70b9\u5df2\u7ecf\u4e0d\u53ef\u80fd==val\u4e86\uff0c\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u5220\u9664\u4e86 while ( c ){ if ( c -> val == val ){ pre -> next = c -> next ; c -> next = nullptr ; c = pre -> next ; } else { pre = c ; c = c -> next ; } } return head ; } 10. \u5728O(1)\u65f6\u95f4\u590d\u6742\u5ea6\u5220\u9664\u94fe\u8868\u8282\u70b9 \u00b6 \u601d\u8def\uff1a\u7ed9\u51fa\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u662f\u4e0d\u53ef\u80fd\u5728O(1)\u7684\u65f6\u95f4\u5185\u5220\u9664\u8be5\u8282\u70b9\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5fc5\u987b\u627e\u5230\u5b83\u524d\u9762\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ea\u80fd\u4ece\u5934\u904d\u5386(\u5728\u6ca1\u6709\u6307\u5411\u524d\u9762\u7684\u6307\u9488\u7684\u60c5\u51b5\u4e0b)\uff0c\u590d\u6742\u5ea6\u4e0d\u53ef\u80fd\u662fO(1). \u4f46\u662f\u53ef\u4ee5\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\u7684\u503c\u8d4b\u7ed9\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u518d\u5220\u9664\u8981\u5220\u9664\u7684\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\uff0c\u8fd9\u6837'\u770b\u8d77\u6765'\u597d\u50cf\u5220\u9664\u4e86\u5f53\u524d\u7684\u8282\u70b9\u3002\u5b9e\u9645\u4e0a\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u771f\u6b63\u7684\u53d8\u5316\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\u53d8\u6210\u4e86\u5b83\u540e\u9762\u8282\u70b9\u7684\u503c. void deleteNode ( ListNode * node ) { // write your code here node -> val = node -> next -> val ; node -> next = node -> next -> next ; } 11. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u6bcf\u4e2a\u91cd\u590d\u5143\u7d20\u53ea\u7559\u4e0b\u4e00\u4e2a\u3002 \u9047\u5230\u4e0d\u540c\u7684\u5143\u7d20\u7684\u65f6\u5019\u518d\u5220\u9664\u3002 ListNode * deleteDuplicates ( ListNode * head ) { // write your code here if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * pre = head ; ListNode * current = head -> next ; while ( current ){ if ( pre -> val == current -> val ){ current = current -> next ; } else { pre -> next = current ; pre = current ; current = current -> next ; } } // \u94fe\u8868\u7ed3\u5c3e\u6709\u91cd\u590d\u5143\u7d20\u7684\u60c5\u51b5 pre -> next = current ; return head ; } \u4e00\u65e6\u9047\u5230\u76f8\u540c\u7684\u5143\u7d20\u5c31\u5220\u9664\u3002 ListNode * deleteDuplicates ( ListNode * head ) { // \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u6bcf\u4e2a\u5143\u7d20\u53ea\u7559\u4e0b\u4e00\u4e2a\u3002 if ( head == nullptr || head -> next == nullptr ) return head ; if ( head -> next -> next == nullptr && head -> val == head -> next -> val ) return head -> next ; ListNode * pre = head ; ListNode * c = head -> next ; while ( c ){ if ( pre -> val == c -> val ){ pre -> next = c -> next ; c = c -> next ; } else { pre = pre -> next ; c = c -> next ; } } return head ; } 12. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d202 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 ListNode * deleteDuplicates ( ListNode * head ) { //\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; ListNode * pre = guard ; ListNode * start = guard -> next ; ListNode * end = guard -> next ; while ( end ){ while ( end && start -> val == end -> val ){ end = end -> next ; } if ( start -> next == end ){ pre = start ; start = end ; } else { pre -> next = end ; start = end ; } } return head -> next ; } \u4e0d\u4f7f\u7528\u54e8\u5175\u8282\u70b9\u7684\u65b9\u6848 ListNode * deleteDuplicates ( ListNode * head ) { //\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 ListNode * pre = head ; ListNode * start = head ; ListNode * end = head ; while ( end ){ while ( end && start -> val == end -> val ){ end = end -> next ; } if ( start -> next == end ){ pre = start ; start = end ; } else { if ( pre == start && pre == head ){ head = end ; pre = end ; } else pre -> next = end ; start = end ; } } return head ; } 13. \u5220\u9664\u5355\u5411\u94fe\u8868\u4e2d\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9 \u00b6 \u4f8b\u5982\uff1a head-->1-->2-->3-->4-->5-->6 K=2 \u8fd4\u56de\uff1a head-->1-->2-->3-->4-->6 \u601d\u8def\u4e00\uff1a \u5148\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u7edf\u8ba1\u94fe\u8868\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u77e5\u9053\u5012\u6570\u7b2cK\u4e2a\u5143\u7d20\u5c31\u662f \u6b63\u6570\u7b2cn-k+1\u4e2a\u5143\u7d20\uff0c\u4ecehead\u5f00\u59cb\u79fb\u52a8\u6307\u9488\uff0c\u79fb\u52a8n-k\u6b21\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u3002 \u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u628a\u539f\u6765\u6307\u5411\u8fd9\u4e2a\u5143\u7d20\u7684\u6307\u9488\u6307\u5411\u5b83\u540e\u9762\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684 \u64cd\u4f5c\u5c31\u662f\u4ecehead\u5f00\u59cb\uff0c\u79fb\u52a8n-k-1\u6b21\uff0c\u627e\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\u524d\u9762\u7684\u8282\u70b9a,\u7136\u540e\u6267\u884ca->next = a->next->next ListNode * removeNthFromEnd ( ListNode * head , int n ) { // write your code here int len = 0 ; ListNode * tmp = head ; while ( tmp ){ len ++ ; tmp = tmp -> next ; } if ( len < n ) return nullptr ; if ( len == n ) return head -> next ; tmp = head ; int count = len + 1 - n ; // \u6b63\u6570\u7b2ccount\u4e2a\u8282\u70b9 count = count - 2 ; while ( count -- ){ tmp = tmp -> next ; } tmp -> next = tmp -> next -> next ; return head ; } \u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u4e24\u4e2a\u95f4\u9694K\u4e2a\u5143\u7d20\u7684\u6307\u9488\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u5f53\u524d\u9762\u7684\u6307\u9488\u8d70\u5230\u5c3e\u8282\u70b9\u7684\u65f6\u5019\uff0c\u540e\u9762\u7684\u8282\u70b9\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9\u3002 ListNode * removeNthFromEnd ( ListNode * head , int n ) { // write your code here if ( head == nullptr ) return nullptr ; ListNode * first = head ; ListNode * second = head ; int count = n + 1 ; while ( first && count -- ){ first = first -> next ; } if ( first == nullptr ) return head -> next ; // \u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9 if ( count > 0 ) return nullptr ; // \u6ca1\u6709\u5bfc\u6570\u7b2cn\u4e2a\u8282\u70b9 while ( first ){ first = first -> next ; second = second -> next ; } second -> next = second -> next -> next ; return head ; } 14. \u67e5\u627e\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9 \u00b6 \u601d\u8def\uff1a \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u6307\u5411\u5934\u90e8\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e24\u6b65\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e00\u6b65\uff0c\u8fd9\u6837\u5728\u5feb\u7684\u6307\u9488\u8d70\u5230\u5c3d\u5934\u7684\u65f6\u5019\uff0c\u6162\u7684\u6307\u9488\u6070\u597d\u8d70\u5230\u4e86\u4e2d\u90e8\u3002 /** * \u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u5e76\u8fd4\u56de * @param head * @return */ ListNode * findMiddle ( ListNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * first = head , * second = head ; while ( second -> next && second -> next -> next ){ first = first -> next ; second = second -> next -> next ; } return first ; } 15. \u63d2\u5165\u6392\u5e8f\uff08\u4f7f\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff09 \u00b6 ListNode * insertionSortList ( ListNode * head ) { // \u4f7f\u7528\u94fe\u8868\u5b9e\u73b0\u63d2\u5165\u6392\u5e8f if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * guard = new ListNode ( INT32_MIN ); guard -> next = head ; head = guard ; ListNode * sorted = guard ; ListNode * ends = guard -> next ; ListNode * unsorted = ends -> next ; ends -> next = nullptr ; // \u94fe\u8868\u65ad\u5f00 while ( unsorted ){ // \u627e\u5230\u63d2\u5165\u7684\u4f4d\u7f6e while ( sorted != ends ){ if ( unsorted -> val >= sorted -> val && unsorted -> val < sorted -> next -> val ){ // \u63d2\u5165\u5230iter1\u540e\u9762 ListNode * tmp = unsorted ; unsorted = unsorted -> next ; tmp -> next = sorted -> next ; sorted -> next = tmp ; sorted = guard ; break ; } sorted = sorted -> next ; } if ( sorted == ends && unsorted -> val >= ends -> val ){ ends -> next = unsorted ; unsorted = unsorted -> next ; ends = ends -> next ; ends -> next = nullptr ; sorted = guard ; } } return head -> next ; } 16. \u5feb\u901f\u6392\u5e8f(\u5355\u94fe\u8868\u5b9e\u73b0) \u00b6 \u5feb\u901f\u6392\u5e8f\u4e00\u822c\u7684\u601d\u60f3\u662f\u9996\u5c3e\u4e24\u4e2a\u6307\u9488\u76f8\u5411\u8fd0\u52a8\uff0c\u4f46\u662f\u5355\u94fe\u8868\u6ca1\u6709\u5411\u524d\u7684\u6307\u9488\uff0c\u8fd9\u8981\u6c42\u6211\u4eec\u6362\u4e00\u79cd\u601d\u8def\u3002\u5982\u4f55\u4ece\u524d\u5f80\u540e\u904d\u5386\u627e\u5230\u652f\u70b9\u7684\u4f4d\u7f6e\u3002\u5047\u8bbe\u652f\u70b9\u7684\u503c\u662fvalue. \u6211\u4eec\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8evalue\u7684\u503c\u90fd\u5728\u524d\u9762\uff0c\u6240\u6709\u5927\u4e8evalue\u7684\u503c\u90fd\u5728\u540e\u9762\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u627e\u5230\u7684value\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u3002 // \u5355\u94fe\u8868\u5b9e\u73b0\u5feb\u6392 17. \u4ea4\u6362\u94fe\u8868\u5f53\u4e2d\u4e24\u4e2a\u8282\u70b9 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u4ee5\u53ca\u4e24\u4e2a\u6743\u503cv1\u548cv2\uff0c\u4ea4\u6362\u94fe\u8868\u4e2d\u6743\u503c\u4e3av1\u548cv2\u7684\u8fd9\u4e24\u4e2a\u8282\u70b9\u3002\u4fdd\u8bc1\u94fe\u8868\u4e2d\u8282\u70b9\u6743\u503c\u5404\u4e0d\u76f8\u540c\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u8282\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u4e5f\u4e0d\u7528\u505a\u3002 ListNode * swapNodes ( ListNode * head , int v1 , int v2 ) { // Write your code here if ( head == nullptr ) return head ; // add a guard ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; //search the value ListNode * pre_v1 = nullptr ; ListNode * pre_v2 = nullptr ; ListNode * pre_tmp = guard ; ListNode * tmp = pre_tmp -> next ; while ( tmp ){ if ( tmp -> val == v1 ){ pre_v1 = pre_tmp ; } if ( tmp -> val == v2 ){ pre_v2 = pre_tmp ; } pre_tmp = tmp ; tmp = tmp -> next ; } // not find v1 or v2 if ( pre_v1 == nullptr || pre_v2 == nullptr ){ return head -> next ; } // swap the two nodes ListNode * v1s = pre_v1 -> next ; ListNode * v2s = pre_v2 -> next ; ListNode * next_v1 = v1s -> next ; ListNode * next_v2 = v2s -> next ; if ( pre_v1 == v2s ){ pre_v2 -> next = v1s ; v1s -> next = v2s ; v2s -> next = next_v1 ; } else if ( pre_v2 == v1s ){ pre_v1 -> next = v2s ; v2s -> next = v1s ; v1s -> next = next_v2 ; } else { v1s -> next = next_v2 ; v2s -> next = next_v1 ; pre_v1 -> next = v2s ; pre_v2 -> next = v1s ; } return head -> next ; } 18. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u00b6 \u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u7684\u8282\u70b9\uff0c\u7136\u540e\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 ListNode * swapPairs ( ListNode * head ) { // Write your code here if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; ListNode * pres1 = guard ; ListNode * s1 = guard -> next ; ListNode * s2 = guard -> next -> next ; while ( s1 != nullptr && s2 != nullptr ){ pres1 -> next = s2 ; s1 -> next = s2 -> next ; s2 -> next = s1 ; if ( s1 -> next == nullptr || s1 -> next -> next == nullptr ){ return head -> next ; } else { pres1 = s1 ; s1 = s1 -> next ; s2 = s2 -> next -> next -> next ; } } return head -> next ; } 19. \u65cb\u8f6c\u94fe\u8868 \u00b6 ListNode * rotateRight ( ListNode * head , int k ) { //\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8k\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2dk\u662f\u4e00\u4e2a\u975e\u8d1f\u6570 if ( head == nullptr || head -> next == nullptr || k <= 0 ) return head ; ListNode * end = head ; int len = 1 ; while ( end -> next ){ end = end -> next ; len ++ ; } k = k % len ; if ( k == 0 ) return head ; int index = ( len - 1 - k ) % len ; ListNode * tmp = head ; while ( tmp && index -- ){ tmp = tmp -> next ; } if ( index == - 1 ){ end -> next = head ; head = tmp -> next ; tmp -> next = nullptr ; } return head ; } 20. \u9996\u5c3e\u4ea4\u9519\u91cd\u6392\u94fe\u8868 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868L: L0\u2192L1\u2192\u2026\u2192Ln-1\u2192Ln,\u91cd\u65b0\u6392\u5217\u540e\u4e3a\uff1aL0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2192\u2026\u5fc5\u987b\u5728\u4e0d\u6539\u53d8\u8282\u70b9\u503c\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u539f\u5730\u64cd\u4f5c\u3002 /** * \u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u5e76\u8fd4\u56de * @param head * @return */ ListNode * findMiddle ( ListNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * first = head , * second = head ; while ( second -> next && second -> next -> next ){ first = first -> next ; second = second -> next -> next ; } return first ; } /** * \u53cd\u8f6c\u94fe\u8868 * @param head * @return */ ListNode * reverse ( ListNode * head ) { // write your code here if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * iter = head ; ListNode * next_iter = head -> next ; iter -> next = nullptr ; while ( next_iter ){ ListNode * tmp = next_iter -> next ; next_iter -> next = iter ; iter = next_iter ; next_iter = tmp ; } head = iter ; return head ; } /** * \u4ea4\u53c9\u5408\u5e76\u4e24\u4e2a\u94fe\u8868 * @param l1 * @param l2 * @return */ ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { // \u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u94fe\u8868\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u5c31\u662f\u7ed3\u679c if ( l1 == nullptr ) return l2 ; if ( l2 == nullptr ) return l1 ; ListNode * head = l1 ; l1 = l1 -> next ; ListNode * iter = head ; bool odd = false ; while ( l1 != nullptr || l2 != nullptr ){ if ( ! odd ){ if ( l2 ){ iter -> next = l2 ; l2 = l2 -> next ; iter = iter -> next ; } } if ( odd ){ if ( l1 ){ iter -> next = l1 ; l1 = l1 -> next ; iter = iter -> next ; } } odd = ! odd ; } return head ; } ListNode * reorderList ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; // \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868L: L0\u2192L1\u2192\u2026\u2192Ln-1\u2192Ln,\u91cd\u65b0\u6392\u5217\u540e\u4e3a\uff1aL0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2192\u2026\u5fc5\u987b\u5728\u4e0d\u6539\u53d8\u8282\u70b9\u503c\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u539f\u5730\u64cd\u4f5c // \u627e\u5230\u4e2d\u95f4\u8282\u70b9\uff0c \u53cd\u8f6c\u540e\u534a\u6bb5\uff0c\u7136\u540e\u4ea4\u53c9\u62fc\u63a5\u8d77\u6765\uff0c\u53ef\u4ee5\u786e\u4fdd\u4e0d\u9002\u7528\u989d\u5916\u7684\u7a7a\u95f4 ListNode * middle = findMiddle ( head ); ListNode * head2 = reverse ( middle -> next ); middle -> next = nullptr ; head = mergeTwoLists ( head , head2 ); return head ; } 21. \u56de\u6587\u94fe\u8868 \u00b6 \u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u4e2d\u7684\u503c\u662f\u5426\u662f\u56de\u6587 \u627e\u5230\u4e2d\u95f4\u8282\u70b9\uff0c\u628a\u540e\u9762\u7684\u94fe\u8868\u53cd\u8f6c\uff0c\u7136\u540e\u4e0e\u524d\u9762\u7684\u9010\u4e2a\u8282\u70b9\u6bd4\u8f83\uff0c\u5982\u679c\u5b8c\u5168\u4e00\u6837\u6216\u8005\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e0d\u4e00\u6837\uff0c\u5219\u662f\u56de\u6587\u7684\u3002 bool isPalindrome ( ListNode * head ) { // Write your code here if ( head == nullptr ) return true ; ListNode * middle = findMiddle ( head ); ListNode * head2 = reverse ( middle -> next ); middle -> next = nullptr ; ListNode * iter1 = head , * iter2 = head2 ; while ( iter1 && iter2 ){ if ( iter1 -> val != iter2 -> val ) return false ; iter1 = iter1 -> next ; iter2 = iter2 -> next ; } if ( iter1 && iter1 -> next == nullptr ){ return true ; } if ( iter2 && iter2 -> next == nullptr ){ return true ; } if ( iter1 == nullptr && iter2 == nullptr ){ return true ; } return false ; } 22. \u94fe\u8868\u6c42\u548c \u00b6 \u4f60\u6709\u4e24\u4e2a\u7528\u94fe\u8868\u4ee3\u8868\u7684\u6574\u6570\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u3002\u6570\u5b57\u5b58\u50a8\u6309\u7167\u5728\u539f\u6765\u6574\u6570\u4e2d\u76f8\u53cd\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u7b2c\u4e00\u4e2a\u6570\u5b57\u4f4d\u4e8e\u94fe\u8868\u7684\u5f00\u5934\u3002\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u5c06\u4e24\u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u7528\u94fe\u8868\u5f62\u5f0f\u8fd4\u56de\u548c\u3002 ListNode * addLists ( ListNode * l1 , ListNode * l2 ) { if ( l1 == nullptr ) return l2 ; if ( l2 == nullptr ) return l1 ; // \u94fe\u8868\u6c42\u548c int carry = 0 ; ListNode * head = new ListNode ( 0 ); ListNode * iter = head ; int number ; while ( l1 != nullptr && l2 != nullptr ){ number = ( l1 -> val + l2 -> val + carry ) % 10 ; carry = ( l1 -> val + l2 -> val + carry ) / 10 ; ListNode * node = new ListNode ( number ); iter -> next = node ; iter = iter -> next ; l1 = l1 -> next ; l2 = l2 -> next ; } while ( l1 ){ number = ( l1 -> val + carry ) % 10 ; carry = ( l1 -> val + carry ) / 10 ; ListNode * node = new ListNode ( number ); iter -> next = node ; iter = iter -> next ; l1 = l1 -> next ; } while ( l2 ){ number = ( l2 -> val + carry ) % 10 ; carry = ( l2 -> val + carry ) / 10 ; ListNode * node = new ListNode ( number ); iter -> next = node ; iter = iter -> next ; l2 = l2 -> next ; } if ( carry ){ ListNode * node = new ListNode ( carry ); iter -> next = node ; } return head -> next ; } 23. \u94fe\u8868\u6c42\u548c II \u00b6 \u5047\u5b9a\u7528\u4e00\u4e2a\u94fe\u8868\u8868\u793a\u4e24\u4e2a\u6570\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ec5\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u3002\u5047\u8bbe\u8fd9\u4e24\u4e2a\u6570\u7684\u6570\u5b57\u987a\u5e8f\u6392\u5217\uff0c\u8bf7\u8bbe\u8ba1\u4e00\u79cd\u65b9\u6cd5\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u5c06\u5176\u7ed3\u679c\u8868\u73b0\u4e3a\u94fe\u8868\u7684\u5f62\u5f0f\u3002 \u5148\u7ffb\u8f6c\u94fe\u8868\uff0c\u6c42\u548c\uff0c\u5728\u7ffb\u8f6c\u56de\u53bb\u3002 ListNode * addLists2 ( ListNode * l1 , ListNode * l2 ) { return reverse ( addLists ( reverse ( l1 ), reverse ( l2 ))); }","title":"\u94fe\u8868\u76f8\u5173\u9898\u76ee"},{"location":"lintcode/link/#_1","text":"","title":"\u94fe\u8868\u76f8\u5173\u9898\u76ee"},{"location":"lintcode/link/#1","text":"/** * 1. \u5982\u679c\u662f\u7a7a\u94fe\u8868\uff0c\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de\u5934\u8282\u70b9 * 2. pre --> head, iter --> head->next, pre->next = nullptr; * pre \u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0citer\u6307\u5411\u7b2c\u4e8c\u4e2a\u8282\u70b9(\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u8bf4\u660e\u5230\u8fbe\u4e86\u94fe\u8868\u7684\u7ed3\u5c3e)\uff0c\u65ad\u5f00\u524d\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5 * 3. while(iter!=nullptr) \u8f6c\u6362pre iter\u6307\u5411\u7684\u8282\u70b9\u7684\u8fde\u63a5\u3002 * \u9996\u5148\u7528\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u53d8\u91cf\u5b58\u50a8iter\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\uff0cnode = iter->next * iter->next = pre; * pre = iter; * iter = node; */ ListNode * reverse ( ListNode * head ){ if ( ! head || ! head -> next ) return head ; ListNode * pre = head ; ListNode * iter = head -> next ; pre -> next = nullptr ; while ( iter ){ ListNode * next = iter -> next ; iter -> next = pre ; pre = iter ; iter = next ; } return pre ; }","title":"1. \u53cd\u8f6c\u94fe\u8868"},{"location":"lintcode/link/#2","text":"ListNode * reverseBetween ( ListNode * head , int m , int n ) { // \u7ffb\u8f6c\u4ecem\u5230n\u4e4b\u95f4\u7684\u94fe\u8868\uff0c\u8fde\u63a5\u5728\u539f\u6765\u7684\u94fe\u8868\u4e0a if ( ! head || ! head -> next || m <= 0 || n <= 0 || m >= n ) return head ; // 1. \u589e\u52a0\u4e00\u4e2a\u5934\u8282\u70b9 ListNode * g = new ListNode ( 0 ); g -> next = head ; head = g ; ListNode * pre_start = head ; ListNode * end_next = head ; // 1. \u627e\u5230\u7b2cm\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9 m = m - 1 ; while ( pre_start && m -- ){ pre_start = pre_start -> next ; } // 2. \u627e\u5230\u7b2cn\u4e2a\u8282\u70b9\u7684\u540e\u4e00\u4e2a\u8282\u70b9 n = n + 1 ; while ( end_next && n -- ){ end_next = end_next -> next ; } if ( m > 0 || n > 0 ) return head ; // 3. \u7ffb\u8f6cm \u5230 n\u4e4b\u95f4\u7684\u94fe\u8868 ListNode * stmp = pre_start -> next ; ListNode * start = pre_start -> next ; ListNode * end = start -> next ; start -> next = nullptr ; while ( end != end_next ){ ListNode * tmp = end -> next ; end -> next = start ; start = end ; end = tmp ; } // 4. \u8fde\u63a5\u5230\u539f\u6765\u7684\u94fe\u8868\u4e0a pre_start -> next = start ; stmp -> next = end ; return head -> next ; }","title":"2. \u5c40\u90e8\u7ffb\u8f6c\u94fe\u8868"},{"location":"lintcode/link/#3-k","text":"ListNode * reverseKGroup ( ListNode * head , int k ) { // \u6bcfK\u4e2a\u8282\u70b9\u7ffb\u8f6c\u4e00\u4e0b\u94fe\u8868 if ( ! head || k <= 1 ) return head ; // \u589e\u52a0\u4e00\u4e2a\u5934\u8282\u70b9 ListNode * g = new ListNode ( 0 ); g -> next = head ; head = g ; ListNode * pre_start = head ; ListNode * end_next = head ; while ( true ){ // 1. \u627e\u5230\u7b2cK\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 int cc = k + 1 ; while ( end_next && cc -- ){ end_next = end_next -> next ; } if ( cc > 0 ) break ; // \u4e0d\u8db3K\u4e2a\u8282\u70b9\u7684\u90e8\u5206\u4e0d\u7ffb\u8f6c // 2. \u7ffb\u8f6cK\u4e2a\u8282\u70b9 ListNode * start = pre_start -> next ; ListNode * stmp = pre_start -> next ; ListNode * end = start -> next ; while ( end && end != end_next ){ ListNode * tmp = end -> next ; end -> next = start ; start = end ; end = tmp ; } //3. \u8fde\u63a5\u5230\u539f\u6765\u7684\u94fe\u8868 pre_start -> next = start ; stmp -> next = end_next ; //4. \u7ef4\u62a4pre_start, end_start\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u5faa\u73af pre_start = end_next = stmp ; } return head -> next ; }","title":"3. K\u7ec4\u7ffb\u8f6c\u94fe\u8868"},{"location":"lintcode/link/#4-n","text":"\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u904d\u5386\u4e00\u904d\u94fe\u8868\u5c31\u80fd\u89e3\u51b3\uff1b /** * \u5220\u9664\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5012\u6570\u7b2cK+1\u4e2a\u8282\u70b9 * 1. \u8bbe\u94fe\u8868\u7684\u957f\u5ea6\u662fn, 1<=k<=n * 2. \u7528\u4e24\u4e2a\u95f4\u9694\u662fK\u7684\u6307\u9488\uff0c\u5f53\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u7684null\u5143\u7d20\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5bfc\u6570\u7b2cK+1\u4e2a\u8282\u70b9 * 3. \u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u9762\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9guard; first --> guard * 4. second = guard->next; second\u5411\u540e\u79fb\u52a8K\u6b65\uff0c\u5982\u679c\u5728K\u5927\u4e8e0\u7684\u65f6\u5019\u5faa\u73af\u7ed3\u675f\uff0c\u8868\u793a\u6ca1\u6709\u5bfc\u6570\u7b2cK\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u539f\u6765\u7684\u94fe\u8868 * \u5faa\u73af\u9000\u51fa\u7684\u65f6\u5019\uff0cfirst \u548csecond\u95f4\u9694K\u4e2a\u8282\u70b9\uff0c\u6b64\u65f6\u540c\u65f6\u79fb\u52a8first second, second\u5230\u8fbe\u94fe\u8868\u7ed3\u5c3e\u7684\u65f6\u5019\uff0cfirst\u6307\u5411\u5bfc\u6570\u7b2cK+1\u4e2a\u8282\u70b9\uff0c * 5. \u5220\u9664\u8282\u70b9\uff1a first->next = first->next->next; */ ListNode * removeNthFromEnd ( ListNode * head , int n ) { ListNode * g = new ListNode ( 0 ); g -> next = head ; head = g ; ListNode * first = g ; ListNode * second = g -> next ; while ( second && n -- ){ second = second -> next ; } if ( n > 0 ) return head -> next ; // n\u8d85\u8fc7\u4e86\u94fe\u8868\u7684\u957f\u5ea6 while ( second ){ first = first -> next ; second = second -> next ; } first -> next = first -> next -> next ; return head -> next ; }","title":"4. \u5220\u9664\u94fe\u8868\u4e2d\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9"},{"location":"lintcode/link/#5","text":"/** * 1. head=null \u6216\u8005 head->next = null\uff0c\u80af\u5b9a\u65e0\u73af * 2. first = second = head; * 3. do{}while(); first == second\u65f6\u5019\u5faa\u73af\u7ed3\u675f\uff0c\u8bf4\u660e\u94fe\u8868\u6709\u73af\uff1b * 4. \u4e00\u65e6\u627e\u5230\u73af\uff0c\u628afirst = head, \u7136\u540e\u4e00\u6b65\u4e00\u6b65\u7684\u79fb\u52a8first second, \u518d\u6b21\u76f8\u9047\u7684\u5730\u65b9\u5c31\u662f\u73af\u7684\u5165\u53e3\u3002 */ bool hasCycle ( ListNode * head ) { if ( ! head || ! head -> next ) return false ; ListNode * first = head ; ListNode * second = head ; do { first = first -> next ; second = second -> next -> next ; } while ( first && second && second -> next && second != first ); if ( ! first || ! second || ! second -> next ) return false ; // \u627e\u5230\u5165\u53e3\u8282\u70b9 first = head ; while ( first != second ){ first = first -> next ; second = second -> next ; } return true ; }","title":"5. \u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af"},{"location":"lintcode/link/#6","text":"\u4e24\u79cd\u601d\u8def\uff1a \u4e00\u79cd\u5148\u904d\u5386\u4e00\u904d\u4e24\u4e2a\u94fe\u8868\uff0c\u5f97\u51fa\u6bcf\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5c06\u5c3e\u90e8\u5bf9\u5176\uff0c\u5224\u65ad \u53e6\u5916\u4e00\u79cd\uff0c\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u5c3e\u90e8\u8fde\u63a5\u5230\u5176\u5934\u7ed3\u70b9\uff0c\u4ece\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u8f6c\u6362\u6210\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af\u7684\u95ee\u9898\u3002 bool hasCycle ( ListNode * head , ListNode * & enter ) { if ( ! head || ! head -> next || ! head -> next -> next ) return false ; ListNode * first = head ; ListNode * second = head ; do { first = first -> next ; second = second -> next -> next ; } while ( first && second && second -> next && first != second ); if ( ! first || ! second || ! second -> next ) return false ; // \u627e\u5230\u5165\u53e3\u8282\u70b9 first = head ; while ( first != second ){ first = first -> next ; second = second -> next ; } enter = first ; return true ; } ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { if ( ! headA || ! headB ) return nullptr ; ListNode * iterA = headA ; while ( iterA -> next != nullptr ){ iterA = iterA -> next ; } iterA -> next = headA ; ListNode * enter ; hasCycle ( headB , enter ); return enter ; }","title":"6. \u5224\u65ad\u94fe\u8868\u662f\u5426\u76f8\u4ea4"},{"location":"lintcode/link/#7-k","text":"\u7b2c\u4e00\u65b9\u6cd5\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58K\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u6bcf\u6b21\u90fd\u6bd4\u8f83K\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u9009\u51fa\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u94fe\u63a5\u5230\u65b0\u7684\u94fe\u8868\u7684\u7ed3\u5c3e\uff0c\u7136\u540e\u8be5\u94fe\u8868\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u4e00\u4f4d\u3002 \u5229\u7528\u4e0a\u9762\u7684\u601d\u8def\uff0c\u6bcf\u6b21\u90fd\u8981\u4eceK\u4e2a\u5143\u7d20\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aK\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u5806\u5b9e\u73b0\uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5229\u7528\u5f52\u5e76\u7684\u601d\u60f3\uff0c\u4e24\u4e24\u5408\u5e76\uff1b // \u7b2c\u4e00\u79cd\u65b9\u6cd5 // \u6bcf\u6b21\u627e\u51fa\u6700\u5c0f\u503c\u7684\u65b9\u5f0f ListNode * mergeKLists ( vector < ListNode *> & lists ) { // write your code here ListNode * guard = new ListNode ( 0 ); ListNode * head = guard ; // current \u6307\u5411K\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488 vector < ListNode *> currents ; for ( auto link : lists ){ if ( link != nullptr ) currents . push_back ( link ); } int index = 0 ; while ( ! currents . empty ()){ int minV = INT32_MAX ; for ( int i = 0 ; i < currents . size (); ++ i ){ // \u53bb\u6389\u5df2\u7ecf\u4e3a\u7a7a\u7684\u94fe\u8868 if ( currents [ i ] == nullptr ){ currents . erase ( currents . begin () + i ); } if ( currents [ i ] -> val < minV ){ index = i ; minV = currents [ i ] -> val ; } } guard -> next = currents [ index ]; guard = guard -> next ; if ( currents [ index ] -> next != nullptr ) currents [ index ] = currents [ index ] -> next ; else currents . erase ( currents . begin () + index ); } return head -> next ; } \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c \u6700\u5c0f\u5806 // \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c \u6700\u5c0f\u5806 ListNode * mergeKLists ( vector < ListNode *> & lists ) { priority_queue < ListNode * , vector < ListNode *> , bigger > minHeap ; if ( lists . empty ()) return nullptr ; for ( int i = 0 ; i < lists . size (); i ++ ){ if ( lists [ i ]) minHeap . push ( lists [ i ]); } ListNode * head = nullptr ; ListNode * iter = nullptr ; while ( ! minHeap . empty ()){ if ( head == nullptr ){ head = minHeap . top (); iter = head ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } else { iter -> next = minHeap . top (); iter = iter -> next ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } } return head ; } \u7b2c\u4e09\u79cd\u65b9\u6cd5,\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u5f0f // \u7b2c\u4e09\u79cd\u65b9\u6cd5,\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u5f0f // \u901a\u8fc7\u8c03\u7528\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868\u7684\u65b9\u5f0f\u5b9e\u73b0 ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { // write your code here ListNode * guard = new ListNode ( 0 ); ListNode * head = guard ; while ( l1 && l2 ){ if ( l1 -> val > l2 -> val ){ guard -> next = l2 ; guard = guard -> next ; l2 = l2 -> next ; } else { guard -> next = l1 ; guard = guard -> next ; l1 = l1 -> next ; } } if ( l1 ){ guard -> next = l1 ; } if ( l2 ){ guard -> next = l2 ; } return head -> next ; } ListNode * mergeKLists ( const vector < ListNode *> & lists ) { if ( lists . empty ()) return nullptr ; if ( lists . size () == 1 ) return lists [ 0 ]; if ( lists . size () == 2 ) return mergeTwoLists ( lists [ 0 ], lists [ 1 ]); size_t n = lists . size (); vector < ListNode *> left (( n + 1 ) / 2 ), right ( n - ( n + 1 ) / 2 ); copy ( lists . begin (), lists . begin () + ( n + 1 ) / 2 , left . begin ()); copy ( lists . begin () + ( n + 1 ) / 2 , lists . end (), right . begin ()); return mergeTwoLists ( mergeKLists ( left ), mergeKLists ( right )); } \u4e0a\u9762\u91c7\u7528\u7684\u662f\u81ea\u9876\u5411\u4e0b\u7684\u9012\u5f52\u5f52\u5e76\u7684\u65b9\u5f0f\uff0c\u4e0b\u9762\u91c7\u7528\u975e\u9012\u5f52\u7684\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0 // \u7b80\u5355\u7684\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7684\u5f52\u5e76\u6c42\u548c // \u81ea\u5e95\u5411\u4e0a\u5f52\u5e76 int solve ( vector < int > & v ){ size_t end = v . size () - 1 ; if ( end < 0 ) throw \"\" ; if ( end == 0 ) return v [ 0 ]; while ( end > 0 ){ int index = 0 ; for ( int i = 0 ; i <= end ; i += 2 ){ if ( i + 1 <= end ){ v [ index ] = add ( v [ i ], v [ i + 1 ]); index ++ ; } else { v [ index ] = v [ i ]; index ++ ; } } end = index - 1 ; } return v [ 0 ]; } ListNode * mergeKLists ( vector < ListNode *> & lists ) { if ( lists . empty ()) return nullptr ; if ( lists . size () == 1 ) return lists [ 0 ]; if ( lists . size () == 2 ) return mergeTwoLists ( lists [ 0 ], lists [ 1 ]); size_t end = lists . size () - 1 ; while ( end > 0 ){ int index = 0 ; for ( int i = 0 ; i <= end ; i += 2 ){ if ( i + 1 <= end ){ lists [ index ] = mergeTwoLists ( lists [ i ], lists [ i + 1 ]); index ++ ; } else { lists [ index ] = lists [ i ]; index ++ ; } } end = index - 1 ; } return lists [ 0 ]; }","title":"7. \u5408\u5e76K\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"lintcode/link/#8","text":"\u4f7f\u7528O\uff081\uff09\u7684\u989d\u5916\u7a7a\u95f4\u5b8c\u6210\u94fe\u8868\u7684\u590d\u5236\uff0c\u57fa\u672c\u601d\u8def\u662f\u628a\u62f7\u8d1d\u7684\u65b0\u8282\u70b9\u94fe\u63a5\u5728\u539f\u6765\u8282\u70b9\u7684\u540e\u9762\uff0c\u8bbe\u7f6e\u5b8c\u968f\u673a\u6307\u9488\u4e4b\u540e\u518d\u65ad\u5f00\u4e0e\u539f\u6765\u65e7\u94fe\u8868\u7684\u8fde\u63a5\u3002 RandomListNode * copyRandomList ( RandomListNode * head ) { // write your code here if ( ! head ) return head ; RandomListNode * iter = head ; // 1. \u590d\u5236\u6bcf\u4e2a\u8282\u70b9\u8fde\u63a5\u5728\u539f\u6765\u8282\u70b9\u7684\u540e\u9762 while ( iter ){ RandomListNode * node = new RandomListNode ( iter -> label ); node -> next = iter -> next ; iter -> next = node ; iter = node -> next ; } // 2. \u8bbe\u7f6e\u968f\u673a\u6307\u9488 RandomListNode * newHead = head -> next ; head -> next -> random = head -> random == nullptr ? nullptr : head -> random -> next ; iter = newHead -> next ; while ( iter ){ RandomListNode * next = iter -> next -> next ; iter -> next -> random = iter -> random == nullptr ? nullptr : iter -> random -> next ; iter = next ; } // 3. \u65ad\u5f00\u548c\u65e7\u94fe\u8868\u7684\u8fde\u63a5 iter = newHead ; while ( iter -> next ){ iter -> next = iter -> next -> next ; iter = iter -> next ; } return newHead ; }","title":"8. \u5e26\u968f\u673a\u6307\u9488\u94fe\u8868\u7684\u590d\u5236|\u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"lintcode/link/#9","text":"\u5220\u9664\u94fe\u8868\u8282\u70b9\u4e3a\u67d0\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u3002(\u67d0\u4e2a\u503c\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u4e5f\u53ef\u80fd\u5168\u90e8\u90fd\u662f) ListNode * removeElements ( ListNode * head , int val ) { // Write your code here ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; ListNode * pre = guard ; ListNode * tmp = guard -> next ; while ( tmp ){ if ( tmp -> val == val ){ pre -> next = tmp -> next ; tmp = tmp -> next ; } else { pre = tmp ; tmp = tmp -> next ; } } return head -> next ; } \u4e0d\u4f7f\u7528\u54e8\u5175\u7684\u65b9\u6cd5\uff0c\u5728\u8981\u6c42\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002 ListNode * removeElements ( ListNode * head , int val ) { // Write your code here // \u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503cval\u7684\u6240\u6709\u8282\u70b9 while ( head && head -> val == val ){ head = head -> next ; } if ( head == nullptr ) return head ; ListNode * pre = head ; ListNode * c = head -> next ; // \u5934\u7ed3\u70b9\u5df2\u7ecf\u4e0d\u53ef\u80fd==val\u4e86\uff0c\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u5220\u9664\u4e86 while ( c ){ if ( c -> val == val ){ pre -> next = c -> next ; c -> next = nullptr ; c = pre -> next ; } else { pre = c ; c = c -> next ; } } return head ; }","title":"9. \u5220\u9664\u94fe\u8868\u5143\u7d20"},{"location":"lintcode/link/#10-o1","text":"\u601d\u8def\uff1a\u7ed9\u51fa\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u662f\u4e0d\u53ef\u80fd\u5728O(1)\u7684\u65f6\u95f4\u5185\u5220\u9664\u8be5\u8282\u70b9\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5fc5\u987b\u627e\u5230\u5b83\u524d\u9762\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ea\u80fd\u4ece\u5934\u904d\u5386(\u5728\u6ca1\u6709\u6307\u5411\u524d\u9762\u7684\u6307\u9488\u7684\u60c5\u51b5\u4e0b)\uff0c\u590d\u6742\u5ea6\u4e0d\u53ef\u80fd\u662fO(1). \u4f46\u662f\u53ef\u4ee5\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\u7684\u503c\u8d4b\u7ed9\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u518d\u5220\u9664\u8981\u5220\u9664\u7684\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\uff0c\u8fd9\u6837'\u770b\u8d77\u6765'\u597d\u50cf\u5220\u9664\u4e86\u5f53\u524d\u7684\u8282\u70b9\u3002\u5b9e\u9645\u4e0a\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u771f\u6b63\u7684\u53d8\u5316\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\u53d8\u6210\u4e86\u5b83\u540e\u9762\u8282\u70b9\u7684\u503c. void deleteNode ( ListNode * node ) { // write your code here node -> val = node -> next -> val ; node -> next = node -> next -> next ; }","title":"10. \u5728O(1)\u65f6\u95f4\u590d\u6742\u5ea6\u5220\u9664\u94fe\u8868\u8282\u70b9"},{"location":"lintcode/link/#11","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u6bcf\u4e2a\u91cd\u590d\u5143\u7d20\u53ea\u7559\u4e0b\u4e00\u4e2a\u3002 \u9047\u5230\u4e0d\u540c\u7684\u5143\u7d20\u7684\u65f6\u5019\u518d\u5220\u9664\u3002 ListNode * deleteDuplicates ( ListNode * head ) { // write your code here if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * pre = head ; ListNode * current = head -> next ; while ( current ){ if ( pre -> val == current -> val ){ current = current -> next ; } else { pre -> next = current ; pre = current ; current = current -> next ; } } // \u94fe\u8868\u7ed3\u5c3e\u6709\u91cd\u590d\u5143\u7d20\u7684\u60c5\u51b5 pre -> next = current ; return head ; } \u4e00\u65e6\u9047\u5230\u76f8\u540c\u7684\u5143\u7d20\u5c31\u5220\u9664\u3002 ListNode * deleteDuplicates ( ListNode * head ) { // \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u6bcf\u4e2a\u5143\u7d20\u53ea\u7559\u4e0b\u4e00\u4e2a\u3002 if ( head == nullptr || head -> next == nullptr ) return head ; if ( head -> next -> next == nullptr && head -> val == head -> next -> val ) return head -> next ; ListNode * pre = head ; ListNode * c = head -> next ; while ( c ){ if ( pre -> val == c -> val ){ pre -> next = c -> next ; c = c -> next ; } else { pre = pre -> next ; c = c -> next ; } } return head ; }","title":"11. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20"},{"location":"lintcode/link/#12-2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 ListNode * deleteDuplicates ( ListNode * head ) { //\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; ListNode * pre = guard ; ListNode * start = guard -> next ; ListNode * end = guard -> next ; while ( end ){ while ( end && start -> val == end -> val ){ end = end -> next ; } if ( start -> next == end ){ pre = start ; start = end ; } else { pre -> next = end ; start = end ; } } return head -> next ; } \u4e0d\u4f7f\u7528\u54e8\u5175\u8282\u70b9\u7684\u65b9\u6848 ListNode * deleteDuplicates ( ListNode * head ) { //\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 ListNode * pre = head ; ListNode * start = head ; ListNode * end = head ; while ( end ){ while ( end && start -> val == end -> val ){ end = end -> next ; } if ( start -> next == end ){ pre = start ; start = end ; } else { if ( pre == start && pre == head ){ head = end ; pre = end ; } else pre -> next = end ; start = end ; } } return head ; }","title":"12. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d202"},{"location":"lintcode/link/#13-k","text":"\u4f8b\u5982\uff1a head-->1-->2-->3-->4-->5-->6 K=2 \u8fd4\u56de\uff1a head-->1-->2-->3-->4-->6 \u601d\u8def\u4e00\uff1a \u5148\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u7edf\u8ba1\u94fe\u8868\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u77e5\u9053\u5012\u6570\u7b2cK\u4e2a\u5143\u7d20\u5c31\u662f \u6b63\u6570\u7b2cn-k+1\u4e2a\u5143\u7d20\uff0c\u4ecehead\u5f00\u59cb\u79fb\u52a8\u6307\u9488\uff0c\u79fb\u52a8n-k\u6b21\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u3002 \u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u628a\u539f\u6765\u6307\u5411\u8fd9\u4e2a\u5143\u7d20\u7684\u6307\u9488\u6307\u5411\u5b83\u540e\u9762\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684 \u64cd\u4f5c\u5c31\u662f\u4ecehead\u5f00\u59cb\uff0c\u79fb\u52a8n-k-1\u6b21\uff0c\u627e\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\u524d\u9762\u7684\u8282\u70b9a,\u7136\u540e\u6267\u884ca->next = a->next->next ListNode * removeNthFromEnd ( ListNode * head , int n ) { // write your code here int len = 0 ; ListNode * tmp = head ; while ( tmp ){ len ++ ; tmp = tmp -> next ; } if ( len < n ) return nullptr ; if ( len == n ) return head -> next ; tmp = head ; int count = len + 1 - n ; // \u6b63\u6570\u7b2ccount\u4e2a\u8282\u70b9 count = count - 2 ; while ( count -- ){ tmp = tmp -> next ; } tmp -> next = tmp -> next -> next ; return head ; } \u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u4e24\u4e2a\u95f4\u9694K\u4e2a\u5143\u7d20\u7684\u6307\u9488\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u5f53\u524d\u9762\u7684\u6307\u9488\u8d70\u5230\u5c3e\u8282\u70b9\u7684\u65f6\u5019\uff0c\u540e\u9762\u7684\u8282\u70b9\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9\u3002 ListNode * removeNthFromEnd ( ListNode * head , int n ) { // write your code here if ( head == nullptr ) return nullptr ; ListNode * first = head ; ListNode * second = head ; int count = n + 1 ; while ( first && count -- ){ first = first -> next ; } if ( first == nullptr ) return head -> next ; // \u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9 if ( count > 0 ) return nullptr ; // \u6ca1\u6709\u5bfc\u6570\u7b2cn\u4e2a\u8282\u70b9 while ( first ){ first = first -> next ; second = second -> next ; } second -> next = second -> next -> next ; return head ; }","title":"13. \u5220\u9664\u5355\u5411\u94fe\u8868\u4e2d\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9"},{"location":"lintcode/link/#14","text":"\u601d\u8def\uff1a \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u6307\u5411\u5934\u90e8\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e24\u6b65\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e00\u6b65\uff0c\u8fd9\u6837\u5728\u5feb\u7684\u6307\u9488\u8d70\u5230\u5c3d\u5934\u7684\u65f6\u5019\uff0c\u6162\u7684\u6307\u9488\u6070\u597d\u8d70\u5230\u4e86\u4e2d\u90e8\u3002 /** * \u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u5e76\u8fd4\u56de * @param head * @return */ ListNode * findMiddle ( ListNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * first = head , * second = head ; while ( second -> next && second -> next -> next ){ first = first -> next ; second = second -> next -> next ; } return first ; }","title":"14. \u67e5\u627e\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9"},{"location":"lintcode/link/#15","text":"ListNode * insertionSortList ( ListNode * head ) { // \u4f7f\u7528\u94fe\u8868\u5b9e\u73b0\u63d2\u5165\u6392\u5e8f if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * guard = new ListNode ( INT32_MIN ); guard -> next = head ; head = guard ; ListNode * sorted = guard ; ListNode * ends = guard -> next ; ListNode * unsorted = ends -> next ; ends -> next = nullptr ; // \u94fe\u8868\u65ad\u5f00 while ( unsorted ){ // \u627e\u5230\u63d2\u5165\u7684\u4f4d\u7f6e while ( sorted != ends ){ if ( unsorted -> val >= sorted -> val && unsorted -> val < sorted -> next -> val ){ // \u63d2\u5165\u5230iter1\u540e\u9762 ListNode * tmp = unsorted ; unsorted = unsorted -> next ; tmp -> next = sorted -> next ; sorted -> next = tmp ; sorted = guard ; break ; } sorted = sorted -> next ; } if ( sorted == ends && unsorted -> val >= ends -> val ){ ends -> next = unsorted ; unsorted = unsorted -> next ; ends = ends -> next ; ends -> next = nullptr ; sorted = guard ; } } return head -> next ; }","title":"15. \u63d2\u5165\u6392\u5e8f\uff08\u4f7f\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff09"},{"location":"lintcode/link/#16","text":"\u5feb\u901f\u6392\u5e8f\u4e00\u822c\u7684\u601d\u60f3\u662f\u9996\u5c3e\u4e24\u4e2a\u6307\u9488\u76f8\u5411\u8fd0\u52a8\uff0c\u4f46\u662f\u5355\u94fe\u8868\u6ca1\u6709\u5411\u524d\u7684\u6307\u9488\uff0c\u8fd9\u8981\u6c42\u6211\u4eec\u6362\u4e00\u79cd\u601d\u8def\u3002\u5982\u4f55\u4ece\u524d\u5f80\u540e\u904d\u5386\u627e\u5230\u652f\u70b9\u7684\u4f4d\u7f6e\u3002\u5047\u8bbe\u652f\u70b9\u7684\u503c\u662fvalue. \u6211\u4eec\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8evalue\u7684\u503c\u90fd\u5728\u524d\u9762\uff0c\u6240\u6709\u5927\u4e8evalue\u7684\u503c\u90fd\u5728\u540e\u9762\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u627e\u5230\u7684value\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u3002 // \u5355\u94fe\u8868\u5b9e\u73b0\u5feb\u6392","title":"16. \u5feb\u901f\u6392\u5e8f(\u5355\u94fe\u8868\u5b9e\u73b0)"},{"location":"lintcode/link/#17","text":"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u4ee5\u53ca\u4e24\u4e2a\u6743\u503cv1\u548cv2\uff0c\u4ea4\u6362\u94fe\u8868\u4e2d\u6743\u503c\u4e3av1\u548cv2\u7684\u8fd9\u4e24\u4e2a\u8282\u70b9\u3002\u4fdd\u8bc1\u94fe\u8868\u4e2d\u8282\u70b9\u6743\u503c\u5404\u4e0d\u76f8\u540c\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u8282\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u4e5f\u4e0d\u7528\u505a\u3002 ListNode * swapNodes ( ListNode * head , int v1 , int v2 ) { // Write your code here if ( head == nullptr ) return head ; // add a guard ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; //search the value ListNode * pre_v1 = nullptr ; ListNode * pre_v2 = nullptr ; ListNode * pre_tmp = guard ; ListNode * tmp = pre_tmp -> next ; while ( tmp ){ if ( tmp -> val == v1 ){ pre_v1 = pre_tmp ; } if ( tmp -> val == v2 ){ pre_v2 = pre_tmp ; } pre_tmp = tmp ; tmp = tmp -> next ; } // not find v1 or v2 if ( pre_v1 == nullptr || pre_v2 == nullptr ){ return head -> next ; } // swap the two nodes ListNode * v1s = pre_v1 -> next ; ListNode * v2s = pre_v2 -> next ; ListNode * next_v1 = v1s -> next ; ListNode * next_v2 = v2s -> next ; if ( pre_v1 == v2s ){ pre_v2 -> next = v1s ; v1s -> next = v2s ; v2s -> next = next_v1 ; } else if ( pre_v2 == v1s ){ pre_v1 -> next = v2s ; v2s -> next = v1s ; v1s -> next = next_v2 ; } else { v1s -> next = next_v2 ; v2s -> next = next_v1 ; pre_v1 -> next = v2s ; pre_v2 -> next = v1s ; } return head -> next ; }","title":"17. \u4ea4\u6362\u94fe\u8868\u5f53\u4e2d\u4e24\u4e2a\u8282\u70b9"},{"location":"lintcode/link/#18","text":"\u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u7684\u8282\u70b9\uff0c\u7136\u540e\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 ListNode * swapPairs ( ListNode * head ) { // Write your code here if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * guard = new ListNode ( 0 ); guard -> next = head ; head = guard ; ListNode * pres1 = guard ; ListNode * s1 = guard -> next ; ListNode * s2 = guard -> next -> next ; while ( s1 != nullptr && s2 != nullptr ){ pres1 -> next = s2 ; s1 -> next = s2 -> next ; s2 -> next = s1 ; if ( s1 -> next == nullptr || s1 -> next -> next == nullptr ){ return head -> next ; } else { pres1 = s1 ; s1 = s1 -> next ; s2 = s2 -> next -> next -> next ; } } return head -> next ; }","title":"18. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"lintcode/link/#19","text":"ListNode * rotateRight ( ListNode * head , int k ) { //\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8k\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2dk\u662f\u4e00\u4e2a\u975e\u8d1f\u6570 if ( head == nullptr || head -> next == nullptr || k <= 0 ) return head ; ListNode * end = head ; int len = 1 ; while ( end -> next ){ end = end -> next ; len ++ ; } k = k % len ; if ( k == 0 ) return head ; int index = ( len - 1 - k ) % len ; ListNode * tmp = head ; while ( tmp && index -- ){ tmp = tmp -> next ; } if ( index == - 1 ){ end -> next = head ; head = tmp -> next ; tmp -> next = nullptr ; } return head ; }","title":"19. \u65cb\u8f6c\u94fe\u8868"},{"location":"lintcode/link/#20","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868L: L0\u2192L1\u2192\u2026\u2192Ln-1\u2192Ln,\u91cd\u65b0\u6392\u5217\u540e\u4e3a\uff1aL0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2192\u2026\u5fc5\u987b\u5728\u4e0d\u6539\u53d8\u8282\u70b9\u503c\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u539f\u5730\u64cd\u4f5c\u3002 /** * \u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u5e76\u8fd4\u56de * @param head * @return */ ListNode * findMiddle ( ListNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * first = head , * second = head ; while ( second -> next && second -> next -> next ){ first = first -> next ; second = second -> next -> next ; } return first ; } /** * \u53cd\u8f6c\u94fe\u8868 * @param head * @return */ ListNode * reverse ( ListNode * head ) { // write your code here if ( head == nullptr || head -> next == nullptr ) return head ; ListNode * iter = head ; ListNode * next_iter = head -> next ; iter -> next = nullptr ; while ( next_iter ){ ListNode * tmp = next_iter -> next ; next_iter -> next = iter ; iter = next_iter ; next_iter = tmp ; } head = iter ; return head ; } /** * \u4ea4\u53c9\u5408\u5e76\u4e24\u4e2a\u94fe\u8868 * @param l1 * @param l2 * @return */ ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { // \u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u94fe\u8868\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u5c31\u662f\u7ed3\u679c if ( l1 == nullptr ) return l2 ; if ( l2 == nullptr ) return l1 ; ListNode * head = l1 ; l1 = l1 -> next ; ListNode * iter = head ; bool odd = false ; while ( l1 != nullptr || l2 != nullptr ){ if ( ! odd ){ if ( l2 ){ iter -> next = l2 ; l2 = l2 -> next ; iter = iter -> next ; } } if ( odd ){ if ( l1 ){ iter -> next = l1 ; l1 = l1 -> next ; iter = iter -> next ; } } odd = ! odd ; } return head ; } ListNode * reorderList ( ListNode * head ) { if ( head == nullptr || head -> next == nullptr ) return head ; // \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868L: L0\u2192L1\u2192\u2026\u2192Ln-1\u2192Ln,\u91cd\u65b0\u6392\u5217\u540e\u4e3a\uff1aL0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2192\u2026\u5fc5\u987b\u5728\u4e0d\u6539\u53d8\u8282\u70b9\u503c\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u539f\u5730\u64cd\u4f5c // \u627e\u5230\u4e2d\u95f4\u8282\u70b9\uff0c \u53cd\u8f6c\u540e\u534a\u6bb5\uff0c\u7136\u540e\u4ea4\u53c9\u62fc\u63a5\u8d77\u6765\uff0c\u53ef\u4ee5\u786e\u4fdd\u4e0d\u9002\u7528\u989d\u5916\u7684\u7a7a\u95f4 ListNode * middle = findMiddle ( head ); ListNode * head2 = reverse ( middle -> next ); middle -> next = nullptr ; head = mergeTwoLists ( head , head2 ); return head ; }","title":"20. \u9996\u5c3e\u4ea4\u9519\u91cd\u6392\u94fe\u8868"},{"location":"lintcode/link/#21","text":"\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u4e2d\u7684\u503c\u662f\u5426\u662f\u56de\u6587 \u627e\u5230\u4e2d\u95f4\u8282\u70b9\uff0c\u628a\u540e\u9762\u7684\u94fe\u8868\u53cd\u8f6c\uff0c\u7136\u540e\u4e0e\u524d\u9762\u7684\u9010\u4e2a\u8282\u70b9\u6bd4\u8f83\uff0c\u5982\u679c\u5b8c\u5168\u4e00\u6837\u6216\u8005\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e0d\u4e00\u6837\uff0c\u5219\u662f\u56de\u6587\u7684\u3002 bool isPalindrome ( ListNode * head ) { // Write your code here if ( head == nullptr ) return true ; ListNode * middle = findMiddle ( head ); ListNode * head2 = reverse ( middle -> next ); middle -> next = nullptr ; ListNode * iter1 = head , * iter2 = head2 ; while ( iter1 && iter2 ){ if ( iter1 -> val != iter2 -> val ) return false ; iter1 = iter1 -> next ; iter2 = iter2 -> next ; } if ( iter1 && iter1 -> next == nullptr ){ return true ; } if ( iter2 && iter2 -> next == nullptr ){ return true ; } if ( iter1 == nullptr && iter2 == nullptr ){ return true ; } return false ; }","title":"21. \u56de\u6587\u94fe\u8868"},{"location":"lintcode/link/#22","text":"\u4f60\u6709\u4e24\u4e2a\u7528\u94fe\u8868\u4ee3\u8868\u7684\u6574\u6570\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u3002\u6570\u5b57\u5b58\u50a8\u6309\u7167\u5728\u539f\u6765\u6574\u6570\u4e2d\u76f8\u53cd\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u7b2c\u4e00\u4e2a\u6570\u5b57\u4f4d\u4e8e\u94fe\u8868\u7684\u5f00\u5934\u3002\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u5c06\u4e24\u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u7528\u94fe\u8868\u5f62\u5f0f\u8fd4\u56de\u548c\u3002 ListNode * addLists ( ListNode * l1 , ListNode * l2 ) { if ( l1 == nullptr ) return l2 ; if ( l2 == nullptr ) return l1 ; // \u94fe\u8868\u6c42\u548c int carry = 0 ; ListNode * head = new ListNode ( 0 ); ListNode * iter = head ; int number ; while ( l1 != nullptr && l2 != nullptr ){ number = ( l1 -> val + l2 -> val + carry ) % 10 ; carry = ( l1 -> val + l2 -> val + carry ) / 10 ; ListNode * node = new ListNode ( number ); iter -> next = node ; iter = iter -> next ; l1 = l1 -> next ; l2 = l2 -> next ; } while ( l1 ){ number = ( l1 -> val + carry ) % 10 ; carry = ( l1 -> val + carry ) / 10 ; ListNode * node = new ListNode ( number ); iter -> next = node ; iter = iter -> next ; l1 = l1 -> next ; } while ( l2 ){ number = ( l2 -> val + carry ) % 10 ; carry = ( l2 -> val + carry ) / 10 ; ListNode * node = new ListNode ( number ); iter -> next = node ; iter = iter -> next ; l2 = l2 -> next ; } if ( carry ){ ListNode * node = new ListNode ( carry ); iter -> next = node ; } return head -> next ; }","title":"22. \u94fe\u8868\u6c42\u548c"},{"location":"lintcode/link/#23-ii","text":"\u5047\u5b9a\u7528\u4e00\u4e2a\u94fe\u8868\u8868\u793a\u4e24\u4e2a\u6570\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ec5\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u3002\u5047\u8bbe\u8fd9\u4e24\u4e2a\u6570\u7684\u6570\u5b57\u987a\u5e8f\u6392\u5217\uff0c\u8bf7\u8bbe\u8ba1\u4e00\u79cd\u65b9\u6cd5\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u5c06\u5176\u7ed3\u679c\u8868\u73b0\u4e3a\u94fe\u8868\u7684\u5f62\u5f0f\u3002 \u5148\u7ffb\u8f6c\u94fe\u8868\uff0c\u6c42\u548c\uff0c\u5728\u7ffb\u8f6c\u56de\u53bb\u3002 ListNode * addLists2 ( ListNode * l1 , ListNode * l2 ) { return reverse ( addLists ( reverse ( l1 ), reverse ( l2 ))); }","title":"23. \u94fe\u8868\u6c42\u548c II"},{"location":"lintcode/stack/","text":"\u6808\u7684\u76f8\u5173\u9898\u76ee \u00b6 \u6808\u662f\u4e00\u79cd\u5b9e\u73b0\u4e86\u540e\u8fdb\u5148\u51fa\u7684\u89c4\u5219\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u5b9e\u73b0 stack .\u4f7f\u7528\u7684\u65f6\u5019 include <stack> ,\u652f\u6301\u7684\u64cd\u4f5c\u6709 push(),pop(),top() ;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c pop \u7684\u4f5c\u7528\u662f\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u800c\u4e0d\u4f1a\u8fd4\u56de\u6808\u9876\u5143\u7d20\uff0c\u5b9e\u73b0\u8fd4\u56de\u6808\u9876\u5143\u7d20\u5e76\u5f39\u51fa\u7684\u64cd\u4f5c\u5e94\u8be5\u662f int a = s.top(); s.pop(); . \u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u4e24\u79cd\u5b9e\u73b0\uff0c \u4e00\u79cd\u662f\u666e\u901a\u7684\u961f\u5217 queue ,\u4f7f\u7528\u7684\u65f6\u5019 include<queue> ,\u652f\u6301\u7684\u64cd\u4f5c\u548c\u6808\u7c7b\u4f3c\uff0c push(),pop(),top() \u5206\u522b\u5b9e\u73b0\u6570\u636e\u7684\u5165\u961f\uff0c\u51fa\u961f\u548c\u8bfb\u53d6\u961f\u5217\u7684\u5934\u90e8\u5143\u7d20\u3002 deque \u5b9e\u73b0\u4e86\u53cc\u7aef\u961f\u5217\uff0c\u652f\u6301\u4ece\u4e24\u7aef\u5165\u961f\u548c\u51fa\u961f.\u4f7f\u7528\u7684\u65f6\u5019 include<deque> \u3002 1. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 \u00b6 \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 \u4f7f\u7528\u6808\u5b58\u50a8\u6240\u6709\u7684\u5de6\u62ec\u53f7\uff0c\u4e00\u65e6\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u4e0e\u6808\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7ee7\u7eed\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56defalse. bool isValidParentheses ( string & s ) { // \u62ec\u53f7\u5339\u914d\u95ee\u9898 stack < char > cc ; map < char , char > m ; m [ '(' ] = ')' ; m [ '[' ] = ']' ; m [ '{' ] = '}' ; for ( int i = 0 ; i < s . size (); ++ i ){ if ( s [ i ] == '(' || s [ i ] == '[' || s [ i ] == '{' ){ cc . push ( s [ i ]); } if ( s [ i ] == ')' || s [ i ] == ']' || s [ i ] == '}' ){ if ( cc . empty ()) return false ; char tmp = cc . top (); if ( m [ tmp ] != s [ i ]){ return false ; } cc . pop (); } } if ( cc . empty ()) return true ; return false ; } 2. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 \u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 3. \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f \u00b6 \u5229\u7528\u6808\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u6b65\u9aa4(\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f)\uff1a \u521d\u59cb\u5316\u6808cc\u4e3a\u7a7a\u7528\u6765\u5b58\u653e\u8fd0\u7b97\u7b26\uff0c\u521d\u59cb\u5316string s\u4e3a\u7a7a\u7528\u6765\u5b58\u50a8\u8f6c\u6362\u4e4b\u540e\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\uff1b \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u9047\u5230\u6570\u5b57\u76f4\u63a5\u8f93\u51fa\u5230s. \u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u5982\u679c\u5f53\u524d\u7684\u6808cc\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u5165\u6808\uff1b\u5982\u679c\u9047\u5230\u7684\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\uff1b\u5982\u679c\u9047\u5230\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5165\u6808\uff1b \u5982\u679c\u9047\u5230\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u6808\u9876\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6301\u7eed\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20 \u6216\u8005 \u6808\u4e3a\u7a7a \u4e3a\u6b62\u3002\u5faa\u73af\u9000\u51fa\u540e\u5c06\u5f53\u524d\u8fd0\u7b97\u7b26\u5165\u6808\u3002 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4f46\u4e0d\u8f93\u51fa\u5230s. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f bool isNumber ( string & s ){ // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57 if ( s . empty ()) return false ; if ( s . size () == 1 && s [ 0 ] == '-' ) return false ; for ( size_t i = 0 ; i < s . length (); i ++ ){ // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse if ( ( i > 0 && ( s [ i ] < '0' || s [ i ] > '9' )) ) return false ; // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse. if ( i == 0 && ( s [ i ] != '-' ) && ( s [ i ] < '0' || s [ i ] > '9' ) ) return false ; } return true ; } vector < string > convertToRPN ( vector < string > & expression ) { // write your code here vector < string > ans ; if ( expression . empty ()) return ans ; // \u64cd\u4f5c\u7b26 stack < string > s ; // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > kv ; kv [ \"+\" ] = 3 ; kv [ \"-\" ] = 3 ; kv [ \"*\" ] = 4 ; kv [ \"/\" ] = 4 ; kv [ \"(\" ] = 2 ; kv [ \")\" ] = 6 ; for ( size_t i = 0 ; i < expression . size (); i ++ ){ // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa if ( isNumber ( expression [ i ])){ ans . push_back ( expression [ i ]); } // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406 else if ( kv [ expression [ i ]] >= 2 && kv [ expression [ i ]] <= 6 ){ // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( s . empty () || kv [ expression [ i ]] == 2 ){ s . push ( expression [ i ]); } // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 6 ){ while ( ! s . empty () && s . top () != \"(\" ){ ans . push_back ( s . top ()); s . pop (); } if ( ! s . empty ()) s . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 3 || kv [ expression [ i ]] == 4 ){ // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808 if ( kv [ expression [ i ]] > kv [ s . top ()]){ s . push ( expression [ i ]); } else { while ( ! s . empty () && kv [ expression [ i ]] <= kv [ s . top ()]){ ans . push_back ( s . top ()); s . pop (); } s . push ( expression [ i ]); } } } } // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa while ( ! s . empty ()){ ans . push_back ( s . top ()); s . pop (); } return ans ; } 4. \u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 \u5148\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u6c42\u503c\u3002 \u8868\u8fbe\u5f0f\u6c42\u503c int evaluateExpression ( vector < string > expression ) { // write your code here vector < string > r = convert ( expression ); if ( r . empty ()) return 0 ; return evalRPN ( r ); } 5. \u8868\u8fbe\u6811\u6784\u9020 \u00b6 \u8868\u8fbe\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u7528\u4e8e\u8861\u91cf\u7279\u5b9a\u7684\u8868\u8fbe\u3002\u6240\u6709\u8868\u8fbe\u6811\u7684\u53f6\u5b50\u90fd\u6709\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u503c\u3002\u800c\u6240\u6709\u8868\u8fbe\u6811\u7684\u975e\u53f6\u5b50\u90fd\u6709\u53e6\u4e00\u4e2a\u64cd\u4f5c\u5b57\u7b26\u4e32\u503c\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u6570\u7ec4\uff0c\u8bf7\u6784\u9020\u8be5\u8868\u8fbe\u7684\u8868\u8fbe\u6811\uff0c\u5e76\u8fd4\u56de\u8be5\u8868\u8fbe\u6811\u7684\u6839\u3002 \u8868\u8fbe\u6811\u6784\u9020 \u601d\u8def\uff1a \u53ef\u4ee5\u5229\u7528\u4ee5\u524d\u505a\u8fc7\u7684\u9898\u76ee\uff0c\u5c06\u672c\u9898\u5206\u89e3\u6210\u51e0\u4e2a\u5b50\u95ee\u9898\u3002\u901a\u8fc7\u5206\u6790\u6211\u4eec\u53d1\u73b0\uff0c\u4e2d\u7f00\u8868\u8fbe\u5f0f\u662f\u8868\u8fbe\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u540e\u7f00\u8868\u8fbe\u5f0f\u662f\u8868\u8fbe\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u901a\u8fc7\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e2a\u5728\u4e4b\u524d\u5df2\u7ecf\u505a\u8fc7\u3002\u800c\u901a\u8fc7\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u6240\u4ee5\u8be5\u95ee\u9898\u5206\u89e3\u4e3a\u8fd9\u6837\u51e0\u4e2a\u5b50\u95ee\u9898\uff1a \u6c42\u540e\u7f00\u8868\u8fbe\u5f0f \u6839\u636e\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u91cd\u5efa\u4e8c\u53c9\u6811 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u672c\u9898\u4e2d\u4ee5\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u8282\u70b9\u7684\u503c\uff0c\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u8282\u70b9\u503c\u7684\u552f\u4e00\uff0c\u800c\u91cd\u5efa\u4e8c\u53c9\u6811\u7684\u65f6\u5019\u8981\u6c42\u8282\u70b9\u503c\u552f\u4e00\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u5b9a\u4e49\u65b0\u7ed3\u6784\u7684\u65b9\u6cd5\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u552f\u4e00\u7684\u3002\u5177\u4f53\u89c1\u4ee3\u7801\u3002 struct uniqueNode { string description ; int id ; uniqueNode () : description ( \"\" ), id ( 0 ){} uniqueNode ( string s , int i ) : description ( s ), id ( i ){} }; //Definition of ExpressionTreeNode: class ExpressionTreeNode { public : string symbol ; ExpressionTreeNode * left , * right ; ExpressionTreeNode ( string symbol ) { this -> symbol = symbol ; this -> left = this -> right = NULL ; } }; //\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 ExpressionTreeNode * buildTree ( vector < uniqueNode >& inorder , vector < uniqueNode >& postorder ) { if ( inorder . empty () || postorder . empty ()) { return nullptr ; } ExpressionTreeNode * node = new ExpressionTreeNode ( postorder [ postorder . size () - 1 ]. description ); // \u5148\u5efa\u7acb\u6839\u8282\u70b9 int len = inorder . size (); for ( size_t i = 0 ; i < inorder . size (); ++ i ) { if ( inorder [ i ]. id == postorder [ postorder . size () - 1 ]. id ) { // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002 vector < uniqueNode > left_post ( i ); vector < uniqueNode > left_vin ( i ); vector < uniqueNode > right_post ( len - 1 - i ); vector < uniqueNode > right_vin ( len - 1 - i ); copy ( inorder . begin (), inorder . begin () + i , left_vin . begin ()); copy ( inorder . begin () + i + 1 , inorder . end (), right_vin . begin ()); copy ( postorder . begin (), postorder . begin () + i , left_post . begin ()); copy ( postorder . begin () + i , postorder . end () - 1 , right_post . begin ()); node -> left = buildTree ( left_vin , left_post ); node -> right = buildTree ( right_vin , right_post ); } } return node ; } inline bool isnumber ( string & s ){ for ( auto a : s ){ if ( a > '9' || a < '0' ){ return false ; } } return true ; } /** * \u4e2d\u7f00\u8868\u8fbe\u5f0f -> \u540e\u7f00\u8868\u8fbe\u5f0f * @param expression * @return */ vector < uniqueNode > convert ( vector < uniqueNode > expression ) { vector < uniqueNode > re ; stack < uniqueNode > cc ; // \u8bbe\u7f6e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > p ; p [ \"+\" ] = 3 ; p [ \"-\" ] = 3 ; p [ \"*\" ] = 4 ; p [ \"/\" ] = 4 ; p [ \"(\" ] = 2 ; p [ \")\" ] = 1 ; for ( int i = 0 ; i < expression . size (); i ++ ){ // \u9047\u5230\u6570\u5b57\u76f4\u63a5\u5165\u6808 if ( isnumber ( expression [ i ]. description )){ re . push_back ( expression [ i ]); continue ; } // \u9047\u5230\u64cd\u4f5c\u7b26 if ( p [ expression [ i ]. description ] >= 1 && p [ expression [ i ]. description ] <= 4 ){ //\u6808\u4e3a\u7a7a\u6216\u8005\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( cc . empty () || p [ expression [ i ]. description ] == 2 || p [ expression [ i ]. description ] > p [ cc . top (). description ]){ cc . push ( expression [ i ]); } //\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u4e2d\u5de6\u62ec\u53f7\u4e4b\u524d\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u53f7\uff0c\u8f93\u51fa\uff0c\u6700\u540e\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4e0d\u8f93\u51fa else if ( p [ expression [ i ]. description ] == 1 ){ while ( cc . top (). description != \"(\" ){ auto tmp = cc . top (); re . push_back ( tmp ); cc . pop (); } cc . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5e94\u8be5\u5148\u8ba1\u7b97\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u5f39\u51fa\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\uff0c\u628a\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808 else if ( p [ expression [ i ]. description ] <= p [ cc . top (). description ]){ // \u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26 while ( ! cc . empty () && p [ expression [ i ]. description ] <= p [ cc . top (). description ]){ re . push_back ( cc . top ()); cc . pop (); } // \u5f53\u6808\u4e3a\u7a7a \u6216\u8005 \u9047\u5230\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f\u4f4e\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\uff0c\u5faa\u73af\u9000\u51fa cc . push ( expression [ i ]); //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u63a5\u5165\u6808 } continue ; } cout << \"error 1.\" << endl ; } while ( ! cc . empty ()){ re . push_back ( cc . top ()); cc . pop (); } return re ; } ExpressionTreeNode * build ( vector < string > & expression ) { vector < uniqueNode > v ; for ( int i = 0 ; i < expression . size (); ++ i ) { v . push_back ( uniqueNode ( expression [ i ], i + 1 )); } auto last = convert ( v ); for ( int j = 0 ; j < v . size (); ++ j ) { if ( v [ j ]. description == \"(\" || v [ j ]. description == \")\" ){ v . erase ( v . begin () + j ); j -- ; } } auto head = buildTree ( v , last ); return head ; } \u8868\u8fbe\u6811\u7684\u7279\u6b8a\u7ed3\u6784\u51b3\u5b9a\u4e86\u6211\u4eec\u53ea\u6839\u636e\u540e\u7f00\u8868\u8fbe\u5f0f\u4e5f\u80fd\u6784\u9020\u51fa\u6765\u4e00\u68f5\u8868\u8fbe\u6811(\u6ce8\u610f\uff1a\u53ea\u6839\u636e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u662f\u4e0d\u80fd\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\uff0c\u56e0\u4e3a\u7b54\u6848\u4e0d\u552f\u4e00\u3002)\uff0c\u5177\u4f53\u7684\u505a\u6cd5\u662f\u6a21\u62df\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u987a\u5e8f\u3002 //Definition of ExpressionTreeNode: class ExpressionTreeNode { public : string symbol ; ExpressionTreeNode * left , * right ; ExpressionTreeNode ( string symbol ) { this -> symbol = symbol ; this -> left = this -> right = NULL ; } }; bool isnumber ( string & s ){ for ( int i = 0 ; i < s . size (); ++ i ) { if ( s [ i ] < '0' || s [ i ] > '9' ) return false ; } return true ; } bool isoperator ( string & s ){ if ( s == \"+\" || s == \"-\" || s == \"*\" || s == \"/\" ) return true ; return false ; } vector < string > convert ( vector < string > expression ) { vector < string > re ; stack < string > cc ; // \u8bbe\u7f6e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > p ; p [ \"+\" ] = 3 ; p [ \"-\" ] = 3 ; p [ \"*\" ] = 4 ; p [ \"/\" ] = 4 ; p [ \"(\" ] = 2 ; p [ \")\" ] = 1 ; for ( int i = 0 ; i < expression . size (); i ++ ){ // \u9047\u5230\u6570\u5b57\u76f4\u63a5\u5165\u6808 if ( isnumber ( expression [ i ])){ re . push_back ( expression [ i ]); continue ; } // \u9047\u5230\u64cd\u4f5c\u7b26 if ( p [ expression [ i ]] >= 1 && p [ expression [ i ]] <= 4 ){ //\u6808\u4e3a\u7a7a\u6216\u8005\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( cc . empty () || p [ expression [ i ]] == 2 || p [ expression [ i ]] > p [ cc . top ()]){ cc . push ( expression [ i ]); } //\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u4e2d\u5de6\u62ec\u53f7\u4e4b\u524d\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u53f7\uff0c\u8f93\u51fa\uff0c\u6700\u540e\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4e0d\u8f93\u51fa else if ( p [ expression [ i ]] == 1 ){ while ( cc . top () != \"(\" ){ string tmp = cc . top (); re . push_back ( tmp ); cc . pop (); } cc . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5e94\u8be5\u5148\u8ba1\u7b97\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u5f39\u51fa\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\uff0c\u628a\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808 else if ( p [ expression [ i ]] <= p [ cc . top ()]){ // \u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26 while ( ! cc . empty () && p [ expression [ i ]] <= p [ cc . top ()]){ re . push_back ( cc . top ()); cc . pop (); } // \u5f53\u6808\u4e3a\u7a7a \u6216\u8005 \u9047\u5230\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f\u4f4e\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\uff0c\u5faa\u73af\u9000\u51fa cc . push ( expression [ i ]); //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u63a5\u5165\u6808 } continue ; } cout << \"error 1.\" << endl ; } while ( ! cc . empty ()){ re . push_back ( cc . top ()); cc . pop (); } return re ; } ExpressionTreeNode * build ( vector < string > & expression ) { expression = convert ( expression ); if ( expression . empty ()) return nullptr ; stack < ExpressionTreeNode *> cc ; for ( int i = 0 ; i < expression . size (); ++ i ) { if ( isnumber ( expression [ i ])){ ExpressionTreeNode * node = new ExpressionTreeNode ( expression [ i ]); cc . push ( node ); } if ( isoperator ( expression [ i ])){ ExpressionTreeNode * node = new ExpressionTreeNode ( expression [ i ]); ExpressionTreeNode * right = cc . top (); cc . pop (); ExpressionTreeNode * left = cc . top (); cc . pop (); node -> left = left ; node -> right = right ; cc . push ( node ); } } return cc . top (); } 6. \u7b80\u6613\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u89e3\u6790 \u00b6 s = abc3[a], return abcaaa s = 3[abc], return abcabcabc s = 4[ac]dy, return acacacacdy s = 3[2[ad]3[pf]]xyz, return adadpfpfpfadadpfpfpfadadpfpfpfxyz Expression Expand string expressionExpand ( string & s ) { bool finished = true ; for ( int i = 0 ; i < s . length (); ++ i ){ if ( s [ i ] == '[' || s [ i ] == ']' ){ finished = false ; break ; } } if ( finished ) return s ; int left , right , pre_left ; for ( int i = 0 ; i < s . length (); ++ i ){ if ( s [ i ] == '[' ){ left = i ; } if ( s [ i ] == ']' ){ for ( int j = left - 1 ; j >= 0 ; -- j ){ if ( s [ j ] >= '0' && s [ j ] <= '9' ){ pre_left = j ; } else { break ; } } string num = s . substr ( pre_left , left - pre_left ); int count = stoi ( num ); string cycle = s . substr ( left + 1 , i - left - 1 ); string cycle_with_count = \"\" ; while ( count -- ){ cycle_with_count += cycle ; } s . erase ( pre_left , i - pre_left + 1 ); s . insert ( pre_left , cycle_with_count ); return expressionExpand ( s ); } } return expressionExpand ( s ); } 7. \u5e26\u6709getMin()\u7684\u6808 \u00b6 \u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u5728O(1)\u65f6\u95f4\u5185\u5f97\u5230\u6700\u5c0f\u503c\u7684\u6808\u7ed3\u6784\u3002\u652f\u6301 pop(),push(),top(),getMin() \u56db\u79cd\u64cd\u4f5c\u3002 \u5e26\u6700\u5c0f\u503c\u64cd\u4f5c\u7684\u6808 \u601d\u8def \u4f7f\u7528\u4e24\u4e2a\u6808\u6765\u6a21\u62df\u8fd9\u4e2a\u6808\uff0c\u4e00\u4e2a\u6808\u7528\u6765\u4fdd\u5b58\u5b9e\u9645\u7684\u6570\u636e\uff0c\u4e00\u4e2a\u6808\u7528\u6765\u4fdd\u5b58\u5bf9\u5e94\u6570\u636e\u7684\u6700\u5c0f\u503c\u3002\u6bcf\u6b21\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5224\u65ad\u6700\u5c0f\u503c\u6709\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u76f4\u63a5\u5f39\u51fa\u6570\u636e\uff0c\u5982\u679c\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u66f4\u65b0\u5b58\u50a8\u6700\u5927\u503c\u6700\u5c0f\u503c\u7684\u6808\u3002 class StackWithGetMin2 { public : stack < int > data ; stack < int > min_data ; void push ( int val ){ data . push ( val ); if ( ! min_data . empty ()){ if ( min_data . top () >= val ){ min_data . push ( val ); } } else { min_data . push ( val ); } } int pop (){ auto v = data . top (); if ( v > min_data . top ()){ data . pop (); return v ; } else { data . pop (); min_data . pop (); return v ; } } int getMin (){ if ( min_data . empty ){ throw new exception ;} else { return min_data . top (); } } int top (){ return data . top (); } }; 8. 132\u5e8f\u5217 \u00b6 Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list. n will be less than 20,000. pattern bool find132pattern ( vector < int >& nums ) { int third = INT32_MIN ; stack < int > s ; for ( int i = nums . size () - 1 ; i >= 0 ; -- i ) { if ( nums [ i ] < third ) return true ; else while ( ! s . empty () && nums [ i ] > s . top ()) { third = s . top (); s . pop (); } s . push ( nums [ i ]); } return false ; } 9. \u7528\u6808\u5b9e\u73b0\u961f\u5217 \u00b6 \u7528\u6808\u5b9e\u73b0\u961f\u5217 class MyQueue { public : stack < int > stack1 ; stack < int > stack2 ; MyQueue () { // do intialization if necessary } void push ( int element ) { // write your code here stack1 . push ( element ); } int pop () { // write your code here if ( stack2 . empty ()){ if ( stack1 . empty ()){ return - 1 ; } while ( ! stack1 . empty ()){ int a = stack1 . top (); stack1 . pop (); stack2 . push ( a ); } } int a = stack2 . top (); stack2 . pop (); return a ; } int top () { // write your code here if ( stack2 . empty ()){ if ( stack1 . empty ()){ return - 1 ; } while ( ! stack1 . empty ()){ int a = stack1 . top (); stack1 . pop (); stack2 . push ( a ); } } int a = stack2 . top (); return a ; } }; 10. \u7528\u4e00\u4e2a\u6808\u6392\u5e8f\u53e6\u5916\u4e00\u4e2a\u6808 \u00b6 \u8981\u6c42\u6392\u5e8f\u597d\u7684\u6570\u636e\u5c31\u5728\u539f\u6765\u7684\u6808\u91cc\u9762\u3002 \u601d\u8def \u8bbe\u5b58\u653e\u6570\u636e\u7684\u6808\u662f s , \u8f85\u52a9\u6392\u5e8f\u7684\u6808\u662f help ,\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf v \u7528\u6765\u6682\u5b58\u4ece\u6808\u91cc\u9762\u51fa\u6765\u7684\u6570\u636e\u3002\u6211\u4eec\u53ea\u8981\u786e\u4fdd\u628a s \u4e2d\u7684\u6570\u6709\u5e8f\u7684\u5165\u6808 help ,\u7136\u540e\u5728\u53cd\u5411\u4ece help \u538b\u5165 s \u5c31\u80fd\u5f97\u5230\u9700\u8981\u7684\u7ed3\u679c\u3002\u5982\u679c\u8981\u6c42\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5373 s \u6808\u9876\u7684\u5143\u7d20\u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48 help \u4e2d\u5c31\u5e94\u8be5\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f,\u6808\u9876\u7684\u5143\u7d20\u662f\u6700\u5c0f\u7684\u3002\u6bcf\u6b21\u4ece s \u5411 help \u79fb\u52a8\u6570\u636e\u7684\u65f6\u5019\uff0c\u90fd\u8981\u548c help \u7684\u6808\u9876\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5165\u6808\uff0c\u5982\u679c\u5927\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u628a\u6808\u9876\u5143\u7d20\u5165\u6808\u5230 s ,\u76f4\u5230 v \u4e2d\u7684\u6570\u5c0f\u4e8e help \u7684\u6808\u9876\u5143\u7d20\uff0c\u624d\u5c06 v \u5165\u6808\u5230 help ,\u5176\u5b9e\u8fd9\u6709\u70b9\u5411\u6c49\u8bfa\u5854\u95ee\u9898\uff0c\u5faa\u73af\u5229\u7528\u4e24\u4e2a\u6808\u505a\u4e2d\u8f6c\uff0c\u53ea\u4e0d\u8fc7\u66f4\u52a0\u7b80\u5355\u3002 void sortStack ( stack < int > s ){ stack < int > help ; help . push ( s . top () ); s . pop (); auto v = s . top (); if ( help . top () > v ){ help . push ( v ); s . pop (); } else { while ( help . top () <= v ){ auto temp = help . top (); help . pop (); s . push ( temp ); } help . push ( v ); } } 11. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u00b6 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217, 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09 \u601d\u8def \u8bbe\u538b\u5165\u5e8f\u5217\u662f pushV ,\u5f39\u51fa\u5e8f\u5217\u662f popV ,\u4ece pushV \u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u548c popV \u9996\u5143\u7d20\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5047\u8bbe\u662f a ,\u53ef\u4ee5\u77e5\u9053 a \u5fc5\u5b9a\u662f\u538b\u5165\u6808\u4e4b\u540e\u5c31\u88ab\u5f39\u51fa\u6765\u4e86\u3002\u5047\u8bbe\u7528\u4e00\u4e2a\u4e34\u65f6\u7684\u6808 s1 \u4fdd a \u4e4b\u524d\u5165\u6808\u7684\u5143\u7d20\u548c a ,\u90a3\u4e48\u6b64\u65f6 popV \u548c s1 \u7684\u6808\u9876\u5143\u7d20\u5e94\u8be5\u662f\u4e00\u81f4\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u904d\u5386 popV \u4e2d\u7684\u5143\u7d20\uff0c\u4e0e s1 \u4e2d\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5f39\u51fa\u8be5\u5143\u7d20, popV \u7684\u6307\u9488\u52a01,\u7ee7\u7eed\u4e0b\u4e00\u6b21\u6bd4\u8f83.\u5982\u679c\u4e0d\u76f8\u7b49,\u5c31\u628a pushV \u4e2d a \u540e\u9762\u7684\u5143\u7d20\u7ee7\u7eed\u5165\u6808\u5230 s1 , popV \u7684\u6307\u9488\u4e0d\u52a8\uff0c\u7ee7\u7eed\u6bd4\u8f83 popV \u548c\u5f53\u524d s1 \u7684\u6808\u9876\u5143\u7d20\u662f\u4e0d\u662f\u76f8\u7b49\u3002\u6309\u7167\u8fd9\u6837\u7684\u89c4\u5219\u5904\u7406\uff0c\u76f4\u5230\u6307\u9488\u8d70\u5230\u5c3d\u5934\uff0c\u770b s1 \u4e2d\u7684\u5143\u7d20\u662f\u5426\u975e\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\u7684\uff0c popV \u5c31\u662f pushV \u7684\u5f39\u51fa\u5e8f\u5217\u3002 bool IsPopOrder ( vector < int > pushV , vector < int > popV ) { if ( pushV . size () != popV . size ()) return false ; stack < int > s1 ; //\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u5143\u7d20 size_t i = 0 ; while ( pushV [ i ] != popV [ 0 ] && i < pushV . size ()){ s1 . push ( pushV [ i ]); i ++ ; } s1 . push ( pushV [ i ]); //\u6b64\u65f6\u662fs1\u6808\u9876\u548cpopV\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff1b i ++ ; //i\u6307\u5411\u4e0b\u4e00\u5143\u7d20\uff1b for ( size_t j = 0 ; j <= popV . size (); j ++ ){ if ( j < popV . size () && popV [ j ] == s1 . top () ){ s1 . pop (); } else if ( i < pushV . size ()){ s1 . push ( pushV [ i ]); j -- ; i ++ ; } else if ( j == popV . size () && s1 . empty ()){ return true ; } else { return false ; } } return false ; }","title":"\u6808\u7684\u76f8\u5173\u9898\u76ee"},{"location":"lintcode/stack/#_1","text":"\u6808\u662f\u4e00\u79cd\u5b9e\u73b0\u4e86\u540e\u8fdb\u5148\u51fa\u7684\u89c4\u5219\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u5b9e\u73b0 stack .\u4f7f\u7528\u7684\u65f6\u5019 include <stack> ,\u652f\u6301\u7684\u64cd\u4f5c\u6709 push(),pop(),top() ;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c pop \u7684\u4f5c\u7528\u662f\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u800c\u4e0d\u4f1a\u8fd4\u56de\u6808\u9876\u5143\u7d20\uff0c\u5b9e\u73b0\u8fd4\u56de\u6808\u9876\u5143\u7d20\u5e76\u5f39\u51fa\u7684\u64cd\u4f5c\u5e94\u8be5\u662f int a = s.top(); s.pop(); . \u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u4e24\u79cd\u5b9e\u73b0\uff0c \u4e00\u79cd\u662f\u666e\u901a\u7684\u961f\u5217 queue ,\u4f7f\u7528\u7684\u65f6\u5019 include<queue> ,\u652f\u6301\u7684\u64cd\u4f5c\u548c\u6808\u7c7b\u4f3c\uff0c push(),pop(),top() \u5206\u522b\u5b9e\u73b0\u6570\u636e\u7684\u5165\u961f\uff0c\u51fa\u961f\u548c\u8bfb\u53d6\u961f\u5217\u7684\u5934\u90e8\u5143\u7d20\u3002 deque \u5b9e\u73b0\u4e86\u53cc\u7aef\u961f\u5217\uff0c\u652f\u6301\u4ece\u4e24\u7aef\u5165\u961f\u548c\u51fa\u961f.\u4f7f\u7528\u7684\u65f6\u5019 include<deque> \u3002","title":"\u6808\u7684\u76f8\u5173\u9898\u76ee"},{"location":"lintcode/stack/#1","text":"\u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 \u4f7f\u7528\u6808\u5b58\u50a8\u6240\u6709\u7684\u5de6\u62ec\u53f7\uff0c\u4e00\u65e6\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u4e0e\u6808\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7ee7\u7eed\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56defalse. bool isValidParentheses ( string & s ) { // \u62ec\u53f7\u5339\u914d\u95ee\u9898 stack < char > cc ; map < char , char > m ; m [ '(' ] = ')' ; m [ '[' ] = ']' ; m [ '{' ] = '}' ; for ( int i = 0 ; i < s . size (); ++ i ){ if ( s [ i ] == '(' || s [ i ] == '[' || s [ i ] == '{' ){ cc . push ( s [ i ]); } if ( s [ i ] == ')' || s [ i ] == ']' || s [ i ] == '}' ){ if ( cc . empty ()) return false ; char tmp = cc . top (); if ( m [ tmp ] != s [ i ]){ return false ; } cc . pop (); } } if ( cc . empty ()) return true ; return false ; }","title":"1. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217"},{"location":"lintcode/stack/#2","text":"\u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","title":"2. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"lintcode/stack/#3","text":"\u5229\u7528\u6808\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u6b65\u9aa4(\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f)\uff1a \u521d\u59cb\u5316\u6808cc\u4e3a\u7a7a\u7528\u6765\u5b58\u653e\u8fd0\u7b97\u7b26\uff0c\u521d\u59cb\u5316string s\u4e3a\u7a7a\u7528\u6765\u5b58\u50a8\u8f6c\u6362\u4e4b\u540e\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\uff1b \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u9047\u5230\u6570\u5b57\u76f4\u63a5\u8f93\u51fa\u5230s. \u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u5982\u679c\u5f53\u524d\u7684\u6808cc\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u5165\u6808\uff1b\u5982\u679c\u9047\u5230\u7684\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\uff1b\u5982\u679c\u9047\u5230\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5165\u6808\uff1b \u5982\u679c\u9047\u5230\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u6808\u9876\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6301\u7eed\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20 \u6216\u8005 \u6808\u4e3a\u7a7a \u4e3a\u6b62\u3002\u5faa\u73af\u9000\u51fa\u540e\u5c06\u5f53\u524d\u8fd0\u7b97\u7b26\u5165\u6808\u3002 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4f46\u4e0d\u8f93\u51fa\u5230s. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f bool isNumber ( string & s ){ // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57 if ( s . empty ()) return false ; if ( s . size () == 1 && s [ 0 ] == '-' ) return false ; for ( size_t i = 0 ; i < s . length (); i ++ ){ // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse if ( ( i > 0 && ( s [ i ] < '0' || s [ i ] > '9' )) ) return false ; // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse. if ( i == 0 && ( s [ i ] != '-' ) && ( s [ i ] < '0' || s [ i ] > '9' ) ) return false ; } return true ; } vector < string > convertToRPN ( vector < string > & expression ) { // write your code here vector < string > ans ; if ( expression . empty ()) return ans ; // \u64cd\u4f5c\u7b26 stack < string > s ; // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > kv ; kv [ \"+\" ] = 3 ; kv [ \"-\" ] = 3 ; kv [ \"*\" ] = 4 ; kv [ \"/\" ] = 4 ; kv [ \"(\" ] = 2 ; kv [ \")\" ] = 6 ; for ( size_t i = 0 ; i < expression . size (); i ++ ){ // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa if ( isNumber ( expression [ i ])){ ans . push_back ( expression [ i ]); } // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406 else if ( kv [ expression [ i ]] >= 2 && kv [ expression [ i ]] <= 6 ){ // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( s . empty () || kv [ expression [ i ]] == 2 ){ s . push ( expression [ i ]); } // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 6 ){ while ( ! s . empty () && s . top () != \"(\" ){ ans . push_back ( s . top ()); s . pop (); } if ( ! s . empty ()) s . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 3 || kv [ expression [ i ]] == 4 ){ // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808 if ( kv [ expression [ i ]] > kv [ s . top ()]){ s . push ( expression [ i ]); } else { while ( ! s . empty () && kv [ expression [ i ]] <= kv [ s . top ()]){ ans . push_back ( s . top ()); s . pop (); } s . push ( expression [ i ]); } } } } // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa while ( ! s . empty ()){ ans . push_back ( s . top ()); s . pop (); } return ans ; }","title":"3. \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f"},{"location":"lintcode/stack/#4","text":"\u5148\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u6c42\u503c\u3002 \u8868\u8fbe\u5f0f\u6c42\u503c int evaluateExpression ( vector < string > expression ) { // write your code here vector < string > r = convert ( expression ); if ( r . empty ()) return 0 ; return evalRPN ( r ); }","title":"4. \u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"lintcode/stack/#5","text":"\u8868\u8fbe\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u7528\u4e8e\u8861\u91cf\u7279\u5b9a\u7684\u8868\u8fbe\u3002\u6240\u6709\u8868\u8fbe\u6811\u7684\u53f6\u5b50\u90fd\u6709\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u503c\u3002\u800c\u6240\u6709\u8868\u8fbe\u6811\u7684\u975e\u53f6\u5b50\u90fd\u6709\u53e6\u4e00\u4e2a\u64cd\u4f5c\u5b57\u7b26\u4e32\u503c\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u6570\u7ec4\uff0c\u8bf7\u6784\u9020\u8be5\u8868\u8fbe\u7684\u8868\u8fbe\u6811\uff0c\u5e76\u8fd4\u56de\u8be5\u8868\u8fbe\u6811\u7684\u6839\u3002 \u8868\u8fbe\u6811\u6784\u9020 \u601d\u8def\uff1a \u53ef\u4ee5\u5229\u7528\u4ee5\u524d\u505a\u8fc7\u7684\u9898\u76ee\uff0c\u5c06\u672c\u9898\u5206\u89e3\u6210\u51e0\u4e2a\u5b50\u95ee\u9898\u3002\u901a\u8fc7\u5206\u6790\u6211\u4eec\u53d1\u73b0\uff0c\u4e2d\u7f00\u8868\u8fbe\u5f0f\u662f\u8868\u8fbe\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u540e\u7f00\u8868\u8fbe\u5f0f\u662f\u8868\u8fbe\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u901a\u8fc7\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e2a\u5728\u4e4b\u524d\u5df2\u7ecf\u505a\u8fc7\u3002\u800c\u901a\u8fc7\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u6240\u4ee5\u8be5\u95ee\u9898\u5206\u89e3\u4e3a\u8fd9\u6837\u51e0\u4e2a\u5b50\u95ee\u9898\uff1a \u6c42\u540e\u7f00\u8868\u8fbe\u5f0f \u6839\u636e\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u91cd\u5efa\u4e8c\u53c9\u6811 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u672c\u9898\u4e2d\u4ee5\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u8282\u70b9\u7684\u503c\uff0c\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u8282\u70b9\u503c\u7684\u552f\u4e00\uff0c\u800c\u91cd\u5efa\u4e8c\u53c9\u6811\u7684\u65f6\u5019\u8981\u6c42\u8282\u70b9\u503c\u552f\u4e00\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u5b9a\u4e49\u65b0\u7ed3\u6784\u7684\u65b9\u6cd5\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u552f\u4e00\u7684\u3002\u5177\u4f53\u89c1\u4ee3\u7801\u3002 struct uniqueNode { string description ; int id ; uniqueNode () : description ( \"\" ), id ( 0 ){} uniqueNode ( string s , int i ) : description ( s ), id ( i ){} }; //Definition of ExpressionTreeNode: class ExpressionTreeNode { public : string symbol ; ExpressionTreeNode * left , * right ; ExpressionTreeNode ( string symbol ) { this -> symbol = symbol ; this -> left = this -> right = NULL ; } }; //\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 ExpressionTreeNode * buildTree ( vector < uniqueNode >& inorder , vector < uniqueNode >& postorder ) { if ( inorder . empty () || postorder . empty ()) { return nullptr ; } ExpressionTreeNode * node = new ExpressionTreeNode ( postorder [ postorder . size () - 1 ]. description ); // \u5148\u5efa\u7acb\u6839\u8282\u70b9 int len = inorder . size (); for ( size_t i = 0 ; i < inorder . size (); ++ i ) { if ( inorder [ i ]. id == postorder [ postorder . size () - 1 ]. id ) { // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002 vector < uniqueNode > left_post ( i ); vector < uniqueNode > left_vin ( i ); vector < uniqueNode > right_post ( len - 1 - i ); vector < uniqueNode > right_vin ( len - 1 - i ); copy ( inorder . begin (), inorder . begin () + i , left_vin . begin ()); copy ( inorder . begin () + i + 1 , inorder . end (), right_vin . begin ()); copy ( postorder . begin (), postorder . begin () + i , left_post . begin ()); copy ( postorder . begin () + i , postorder . end () - 1 , right_post . begin ()); node -> left = buildTree ( left_vin , left_post ); node -> right = buildTree ( right_vin , right_post ); } } return node ; } inline bool isnumber ( string & s ){ for ( auto a : s ){ if ( a > '9' || a < '0' ){ return false ; } } return true ; } /** * \u4e2d\u7f00\u8868\u8fbe\u5f0f -> \u540e\u7f00\u8868\u8fbe\u5f0f * @param expression * @return */ vector < uniqueNode > convert ( vector < uniqueNode > expression ) { vector < uniqueNode > re ; stack < uniqueNode > cc ; // \u8bbe\u7f6e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > p ; p [ \"+\" ] = 3 ; p [ \"-\" ] = 3 ; p [ \"*\" ] = 4 ; p [ \"/\" ] = 4 ; p [ \"(\" ] = 2 ; p [ \")\" ] = 1 ; for ( int i = 0 ; i < expression . size (); i ++ ){ // \u9047\u5230\u6570\u5b57\u76f4\u63a5\u5165\u6808 if ( isnumber ( expression [ i ]. description )){ re . push_back ( expression [ i ]); continue ; } // \u9047\u5230\u64cd\u4f5c\u7b26 if ( p [ expression [ i ]. description ] >= 1 && p [ expression [ i ]. description ] <= 4 ){ //\u6808\u4e3a\u7a7a\u6216\u8005\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( cc . empty () || p [ expression [ i ]. description ] == 2 || p [ expression [ i ]. description ] > p [ cc . top (). description ]){ cc . push ( expression [ i ]); } //\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u4e2d\u5de6\u62ec\u53f7\u4e4b\u524d\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u53f7\uff0c\u8f93\u51fa\uff0c\u6700\u540e\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4e0d\u8f93\u51fa else if ( p [ expression [ i ]. description ] == 1 ){ while ( cc . top (). description != \"(\" ){ auto tmp = cc . top (); re . push_back ( tmp ); cc . pop (); } cc . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5e94\u8be5\u5148\u8ba1\u7b97\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u5f39\u51fa\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\uff0c\u628a\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808 else if ( p [ expression [ i ]. description ] <= p [ cc . top (). description ]){ // \u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26 while ( ! cc . empty () && p [ expression [ i ]. description ] <= p [ cc . top (). description ]){ re . push_back ( cc . top ()); cc . pop (); } // \u5f53\u6808\u4e3a\u7a7a \u6216\u8005 \u9047\u5230\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f\u4f4e\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\uff0c\u5faa\u73af\u9000\u51fa cc . push ( expression [ i ]); //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u63a5\u5165\u6808 } continue ; } cout << \"error 1.\" << endl ; } while ( ! cc . empty ()){ re . push_back ( cc . top ()); cc . pop (); } return re ; } ExpressionTreeNode * build ( vector < string > & expression ) { vector < uniqueNode > v ; for ( int i = 0 ; i < expression . size (); ++ i ) { v . push_back ( uniqueNode ( expression [ i ], i + 1 )); } auto last = convert ( v ); for ( int j = 0 ; j < v . size (); ++ j ) { if ( v [ j ]. description == \"(\" || v [ j ]. description == \")\" ){ v . erase ( v . begin () + j ); j -- ; } } auto head = buildTree ( v , last ); return head ; } \u8868\u8fbe\u6811\u7684\u7279\u6b8a\u7ed3\u6784\u51b3\u5b9a\u4e86\u6211\u4eec\u53ea\u6839\u636e\u540e\u7f00\u8868\u8fbe\u5f0f\u4e5f\u80fd\u6784\u9020\u51fa\u6765\u4e00\u68f5\u8868\u8fbe\u6811(\u6ce8\u610f\uff1a\u53ea\u6839\u636e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u662f\u4e0d\u80fd\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\uff0c\u56e0\u4e3a\u7b54\u6848\u4e0d\u552f\u4e00\u3002)\uff0c\u5177\u4f53\u7684\u505a\u6cd5\u662f\u6a21\u62df\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u987a\u5e8f\u3002 //Definition of ExpressionTreeNode: class ExpressionTreeNode { public : string symbol ; ExpressionTreeNode * left , * right ; ExpressionTreeNode ( string symbol ) { this -> symbol = symbol ; this -> left = this -> right = NULL ; } }; bool isnumber ( string & s ){ for ( int i = 0 ; i < s . size (); ++ i ) { if ( s [ i ] < '0' || s [ i ] > '9' ) return false ; } return true ; } bool isoperator ( string & s ){ if ( s == \"+\" || s == \"-\" || s == \"*\" || s == \"/\" ) return true ; return false ; } vector < string > convert ( vector < string > expression ) { vector < string > re ; stack < string > cc ; // \u8bbe\u7f6e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > p ; p [ \"+\" ] = 3 ; p [ \"-\" ] = 3 ; p [ \"*\" ] = 4 ; p [ \"/\" ] = 4 ; p [ \"(\" ] = 2 ; p [ \")\" ] = 1 ; for ( int i = 0 ; i < expression . size (); i ++ ){ // \u9047\u5230\u6570\u5b57\u76f4\u63a5\u5165\u6808 if ( isnumber ( expression [ i ])){ re . push_back ( expression [ i ]); continue ; } // \u9047\u5230\u64cd\u4f5c\u7b26 if ( p [ expression [ i ]] >= 1 && p [ expression [ i ]] <= 4 ){ //\u6808\u4e3a\u7a7a\u6216\u8005\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( cc . empty () || p [ expression [ i ]] == 2 || p [ expression [ i ]] > p [ cc . top ()]){ cc . push ( expression [ i ]); } //\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u4e2d\u5de6\u62ec\u53f7\u4e4b\u524d\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u53f7\uff0c\u8f93\u51fa\uff0c\u6700\u540e\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4e0d\u8f93\u51fa else if ( p [ expression [ i ]] == 1 ){ while ( cc . top () != \"(\" ){ string tmp = cc . top (); re . push_back ( tmp ); cc . pop (); } cc . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5e94\u8be5\u5148\u8ba1\u7b97\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u5f39\u51fa\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\uff0c\u628a\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808 else if ( p [ expression [ i ]] <= p [ cc . top ()]){ // \u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26 while ( ! cc . empty () && p [ expression [ i ]] <= p [ cc . top ()]){ re . push_back ( cc . top ()); cc . pop (); } // \u5f53\u6808\u4e3a\u7a7a \u6216\u8005 \u9047\u5230\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f\u4f4e\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\uff0c\u5faa\u73af\u9000\u51fa cc . push ( expression [ i ]); //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u63a5\u5165\u6808 } continue ; } cout << \"error 1.\" << endl ; } while ( ! cc . empty ()){ re . push_back ( cc . top ()); cc . pop (); } return re ; } ExpressionTreeNode * build ( vector < string > & expression ) { expression = convert ( expression ); if ( expression . empty ()) return nullptr ; stack < ExpressionTreeNode *> cc ; for ( int i = 0 ; i < expression . size (); ++ i ) { if ( isnumber ( expression [ i ])){ ExpressionTreeNode * node = new ExpressionTreeNode ( expression [ i ]); cc . push ( node ); } if ( isoperator ( expression [ i ])){ ExpressionTreeNode * node = new ExpressionTreeNode ( expression [ i ]); ExpressionTreeNode * right = cc . top (); cc . pop (); ExpressionTreeNode * left = cc . top (); cc . pop (); node -> left = left ; node -> right = right ; cc . push ( node ); } } return cc . top (); }","title":"5. \u8868\u8fbe\u6811\u6784\u9020"},{"location":"lintcode/stack/#6","text":"s = abc3[a], return abcaaa s = 3[abc], return abcabcabc s = 4[ac]dy, return acacacacdy s = 3[2[ad]3[pf]]xyz, return adadpfpfpfadadpfpfpfadadpfpfpfxyz Expression Expand string expressionExpand ( string & s ) { bool finished = true ; for ( int i = 0 ; i < s . length (); ++ i ){ if ( s [ i ] == '[' || s [ i ] == ']' ){ finished = false ; break ; } } if ( finished ) return s ; int left , right , pre_left ; for ( int i = 0 ; i < s . length (); ++ i ){ if ( s [ i ] == '[' ){ left = i ; } if ( s [ i ] == ']' ){ for ( int j = left - 1 ; j >= 0 ; -- j ){ if ( s [ j ] >= '0' && s [ j ] <= '9' ){ pre_left = j ; } else { break ; } } string num = s . substr ( pre_left , left - pre_left ); int count = stoi ( num ); string cycle = s . substr ( left + 1 , i - left - 1 ); string cycle_with_count = \"\" ; while ( count -- ){ cycle_with_count += cycle ; } s . erase ( pre_left , i - pre_left + 1 ); s . insert ( pre_left , cycle_with_count ); return expressionExpand ( s ); } } return expressionExpand ( s ); }","title":"6. \u7b80\u6613\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u89e3\u6790"},{"location":"lintcode/stack/#7-getmin","text":"\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u5728O(1)\u65f6\u95f4\u5185\u5f97\u5230\u6700\u5c0f\u503c\u7684\u6808\u7ed3\u6784\u3002\u652f\u6301 pop(),push(),top(),getMin() \u56db\u79cd\u64cd\u4f5c\u3002 \u5e26\u6700\u5c0f\u503c\u64cd\u4f5c\u7684\u6808 \u601d\u8def \u4f7f\u7528\u4e24\u4e2a\u6808\u6765\u6a21\u62df\u8fd9\u4e2a\u6808\uff0c\u4e00\u4e2a\u6808\u7528\u6765\u4fdd\u5b58\u5b9e\u9645\u7684\u6570\u636e\uff0c\u4e00\u4e2a\u6808\u7528\u6765\u4fdd\u5b58\u5bf9\u5e94\u6570\u636e\u7684\u6700\u5c0f\u503c\u3002\u6bcf\u6b21\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5224\u65ad\u6700\u5c0f\u503c\u6709\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u76f4\u63a5\u5f39\u51fa\u6570\u636e\uff0c\u5982\u679c\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u66f4\u65b0\u5b58\u50a8\u6700\u5927\u503c\u6700\u5c0f\u503c\u7684\u6808\u3002 class StackWithGetMin2 { public : stack < int > data ; stack < int > min_data ; void push ( int val ){ data . push ( val ); if ( ! min_data . empty ()){ if ( min_data . top () >= val ){ min_data . push ( val ); } } else { min_data . push ( val ); } } int pop (){ auto v = data . top (); if ( v > min_data . top ()){ data . pop (); return v ; } else { data . pop (); min_data . pop (); return v ; } } int getMin (){ if ( min_data . empty ){ throw new exception ;} else { return min_data . top (); } } int top (){ return data . top (); } };","title":"7. \u5e26\u6709getMin()\u7684\u6808"},{"location":"lintcode/stack/#8-132","text":"Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list. n will be less than 20,000. pattern bool find132pattern ( vector < int >& nums ) { int third = INT32_MIN ; stack < int > s ; for ( int i = nums . size () - 1 ; i >= 0 ; -- i ) { if ( nums [ i ] < third ) return true ; else while ( ! s . empty () && nums [ i ] > s . top ()) { third = s . top (); s . pop (); } s . push ( nums [ i ]); } return false ; }","title":"8. 132\u5e8f\u5217"},{"location":"lintcode/stack/#9","text":"\u7528\u6808\u5b9e\u73b0\u961f\u5217 class MyQueue { public : stack < int > stack1 ; stack < int > stack2 ; MyQueue () { // do intialization if necessary } void push ( int element ) { // write your code here stack1 . push ( element ); } int pop () { // write your code here if ( stack2 . empty ()){ if ( stack1 . empty ()){ return - 1 ; } while ( ! stack1 . empty ()){ int a = stack1 . top (); stack1 . pop (); stack2 . push ( a ); } } int a = stack2 . top (); stack2 . pop (); return a ; } int top () { // write your code here if ( stack2 . empty ()){ if ( stack1 . empty ()){ return - 1 ; } while ( ! stack1 . empty ()){ int a = stack1 . top (); stack1 . pop (); stack2 . push ( a ); } } int a = stack2 . top (); return a ; } };","title":"9. \u7528\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"lintcode/stack/#10","text":"\u8981\u6c42\u6392\u5e8f\u597d\u7684\u6570\u636e\u5c31\u5728\u539f\u6765\u7684\u6808\u91cc\u9762\u3002 \u601d\u8def \u8bbe\u5b58\u653e\u6570\u636e\u7684\u6808\u662f s , \u8f85\u52a9\u6392\u5e8f\u7684\u6808\u662f help ,\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf v \u7528\u6765\u6682\u5b58\u4ece\u6808\u91cc\u9762\u51fa\u6765\u7684\u6570\u636e\u3002\u6211\u4eec\u53ea\u8981\u786e\u4fdd\u628a s \u4e2d\u7684\u6570\u6709\u5e8f\u7684\u5165\u6808 help ,\u7136\u540e\u5728\u53cd\u5411\u4ece help \u538b\u5165 s \u5c31\u80fd\u5f97\u5230\u9700\u8981\u7684\u7ed3\u679c\u3002\u5982\u679c\u8981\u6c42\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5373 s \u6808\u9876\u7684\u5143\u7d20\u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48 help \u4e2d\u5c31\u5e94\u8be5\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f,\u6808\u9876\u7684\u5143\u7d20\u662f\u6700\u5c0f\u7684\u3002\u6bcf\u6b21\u4ece s \u5411 help \u79fb\u52a8\u6570\u636e\u7684\u65f6\u5019\uff0c\u90fd\u8981\u548c help \u7684\u6808\u9876\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5165\u6808\uff0c\u5982\u679c\u5927\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u628a\u6808\u9876\u5143\u7d20\u5165\u6808\u5230 s ,\u76f4\u5230 v \u4e2d\u7684\u6570\u5c0f\u4e8e help \u7684\u6808\u9876\u5143\u7d20\uff0c\u624d\u5c06 v \u5165\u6808\u5230 help ,\u5176\u5b9e\u8fd9\u6709\u70b9\u5411\u6c49\u8bfa\u5854\u95ee\u9898\uff0c\u5faa\u73af\u5229\u7528\u4e24\u4e2a\u6808\u505a\u4e2d\u8f6c\uff0c\u53ea\u4e0d\u8fc7\u66f4\u52a0\u7b80\u5355\u3002 void sortStack ( stack < int > s ){ stack < int > help ; help . push ( s . top () ); s . pop (); auto v = s . top (); if ( help . top () > v ){ help . push ( v ); s . pop (); } else { while ( help . top () <= v ){ auto temp = help . top (); help . pop (); s . push ( temp ); } help . push ( v ); } }","title":"10. \u7528\u4e00\u4e2a\u6808\u6392\u5e8f\u53e6\u5916\u4e00\u4e2a\u6808"},{"location":"lintcode/stack/#11","text":"\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217, 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09 \u601d\u8def \u8bbe\u538b\u5165\u5e8f\u5217\u662f pushV ,\u5f39\u51fa\u5e8f\u5217\u662f popV ,\u4ece pushV \u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u548c popV \u9996\u5143\u7d20\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5047\u8bbe\u662f a ,\u53ef\u4ee5\u77e5\u9053 a \u5fc5\u5b9a\u662f\u538b\u5165\u6808\u4e4b\u540e\u5c31\u88ab\u5f39\u51fa\u6765\u4e86\u3002\u5047\u8bbe\u7528\u4e00\u4e2a\u4e34\u65f6\u7684\u6808 s1 \u4fdd a \u4e4b\u524d\u5165\u6808\u7684\u5143\u7d20\u548c a ,\u90a3\u4e48\u6b64\u65f6 popV \u548c s1 \u7684\u6808\u9876\u5143\u7d20\u5e94\u8be5\u662f\u4e00\u81f4\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u904d\u5386 popV \u4e2d\u7684\u5143\u7d20\uff0c\u4e0e s1 \u4e2d\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5f39\u51fa\u8be5\u5143\u7d20, popV \u7684\u6307\u9488\u52a01,\u7ee7\u7eed\u4e0b\u4e00\u6b21\u6bd4\u8f83.\u5982\u679c\u4e0d\u76f8\u7b49,\u5c31\u628a pushV \u4e2d a \u540e\u9762\u7684\u5143\u7d20\u7ee7\u7eed\u5165\u6808\u5230 s1 , popV \u7684\u6307\u9488\u4e0d\u52a8\uff0c\u7ee7\u7eed\u6bd4\u8f83 popV \u548c\u5f53\u524d s1 \u7684\u6808\u9876\u5143\u7d20\u662f\u4e0d\u662f\u76f8\u7b49\u3002\u6309\u7167\u8fd9\u6837\u7684\u89c4\u5219\u5904\u7406\uff0c\u76f4\u5230\u6307\u9488\u8d70\u5230\u5c3d\u5934\uff0c\u770b s1 \u4e2d\u7684\u5143\u7d20\u662f\u5426\u975e\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\u7684\uff0c popV \u5c31\u662f pushV \u7684\u5f39\u51fa\u5e8f\u5217\u3002 bool IsPopOrder ( vector < int > pushV , vector < int > popV ) { if ( pushV . size () != popV . size ()) return false ; stack < int > s1 ; //\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u5143\u7d20 size_t i = 0 ; while ( pushV [ i ] != popV [ 0 ] && i < pushV . size ()){ s1 . push ( pushV [ i ]); i ++ ; } s1 . push ( pushV [ i ]); //\u6b64\u65f6\u662fs1\u6808\u9876\u548cpopV\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff1b i ++ ; //i\u6307\u5411\u4e0b\u4e00\u5143\u7d20\uff1b for ( size_t j = 0 ; j <= popV . size (); j ++ ){ if ( j < popV . size () && popV [ j ] == s1 . top () ){ s1 . pop (); } else if ( i < pushV . size ()){ s1 . push ( pushV [ i ]); j -- ; i ++ ; } else if ( j == popV . size () && s1 . empty ()){ return true ; } else { return false ; } } return false ; }","title":"11. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"lintcode/test/index.py.html","text":"test.py \u00b6 MAX_OF_CHARS = 256 def badCharHeuristic ( string , size ): ''' \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219, \u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u7684\u8bbe\u7f6e\u4e3a -1 ''' badChar = [ - 1 ] * MAX_OF_CHARS for i in range ( size ): badChar [ ord ( string [ i ]) ] = i return badChar def search ( string , pattern ): ''' \u53ea\u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219\u7684Boyer Moore\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 ''' m = len ( pattern ) n = len ( string ) badChars = badCharHeuristic ( pattern , m ) # s is shift of the pattern with respect to text s = 0 while s <= n - m : # j \u6307\u5411 s \u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e j = m - 1 while j >= 0 and pattern [ j ] == string [ s + j ]: j -= 1 # \u5982\u679c j \u5c0f\u4e8e0\uff0c \u8868\u793a\u627e\u5230\u4e86\u4e00\u4e2a\u5339\u914d\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4e2a\u5339\u914d if j < 0 : print ( \"Pattern occur at shift = {} \" . format ( s )) # \u5982\u679c s + m \u5c0f\u4e8e n, \u76f4\u63a5\u5bf9\u5176S\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 if s + m < n : s += m - badChars [ ord ( string [ s + m ]) ] else : s += 1 else : s += max ( 1 , j - badChars [ ord ( string [ s + j ]) ]) return 0 txt = \"ABAAABCD\" pat = \"ABC\" search ( txt , pat )","title":"Test.py"},{"location":"lintcode/test/index.py.html#testpy","text":"MAX_OF_CHARS = 256 def badCharHeuristic ( string , size ): ''' \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219, \u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u7684\u8bbe\u7f6e\u4e3a -1 ''' badChar = [ - 1 ] * MAX_OF_CHARS for i in range ( size ): badChar [ ord ( string [ i ]) ] = i return badChar def search ( string , pattern ): ''' \u53ea\u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219\u7684Boyer Moore\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 ''' m = len ( pattern ) n = len ( string ) badChars = badCharHeuristic ( pattern , m ) # s is shift of the pattern with respect to text s = 0 while s <= n - m : # j \u6307\u5411 s \u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e j = m - 1 while j >= 0 and pattern [ j ] == string [ s + j ]: j -= 1 # \u5982\u679c j \u5c0f\u4e8e0\uff0c \u8868\u793a\u627e\u5230\u4e86\u4e00\u4e2a\u5339\u914d\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4e2a\u5339\u914d if j < 0 : print ( \"Pattern occur at shift = {} \" . format ( s )) # \u5982\u679c s + m \u5c0f\u4e8e n, \u76f4\u63a5\u5bf9\u5176S\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 if s + m < n : s += m - badChars [ ord ( string [ s + m ]) ] else : s += 1 else : s += max ( 1 , j - badChars [ ord ( string [ s + j ]) ]) return 0 txt = \"ABAAABCD\" pat = \"ABC\" search ( txt , pat )","title":"test.py"},{"location":"lintcode/test2/index.py.html","text":"test2.py \u00b6 # -*- coding: utf-8 -*- MAX_OF_CHARS = 256 def badCharHeuristic ( string , size ): ''' \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219, \u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u7684\u8bbe\u7f6e\u4e3a -1 ''' badChar = [ - 1 ] * MAX_OF_CHARS for i in range ( size ): badChar [ ord ( string [ i ]) ] = i return badChar def search ( string , pattern ): ''' \u53ea\u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219\u7684Boyer Moore\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 ''' m = len ( pattern ) n = len ( string ) badChars = badCharHeuristic ( pattern , m ) # s is shift of the pattern with respect to text s = 0 txt = \"ABAAABCD\" pat = \"ABC\" search ( txt , pat )","title":"-*- coding: utf-8 -*-"},{"location":"lintcode/test2/index.py.html#test2py","text":"# -*- coding: utf-8 -*- MAX_OF_CHARS = 256 def badCharHeuristic ( string , size ): ''' \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219, \u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u7684\u8bbe\u7f6e\u4e3a -1 ''' badChar = [ - 1 ] * MAX_OF_CHARS for i in range ( size ): badChar [ ord ( string [ i ]) ] = i return badChar def search ( string , pattern ): ''' \u53ea\u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219\u7684Boyer Moore\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 ''' m = len ( pattern ) n = len ( string ) badChars = badCharHeuristic ( pattern , m ) # s is shift of the pattern with respect to text s = 0 txt = \"ABAAABCD\" pat = \"ABC\" search ( txt , pat )","title":"test2.py"},{"location":"lintcode/tree/","text":"\u6811\u7684\u76f8\u5173\u9898\u76ee \u00b6 \u3010\u524d\u5e8f\u904d\u5386\u3011\u3010\u4e2d\u5e8f\u904d\u5386\u3011\u3010\u540e\u5e8f\u904d\u5386\u3011\u3010\u8def\u5f84\u641c\u7d22\u3011\u3010\u516c\u5171\u7956\u5148\u3011\u3010\u5806\u3011\u3010top K\u3011\u3010\u7ebf\u6bb5\u6811\u3011\u3010\u6811\u72b6\u6570\u7ec4\u3011\u3010\u5e76\u67e5\u96c6\u3011 1. \u524d\u5e8f\u904d\u5386 \u00b6 class TreeNode { public : int val ; TreeNode * left , * right ; TreeNode ( int val ) { this -> val = val ; this -> left = this -> right = NULL ; } }; // \u9012\u5f52\u524d\u5e8f\u904d\u5386 vector < int > preorderTraversal ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; re . push_back ( root -> val ); if ( root -> left ){ auto tmp = preorderTraversal ( root -> left ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } if ( root -> right ){ auto tmp = preorderTraversal ( root -> right ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } return re ; } // \u975e\u9012\u5f52\u524d\u5e8f\u904d\u5386 vector < int > preorder ( TreeNode * root ){ vector < int > re ; if ( ! root ) return re ; stack < TreeNode *> s ; TreeNode * iter = root ; while ( iter || ! s . empty ()){ while ( iter ){ // \u9996\u5148\u8f93\u51fa\u6839 re . push_back ( iter -> val ); s . push ( iter ); iter = iter -> left ; } iter = s . top (); s . pop (); iter = iter -> right ; } return re ; } 2. \u4e2d\u5e8f\u904d\u5386 \u00b6 // \u9012\u5f52\u4e2d\u5e8f\u904d\u5386 vector < int > inorderTraversal ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; if ( root -> left ){ auto tmp = inorderTraversal ( root -> left ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } re . push_back ( root -> val ); if ( root -> right ){ auto tmp = inorderTraversal ( root -> right ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } return re ; } // \u975e\u9012\u5f52\u4e2d\u5e8f\u904d\u5386 vector < int > inorder ( TreeNode * root ){ vector < int > re ; if ( ! root ) return re ; stack < TreeNode *> s ; TreeNode * iter = root ; while ( iter || ! s . empty ()){ while ( iter ){ s . push ( iter ); iter = iter -> left ; } iter = s . top (); s . pop (); // \u8f93\u51fa re . push_back ( iter -> val ); iter = iter -> right ; } return re ; } 3. \u540e\u5e8f\u904d\u5386 \u00b6 // \u9012\u5f52\u540e\u5e8f\u904d\u5386 vector < int > postorderTraversal ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; if ( root -> left ){ auto tmp = postorderTraversal ( root -> left ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } if ( root -> right ){ auto tmp = postorderTraversal ( root -> right ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } re . push_back ( root -> val ); return re ; } // \u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > postOrder ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; TreeNode * iter = root ; stack < TreeNode *> s ; TreeNode * last = root ; s . push ( iter ); while ( ! s . empty ()) { iter = s . top (); // 1. \u5f53\u524d\u8282\u70b9\u662f\u53f6\u8282\u70b9(\u6ca1\u6709\u5de6\u53f3\u5b69\u5b50)\uff0c\u8f93\u51fa // 2. \u4e0a\u6b21\u8bbf\u95ee\u4e86\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b69\u5b50\uff0c\u800c\u4e14\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u8f93\u51fa // 3. \u4e0a\u6b21\u8bbf\u95ee\u4e86\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u8f93\u51fa if ( ( iter -> left == nullptr && iter -> right == nullptr ) || ( iter -> right == nullptr && last == iter -> left ) || ( last == iter -> right ) ) { re . push_back ( iter -> val ); last = iter ; s . pop (); } else { // \u6808\u662f\u540e\u8fdb\u5148\u51fa\u7684\uff0c\u8981\u5148\u5904\u7406\u5de6\u5b69\u5b50\uff0c\u6240\u4ee5\u8981\u5148\u653e\u5165\u53f3\u8017\u8d44 if ( iter -> right ) s . push ( iter -> right ); if ( iter -> left ) s . push ( iter -> left ); } } return re ; } 4. \u4e8c\u53c9\u6811\u7684\u8def\u5f84\u641c\u7d22 \u00b6 // \u641c\u7d22\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6240\u6709\u8def\u5f84 [http://lintcode.com/zh-cn/problem/binary-tree-paths/#] vector < vector < int >> vv ; void binaryTreePaths ( TreeNode * root , vector < int > & tmp ) { // write your code here if ( ! root -> left && ! root -> right ){ tmp . push_back ( root -> val ); vv . push_back ( tmp ); tmp . clear (); return ; } else { tmp . push_back ( root -> val ); vector < int > tmp1 ( tmp ); vector < int > tmp2 ( tmp ); if ( root -> left ) binaryTreePaths ( root -> left , tmp1 ); if ( root -> right ) binaryTreePaths ( root -> right , tmp2 ); } } 5. \u4e8c\u53c9\u6811\u6700\u5927\u6df1\u5ea6 \u00b6 // \u8c03\u7528\u65b9\u5f0f\uff1a maxDepth2(root,0) int maxDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return maxDepth2 ( root -> left , dep + 1 ); if ( root -> right && ! root -> left ) return maxDepth2 ( root -> right , dep + 1 ); return max ( maxDepth2 ( root -> left , dep + 1 ), maxDepth2 ( root -> right , dep + 1 )); } 6. \u4e8c\u53c9\u6811\u6700\u5c0f\u6df1\u5ea6 \u00b6 // \u6700\u5c0f\u6df1\u5ea6 int minDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return minDepth2 ( root -> left , dep + 1 ); if ( ! root -> left && root -> right ) return minDepth2 ( root -> right , dep + 1 ); return min ( minDepth2 ( root -> left , dep + 1 ), minDepth2 ( root -> right , dep + 1 )); } 7. \u53f6\u5b50\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u7684\u641c\u7d22 \u00b6 map < TreeNode * , vector < TreeNode *>> nodes ; // \u5b58\u50a8\u6811\u7684\u7ed3\u6784 map < TreeNode * , bool > visited ; vector < vector < int >> vv ; void dfs ( TreeNode * leaf , vector < int > & v ){ visited [ leaf ] = true ; vector < TreeNode *> tmp = nodes [ leaf ]; bool is = true ; v . push_back ( leaf -> val ); for ( int i = 0 ; i < tmp . size (); i ++ ){ if ( visited [ tmp [ i ]] == false ){ vector < int > v1 ( v ); dfs ( tmp [ i ], v1 ); is = false ; } } if ( is ){ // \u53f6\u8282\u70b9 vv . push_back ( v ); } return ; } 8. top K \u95ee\u9898 \u00b6 \u5982\u679c\u662f\u6700\u5927\u7684K\u4e2a\u6570\uff0c\u90a3\u4e48\u9996\u5148\u4f7f\u7528\u524dK\u4e2a\u6570\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u7136\u540e\u4ece\u7b2cK+1\u4e2a\u6570\u5f00\u59cb\u548c\u5806\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5927\u4e8e\u5806\u9876\u7684\u5143\u7d20\uff0c\u5c31\u628a\u5806\u9876\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u628a\u8be5\u5143\u7d20push\u8fdb\u5806\u3002 vector < int > topk ( vector < int > & v , int k ){ priority_queue < int , vector < int > , greater < int >> heap ; // \u6700\u5c0f\u5806\uff08\u5806\u9876\u5143\u7d20\u6700\u5c0f\uff09 for ( int i = 0 ; i < k ; i ++ ){ heap . push ( v [ i ]); } for ( int i = k ; i < v . size (); i ++ ){ if ( v [ i ] > heap . top ()){ heap . pop (); heap . push ( v [ i ]); } } vector < int > re ; while ( ! heap . empty ()){ re . push_back ( heap . top ()); heap . pop (); } return re ; } 9. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570 \u00b6 \u4f7f\u7528\u5927\u9876\u5806( priority_queue<int,vector<int>,less<int>> ) \u4fdd\u5b58\u524d\u534a\u90e8\u5206\u7684\u6570\u636e\uff0c\u4f7f\u7528\u5c0f\u9876\u5806( priority_queue<int,vector<int>,greater<int>> ) \u4fdd\u5b58\u540e\u534a\u90e8\u5206\u7684\u6570\u636e, \u4fdd\u8bc1\u5927\u9876\u5806\u7684\u9876 \u5c0f\u4e8e\u7b49\u4e8e \u5c0f\u9876\u5806\u7684\u9876\uff0c \u90a3\u4e48\u5728\u6bcf\u6b21\u9700\u8981\u6c42\u5f53\u524d\u7684\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u4e86\u3002 class MedianFinder { private : priority_queue < int , vector < int > , less < int >> maxHeap ; priority_queue < int , vector < int > , greater < int >> minHeap ; long long n ; bool is_left ; public : MedianFinder () { this -> n = 0 ; this -> is_left = true ; } void addNum ( int num ) { // \u8f6e\u6d41\u52a0\u5165\u5de6\u53f3\u4e24\u4e2a\u5806 if ( is_left ){ // \u5982\u679cright\u7684\u5806\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u786e\u4fdd\u5de6\u8fb9\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u8fb9\u6700\u5c0f\u7684\uff0c\u76f4\u63a5\u52a0\u5165 // \u5982\u679c\u8981\u52a0\u5165\u7684\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8eright\u7684\u5806\u9876\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u4e0a\u8ff0\u6761\u4ef6 if ( minHeap . empty () || num <= minHeap . top ()){ maxHeap . push ( num ); } // \u5982\u679cnum > minHeap.top(); \u4e0d\u80fd\u76f4\u63a5\u52a0\u5165maxHeap,\u56e0\u4e3a\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1maxHeap\u4e2d\u7684\u6240\u6709\u7684\u6570\u5b57\u90fd\u5c0f\u4e8e\u7b49\u4e8eminHeap\u4e2d\u7684\u6570\u5b57\u3002 // \u8fd9\u4e2a\u65f6\u5019\u7684\u505a\u6cd5\u662f\uff0c \u5148\u628anum\u52a0\u5165minHeap, \u5728\u628aminHeap.top()\u5f39\u51fa\uff0c\u52a0\u5165maxHeap; else { minHeap . push ( num ); maxHeap . push ( minHeap . top ()); minHeap . pop (); } is_left = ! is_left ; } if ( ! is_left ){ if ( maxHeap . empty () || num >= maxHeap . top ()){ minHeap . push ( num ); } else { maxHeap . push ( num ); minHeap . push ( maxHeap . top ()); maxHeap . pop (); } is_left = ! is_left ; } this -> n ++ ; } double findMedian () { if ( n >> 1 ){ return ( maxHeap . top () + minHeap . top ()) / 2.0 ; } else { return maxHeap . top (); } } }; 10. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u00b6 \u8fd9\u91cc\u4f7f\u7528\u5c0f\u9876\u5806\u8fd9\u79cd\u7ed3\u6784\u4fdd\u5b58K\u4e2a\u94fe\u8868\uff0c\u6bcf\u6b21\u53d6\u5f97\u5806\u9876\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u5f97\u5230K\u4e2a\u94fe\u8868\u4e2d\u6700\u5c0f\u7684\u3002 ListNode * mergeKLists ( vector < ListNode *> & lists ) { priority_queue < ListNode * , vector < ListNode *> , bigger > minHeap ; if ( lists . empty ()) return nullptr ; for ( int i = 0 ; i < lists . size (); i ++ ){ if ( lists [ i ]) minHeap . push ( lists [ i ]); } ListNode * head = nullptr ; ListNode * iter = nullptr ; while ( ! minHeap . empty ()){ if ( head == nullptr ){ head = minHeap . top (); iter = head ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } else { iter -> next = minHeap . top (); iter = iter -> next ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } } return head ; } 11. \u5806\u6392\u5e8f \u00b6 \u4f7f\u7528\u5806\u8fd9\u79cd\u7ed3\u6784\u7ef4\u62a4\u6570\u636e\u7684\u6709\u5e8f\u6027\uff0c\u4ece\u800c\u8fdb\u884c\u6392\u5e8f\u7684\u7b97\u6cd5\u662f\u5806\u6392\u5e8f\u3002\u5806\u6392\u5e8f\u7684\u5177\u4f53\u6b65\u9aa4\u662f\uff1a \u4f7f\u7528\u8981\u6392\u5e8f\u7684\u6574\u4e2a\u6570\u7ec4\u5efa\u7acb\u5806\u3002\u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u548c\u5806\u9876\u5143\u7d20\u4ea4\u6362\uff0c\u5806\u7684\u5927\u5c0f\u51cf1\uff0c\u8c03\u6574\u5806\uff0c\u7136\u540e\u518d\u628a\u65b0\u7684\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u548c\u5806\u9876\u5143\u7d20\u4ea4\u6362\uff0c\u8c03\u6574\u5806\uff0c\u76f4\u5230\u5168\u90e8\u6570\u636e\u6709\u5e8f\u4e3a\u6b62\u3002 void heapSort ( vector < int > & v ){ // \u5efa\u7acb\u6700\u5927\u5806 make_heap ( v . begin (), v . end (), less < int > ()); int index = v . size (); while ( index > 0 ){ // \u4ea4\u6362\u5806\u9876\u548c\u5806\u5c3e\u7684\u5143\u7d20\uff0c\u91cd\u65b0\u8c03\u6574\u5806 pop_heap ( v . begin (), v . begin () + index , less < int > ()); index -- ; } } 12. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 \u00b6 #include <iostream> #include <vector> #include <string> #include <stack> #include <queue> using namespace std ; template < typename T > struct Node { T val ; Node * left , * right ; Node (){} Node ( T init ) : val ( init ), left ( nullptr ), right ( nullptr ) {} }; /** * \u4e8c\u53c9\u6811\u7684\u5148\u6839\u904d\u5386\uff0c\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u4f7f\u7528\u6808 * @param root * @return */ vector < int > preOrder ( Node < int >* root ){ vector < int > ans ; if ( ! root ) return ans ; stack < Node < int >*> s ; Node < int >* iter = root ; while ( iter || ! s . empty ()){ while ( iter ){ ans . push_back ( iter -> val ); s . push ( iter ); iter = iter -> left ; } iter = s . top (); s . pop (); iter = iter -> right ; } return ans ; } /** * \u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4f7f\u7528\u961f\u5217 * @param root * @return */ vector < int > levelOrder ( Node < int >* root ){ vector < int > ans ; if ( ! root ) return ans ; queue < Node < int >*> q ; q . push ( root ); Node < int >* iter ; while ( ! q . empty ()){ iter = q . front (); if ( iter ){ ans . push_back ( iter -> val ); if ( iter -> left ) q . push ( iter -> left ); if ( iter -> right ) q . push ( iter -> right ); } q . pop (); } return ans ; } /** * \u4f7f\u7528\u5c42\u6b21\u904d\u5386\u7684\u65b9\u6cd5\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 * @param root * @return */ vector < string > levelOrderSeries ( Node < int >* root ){ vector < string > ans ; if ( ! root ) return ans ; queue < Node < int >*> q ; q . push ( root ); Node < int >* iter ; while ( ! q . empty ()){ iter = q . front (); if ( iter ){ if ( iter -> val != - 1 ){ ans . push_back ( to_string ( iter -> val )); if ( iter -> left ){ q . push ( iter -> left ); } else { q . push ( new Node < int > ( - 1 )); } if ( iter -> right ){ q . push ( iter -> right ); } else { q . push ( new Node < int > ( - 1 )); } } else { ans . push_back ( \"#\" ); } } q . pop (); } while ( * ( -- ans . end ()) == \"#\" ) ans . erase ( -- ans . end ()); return ans ; } /** * \u6839\u636e\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7684\u7ed3\u679c\u91cd\u5efa\u4e8c\u53c9\u6811 * @param c * @return */ Node < int >* reConstructTree ( const vector < string > & c ){ if ( c . empty ()) return nullptr ; queue < Node < int >*> q ; int index = 0 ; if ( c [ index ] == \"#\" ) return nullptr ; auto root = new Node < int > ( stoi ( c [ index ]) ); index ++ ; q . push ( root ); while ( ! q . empty ()){ Node < int >* parent = q . front (); q . pop (); Node < int >* left = nullptr ; Node < int >* right = nullptr ; if ( index < c . size () && c [ index ] != \"#\" ) { left = new Node < int > ( stoi ( c [ index ])); } index ++ ; if ( index < c . size () && c [ index ] != \"#\" ) { right = new Node < int > ( stoi ( c [ index ])); } index ++ ; if ( left ) { parent -> left = left ; q . push ( left ); } if ( right ) { parent -> right = right ; q . push ( right ); } } return root ; } int main (){ vector < string > v = { \"3\" , \"9\" , \"20\" , \"#\" , \"#\" , \"15\" , \"7\" }; auto re = reConstructTree ( v ); auto hh = levelOrderSeries ( re ); return 0 ; } 13. \u4f7f\u7528\u975e\u9012\u5f52\u3001\u975e\u6808\u7684\u65b9\u5f0f\u904d\u5386\u4e8c\u53c9\u6811 \u00b6 \u6838\u5fc3\u7684\u601d\u60f3\u662f\u4f7f\u7528\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8fb9\u7684\u7a7a\u6307\u9488\u6307\u5411 \u5728\u904d\u5386\u5b8c\u5de6\u5b50\u6811\u4e4b\u540e \u9700\u8981\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002 \u5177\u4f53\u7684\u6b65\u9aa4\u662f\uff1a \u4ee4 iter = root , root \u8868\u793a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u3002\u9996\u5148\u8ba9 iter \u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u7684 right \u6307\u9488\u6307\u5411 iter . \u5b8c\u6210\u8fd9\u4e00\u6b65\u7684\u4ee3\u7801\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a Node * tp = iter -> left ; // tp \u6307\u5411iter\u7684\u5de6\u5b50\u6811 if ( tp ){ // \u901a\u8fc7\u5faa\u73af\u627e\u5230\u6700\u53f3\u8fb9\u7684\u8282\u70b9 while ( tp -> right != nullptr ){ tp = tp -> right ; } // \u6700\u53f3\u8282\u70b9\u7684right\u6307\u9488\u6307\u5411iter if ( tp -> right == nullptr ){ tp -> right = iter ; } \u5904\u7406\u5b8c root \u8282\u70b9\u4e4b\u540e\uff0c\u5faa\u73af\u5904\u7406 iter=iter->left \u76f4\u5230 iter \u7684 left \u6307\u9488\u4e3a\u7a7a\u4e3a\u6b62\uff0c\u4e5f\u5c31\u662f\u4e0a\u6587\u4e2d\u7684 tp==nullptr \u7684\u60c5\u51b5\u3002 #include <iostream> #include <vector> #include <map> using namespace std ; struct Node { int val ; Node * left ; Node * right ; Node (){} Node ( int v ) : val ( v ), left ( nullptr ), right ( nullptr ){} }; /** * \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4e0d\u7528\u6808 * @param root * @return */ vector < int > preOrder ( Node * root ){ vector < int > ans ; if ( ! root ) return ans ; Node * iter = root ; Node * tp = nullptr ; while ( iter != nullptr ){ // \u5904\u7406iter\u7684\u5de6\u5b50\u6811 tp = iter -> left ; if ( tp != nullptr ){ // \u627e\u5230 iter \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9 while ( tp -> right != nullptr && tp -> right != iter ){ tp = tp -> right ; } // \u5982\u679c\u662f\u4e0d\u6ee1\u8db3tp->right != nullptr \u800c\u9000\u51fa\u4e86\u4e0a\u9762\u7684\u5faa\u73af\uff0c // \u8bf4\u660e\u627e\u5230\u7684\u8282\u70b9iter\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u9762\u7684\u7a7a\u8282\u70b9\uff0c // \u628a\u8be5\u8282\u70b9\u6307\u5411iter // \u7ee7\u7eed\u5904\u7406 iter \u7684\u5de6\u5b69\u5b50 if ( tp -> right == nullptr ){ tp -> right = iter ; // \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u6307\u5411\u4e4b\u524d\u7684\u8282\u70b9 ans . push_back ( iter -> val ); // \u4e00\u65e6\u627e\u5230\u5de6\u5b50\u6811\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u5c31\u8f93\u51faiter\uff0c\u56e0\u4e3a\u524d\u5e8f\u904d\u5386\u6839\u8282\u70b9\u8981\u6700\u5148\u8f93\u51fa iter = iter -> left ; continue ; } // \u5982\u679c\u662f\u56e0\u4e3a\u4e0d\u6ee1\u8db3tp->right != iter \u9000\u51fa\u4e86\u5faa\u73af\uff0c // \u5c31\u662f\u8bf4tp->right == iter // \u8bf4\u660e\u5df2\u7ecf\u904d\u5386\u8fc7\u4e00\u904d(\u5426\u5219\u4e0d\u53ef\u80fd\u6709\u6307\u5411iter\u7684\u6307\u9488) // \u628atp->right \u7f6e\u7a7a\uff0c\u6062\u590d\u4e8c\u53c9\u6811\u539f\u6765\u7684\u6837\u5b50 else { tp -> right = nullptr ; } } else { // \u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u4e5f\u8981\u8f93\u51fa\u6839 ans . push_back ( iter -> val ); } iter = iter -> right ; } return ans ; } /** * \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4e0d\u7528\u6808 * @param root * @return */ vector < int > inOrder ( Node * root ){ vector < int > ans ; if ( ! root ) return ans ; Node * iter = root ; Node * tp = nullptr ; while ( iter != nullptr ){ // \u5904\u7406iter\u7684\u5de6\u5b50\u6811 tp = iter -> left ; if ( tp != nullptr ){ // \u627e\u5230 iter \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9 while ( tp -> right != nullptr && tp -> right != iter ){ tp = tp -> right ; } // \u5982\u679c\u662f\u4e0d\u6ee1\u8db3tp->right != nullptr \u800c\u9000\u51fa\u4e86\u4e0a\u9762\u7684\u5faa\u73af\uff0c // \u8bf4\u660e\u627e\u5230\u7684\u8282\u70b9iter\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u9762\u7684\u7a7a\u8282\u70b9\uff0c // \u628a\u8be5\u8282\u70b9\u6307\u5411iter // \u7ee7\u7eed\u5904\u7406 iter \u7684\u5de6\u5b69\u5b50 if ( tp -> right == nullptr ){ tp -> right = iter ; // \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u6307\u5411\u4e4b\u524d\u7684\u8282\u70b9 iter = iter -> left ; continue ; } // \u5982\u679c\u662f\u56e0\u4e3a\u4e0d\u6ee1\u8db3tp->right != iter \u9000\u51fa\u4e86\u5faa\u73af\uff0c // \u5c31\u662f\u8bf4tp->right == iter // \u8bf4\u660e\u5df2\u7ecf\u904d\u5386\u8fc7\u4e00\u904d(\u5426\u5219\u4e0d\u53ef\u80fd\u6709\u6307\u5411iter\u7684\u6307\u9488) // \u628atp->right \u7f6e\u7a7a\uff0c\u6062\u590d\u4e8c\u53c9\u6811\u539f\u6765\u7684\u6837\u5b50 else { tp -> right = nullptr ; } } ans . push_back ( iter -> val ); iter = iter -> right ; } return ans ; } int main (){ return 0 ; }","title":"\u6811\u7684\u76f8\u5173\u9898\u76ee"},{"location":"lintcode/tree/#_1","text":"\u3010\u524d\u5e8f\u904d\u5386\u3011\u3010\u4e2d\u5e8f\u904d\u5386\u3011\u3010\u540e\u5e8f\u904d\u5386\u3011\u3010\u8def\u5f84\u641c\u7d22\u3011\u3010\u516c\u5171\u7956\u5148\u3011\u3010\u5806\u3011\u3010top K\u3011\u3010\u7ebf\u6bb5\u6811\u3011\u3010\u6811\u72b6\u6570\u7ec4\u3011\u3010\u5e76\u67e5\u96c6\u3011","title":"\u6811\u7684\u76f8\u5173\u9898\u76ee"},{"location":"lintcode/tree/#1","text":"class TreeNode { public : int val ; TreeNode * left , * right ; TreeNode ( int val ) { this -> val = val ; this -> left = this -> right = NULL ; } }; // \u9012\u5f52\u524d\u5e8f\u904d\u5386 vector < int > preorderTraversal ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; re . push_back ( root -> val ); if ( root -> left ){ auto tmp = preorderTraversal ( root -> left ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } if ( root -> right ){ auto tmp = preorderTraversal ( root -> right ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } return re ; } // \u975e\u9012\u5f52\u524d\u5e8f\u904d\u5386 vector < int > preorder ( TreeNode * root ){ vector < int > re ; if ( ! root ) return re ; stack < TreeNode *> s ; TreeNode * iter = root ; while ( iter || ! s . empty ()){ while ( iter ){ // \u9996\u5148\u8f93\u51fa\u6839 re . push_back ( iter -> val ); s . push ( iter ); iter = iter -> left ; } iter = s . top (); s . pop (); iter = iter -> right ; } return re ; }","title":"1. \u524d\u5e8f\u904d\u5386"},{"location":"lintcode/tree/#2","text":"// \u9012\u5f52\u4e2d\u5e8f\u904d\u5386 vector < int > inorderTraversal ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; if ( root -> left ){ auto tmp = inorderTraversal ( root -> left ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } re . push_back ( root -> val ); if ( root -> right ){ auto tmp = inorderTraversal ( root -> right ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } return re ; } // \u975e\u9012\u5f52\u4e2d\u5e8f\u904d\u5386 vector < int > inorder ( TreeNode * root ){ vector < int > re ; if ( ! root ) return re ; stack < TreeNode *> s ; TreeNode * iter = root ; while ( iter || ! s . empty ()){ while ( iter ){ s . push ( iter ); iter = iter -> left ; } iter = s . top (); s . pop (); // \u8f93\u51fa re . push_back ( iter -> val ); iter = iter -> right ; } return re ; }","title":"2. \u4e2d\u5e8f\u904d\u5386"},{"location":"lintcode/tree/#3","text":"// \u9012\u5f52\u540e\u5e8f\u904d\u5386 vector < int > postorderTraversal ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; if ( root -> left ){ auto tmp = postorderTraversal ( root -> left ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } if ( root -> right ){ auto tmp = postorderTraversal ( root -> right ); re . insert ( re . end (), tmp . begin (), tmp . end ()); } re . push_back ( root -> val ); return re ; } // \u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > postOrder ( TreeNode * root ) { vector < int > re ; if ( ! root ) return re ; TreeNode * iter = root ; stack < TreeNode *> s ; TreeNode * last = root ; s . push ( iter ); while ( ! s . empty ()) { iter = s . top (); // 1. \u5f53\u524d\u8282\u70b9\u662f\u53f6\u8282\u70b9(\u6ca1\u6709\u5de6\u53f3\u5b69\u5b50)\uff0c\u8f93\u51fa // 2. \u4e0a\u6b21\u8bbf\u95ee\u4e86\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b69\u5b50\uff0c\u800c\u4e14\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u8f93\u51fa // 3. \u4e0a\u6b21\u8bbf\u95ee\u4e86\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u8f93\u51fa if ( ( iter -> left == nullptr && iter -> right == nullptr ) || ( iter -> right == nullptr && last == iter -> left ) || ( last == iter -> right ) ) { re . push_back ( iter -> val ); last = iter ; s . pop (); } else { // \u6808\u662f\u540e\u8fdb\u5148\u51fa\u7684\uff0c\u8981\u5148\u5904\u7406\u5de6\u5b69\u5b50\uff0c\u6240\u4ee5\u8981\u5148\u653e\u5165\u53f3\u8017\u8d44 if ( iter -> right ) s . push ( iter -> right ); if ( iter -> left ) s . push ( iter -> left ); } } return re ; }","title":"3. \u540e\u5e8f\u904d\u5386"},{"location":"lintcode/tree/#4","text":"// \u641c\u7d22\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6240\u6709\u8def\u5f84 [http://lintcode.com/zh-cn/problem/binary-tree-paths/#] vector < vector < int >> vv ; void binaryTreePaths ( TreeNode * root , vector < int > & tmp ) { // write your code here if ( ! root -> left && ! root -> right ){ tmp . push_back ( root -> val ); vv . push_back ( tmp ); tmp . clear (); return ; } else { tmp . push_back ( root -> val ); vector < int > tmp1 ( tmp ); vector < int > tmp2 ( tmp ); if ( root -> left ) binaryTreePaths ( root -> left , tmp1 ); if ( root -> right ) binaryTreePaths ( root -> right , tmp2 ); } }","title":"4. \u4e8c\u53c9\u6811\u7684\u8def\u5f84\u641c\u7d22"},{"location":"lintcode/tree/#5","text":"// \u8c03\u7528\u65b9\u5f0f\uff1a maxDepth2(root,0) int maxDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return maxDepth2 ( root -> left , dep + 1 ); if ( root -> right && ! root -> left ) return maxDepth2 ( root -> right , dep + 1 ); return max ( maxDepth2 ( root -> left , dep + 1 ), maxDepth2 ( root -> right , dep + 1 )); }","title":"5. \u4e8c\u53c9\u6811\u6700\u5927\u6df1\u5ea6"},{"location":"lintcode/tree/#6","text":"// \u6700\u5c0f\u6df1\u5ea6 int minDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return minDepth2 ( root -> left , dep + 1 ); if ( ! root -> left && root -> right ) return minDepth2 ( root -> right , dep + 1 ); return min ( minDepth2 ( root -> left , dep + 1 ), minDepth2 ( root -> right , dep + 1 )); }","title":"6. \u4e8c\u53c9\u6811\u6700\u5c0f\u6df1\u5ea6"},{"location":"lintcode/tree/#7","text":"map < TreeNode * , vector < TreeNode *>> nodes ; // \u5b58\u50a8\u6811\u7684\u7ed3\u6784 map < TreeNode * , bool > visited ; vector < vector < int >> vv ; void dfs ( TreeNode * leaf , vector < int > & v ){ visited [ leaf ] = true ; vector < TreeNode *> tmp = nodes [ leaf ]; bool is = true ; v . push_back ( leaf -> val ); for ( int i = 0 ; i < tmp . size (); i ++ ){ if ( visited [ tmp [ i ]] == false ){ vector < int > v1 ( v ); dfs ( tmp [ i ], v1 ); is = false ; } } if ( is ){ // \u53f6\u8282\u70b9 vv . push_back ( v ); } return ; }","title":"7.  \u53f6\u5b50\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u7684\u641c\u7d22"},{"location":"lintcode/tree/#8-top-k","text":"\u5982\u679c\u662f\u6700\u5927\u7684K\u4e2a\u6570\uff0c\u90a3\u4e48\u9996\u5148\u4f7f\u7528\u524dK\u4e2a\u6570\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u7136\u540e\u4ece\u7b2cK+1\u4e2a\u6570\u5f00\u59cb\u548c\u5806\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5927\u4e8e\u5806\u9876\u7684\u5143\u7d20\uff0c\u5c31\u628a\u5806\u9876\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u628a\u8be5\u5143\u7d20push\u8fdb\u5806\u3002 vector < int > topk ( vector < int > & v , int k ){ priority_queue < int , vector < int > , greater < int >> heap ; // \u6700\u5c0f\u5806\uff08\u5806\u9876\u5143\u7d20\u6700\u5c0f\uff09 for ( int i = 0 ; i < k ; i ++ ){ heap . push ( v [ i ]); } for ( int i = k ; i < v . size (); i ++ ){ if ( v [ i ] > heap . top ()){ heap . pop (); heap . push ( v [ i ]); } } vector < int > re ; while ( ! heap . empty ()){ re . push_back ( heap . top ()); heap . pop (); } return re ; }","title":"8. top K \u95ee\u9898"},{"location":"lintcode/tree/#9","text":"\u4f7f\u7528\u5927\u9876\u5806( priority_queue<int,vector<int>,less<int>> ) \u4fdd\u5b58\u524d\u534a\u90e8\u5206\u7684\u6570\u636e\uff0c\u4f7f\u7528\u5c0f\u9876\u5806( priority_queue<int,vector<int>,greater<int>> ) \u4fdd\u5b58\u540e\u534a\u90e8\u5206\u7684\u6570\u636e, \u4fdd\u8bc1\u5927\u9876\u5806\u7684\u9876 \u5c0f\u4e8e\u7b49\u4e8e \u5c0f\u9876\u5806\u7684\u9876\uff0c \u90a3\u4e48\u5728\u6bcf\u6b21\u9700\u8981\u6c42\u5f53\u524d\u7684\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u4e86\u3002 class MedianFinder { private : priority_queue < int , vector < int > , less < int >> maxHeap ; priority_queue < int , vector < int > , greater < int >> minHeap ; long long n ; bool is_left ; public : MedianFinder () { this -> n = 0 ; this -> is_left = true ; } void addNum ( int num ) { // \u8f6e\u6d41\u52a0\u5165\u5de6\u53f3\u4e24\u4e2a\u5806 if ( is_left ){ // \u5982\u679cright\u7684\u5806\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u786e\u4fdd\u5de6\u8fb9\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u8fb9\u6700\u5c0f\u7684\uff0c\u76f4\u63a5\u52a0\u5165 // \u5982\u679c\u8981\u52a0\u5165\u7684\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8eright\u7684\u5806\u9876\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u4e0a\u8ff0\u6761\u4ef6 if ( minHeap . empty () || num <= minHeap . top ()){ maxHeap . push ( num ); } // \u5982\u679cnum > minHeap.top(); \u4e0d\u80fd\u76f4\u63a5\u52a0\u5165maxHeap,\u56e0\u4e3a\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1maxHeap\u4e2d\u7684\u6240\u6709\u7684\u6570\u5b57\u90fd\u5c0f\u4e8e\u7b49\u4e8eminHeap\u4e2d\u7684\u6570\u5b57\u3002 // \u8fd9\u4e2a\u65f6\u5019\u7684\u505a\u6cd5\u662f\uff0c \u5148\u628anum\u52a0\u5165minHeap, \u5728\u628aminHeap.top()\u5f39\u51fa\uff0c\u52a0\u5165maxHeap; else { minHeap . push ( num ); maxHeap . push ( minHeap . top ()); minHeap . pop (); } is_left = ! is_left ; } if ( ! is_left ){ if ( maxHeap . empty () || num >= maxHeap . top ()){ minHeap . push ( num ); } else { maxHeap . push ( num ); minHeap . push ( maxHeap . top ()); maxHeap . pop (); } is_left = ! is_left ; } this -> n ++ ; } double findMedian () { if ( n >> 1 ){ return ( maxHeap . top () + minHeap . top ()) / 2.0 ; } else { return maxHeap . top (); } } };","title":"9. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"},{"location":"lintcode/tree/#10-k","text":"\u8fd9\u91cc\u4f7f\u7528\u5c0f\u9876\u5806\u8fd9\u79cd\u7ed3\u6784\u4fdd\u5b58K\u4e2a\u94fe\u8868\uff0c\u6bcf\u6b21\u53d6\u5f97\u5806\u9876\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u5f97\u5230K\u4e2a\u94fe\u8868\u4e2d\u6700\u5c0f\u7684\u3002 ListNode * mergeKLists ( vector < ListNode *> & lists ) { priority_queue < ListNode * , vector < ListNode *> , bigger > minHeap ; if ( lists . empty ()) return nullptr ; for ( int i = 0 ; i < lists . size (); i ++ ){ if ( lists [ i ]) minHeap . push ( lists [ i ]); } ListNode * head = nullptr ; ListNode * iter = nullptr ; while ( ! minHeap . empty ()){ if ( head == nullptr ){ head = minHeap . top (); iter = head ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } else { iter -> next = minHeap . top (); iter = iter -> next ; if ( minHeap . top () -> next ){ minHeap . push ( minHeap . top () -> next ); } minHeap . pop (); } } return head ; }","title":"10. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868"},{"location":"lintcode/tree/#11","text":"\u4f7f\u7528\u5806\u8fd9\u79cd\u7ed3\u6784\u7ef4\u62a4\u6570\u636e\u7684\u6709\u5e8f\u6027\uff0c\u4ece\u800c\u8fdb\u884c\u6392\u5e8f\u7684\u7b97\u6cd5\u662f\u5806\u6392\u5e8f\u3002\u5806\u6392\u5e8f\u7684\u5177\u4f53\u6b65\u9aa4\u662f\uff1a \u4f7f\u7528\u8981\u6392\u5e8f\u7684\u6574\u4e2a\u6570\u7ec4\u5efa\u7acb\u5806\u3002\u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u548c\u5806\u9876\u5143\u7d20\u4ea4\u6362\uff0c\u5806\u7684\u5927\u5c0f\u51cf1\uff0c\u8c03\u6574\u5806\uff0c\u7136\u540e\u518d\u628a\u65b0\u7684\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u548c\u5806\u9876\u5143\u7d20\u4ea4\u6362\uff0c\u8c03\u6574\u5806\uff0c\u76f4\u5230\u5168\u90e8\u6570\u636e\u6709\u5e8f\u4e3a\u6b62\u3002 void heapSort ( vector < int > & v ){ // \u5efa\u7acb\u6700\u5927\u5806 make_heap ( v . begin (), v . end (), less < int > ()); int index = v . size (); while ( index > 0 ){ // \u4ea4\u6362\u5806\u9876\u548c\u5806\u5c3e\u7684\u5143\u7d20\uff0c\u91cd\u65b0\u8c03\u6574\u5806 pop_heap ( v . begin (), v . begin () + index , less < int > ()); index -- ; } }","title":"11. \u5806\u6392\u5e8f"},{"location":"lintcode/tree/#12","text":"#include <iostream> #include <vector> #include <string> #include <stack> #include <queue> using namespace std ; template < typename T > struct Node { T val ; Node * left , * right ; Node (){} Node ( T init ) : val ( init ), left ( nullptr ), right ( nullptr ) {} }; /** * \u4e8c\u53c9\u6811\u7684\u5148\u6839\u904d\u5386\uff0c\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u4f7f\u7528\u6808 * @param root * @return */ vector < int > preOrder ( Node < int >* root ){ vector < int > ans ; if ( ! root ) return ans ; stack < Node < int >*> s ; Node < int >* iter = root ; while ( iter || ! s . empty ()){ while ( iter ){ ans . push_back ( iter -> val ); s . push ( iter ); iter = iter -> left ; } iter = s . top (); s . pop (); iter = iter -> right ; } return ans ; } /** * \u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4f7f\u7528\u961f\u5217 * @param root * @return */ vector < int > levelOrder ( Node < int >* root ){ vector < int > ans ; if ( ! root ) return ans ; queue < Node < int >*> q ; q . push ( root ); Node < int >* iter ; while ( ! q . empty ()){ iter = q . front (); if ( iter ){ ans . push_back ( iter -> val ); if ( iter -> left ) q . push ( iter -> left ); if ( iter -> right ) q . push ( iter -> right ); } q . pop (); } return ans ; } /** * \u4f7f\u7528\u5c42\u6b21\u904d\u5386\u7684\u65b9\u6cd5\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 * @param root * @return */ vector < string > levelOrderSeries ( Node < int >* root ){ vector < string > ans ; if ( ! root ) return ans ; queue < Node < int >*> q ; q . push ( root ); Node < int >* iter ; while ( ! q . empty ()){ iter = q . front (); if ( iter ){ if ( iter -> val != - 1 ){ ans . push_back ( to_string ( iter -> val )); if ( iter -> left ){ q . push ( iter -> left ); } else { q . push ( new Node < int > ( - 1 )); } if ( iter -> right ){ q . push ( iter -> right ); } else { q . push ( new Node < int > ( - 1 )); } } else { ans . push_back ( \"#\" ); } } q . pop (); } while ( * ( -- ans . end ()) == \"#\" ) ans . erase ( -- ans . end ()); return ans ; } /** * \u6839\u636e\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7684\u7ed3\u679c\u91cd\u5efa\u4e8c\u53c9\u6811 * @param c * @return */ Node < int >* reConstructTree ( const vector < string > & c ){ if ( c . empty ()) return nullptr ; queue < Node < int >*> q ; int index = 0 ; if ( c [ index ] == \"#\" ) return nullptr ; auto root = new Node < int > ( stoi ( c [ index ]) ); index ++ ; q . push ( root ); while ( ! q . empty ()){ Node < int >* parent = q . front (); q . pop (); Node < int >* left = nullptr ; Node < int >* right = nullptr ; if ( index < c . size () && c [ index ] != \"#\" ) { left = new Node < int > ( stoi ( c [ index ])); } index ++ ; if ( index < c . size () && c [ index ] != \"#\" ) { right = new Node < int > ( stoi ( c [ index ])); } index ++ ; if ( left ) { parent -> left = left ; q . push ( left ); } if ( right ) { parent -> right = right ; q . push ( right ); } } return root ; } int main (){ vector < string > v = { \"3\" , \"9\" , \"20\" , \"#\" , \"#\" , \"15\" , \"7\" }; auto re = reConstructTree ( v ); auto hh = levelOrderSeries ( re ); return 0 ; }","title":"12. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316"},{"location":"lintcode/tree/#13","text":"\u6838\u5fc3\u7684\u601d\u60f3\u662f\u4f7f\u7528\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8fb9\u7684\u7a7a\u6307\u9488\u6307\u5411 \u5728\u904d\u5386\u5b8c\u5de6\u5b50\u6811\u4e4b\u540e \u9700\u8981\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002 \u5177\u4f53\u7684\u6b65\u9aa4\u662f\uff1a \u4ee4 iter = root , root \u8868\u793a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u3002\u9996\u5148\u8ba9 iter \u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u7684 right \u6307\u9488\u6307\u5411 iter . \u5b8c\u6210\u8fd9\u4e00\u6b65\u7684\u4ee3\u7801\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a Node * tp = iter -> left ; // tp \u6307\u5411iter\u7684\u5de6\u5b50\u6811 if ( tp ){ // \u901a\u8fc7\u5faa\u73af\u627e\u5230\u6700\u53f3\u8fb9\u7684\u8282\u70b9 while ( tp -> right != nullptr ){ tp = tp -> right ; } // \u6700\u53f3\u8282\u70b9\u7684right\u6307\u9488\u6307\u5411iter if ( tp -> right == nullptr ){ tp -> right = iter ; } \u5904\u7406\u5b8c root \u8282\u70b9\u4e4b\u540e\uff0c\u5faa\u73af\u5904\u7406 iter=iter->left \u76f4\u5230 iter \u7684 left \u6307\u9488\u4e3a\u7a7a\u4e3a\u6b62\uff0c\u4e5f\u5c31\u662f\u4e0a\u6587\u4e2d\u7684 tp==nullptr \u7684\u60c5\u51b5\u3002 #include <iostream> #include <vector> #include <map> using namespace std ; struct Node { int val ; Node * left ; Node * right ; Node (){} Node ( int v ) : val ( v ), left ( nullptr ), right ( nullptr ){} }; /** * \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4e0d\u7528\u6808 * @param root * @return */ vector < int > preOrder ( Node * root ){ vector < int > ans ; if ( ! root ) return ans ; Node * iter = root ; Node * tp = nullptr ; while ( iter != nullptr ){ // \u5904\u7406iter\u7684\u5de6\u5b50\u6811 tp = iter -> left ; if ( tp != nullptr ){ // \u627e\u5230 iter \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9 while ( tp -> right != nullptr && tp -> right != iter ){ tp = tp -> right ; } // \u5982\u679c\u662f\u4e0d\u6ee1\u8db3tp->right != nullptr \u800c\u9000\u51fa\u4e86\u4e0a\u9762\u7684\u5faa\u73af\uff0c // \u8bf4\u660e\u627e\u5230\u7684\u8282\u70b9iter\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u9762\u7684\u7a7a\u8282\u70b9\uff0c // \u628a\u8be5\u8282\u70b9\u6307\u5411iter // \u7ee7\u7eed\u5904\u7406 iter \u7684\u5de6\u5b69\u5b50 if ( tp -> right == nullptr ){ tp -> right = iter ; // \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u6307\u5411\u4e4b\u524d\u7684\u8282\u70b9 ans . push_back ( iter -> val ); // \u4e00\u65e6\u627e\u5230\u5de6\u5b50\u6811\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u5c31\u8f93\u51faiter\uff0c\u56e0\u4e3a\u524d\u5e8f\u904d\u5386\u6839\u8282\u70b9\u8981\u6700\u5148\u8f93\u51fa iter = iter -> left ; continue ; } // \u5982\u679c\u662f\u56e0\u4e3a\u4e0d\u6ee1\u8db3tp->right != iter \u9000\u51fa\u4e86\u5faa\u73af\uff0c // \u5c31\u662f\u8bf4tp->right == iter // \u8bf4\u660e\u5df2\u7ecf\u904d\u5386\u8fc7\u4e00\u904d(\u5426\u5219\u4e0d\u53ef\u80fd\u6709\u6307\u5411iter\u7684\u6307\u9488) // \u628atp->right \u7f6e\u7a7a\uff0c\u6062\u590d\u4e8c\u53c9\u6811\u539f\u6765\u7684\u6837\u5b50 else { tp -> right = nullptr ; } } else { // \u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u4e5f\u8981\u8f93\u51fa\u6839 ans . push_back ( iter -> val ); } iter = iter -> right ; } return ans ; } /** * \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4e0d\u7528\u6808 * @param root * @return */ vector < int > inOrder ( Node * root ){ vector < int > ans ; if ( ! root ) return ans ; Node * iter = root ; Node * tp = nullptr ; while ( iter != nullptr ){ // \u5904\u7406iter\u7684\u5de6\u5b50\u6811 tp = iter -> left ; if ( tp != nullptr ){ // \u627e\u5230 iter \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9 while ( tp -> right != nullptr && tp -> right != iter ){ tp = tp -> right ; } // \u5982\u679c\u662f\u4e0d\u6ee1\u8db3tp->right != nullptr \u800c\u9000\u51fa\u4e86\u4e0a\u9762\u7684\u5faa\u73af\uff0c // \u8bf4\u660e\u627e\u5230\u7684\u8282\u70b9iter\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u9762\u7684\u7a7a\u8282\u70b9\uff0c // \u628a\u8be5\u8282\u70b9\u6307\u5411iter // \u7ee7\u7eed\u5904\u7406 iter \u7684\u5de6\u5b69\u5b50 if ( tp -> right == nullptr ){ tp -> right = iter ; // \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u6307\u5411\u4e4b\u524d\u7684\u8282\u70b9 iter = iter -> left ; continue ; } // \u5982\u679c\u662f\u56e0\u4e3a\u4e0d\u6ee1\u8db3tp->right != iter \u9000\u51fa\u4e86\u5faa\u73af\uff0c // \u5c31\u662f\u8bf4tp->right == iter // \u8bf4\u660e\u5df2\u7ecf\u904d\u5386\u8fc7\u4e00\u904d(\u5426\u5219\u4e0d\u53ef\u80fd\u6709\u6307\u5411iter\u7684\u6307\u9488) // \u628atp->right \u7f6e\u7a7a\uff0c\u6062\u590d\u4e8c\u53c9\u6811\u539f\u6765\u7684\u6837\u5b50 else { tp -> right = nullptr ; } } ans . push_back ( iter -> val ); iter = iter -> right ; } return ans ; } int main (){ return 0 ; }","title":"13. \u4f7f\u7528\u975e\u9012\u5f52\u3001\u975e\u6808\u7684\u65b9\u5f0f\u904d\u5386\u4e8c\u53c9\u6811"},{"location":"lintcode/368/readme/","text":"368. \u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u4e00\u4e2a\u7528\u5b57\u7b26\u4e32\u8868\u793a\u7684\u8868\u8fbe\u5f0f\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u8868\u8fbe\u5f0f\u53ea\u5305\u542b\u6574\u6570, +, -, *, /, (, ). \u6837\u4f8b 1: 1 2 3 4 5 \u5bf9\u4e8e\u8868\u8fbe\u5f0f `2*6-(23+7)/(1+2)`, \u8f93\u5165: [\"2\", \"*\", \"6\", \"-\", \"(\",\"23\", \"+\", \"7\", \")\", \"/\", \"(\", \"1\", \"+\", \"2\", \")\"] \u8f93\u51fa: 2 \u6837\u4f8b 2: 1 2 3 4 5 \u5bf9\u4e8e\u8868\u8fbe\u5f0f `4-(2-3)*2+5/5`, \u8f93\u5165: [\"4\", \"-\", \"(\", \"2\",\"-\", \"3\", \")\", \"*\", \"2\", \"+\", \"5\", \"/\", \"5\"] \u8f93\u51fa: 7 2. \u89e3\u9898\u601d\u8def \u00b6 \u5148\u628a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u5229\u7528\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u6700\u540e\u7684\u7ed3\u679c 3. AC\u4ee3\u7801 \u00b6","title":"[368. \u8868\u8fbe\u5f0f\u6c42\u503c](https://www.lintcode.com/problem/expression-evaluation/description)"},{"location":"lintcode/368/readme/#368","text":"","title":"368. \u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"lintcode/368/readme/#1","text":"\u7ed9\u4e00\u4e2a\u7528\u5b57\u7b26\u4e32\u8868\u793a\u7684\u8868\u8fbe\u5f0f\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u8868\u8fbe\u5f0f\u53ea\u5305\u542b\u6574\u6570, +, -, *, /, (, ). \u6837\u4f8b 1: 1 2 3 4 5 \u5bf9\u4e8e\u8868\u8fbe\u5f0f `2*6-(23+7)/(1+2)`, \u8f93\u5165: [\"2\", \"*\", \"6\", \"-\", \"(\",\"23\", \"+\", \"7\", \")\", \"/\", \"(\", \"1\", \"+\", \"2\", \")\"] \u8f93\u51fa: 2 \u6837\u4f8b 2: 1 2 3 4 5 \u5bf9\u4e8e\u8868\u8fbe\u5f0f `4-(2-3)*2+5/5`, \u8f93\u5165: [\"4\", \"-\", \"(\", \"2\",\"-\", \"3\", \")\", \"*\", \"2\", \"+\", \"5\", \"/\", \"5\"] \u8f93\u51fa: 7","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"lintcode/368/readme/#2","text":"\u5148\u628a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u5229\u7528\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u6700\u540e\u7684\u7ed3\u679c","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"lintcode/368/readme/#3-ac","text":"","title":"3. AC\u4ee3\u7801"},{"location":"lintcode/370/370/index.cpp.html","text":"370.cpp \u00b6 #include <string> #include <vector> #include <stack> #include <map> using namespace std ; bool isNumber ( string & s ){ // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57 if ( s . empty ()) return false ; if ( s . size () == 1 && s [ 0 ] == '-' ) return false ; for ( size_t i = 0 ; i < s . length (); i ++ ){ // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse if ( ( i > 0 && ( s [ i ] < '0' || s [ i ] > '9' )) ) return false ; // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse. if ( i == 0 && ( s [ i ] != '-' ) && ( s [ i ] < '0' || s [ i ] > '9' ) ) return false ; } return true ; } vector < string > convertToRPN ( vector < string > & expression ) { // write your code here vector < string > ans ; if ( expression . empty ()) return ans ; // \u64cd\u4f5c\u7b26 stack < string > s ; // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > kv ; kv [ \"+\" ] = 3 ; kv [ \"-\" ] = 3 ; kv [ \"*\" ] = 4 ; kv [ \"/\" ] = 4 ; kv [ \"(\" ] = 2 ; kv [ \")\" ] = 6 ; for ( size_t i = 0 ; i < expression . size (); i ++ ){ // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa if ( isNumber ( expression [ i ])){ ans . push_back ( expression [ i ]); } // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406 else if ( kv [ expression [ i ]] >= 2 && kv [ expression [ i ]] <= 6 ){ // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( s . empty () || kv [ expression [ i ]] == 2 ){ s . push ( expression [ i ]); } // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 6 ){ while ( ! s . empty () && s . top () != \"(\" ){ ans . push_back ( s . top ()); s . pop (); } if ( ! s . empty ()) s . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 3 || kv [ expression [ i ]] == 4 ){ // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808 if ( kv [ expression [ i ]] > kv [ s . top ()]){ s . push ( expression [ i ]); } else { while ( ! s . empty () && kv [ expression [ i ]] <= kv [ s . top ()]){ ans . push_back ( s . top ()); s . pop (); } s . push ( expression [ i ]); } } } } // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa while ( ! s . empty ()){ ans . push_back ( s . top ()); s . pop (); } return ans ; } int main () { return 0 ; }","title":"370.cpp"},{"location":"lintcode/370/370/index.cpp.html#370cpp","text":"#include <string> #include <vector> #include <stack> #include <map> using namespace std ; bool isNumber ( string & s ){ // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57 if ( s . empty ()) return false ; if ( s . size () == 1 && s [ 0 ] == '-' ) return false ; for ( size_t i = 0 ; i < s . length (); i ++ ){ // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse if ( ( i > 0 && ( s [ i ] < '0' || s [ i ] > '9' )) ) return false ; // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse. if ( i == 0 && ( s [ i ] != '-' ) && ( s [ i ] < '0' || s [ i ] > '9' ) ) return false ; } return true ; } vector < string > convertToRPN ( vector < string > & expression ) { // write your code here vector < string > ans ; if ( expression . empty ()) return ans ; // \u64cd\u4f5c\u7b26 stack < string > s ; // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > kv ; kv [ \"+\" ] = 3 ; kv [ \"-\" ] = 3 ; kv [ \"*\" ] = 4 ; kv [ \"/\" ] = 4 ; kv [ \"(\" ] = 2 ; kv [ \")\" ] = 6 ; for ( size_t i = 0 ; i < expression . size (); i ++ ){ // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa if ( isNumber ( expression [ i ])){ ans . push_back ( expression [ i ]); } // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406 else if ( kv [ expression [ i ]] >= 2 && kv [ expression [ i ]] <= 6 ){ // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( s . empty () || kv [ expression [ i ]] == 2 ){ s . push ( expression [ i ]); } // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 6 ){ while ( ! s . empty () && s . top () != \"(\" ){ ans . push_back ( s . top ()); s . pop (); } if ( ! s . empty ()) s . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 3 || kv [ expression [ i ]] == 4 ){ // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808 if ( kv [ expression [ i ]] > kv [ s . top ()]){ s . push ( expression [ i ]); } else { while ( ! s . empty () && kv [ expression [ i ]] <= kv [ s . top ()]){ ans . push_back ( s . top ()); s . pop (); } s . push ( expression [ i ]); } } } } // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa while ( ! s . empty ()){ ans . push_back ( s . top ()); s . pop (); } return ans ; } int main () { return 0 ; }","title":"370.cpp"},{"location":"lintcode/370/readme/","text":"370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u8be5\u8868\u8fbe\u5f0f\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002\uff08\u53bb\u6389\u62ec\u53f7\uff09 \u6837\u4f8b 1: 1 2 3 4 \u8f93\u5165: [\"3\", \"-\", \"4\", \"+\", \"5\"] \u8f93\u51fa: [\"3\", \"4\", \"-\", \"5\", \"+\"] \u89e3\u91ca: 3 - 4 + 5 = -1 + 5 = 4 3 4 - 5 + = -1 5 + = 4 \u6837\u4f8b 2: 1 2 3 4 \u8f93\u5165: [\"(\", \"5\", \"-\", \"6\", \")\", \"*\", \"7\"] \u8f93\u51fa: [\"5\",\"6\",\"-\",\"7\",\"*\"] \u89e3\u91ca: (5 - 6) * 7 = -1 * 7 = -7 5 6 - 7 * = -1 7 * = -7 2. \u89e3\u9898\u601d\u8def \u00b6 3. AC \u4ee3\u7801 \u00b6 bool isNumber ( string & s ){ // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57 if ( s . empty ()) return false ; if ( s . size () == 1 && s [ 0 ] == '-' ) return false ; for ( size_t i = 0 ; i < s . length (); i ++ ){ // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse if ( ( i > 0 && ( s [ i ] < '0' || s [ i ] > '9' )) ) return false ; // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse. if ( i == 0 && ( s [ i ] != '-' ) && ( s [ i ] < '0' || s [ i ] > '9' ) ) return false ; } return true ; } vector < string > convertToRPN ( vector < string > & expression ) { // write your code here vector < string > ans ; if ( expression . empty ()) return ans ; // \u64cd\u4f5c\u7b26 stack < string > s ; // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > kv ; kv [ \"+\" ] = 3 ; kv [ \"-\" ] = 3 ; kv [ \"*\" ] = 4 ; kv [ \"/\" ] = 4 ; kv [ \"(\" ] = 2 ; kv [ \")\" ] = 6 ; for ( size_t i = 0 ; i < expression . size (); i ++ ){ // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa if ( isNumber ( expression [ i ])){ ans . push_back ( expression [ i ]); } // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406 else if ( kv [ expression [ i ]] >= 2 && kv [ expression [ i ]] <= 6 ){ // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( s . empty () || kv [ expression [ i ]] == 2 ){ s . push ( expression [ i ]); } // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 6 ){ while ( ! s . empty () && s . top () != \"(\" ){ ans . push_back ( s . top ()); s . pop (); } if ( ! s . empty ()) s . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 3 || kv [ expression [ i ]] == 4 ){ // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808 if ( kv [ expression [ i ]] > kv [ s . top ()]){ s . push ( expression [ i ]); } else { while ( ! s . empty () && kv [ expression [ i ]] <= kv [ s . top ()]){ ans . push_back ( s . top ()); s . pop (); } s . push ( expression [ i ]); } } } } // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa while ( ! s . empty ()){ ans . push_back ( s . top ()); s . pop (); } return ans ; }","title":"[370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f](https://www.lintcode.com/problem/convert-expression-to-reverse-polish-notation/description)"},{"location":"lintcode/370/readme/#370","text":"","title":"370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f"},{"location":"lintcode/370/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u8be5\u8868\u8fbe\u5f0f\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002\uff08\u53bb\u6389\u62ec\u53f7\uff09 \u6837\u4f8b 1: 1 2 3 4 \u8f93\u5165: [\"3\", \"-\", \"4\", \"+\", \"5\"] \u8f93\u51fa: [\"3\", \"4\", \"-\", \"5\", \"+\"] \u89e3\u91ca: 3 - 4 + 5 = -1 + 5 = 4 3 4 - 5 + = -1 5 + = 4 \u6837\u4f8b 2: 1 2 3 4 \u8f93\u5165: [\"(\", \"5\", \"-\", \"6\", \")\", \"*\", \"7\"] \u8f93\u51fa: [\"5\",\"6\",\"-\",\"7\",\"*\"] \u89e3\u91ca: (5 - 6) * 7 = -1 * 7 = -7 5 6 - 7 * = -1 7 * = -7","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"lintcode/370/readme/#2","text":"","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"lintcode/370/readme/#3-ac","text":"bool isNumber ( string & s ){ // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57 if ( s . empty ()) return false ; if ( s . size () == 1 && s [ 0 ] == '-' ) return false ; for ( size_t i = 0 ; i < s . length (); i ++ ){ // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse if ( ( i > 0 && ( s [ i ] < '0' || s [ i ] > '9' )) ) return false ; // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse. if ( i == 0 && ( s [ i ] != '-' ) && ( s [ i ] < '0' || s [ i ] > '9' ) ) return false ; } return true ; } vector < string > convertToRPN ( vector < string > & expression ) { // write your code here vector < string > ans ; if ( expression . empty ()) return ans ; // \u64cd\u4f5c\u7b26 stack < string > s ; // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7 map < string , int > kv ; kv [ \"+\" ] = 3 ; kv [ \"-\" ] = 3 ; kv [ \"*\" ] = 4 ; kv [ \"/\" ] = 4 ; kv [ \"(\" ] = 2 ; kv [ \")\" ] = 6 ; for ( size_t i = 0 ; i < expression . size (); i ++ ){ // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa if ( isNumber ( expression [ i ])){ ans . push_back ( expression [ i ]); } // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406 else if ( kv [ expression [ i ]] >= 2 && kv [ expression [ i ]] <= 6 ){ // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808 if ( s . empty () || kv [ expression [ i ]] == 2 ){ s . push ( expression [ i ]); } // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 6 ){ while ( ! s . empty () && s . top () != \"(\" ){ ans . push_back ( s . top ()); s . pop (); } if ( ! s . empty ()) s . pop (); // \u5f39\u51fa\u5de6\u62ec\u53f7 } // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62 else if ( kv [ expression [ i ]] == 3 || kv [ expression [ i ]] == 4 ){ // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808 if ( kv [ expression [ i ]] > kv [ s . top ()]){ s . push ( expression [ i ]); } else { while ( ! s . empty () && kv [ expression [ i ]] <= kv [ s . top ()]){ ans . push_back ( s . top ()); s . pop (); } s . push ( expression [ i ]); } } } } // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa while ( ! s . empty ()){ ans . push_back ( s . top ()); s . pop (); } return ans ; }","title":"3. AC \u4ee3\u7801"},{"location":"lintcode/423/readme/","text":"423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6240\u8868\u793a\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u7b26\uff1a '(', ')', '{', '}', '[' and ']'\uff0c \u5224\u5b9a\u662f\u5426\u662f\u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217\u3002 \u62ec\u53f7\u5fc5\u987b\u4f9d\u7167 \"()\" \u987a\u5e8f\u8868\u793a\uff0c \"()[]{}\" \u662f\u6709\u6548\u7684\u62ec\u53f7\uff0c\u4f46 \"([)]\" \u5219\u662f\u65e0\u6548\u7684\u62ec\u53f7\u3002 \u6837\u4f8b \u6837\u4f8b 1\uff1a \u8f93\u5165\uff1a\"([)]\" \u8f93\u51fa\uff1aFalse \u6837\u4f8b 2\uff1a \u8f93\u5165\uff1a\"()[]{}\" \u8f93\u51fa\uff1aTrue \u6311\u6218 O(n)\u7684\u65f6\u95f4\uff0cn \u4e3a\u62ec\u53f7\u7684\u4e2a\u6570\u3002 2. \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u6808\u5b58\u50a8\u6240\u6709\u7684\u5de6\u62ec\u53f7\uff0c\u4e00\u65e6\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u4e0e\u6808\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7ee7\u7eed\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56defalse. 3. AC \u4ee3\u7801 \u00b6 class Solution { public : /** * @param s: A string * @return: whether the string is a valid parentheses */ bool isValidParentheses ( string & s ) { stack < char > cc ; map < char , char > m ; m [ '(' ] = ')' ; m [ '[' ] = ']' ; m [ '{' ] = '}' ; for ( int i = 0 ; i < s . size (); ++ i ){ if ( s [ i ] == '(' || s [ i ] == '[' || s [ i ] == '{' ){ cc . push ( s [ i ]); } if ( s [ i ] == ')' || s [ i ] == ']' || s [ i ] == '}' ){ if ( cc . empty ()) return false ; char tmp = cc . top (); if ( m [ tmp ] != s [ i ]){ return false ; } cc . pop (); } } if ( cc . empty ()) return true ; return false ; } };","title":"[423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217](https://www.lintcode.com/problem/valid-parentheses/description)"},{"location":"lintcode/423/readme/#423","text":"","title":"423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217"},{"location":"lintcode/423/readme/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6240\u8868\u793a\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u7b26\uff1a '(', ')', '{', '}', '[' and ']'\uff0c \u5224\u5b9a\u662f\u5426\u662f\u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217\u3002 \u62ec\u53f7\u5fc5\u987b\u4f9d\u7167 \"()\" \u987a\u5e8f\u8868\u793a\uff0c \"()[]{}\" \u662f\u6709\u6548\u7684\u62ec\u53f7\uff0c\u4f46 \"([)]\" \u5219\u662f\u65e0\u6548\u7684\u62ec\u53f7\u3002 \u6837\u4f8b \u6837\u4f8b 1\uff1a \u8f93\u5165\uff1a\"([)]\" \u8f93\u51fa\uff1aFalse \u6837\u4f8b 2\uff1a \u8f93\u5165\uff1a\"()[]{}\" \u8f93\u51fa\uff1aTrue \u6311\u6218 O(n)\u7684\u65f6\u95f4\uff0cn \u4e3a\u62ec\u53f7\u7684\u4e2a\u6570\u3002","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"lintcode/423/readme/#2","text":"\u4f7f\u7528\u6808\u5b58\u50a8\u6240\u6709\u7684\u5de6\u62ec\u53f7\uff0c\u4e00\u65e6\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u4e0e\u6808\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7ee7\u7eed\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56defalse.","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"lintcode/423/readme/#3-ac","text":"class Solution { public : /** * @param s: A string * @return: whether the string is a valid parentheses */ bool isValidParentheses ( string & s ) { stack < char > cc ; map < char , char > m ; m [ '(' ] = ')' ; m [ '[' ] = ']' ; m [ '{' ] = '}' ; for ( int i = 0 ; i < s . size (); ++ i ){ if ( s [ i ] == '(' || s [ i ] == '[' || s [ i ] == '{' ){ cc . push ( s [ i ]); } if ( s [ i ] == ')' || s [ i ] == ']' || s [ i ] == '}' ){ if ( cc . empty ()) return false ; char tmp = cc . top (); if ( m [ tmp ] != s [ i ]){ return false ; } cc . pop (); } } if ( cc . empty ()) return true ; return false ; } };","title":"3. AC \u4ee3\u7801"},{"location":"lintcode/424/readme/","text":"424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 1. \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002 \u6837\u4f8b 1: 1 2 3 \u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"] \u8f93\u51fa: 9 \u89e3\u91ca: [\"2\", \"1\", \"+\", \"3\", \"*\"] -> (2 + 1) * 3 -> 9 \u6837\u4f8b 2: 1 2 3 \u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"] \u8f93\u51fa: 6 \u89e3\u91ca: [\"4\", \"13\", \"5\", \"/\", \"+\"] -> 4 + 13 / 5 -> 6 2. \u89e3\u9898\u601d\u8def \u00b6 \u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002 3. AC \u4ee3\u7801 \u00b6 // \u8fd0\u7b97\u7b26\u53ea\u8003\u8651\u4e86\u52a0\u51cf\u4e58\u9664 template < typename T > T compute ( T first , T second , string op ){ if ( op == \"+\" ) return first + second ; if ( op == \"-\" ) return first - second ; if ( op == \"*\" ) return first * second ; if ( op == \"/\" && second != 0 ) return first / second ; return - 1000 ; // \u8bf4\u660e\u8f93\u5165\u7684\u6570\u636e\u6709\u95ee\u9898 } int evalRPN ( vector < string > & tokens ) { // write your code here stack < int > s ; set < string > op = { \"+\" , \"-\" , \"*\" , \"/\" }; // \u90fd\u662f\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u903b\u8f91\u662f\u76f8\u540c\u7684 for ( size_t i = 0 ; i < tokens . size (); i ++ ){ if ( op . count ( tokens [ i ]) > 0 ){ int first = 0 , second = 0 ; if ( ! s . empty ()){ first = s . top () ; s . pop (); } if ( ! s . empty ()){ second = s . top () ; s . pop (); } s . push ( compute ( second , first , tokens [ i ])); } else { s . push ( stoi ( tokens [ i ])); } } return s . top (); }","title":"[424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c](https://www.lintcode.com/problem/evaluate-reverse-polish-notation/description)"},{"location":"lintcode/424/readme/#424","text":"","title":"424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"lintcode/424/readme/#1","text":"\u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002 \u6837\u4f8b 1: 1 2 3 \u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"] \u8f93\u51fa: 9 \u89e3\u91ca: [\"2\", \"1\", \"+\", \"3\", \"*\"] -> (2 + 1) * 3 -> 9 \u6837\u4f8b 2: 1 2 3 \u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"] \u8f93\u51fa: 6 \u89e3\u91ca: [\"4\", \"13\", \"5\", \"/\", \"+\"] -> 4 + 13 / 5 -> 6","title":"1. \u9898\u76ee\u63cf\u8ff0"},{"location":"lintcode/424/readme/#2","text":"\u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002","title":"2. \u89e3\u9898\u601d\u8def"},{"location":"lintcode/424/readme/#3-ac","text":"// \u8fd0\u7b97\u7b26\u53ea\u8003\u8651\u4e86\u52a0\u51cf\u4e58\u9664 template < typename T > T compute ( T first , T second , string op ){ if ( op == \"+\" ) return first + second ; if ( op == \"-\" ) return first - second ; if ( op == \"*\" ) return first * second ; if ( op == \"/\" && second != 0 ) return first / second ; return - 1000 ; // \u8bf4\u660e\u8f93\u5165\u7684\u6570\u636e\u6709\u95ee\u9898 } int evalRPN ( vector < string > & tokens ) { // write your code here stack < int > s ; set < string > op = { \"+\" , \"-\" , \"*\" , \"/\" }; // \u90fd\u662f\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u903b\u8f91\u662f\u76f8\u540c\u7684 for ( size_t i = 0 ; i < tokens . size (); i ++ ){ if ( op . count ( tokens [ i ]) > 0 ){ int first = 0 , second = 0 ; if ( ! s . empty ()){ first = s . top () ; s . pop (); } if ( ! s . empty ()){ second = s . top () ; s . pop (); } s . push ( compute ( second , first , tokens [ i ])); } else { s . push ( stoi ( tokens [ i ])); } } return s . top (); }","title":"3. AC \u4ee3\u7801"},{"location":"%E5%B7%A5%E5%85%B7/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","text":"Linux \u5e38\u7528\u547d\u4ee4 \u00b6 1. grep \u00b6 grep regex filename/dirname # \u663e\u793a\u6b63\u5219\u5339\u914d\u5230\u7684\u884c grep -i regex filename/dirname # \u5ffd\u7565\u5927\u5c0f\u5199 grep -v regex filename/dirname # \u663e\u793a\u6b63\u5219\u6ca1\u6709\u5339\u914d\u5230\u7684\u884c grep -n regex filename/dirname # \u663e\u793a\u884c\u53f7 grep -r regex filename/dirname # \u9012\u5f52\u67e5\u627e\u5b50\u6587\u4ef6\u5939 grep -lr regex filename/dirname # \u53ea\u663e\u793a\u5339\u914d\u5185\u5bb9\u7684\u6587\u4ef6 grep -Lr regex filename/dirname # \u53ea\u663e\u793a\u6ca1\u6709\u5339\u914d\u5185\u5bb9\u7684\u6587\u4ef6 2. find \u00b6 find dirname -name filename # \u641c\u7d22\u6587\u4ef6 3. sed \u00b6 # sed \u547d\u4ee4\u683c\u5f0f sed [ option ] '{script}' input_file > output_file # \u4fee\u6539\u8f93\u51fa\u5230\u65b0\u7684\u6587\u4ef6 sed -i [ option ] '{script}' input_file # \u76f4\u63a5\u5728\u539f\u6587\u4ef6\u4fee\u6539 # \u5220\u9664 sed 'line_begin,line_end d' filename # \u5220\u9664\u6307\u5b9a\u8303\u56f4\u7684\u884c sed '/regex/ d' filename # \u5220\u9664\u6b63\u5219\u5339\u914d\u5230\u7684\u884c sed '/regex1/, /regex2/ d' filename # \u5220\u9664\u6b63\u52191\u5339\u914d\u5f00\u5934 \u5230 \u6b63\u52192\u5339\u914d\u7ed3\u5c3e \u8303\u56f4\u5185\u7684\u884c # \u67e5\u627e\u66ff\u6362 sed 's/regex1/regex2' filename # regex1\u67e5\u627e\uff0c \u66ff\u6362\u6210regex2\uff0c \u53ea\u66ff\u6362\u7b2c\u4e00\u4e2a\u627e\u5230\u7684 sed ` s/regex1/regex2/number ` filename # \u66ff\u6362\u7b2c number \u6b21\u51fa\u73b0\u7684\u5b9e\u4f8b sed ` s/regex1/regex2/g ` filename # \u66ff\u6362\u6240\u6709\u5339\u914d\u5230\u7684 sed ` s/regex1/regex2/p ` filename # \u6253\u5370\u539f\u59cb\u884c\u7684\u5185\u5bb9 sed ` s/regex1/regex2/w file ` filename # \u5c06\u66ff\u6362\u7684\u7ed3\u679c\u5199\u5165\u6587\u4ef6 4. \u6df7\u5408 \u00b6 grep \u53ea\u80fd\u67e5\u627e\uff0c sed\u53ea\u80fd\u66ff\u6362\uff0c \u7efc\u5408\u4f7f\u7528\u53ef\u4ee5\u5b9e\u73b0\u6279\u91cf\u67e5\u627e\u66ff\u6362\u3002 # \u6279\u91cf\u66ff\u6362\u67d0\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u91cc\u9762\u7684\u5b57\u7b26\u4e32 sed -i 's/oldstring/newstring/g' ` grep oldstring -rl dirname `","title":"Linux \u5e38\u7528\u547d\u4ee4"},{"location":"%E5%B7%A5%E5%85%B7/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#linux","text":"","title":"Linux \u5e38\u7528\u547d\u4ee4"},{"location":"%E5%B7%A5%E5%85%B7/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#1-grep","text":"grep regex filename/dirname # \u663e\u793a\u6b63\u5219\u5339\u914d\u5230\u7684\u884c grep -i regex filename/dirname # \u5ffd\u7565\u5927\u5c0f\u5199 grep -v regex filename/dirname # \u663e\u793a\u6b63\u5219\u6ca1\u6709\u5339\u914d\u5230\u7684\u884c grep -n regex filename/dirname # \u663e\u793a\u884c\u53f7 grep -r regex filename/dirname # \u9012\u5f52\u67e5\u627e\u5b50\u6587\u4ef6\u5939 grep -lr regex filename/dirname # \u53ea\u663e\u793a\u5339\u914d\u5185\u5bb9\u7684\u6587\u4ef6 grep -Lr regex filename/dirname # \u53ea\u663e\u793a\u6ca1\u6709\u5339\u914d\u5185\u5bb9\u7684\u6587\u4ef6","title":"1. grep"},{"location":"%E5%B7%A5%E5%85%B7/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#2-find","text":"find dirname -name filename # \u641c\u7d22\u6587\u4ef6","title":"2. find"},{"location":"%E5%B7%A5%E5%85%B7/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#3-sed","text":"# sed \u547d\u4ee4\u683c\u5f0f sed [ option ] '{script}' input_file > output_file # \u4fee\u6539\u8f93\u51fa\u5230\u65b0\u7684\u6587\u4ef6 sed -i [ option ] '{script}' input_file # \u76f4\u63a5\u5728\u539f\u6587\u4ef6\u4fee\u6539 # \u5220\u9664 sed 'line_begin,line_end d' filename # \u5220\u9664\u6307\u5b9a\u8303\u56f4\u7684\u884c sed '/regex/ d' filename # \u5220\u9664\u6b63\u5219\u5339\u914d\u5230\u7684\u884c sed '/regex1/, /regex2/ d' filename # \u5220\u9664\u6b63\u52191\u5339\u914d\u5f00\u5934 \u5230 \u6b63\u52192\u5339\u914d\u7ed3\u5c3e \u8303\u56f4\u5185\u7684\u884c # \u67e5\u627e\u66ff\u6362 sed 's/regex1/regex2' filename # regex1\u67e5\u627e\uff0c \u66ff\u6362\u6210regex2\uff0c \u53ea\u66ff\u6362\u7b2c\u4e00\u4e2a\u627e\u5230\u7684 sed ` s/regex1/regex2/number ` filename # \u66ff\u6362\u7b2c number \u6b21\u51fa\u73b0\u7684\u5b9e\u4f8b sed ` s/regex1/regex2/g ` filename # \u66ff\u6362\u6240\u6709\u5339\u914d\u5230\u7684 sed ` s/regex1/regex2/p ` filename # \u6253\u5370\u539f\u59cb\u884c\u7684\u5185\u5bb9 sed ` s/regex1/regex2/w file ` filename # \u5c06\u66ff\u6362\u7684\u7ed3\u679c\u5199\u5165\u6587\u4ef6","title":"3. sed"},{"location":"%E5%B7%A5%E5%85%B7/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#4","text":"grep \u53ea\u80fd\u67e5\u627e\uff0c sed\u53ea\u80fd\u66ff\u6362\uff0c \u7efc\u5408\u4f7f\u7528\u53ef\u4ee5\u5b9e\u73b0\u6279\u91cf\u67e5\u627e\u66ff\u6362\u3002 # \u6279\u91cf\u66ff\u6362\u67d0\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u91cc\u9762\u7684\u5b57\u7b26\u4e32 sed -i 's/oldstring/newstring/g' ` grep oldstring -rl dirname `","title":"4. \u6df7\u5408"},{"location":"%E5%B7%A5%E5%85%B7/SourceInsight%E5%AE%8F/","text":"SouceInsight\u5b8f\u7684\u4f7f\u7528 \u00b6 1. \u8c03\u7528BeyondCompare \u00b6 \u4f7f\u7528\u5b8f\u6253\u5f00Beyond Compare\u6bd4\u8f83\u6587\u4ef6 macro DiffCurrentFile () { buf = GetCurrentBuf (); // \u83b7\u5f97\u5f53\u524d\u6587\u6863\u7684\u53e5\u67c4 curr_file_path = GetBufName (); // \u83b7\u5f97\u5f53\u524d\u6587\u4ef6\u7684\u8def\u5f84 hprj = GetCurrentProj (); // \u83b7\u53d6\u5f53\u524d\u5de5\u7a0b\u5b9e\u4f8b dprj = GetProjDir (); // \u83b7\u53d6\u5f53\u524d\u5de5\u7a0b\u6839\u76ee\u5f55 // \u622a\u53d6\u5de5\u7a0b\u6587\u4ef6\u5939\u540d\u79f0 dname = strmid ( dprj , offset , strlen ( dprj )); // \u66ff\u6362\u5de5\u7a0b\u6587\u4ef6\u5939\u540d\u79f0\u4e3a\u53e6\u5916\u4e00\u4e2a\uff0c\u7136\u540e\u62fc\u63a5\u6210\u5b8c\u6210\u6587\u4ef6\u8def\u5f84\uff0c\u5b9e\u73b0\u4e0e\u5176\u4ed6\u5de5\u7a0b\u4e2d\u76f8\u540c\u8def\u5f84\u4e0b\u76f8\u540c\u6587\u4ef6\u6bd4\u8f83 tmp_buf = NewBuf ( ' tmp ' ) AppendBufLine ( tmp_buf , cur_file_path ); ReplaceInBuf ( tmp_buf , \"@dname@\" , \"new_dir_name\" , 0 , 1 , 0 , 0 , 0 , 0 ); new_file_path = GetBufLine ( tmp_buf , 0 ); // \u62fc\u63a5CMD\u547d\u4ee4 cmd_line = \" \\\" C:\\Program Files \\\\ Beyond Compare 4 \\\\ BCompare.exe \\\" @new_file_path@ @cur_file_path@\" // \u6267\u884cCMD\u547d\u4ee4 RunCmdLine ( cmd_line , Nil , 0 ); } 2. \u96c6\u6210clang-format \u00b6 \u7528 Python \u5199\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\u8c03\u7528 clang-format.exe \u683c\u5f0f\u5316\u4ee3\u7801\u3002 # \u8bfb\u53d6\u8f93\u5165\uff0c\u683c\u5f0f\u5316\u4e4b\u540e\u8f93\u51fa import os import sys import codecs if __name__ == \"__main__\" : if ( len ( sys . argv ) <= 1 ): sys . exit () selected_file = sys . argv [ 1 ] # utf-8 --> gb2312 Windows\u4e0a\u4f7f\u7528\u9700\u8981\u8f6c\u6362 with codecs . open ( selected_file , 'r' , 'utf-8' ) as fd : content = fd . read () with codecs . open ( selected_file , 'w' , 'gb2312' ) as fd : fd . write ( content ) abs_path = os . path . abspath ( __file__ ) cur_dir = os . path . dirname ( abs_path ) file = '\"' + selected_file + '\"' clang_path = os . path . join ( cur_dir , \"clang-format.exe\" ) cmd_line = clang_path + \"- style=file {0} \" . format ( file ) output = os . popen ( cmd_line ) outtext = output . read () . strip ( \" \\n \" ) print ( outtext ) Source Insight\u4e2d\u7684\u914d\u7f6e tools --> Custom Commands --> Add 1 2 3 4 5 6 \u6309\u7167\u5982\u4e0b\u914d\u7f6e\uff1a Run: python clang-format.py %s Dir: clang-format.py\u7684\u7edd\u5bf9\u8def\u5f84 Paste Output: OK Save File First: OK Wait Until Done: OK Menu --> Insert \u6dfb\u52a0\u5230\u83dc\u5355\u4e2d 3. \u514b\u9686\u5de5\u7a0b \u00b6 \u57fa\u4e8e\u5f53\u524d\u5de5\u7a0b\u514b\u9686\u4e00\u4e2a\u65b0\u5de5\u7a0b\uff0c\u4ec5\u5de5\u7a0b\u540d\u79f0\u4e0d\u540c function string_replace ( string , a , b ) { hbuf = NewBuf ( \"tmp\" ); if ( hbuf == hNil ) { Msg ( \"open file fail.\" ); return ; } AppendBufLine ( hbuf , string ); sel = SearchInBuf ( hbuf , a , 0 , 0 , 1 , 0 , 0 ); part1 = strtrunc ( string , sel . ichFisrt ); part2 = strmid ( string , sel . ichLim , strlen ( string )); new_string = cat ( part1 , b ); new_string = cat ( new_string , part2 ); closeBuf ( hbuf ); return new_string ; } macro create_project () { curr_proj = \"xxxx\" ; prj_name = ask ( \"input new project name:\" ); hprj = NewProj ( prj_name ); if ( hprj == hNil ) { Msg ( \"create new project fail.\" ); return ; } folder_name = ask ( \"input folder name:\" ); curr_hprj = GetCurrentProj (); curr_dir = GetProjDir (); file_count = GetProjFileCount ( curr_hprj ); file_index = 0 ; while ( file_index < file_count ) { filename = GetProjFileName ( curr_hprj , file_index ); abs_path = cat ( curr_dir , \" \\\\ \" ); file_name = cat ( abs_path , filename ); file_name = string_repalce ( file_name , curr_proj , folder_name ); AddFileToProj ( hprj , filename ); file_index = file_index + 1 ; } SyncProj ( hprj ); CloseProj ( hprj ); } 4. \u83b7\u5f97\u7b26\u53f7\u8868 \u00b6 \u53ef\u4ee5\u5229\u7528\u5b8f\u8f93\u51fa\u6574\u4e2a\u5de5\u7a0b\u7684\u51fd\u6570\uff0c \u51fd\u6570\u58f0\u660e\uff0c \u5168\u5c40\u53d8\u91cf\u7b49\u3002 function GetFileSymbol ( file_path , hout ) { hbuf = OpenBuf ( file_path ); symbol_max = GetBufSymCount ( hbuf ); synbol_index = 0 ; while ( symbol_index < symbol_max ) { symbol_record = GetBufSymLocation ( hbuf , symbol_index ); symbol_index = symbol_index + 1 ; // \u8bb0\u5f55\u51fd\u6570\u5b9e\u73b0\u540d\u79f0 if ( symbol_record . Type == \"Function\" ) { AppendBufLine ( hout , file_path # \"function:\" # symbol_record . Symbol ); } // \u8bb0\u5f55\u51fd\u6570\u58f0\u660e\u540d\u79f0 if ( symbol_record . Type == \"Function Prototype\" ) { AppendBufLine ( hout , file_path # \"function Prototype:\" # symbol_record . Symbol ); } // \u8bb0\u5f55\u5168\u5c40\u53d8\u91cf\u540d\u79f0 if ( symbol_record . Type == \"Variable\" ) { AppendBufLine ( hout , file_path # \"Variable:\" # symbol_record . Symbol ); } } } macro GetProjSymbols () { // \u6253\u5f00\u4fdd\u5b58\u6587\u4ef6\u5217\u8868\u7684\u6587\u4ef6\uff0c\u6587\u4ef6\u5217\u8868\u53ef\u4ee5\u4f7f\u7528SourceInsight\u5bfc\u51fa files = OpenBuf ( \"d: \\\\ out.csv\" ); if ( files == hNil ) { return ; } hout = NewBuf ( \"d: \\\\ out.csv\" ); line_max = GetBufLine ( files ); index = 0 ; while ( index < line_max ) { file_path = GetBufLine ( files , index ); GetFileSymbol ( file_path , hout ); index = index + 1 ; } SaveBuf ( hout ); }","title":"SouceInsight\u5b8f\u7684\u4f7f\u7528"},{"location":"%E5%B7%A5%E5%85%B7/SourceInsight%E5%AE%8F/#souceinsight","text":"","title":"SouceInsight\u5b8f\u7684\u4f7f\u7528"},{"location":"%E5%B7%A5%E5%85%B7/SourceInsight%E5%AE%8F/#1-beyondcompare","text":"\u4f7f\u7528\u5b8f\u6253\u5f00Beyond Compare\u6bd4\u8f83\u6587\u4ef6 macro DiffCurrentFile () { buf = GetCurrentBuf (); // \u83b7\u5f97\u5f53\u524d\u6587\u6863\u7684\u53e5\u67c4 curr_file_path = GetBufName (); // \u83b7\u5f97\u5f53\u524d\u6587\u4ef6\u7684\u8def\u5f84 hprj = GetCurrentProj (); // \u83b7\u53d6\u5f53\u524d\u5de5\u7a0b\u5b9e\u4f8b dprj = GetProjDir (); // \u83b7\u53d6\u5f53\u524d\u5de5\u7a0b\u6839\u76ee\u5f55 // \u622a\u53d6\u5de5\u7a0b\u6587\u4ef6\u5939\u540d\u79f0 dname = strmid ( dprj , offset , strlen ( dprj )); // \u66ff\u6362\u5de5\u7a0b\u6587\u4ef6\u5939\u540d\u79f0\u4e3a\u53e6\u5916\u4e00\u4e2a\uff0c\u7136\u540e\u62fc\u63a5\u6210\u5b8c\u6210\u6587\u4ef6\u8def\u5f84\uff0c\u5b9e\u73b0\u4e0e\u5176\u4ed6\u5de5\u7a0b\u4e2d\u76f8\u540c\u8def\u5f84\u4e0b\u76f8\u540c\u6587\u4ef6\u6bd4\u8f83 tmp_buf = NewBuf ( ' tmp ' ) AppendBufLine ( tmp_buf , cur_file_path ); ReplaceInBuf ( tmp_buf , \"@dname@\" , \"new_dir_name\" , 0 , 1 , 0 , 0 , 0 , 0 ); new_file_path = GetBufLine ( tmp_buf , 0 ); // \u62fc\u63a5CMD\u547d\u4ee4 cmd_line = \" \\\" C:\\Program Files \\\\ Beyond Compare 4 \\\\ BCompare.exe \\\" @new_file_path@ @cur_file_path@\" // \u6267\u884cCMD\u547d\u4ee4 RunCmdLine ( cmd_line , Nil , 0 ); }","title":"1. \u8c03\u7528BeyondCompare"},{"location":"%E5%B7%A5%E5%85%B7/SourceInsight%E5%AE%8F/#2-clang-format","text":"\u7528 Python \u5199\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\u8c03\u7528 clang-format.exe \u683c\u5f0f\u5316\u4ee3\u7801\u3002 # \u8bfb\u53d6\u8f93\u5165\uff0c\u683c\u5f0f\u5316\u4e4b\u540e\u8f93\u51fa import os import sys import codecs if __name__ == \"__main__\" : if ( len ( sys . argv ) <= 1 ): sys . exit () selected_file = sys . argv [ 1 ] # utf-8 --> gb2312 Windows\u4e0a\u4f7f\u7528\u9700\u8981\u8f6c\u6362 with codecs . open ( selected_file , 'r' , 'utf-8' ) as fd : content = fd . read () with codecs . open ( selected_file , 'w' , 'gb2312' ) as fd : fd . write ( content ) abs_path = os . path . abspath ( __file__ ) cur_dir = os . path . dirname ( abs_path ) file = '\"' + selected_file + '\"' clang_path = os . path . join ( cur_dir , \"clang-format.exe\" ) cmd_line = clang_path + \"- style=file {0} \" . format ( file ) output = os . popen ( cmd_line ) outtext = output . read () . strip ( \" \\n \" ) print ( outtext ) Source Insight\u4e2d\u7684\u914d\u7f6e tools --> Custom Commands --> Add 1 2 3 4 5 6 \u6309\u7167\u5982\u4e0b\u914d\u7f6e\uff1a Run: python clang-format.py %s Dir: clang-format.py\u7684\u7edd\u5bf9\u8def\u5f84 Paste Output: OK Save File First: OK Wait Until Done: OK Menu --> Insert \u6dfb\u52a0\u5230\u83dc\u5355\u4e2d","title":"2. \u96c6\u6210clang-format"},{"location":"%E5%B7%A5%E5%85%B7/SourceInsight%E5%AE%8F/#3","text":"\u57fa\u4e8e\u5f53\u524d\u5de5\u7a0b\u514b\u9686\u4e00\u4e2a\u65b0\u5de5\u7a0b\uff0c\u4ec5\u5de5\u7a0b\u540d\u79f0\u4e0d\u540c function string_replace ( string , a , b ) { hbuf = NewBuf ( \"tmp\" ); if ( hbuf == hNil ) { Msg ( \"open file fail.\" ); return ; } AppendBufLine ( hbuf , string ); sel = SearchInBuf ( hbuf , a , 0 , 0 , 1 , 0 , 0 ); part1 = strtrunc ( string , sel . ichFisrt ); part2 = strmid ( string , sel . ichLim , strlen ( string )); new_string = cat ( part1 , b ); new_string = cat ( new_string , part2 ); closeBuf ( hbuf ); return new_string ; } macro create_project () { curr_proj = \"xxxx\" ; prj_name = ask ( \"input new project name:\" ); hprj = NewProj ( prj_name ); if ( hprj == hNil ) { Msg ( \"create new project fail.\" ); return ; } folder_name = ask ( \"input folder name:\" ); curr_hprj = GetCurrentProj (); curr_dir = GetProjDir (); file_count = GetProjFileCount ( curr_hprj ); file_index = 0 ; while ( file_index < file_count ) { filename = GetProjFileName ( curr_hprj , file_index ); abs_path = cat ( curr_dir , \" \\\\ \" ); file_name = cat ( abs_path , filename ); file_name = string_repalce ( file_name , curr_proj , folder_name ); AddFileToProj ( hprj , filename ); file_index = file_index + 1 ; } SyncProj ( hprj ); CloseProj ( hprj ); }","title":"3. \u514b\u9686\u5de5\u7a0b"},{"location":"%E5%B7%A5%E5%85%B7/SourceInsight%E5%AE%8F/#4","text":"\u53ef\u4ee5\u5229\u7528\u5b8f\u8f93\u51fa\u6574\u4e2a\u5de5\u7a0b\u7684\u51fd\u6570\uff0c \u51fd\u6570\u58f0\u660e\uff0c \u5168\u5c40\u53d8\u91cf\u7b49\u3002 function GetFileSymbol ( file_path , hout ) { hbuf = OpenBuf ( file_path ); symbol_max = GetBufSymCount ( hbuf ); synbol_index = 0 ; while ( symbol_index < symbol_max ) { symbol_record = GetBufSymLocation ( hbuf , symbol_index ); symbol_index = symbol_index + 1 ; // \u8bb0\u5f55\u51fd\u6570\u5b9e\u73b0\u540d\u79f0 if ( symbol_record . Type == \"Function\" ) { AppendBufLine ( hout , file_path # \"function:\" # symbol_record . Symbol ); } // \u8bb0\u5f55\u51fd\u6570\u58f0\u660e\u540d\u79f0 if ( symbol_record . Type == \"Function Prototype\" ) { AppendBufLine ( hout , file_path # \"function Prototype:\" # symbol_record . Symbol ); } // \u8bb0\u5f55\u5168\u5c40\u53d8\u91cf\u540d\u79f0 if ( symbol_record . Type == \"Variable\" ) { AppendBufLine ( hout , file_path # \"Variable:\" # symbol_record . Symbol ); } } } macro GetProjSymbols () { // \u6253\u5f00\u4fdd\u5b58\u6587\u4ef6\u5217\u8868\u7684\u6587\u4ef6\uff0c\u6587\u4ef6\u5217\u8868\u53ef\u4ee5\u4f7f\u7528SourceInsight\u5bfc\u51fa files = OpenBuf ( \"d: \\\\ out.csv\" ); if ( files == hNil ) { return ; } hout = NewBuf ( \"d: \\\\ out.csv\" ); line_max = GetBufLine ( files ); index = 0 ; while ( index < line_max ) { file_path = GetBufLine ( files , index ); GetFileSymbol ( file_path , hout ); index = index + 1 ; } SaveBuf ( hout ); }","title":"4. \u83b7\u5f97\u7b26\u53f7\u8868"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/","text":"GDB\u8c03\u8bd5\u6280\u5de7 \u00b6 vscode \u4e2d\u4f7f\u7528gdb \u547d\u4ee4\u9700\u8981\u52a0 -exec , \u4e0d\u52a0\u9ed8\u8ba4\u6253\u5370\u53d8\u91cf\u7684\u503c\uff0c \u65e0\u6cd5\u6267\u884cGDB\u547d\u4ee4. 1. \u5e38\u7528\u547d\u4ee4 \u00b6 1.1 \u8bbe\u7f6e\u65ad\u70b9 \u00b6 \u8fd0\u884c\u5230\u5177\u4f53\u4f4d\u7f6e\u7684\u65f6\u5019\u505c\u4f4f\u3002 break filename:line_number break filename:function_name break xxxxx if xxxx : \u6761\u4ef6\u65ad\u70b9 info break : \u663e\u793a\u65ad\u70b9 1.2 \u8bbe\u7f6e\u89c2\u5bdf\u70b9 \u00b6 \u5f53\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u505c\u4f4f\u3002 watch expr : \u4e00\u65e6\u53d1\u751f\u53d8\u5316 rwatch expr : \u4e00\u65e6\u88ab\u8bfb\u53d6 awatch expr : \u4e00\u65e6\u88ab\u8bfb\u53d6\u6216\u8005\u5199\u5165 info watchpoints : \u663e\u793a\u89c2\u5bdf\u70b9 1.3 \u67e5\u770b\u53d8\u91cf \u00b6 p var_name p *arr@arr_len info args : \u663e\u793a\u51fd\u6570\u53c2\u6570\u503c info locals : \u663e\u793a\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u7684\u503c 1.4 \u67e5\u770b\u5185\u5b58 \u00b6 bt(backtrace) : \u6253\u5370\u51fd\u6570\u8c03\u7528\u6808 info f(frame) : \u663e\u793a\u5f53\u524d\u5904\u4e8e\u54ea\u5c42\u51fd\u6570\uff0c\u9ed8\u8ba4\u6700\u9876\u5c42 up : \u5411\u4e0a\u79fb\u52a8\u4e00\u5c42 down : \u5411\u4e0b\u79fb\u52a8\u4e00\u5c42 frame n : \u5207\u6362\u5230n\u5c42 1.5 \u67e5\u770b\u6e90\u7801 \u00b6 l(list) : \u5217\u51fa\u5f53\u524d\u884c\u540e\u9762\u7684\u4ee3\u7801 list - : \u663e\u793a\u5f53\u524d\u884c\u524d\u9762\u7684\u4ee3\u7801 list line_number : \u663e\u793a line_number \u9644\u8fd1\u7684\u4ee3\u7801 list line_begin,line_end list function_name list filename:function_name search <regexp> : \u663e\u793a\u540e\u9762\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4ee3\u7801 forward search <regexp> : \u663e\u793a\u524d\u9762\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4ee3\u7801 1.6 \u63a7\u5236\u6267\u884c\u6d41\u7a0b \u00b6 si(stepi) : \u5355\u6b65\u6267\u884c(\u6c47\u7f16\u4ee3\u7801) ni(nexti) : \u5355\u6b65\u6267\u884c(\u6c47\u7f16\u4ee3\u7801) step : \u8fdb\u5165\u5230\u51fd\u6570\u5185\u90e8 n(next) : \u6267\u884c\u4e00\u884c\uff0c\u4e0d\u8fdb\u5165\u51fd\u6570 u(until) : \u6267\u884c\u5b8c\u5faa\u73af\u4f53 finish : \u6267\u884c\u5b8c\u672c\u51fd\u6570 c(continue) : \u7ee7\u7eed\u6267\u884c r(run) : \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f 1.7 \u5176\u4ed6 \u00b6 GDB \u6253\u5370\u591a\u7ef4\u6570\u7ec4\u4e0d\u6613\uff0c \u53ef\u4ee5\u81ea\u5df1\u5199\u6253\u5370\u51fd\u6570\uff0c\u7136\u540e\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u8c03\u7528\u51fd\u6570\u3002 call function_name(para1, para2) : \u8c03\u7528\u51fd\u6570 shell <command> : \u6267\u884c shell \u547d\u4ee4","title":"GDB\u8c03\u8bd5\u6280\u5de7"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#gdb","text":"vscode \u4e2d\u4f7f\u7528gdb \u547d\u4ee4\u9700\u8981\u52a0 -exec , \u4e0d\u52a0\u9ed8\u8ba4\u6253\u5370\u53d8\u91cf\u7684\u503c\uff0c \u65e0\u6cd5\u6267\u884cGDB\u547d\u4ee4.","title":"GDB\u8c03\u8bd5\u6280\u5de7"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#1","text":"","title":"1. \u5e38\u7528\u547d\u4ee4"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#11","text":"\u8fd0\u884c\u5230\u5177\u4f53\u4f4d\u7f6e\u7684\u65f6\u5019\u505c\u4f4f\u3002 break filename:line_number break filename:function_name break xxxxx if xxxx : \u6761\u4ef6\u65ad\u70b9 info break : \u663e\u793a\u65ad\u70b9","title":"1.1 \u8bbe\u7f6e\u65ad\u70b9"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#12","text":"\u5f53\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u505c\u4f4f\u3002 watch expr : \u4e00\u65e6\u53d1\u751f\u53d8\u5316 rwatch expr : \u4e00\u65e6\u88ab\u8bfb\u53d6 awatch expr : \u4e00\u65e6\u88ab\u8bfb\u53d6\u6216\u8005\u5199\u5165 info watchpoints : \u663e\u793a\u89c2\u5bdf\u70b9","title":"1.2 \u8bbe\u7f6e\u89c2\u5bdf\u70b9"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#13","text":"p var_name p *arr@arr_len info args : \u663e\u793a\u51fd\u6570\u53c2\u6570\u503c info locals : \u663e\u793a\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u7684\u503c","title":"1.3 \u67e5\u770b\u53d8\u91cf"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#14","text":"bt(backtrace) : \u6253\u5370\u51fd\u6570\u8c03\u7528\u6808 info f(frame) : \u663e\u793a\u5f53\u524d\u5904\u4e8e\u54ea\u5c42\u51fd\u6570\uff0c\u9ed8\u8ba4\u6700\u9876\u5c42 up : \u5411\u4e0a\u79fb\u52a8\u4e00\u5c42 down : \u5411\u4e0b\u79fb\u52a8\u4e00\u5c42 frame n : \u5207\u6362\u5230n\u5c42","title":"1.4 \u67e5\u770b\u5185\u5b58"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#15","text":"l(list) : \u5217\u51fa\u5f53\u524d\u884c\u540e\u9762\u7684\u4ee3\u7801 list - : \u663e\u793a\u5f53\u524d\u884c\u524d\u9762\u7684\u4ee3\u7801 list line_number : \u663e\u793a line_number \u9644\u8fd1\u7684\u4ee3\u7801 list line_begin,line_end list function_name list filename:function_name search <regexp> : \u663e\u793a\u540e\u9762\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4ee3\u7801 forward search <regexp> : \u663e\u793a\u524d\u9762\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4ee3\u7801","title":"1.5 \u67e5\u770b\u6e90\u7801"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#16","text":"si(stepi) : \u5355\u6b65\u6267\u884c(\u6c47\u7f16\u4ee3\u7801) ni(nexti) : \u5355\u6b65\u6267\u884c(\u6c47\u7f16\u4ee3\u7801) step : \u8fdb\u5165\u5230\u51fd\u6570\u5185\u90e8 n(next) : \u6267\u884c\u4e00\u884c\uff0c\u4e0d\u8fdb\u5165\u51fd\u6570 u(until) : \u6267\u884c\u5b8c\u5faa\u73af\u4f53 finish : \u6267\u884c\u5b8c\u672c\u51fd\u6570 c(continue) : \u7ee7\u7eed\u6267\u884c r(run) : \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f","title":"1.6 \u63a7\u5236\u6267\u884c\u6d41\u7a0b"},{"location":"%E5%B7%A5%E5%85%B7/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#17","text":"GDB \u6253\u5370\u591a\u7ef4\u6570\u7ec4\u4e0d\u6613\uff0c \u53ef\u4ee5\u81ea\u5df1\u5199\u6253\u5370\u51fd\u6570\uff0c\u7136\u540e\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u8c03\u7528\u51fd\u6570\u3002 call function_name(para1, para2) : \u8c03\u7528\u51fd\u6570 shell <command> : \u6267\u884c shell \u547d\u4ee4","title":"1.7 \u5176\u4ed6"},{"location":"%E5%B7%A5%E5%85%B7/mkdocs/","text":"mkdocs \u00b6 \u4f7f\u7528mkdocs\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2\u7cfb\u7edf\uff0c\u5b9e\u73b0\u77e5\u8bc6\u7ba1\u7406\u3002 \u5b9e\u73b0\u7684\u529f\u80fd\uff1a 1. \u6839\u636e\u6587\u4ef6\u5939\u7ed3\u6784\u81ea\u52a8\u751f\u6210\u591a\u7ea7\u76ee\u5f55(\u6bcf\u4e2a\u6587\u4ef6\u4e00\u4e2a\u6807\u9898\uff0c\u663e\u793a\u5728\u5de6\u4fa7) 2. \u6839\u636e\u6587\u7ae0\u5185\u5bb9\u81ea\u52a8\u751f\u6210\u6587\u7ae0\u76ee\u5f55(\u663e\u793a\u5728\u53f3\u4fa7) 3. \u5ffd\u7565\u7a0b\u5e8f\u6e90\u4ee3\u7801\u6587\u4ef6(\u6587\u4ef6\u5939\u8fd8\u662f\u53ef\u4ee5\u4f7f\u7528\u7684vscode\u5de5\u7a0b) 4. \u81ea\u52a8\u5bfc\u51fa\u6240\u6709md\u6587\u4ef6\u4e3a\u4e00\u4e2aPDF\u6587\u6863\uff0c\u5e26\u76ee\u5f55\u3002 5. github\u6258\u7ba1\u6e90\u7801\uff0c travis\u81ea\u52a8\u6784\u5efa\uff0c\u5728\u7ebf\u7f16\u8f91 1. \u5b89\u88c5 \u00b6 \u5b89\u88c5python, pip pip install mkdocs 2. \u4f7f\u7528 \u00b6 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6 mkdocs.yml site_name: FEIFEI\u7684\u4e2a\u4eba\u535a\u5ba2 repo_name: FF1204/leetcode repo_url: https://github.com/FF1204/leetcode markdown_extensions: - markdown.extensions.admonition - pymdownx.tabbed - codehilite: guess_lang: false linenums: true - markdown.extensions.toc: permalink: true theme: name: material language: zh palette: primary: teal accent: indigo plugins: - search - add-number: strict_mode: False order: 1 excludes: - sql/ - command/rsync includes: - sql/MySQL - awesome-pages - mkpdfs - exclude \u5b89\u88c5\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u5230\u7684 material \u4e3b\u9898\uff0cadd-number\uff0cawesome-pages\uff0cmkpdfs\uff0c exclude\u63d2\u4ef6 \u5728\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u76ee\u5f55\u4e2d\u8fd0\u884c mkdocs serve, \u542f\u52a8\u672c\u5730\u670d\u52a1\u5668\uff0c\u5c31\u53ef\u4ee5\u5728localhost:8000 \u770b\u5230\u7f51\u7ad9\u6548\u679c\u3002 3. \u81ea\u52a8\u90e8\u7f72 \u00b6 \u628a .travis.yml \u6dfb\u52a0\u5230\u535a\u5ba2\u6839\u76ee\u5f55\uff0c\u5728travis\u7f51\u7ad9\u4e0a\u521b\u5efa\u9879\u76ee\u5e76\u5173\u8054github\u4ed3\u5e93\u3002 dist: bionic language: python python: - 3 .7 install: - sudo apt-get install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info - pip install mkdocs - pip install mkdocs-material - pip install mkdocs-awesome-pages-plugin # mkpdfs-mkdocs \u5b58\u5728BUG\u6682\u672a\u4fee\u590d\uff0c\u4f7f\u7528\u81ea\u5df1\u4fee\u590d\u4e4b\u540e\u7684\u7248\u672c #- pip3 install mkpdfs-mkdocs - pip install -e git+https://github.com/FF1204/mkpdfs-mkdocs-plugin.git#egg = mkpdfs-mkdocs-plugin - pip3 install mkdocs-add-number-plugin script: - mkdocs build --clean after_success: | if [ -n \" $GITHUB_API_KEY \" ] ; then cd \" $TRAVIS_BUILD_DIR \" cd site git init git add . git -c user.name = $GITHUB_NAME -c user.email = $GITHUB_EMAIL commit -m \"Auto Deployment\" git push -f -q https:// $GITHUB_NAME : $GITHUB_API_KEY @github.com/FF1204/leetcode.git master:gh-pages cd \" $TRAVIS_BUILD_DIR \" fi \u5176\u4e2d\uff0c GITHUB_NAME \uff0c GITHUB_EMAIL \uff0c GITHUB_API_KEY \u662f\u5728travis\u7f51\u7ad9\u5bf9\u5e94\u9879\u76ee\u4e2d\u586b\u5199\u7684\u81ea\u5df1\u7684gihub\u5bc6\u94a5\u3002 TRAVIS_BUILD_DIR \u662ftravis\u5185\u7f6e\u7684\u53d8\u91cf\uff0c\u8868\u793a\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u3002 4. \u4e3a table \u589e\u52a0\u67e5\u627e\u548c\u8fc7\u6ee4\u529f\u80fd \u00b6 \u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e theme: name: material language: zh custom_dir: theme \u4e3a\u4e3b\u9898\u81ea\u5b9a\u81ea\u5b9a\u4e49\u7684\u76ee\u5f55\uff0c \u8be5\u76ee\u5f55\u4e0e docs \u540c\u7ea7\u3002\u521b\u5efa\u8be5\u76ee\u5f55\uff0c \u5e76\u521b\u5efa\u4e0e\u4e3b\u9898 material \u76f8\u540c\u7684\u76ee\u5f55\u5c42\u7ea7\u7ed3\u6784\u3002 \u65b0\u76ee\u5f55\u4e0b\u7684\u540c\u540d\u6587\u4ef6\u4f1a\u81ea\u52a8\u8986\u76d6\u6389\u539f\u6765\u4e3b\u9898\u4e2d\u7684\u540c\u540d\u6587\u4ef6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e0d\u6539\u53d8\u539f\u6765\u4e3b\u9898\u7684\u60c5\u51b5\u4e0bDIY\u4e3b\u9898\u3002 theme \u6587\u4ef6\u5939\u7ed3\u6784 theme - assets - stylesheets # \u653e\u7f6e\u989d\u5916\u7684\u6837\u5f0f\u8868 - javascripts # \u653e\u7f6e\u989d\u5916\u7684 JS \u5e93 - images # \u653e\u7f6e\u989d\u5916\u7684\u56fe\u7247\u8d44\u6e90 - main.html # \u4f1a\u8986\u76d6\u539f\u6765\u4e3b\u9898\u4e2d\u7684 main.html main.html \u53ef\u4ee5\u65b0\u589e\u6837\u5f0f\u8868\uff0cJS\u5e93\u548c JS \u51fd\u6570\u3002 {% extends \"base.html\" %} {% block libs %} {{ super() }} < script src = \"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" ></ script > < script src = \"https://unpkg.com/bootstrap-table@1.16.0/dist/bootstrap-table.min.js\" ></ script > < script src = \"https://unpkg.com/bootstrap-table@1.16.0/dist/extensions/filter-control/bootstrap-table-filter-control.min.js\" ></ script > < script src = \"https://unpkg.com/bootstrap-table@1.16.0/dist/extensions/multiple-sort/bootstrap-table-multiple-sort.js\" ></ script > {% endblock %} {% block styles %} {{ super() }} < link href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" rel = \"stylesheet\" > < link href = \"https://unpkg.com/bootstrap-table@1.16.0/dist/bootstrap-table.min.css\" rel = \"stylesheet\" > {% endblock %} {% block scripts %} {{ super() }} < script > ( function () { var table_element = $ ( 'div.table_filter_start' ). nextUntil ( 'div.table_filter_end' , 'table' ); table_element . attr ( 'id' , 'table_filter' ); table_element . attr ( 'data-filter-control' , 'false' ); table_element . attr ( 'data-search' , 'true' ); table_element . addClass ( 'table-sm' ); var th_element = $ ( '#table_filter thead th' ); var count = th_element . length ; for ( var i = 0 ; i < count ; i ++ ) { var th = $ ( \"#table_filter thead th:eq(\" + i + \")\" ); th . attr ( 'data-field' , 'data' + i ); } th_element . attr ( 'data-filter-control' , 'input' ); th_element . attr ( 'data-sortable' , 'true' ); })(); </ script > < script > $ ( function () { $ ( '#table_filter' ). bootstrapTable () }) </ script > {% endblock%} \u6211\u4eec\u901a\u8fc7 libs \u5f15\u5165\u9700\u8981\u7528\u5230\u7684 JS \u5e93\uff0c \u901a\u8fc7 styles \u5f15\u5165\u9700\u8981\u7528\u5230\u7684\u6837\u5f0f\u8868\uff0c \u901a\u8fc7 scripts \u5b9a\u4e49\u8981\u6267\u884c\u7684 JS \u51fd\u6570\uff0c\u5176\u4e2d {{ super() }} \u7684\u542b\u4e49\u662f\u7ee7\u627f\u7236\u4eb2\u6a21\u677f\u4e2d\u539f\u6765\u5c31\u5305\u542b\u7684\u4e1c\u897f\u3002 \u6211\u4eec\u901a\u8fc7 JS \u811a\u672c\u5b9e\u73b0\u67e5\u627e div.table_filter_start \u548c div.table_filter_end \u5305\u542b\u7684\u8868\u683c\uff0c \u52a8\u6001\u6dfb\u52a0\u8868\u683c\u7684\u5c5e\u6027\u4f7f\u5b83\u652f\u6301\u641c\u7d22\u548c\u6392\u5e8f\u3002 \u5728\u4e66\u5199markdown\u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u7ed9\u8fd9\u4e2a\u8868\u683c\u6dfb\u52a0\u67e5\u627e\u548c\u6392\u5e8f\u7684\u529f\u80fd\uff0c\u53ea\u9700\u8981\u5728\u9996\u5c3e\u7528 div \u5305\u88f9\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 <div class=\"table_filter_start\"></div> | title1 | title2 | title3 | | ------ | ------ | ------ | | item1 | item2 | item3 | | item4 | item5 | item6 | <div class=\"table_filter_end\"></div>","title":"mkdocs"},{"location":"%E5%B7%A5%E5%85%B7/mkdocs/#mkdocs","text":"\u4f7f\u7528mkdocs\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2\u7cfb\u7edf\uff0c\u5b9e\u73b0\u77e5\u8bc6\u7ba1\u7406\u3002 \u5b9e\u73b0\u7684\u529f\u80fd\uff1a 1. \u6839\u636e\u6587\u4ef6\u5939\u7ed3\u6784\u81ea\u52a8\u751f\u6210\u591a\u7ea7\u76ee\u5f55(\u6bcf\u4e2a\u6587\u4ef6\u4e00\u4e2a\u6807\u9898\uff0c\u663e\u793a\u5728\u5de6\u4fa7) 2. \u6839\u636e\u6587\u7ae0\u5185\u5bb9\u81ea\u52a8\u751f\u6210\u6587\u7ae0\u76ee\u5f55(\u663e\u793a\u5728\u53f3\u4fa7) 3. \u5ffd\u7565\u7a0b\u5e8f\u6e90\u4ee3\u7801\u6587\u4ef6(\u6587\u4ef6\u5939\u8fd8\u662f\u53ef\u4ee5\u4f7f\u7528\u7684vscode\u5de5\u7a0b) 4. \u81ea\u52a8\u5bfc\u51fa\u6240\u6709md\u6587\u4ef6\u4e3a\u4e00\u4e2aPDF\u6587\u6863\uff0c\u5e26\u76ee\u5f55\u3002 5. github\u6258\u7ba1\u6e90\u7801\uff0c travis\u81ea\u52a8\u6784\u5efa\uff0c\u5728\u7ebf\u7f16\u8f91","title":"mkdocs"},{"location":"%E5%B7%A5%E5%85%B7/mkdocs/#1","text":"\u5b89\u88c5python, pip pip install mkdocs","title":"1. \u5b89\u88c5"},{"location":"%E5%B7%A5%E5%85%B7/mkdocs/#2","text":"\u521b\u5efa\u914d\u7f6e\u6587\u4ef6 mkdocs.yml site_name: FEIFEI\u7684\u4e2a\u4eba\u535a\u5ba2 repo_name: FF1204/leetcode repo_url: https://github.com/FF1204/leetcode markdown_extensions: - markdown.extensions.admonition - pymdownx.tabbed - codehilite: guess_lang: false linenums: true - markdown.extensions.toc: permalink: true theme: name: material language: zh palette: primary: teal accent: indigo plugins: - search - add-number: strict_mode: False order: 1 excludes: - sql/ - command/rsync includes: - sql/MySQL - awesome-pages - mkpdfs - exclude \u5b89\u88c5\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u5230\u7684 material \u4e3b\u9898\uff0cadd-number\uff0cawesome-pages\uff0cmkpdfs\uff0c exclude\u63d2\u4ef6 \u5728\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u76ee\u5f55\u4e2d\u8fd0\u884c mkdocs serve, \u542f\u52a8\u672c\u5730\u670d\u52a1\u5668\uff0c\u5c31\u53ef\u4ee5\u5728localhost:8000 \u770b\u5230\u7f51\u7ad9\u6548\u679c\u3002","title":"2. \u4f7f\u7528"},{"location":"%E5%B7%A5%E5%85%B7/mkdocs/#3","text":"\u628a .travis.yml \u6dfb\u52a0\u5230\u535a\u5ba2\u6839\u76ee\u5f55\uff0c\u5728travis\u7f51\u7ad9\u4e0a\u521b\u5efa\u9879\u76ee\u5e76\u5173\u8054github\u4ed3\u5e93\u3002 dist: bionic language: python python: - 3 .7 install: - sudo apt-get install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info - pip install mkdocs - pip install mkdocs-material - pip install mkdocs-awesome-pages-plugin # mkpdfs-mkdocs \u5b58\u5728BUG\u6682\u672a\u4fee\u590d\uff0c\u4f7f\u7528\u81ea\u5df1\u4fee\u590d\u4e4b\u540e\u7684\u7248\u672c #- pip3 install mkpdfs-mkdocs - pip install -e git+https://github.com/FF1204/mkpdfs-mkdocs-plugin.git#egg = mkpdfs-mkdocs-plugin - pip3 install mkdocs-add-number-plugin script: - mkdocs build --clean after_success: | if [ -n \" $GITHUB_API_KEY \" ] ; then cd \" $TRAVIS_BUILD_DIR \" cd site git init git add . git -c user.name = $GITHUB_NAME -c user.email = $GITHUB_EMAIL commit -m \"Auto Deployment\" git push -f -q https:// $GITHUB_NAME : $GITHUB_API_KEY @github.com/FF1204/leetcode.git master:gh-pages cd \" $TRAVIS_BUILD_DIR \" fi \u5176\u4e2d\uff0c GITHUB_NAME \uff0c GITHUB_EMAIL \uff0c GITHUB_API_KEY \u662f\u5728travis\u7f51\u7ad9\u5bf9\u5e94\u9879\u76ee\u4e2d\u586b\u5199\u7684\u81ea\u5df1\u7684gihub\u5bc6\u94a5\u3002 TRAVIS_BUILD_DIR \u662ftravis\u5185\u7f6e\u7684\u53d8\u91cf\uff0c\u8868\u793a\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u3002","title":"3. \u81ea\u52a8\u90e8\u7f72"},{"location":"%E5%B7%A5%E5%85%B7/mkdocs/#4-table","text":"\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e theme: name: material language: zh custom_dir: theme \u4e3a\u4e3b\u9898\u81ea\u5b9a\u81ea\u5b9a\u4e49\u7684\u76ee\u5f55\uff0c \u8be5\u76ee\u5f55\u4e0e docs \u540c\u7ea7\u3002\u521b\u5efa\u8be5\u76ee\u5f55\uff0c \u5e76\u521b\u5efa\u4e0e\u4e3b\u9898 material \u76f8\u540c\u7684\u76ee\u5f55\u5c42\u7ea7\u7ed3\u6784\u3002 \u65b0\u76ee\u5f55\u4e0b\u7684\u540c\u540d\u6587\u4ef6\u4f1a\u81ea\u52a8\u8986\u76d6\u6389\u539f\u6765\u4e3b\u9898\u4e2d\u7684\u540c\u540d\u6587\u4ef6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e0d\u6539\u53d8\u539f\u6765\u4e3b\u9898\u7684\u60c5\u51b5\u4e0bDIY\u4e3b\u9898\u3002 theme \u6587\u4ef6\u5939\u7ed3\u6784 theme - assets - stylesheets # \u653e\u7f6e\u989d\u5916\u7684\u6837\u5f0f\u8868 - javascripts # \u653e\u7f6e\u989d\u5916\u7684 JS \u5e93 - images # \u653e\u7f6e\u989d\u5916\u7684\u56fe\u7247\u8d44\u6e90 - main.html # \u4f1a\u8986\u76d6\u539f\u6765\u4e3b\u9898\u4e2d\u7684 main.html main.html \u53ef\u4ee5\u65b0\u589e\u6837\u5f0f\u8868\uff0cJS\u5e93\u548c JS \u51fd\u6570\u3002 {% extends \"base.html\" %} {% block libs %} {{ super() }} < script src = \"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" ></ script > < script src = \"https://unpkg.com/bootstrap-table@1.16.0/dist/bootstrap-table.min.js\" ></ script > < script src = \"https://unpkg.com/bootstrap-table@1.16.0/dist/extensions/filter-control/bootstrap-table-filter-control.min.js\" ></ script > < script src = \"https://unpkg.com/bootstrap-table@1.16.0/dist/extensions/multiple-sort/bootstrap-table-multiple-sort.js\" ></ script > {% endblock %} {% block styles %} {{ super() }} < link href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" rel = \"stylesheet\" > < link href = \"https://unpkg.com/bootstrap-table@1.16.0/dist/bootstrap-table.min.css\" rel = \"stylesheet\" > {% endblock %} {% block scripts %} {{ super() }} < script > ( function () { var table_element = $ ( 'div.table_filter_start' ). nextUntil ( 'div.table_filter_end' , 'table' ); table_element . attr ( 'id' , 'table_filter' ); table_element . attr ( 'data-filter-control' , 'false' ); table_element . attr ( 'data-search' , 'true' ); table_element . addClass ( 'table-sm' ); var th_element = $ ( '#table_filter thead th' ); var count = th_element . length ; for ( var i = 0 ; i < count ; i ++ ) { var th = $ ( \"#table_filter thead th:eq(\" + i + \")\" ); th . attr ( 'data-field' , 'data' + i ); } th_element . attr ( 'data-filter-control' , 'input' ); th_element . attr ( 'data-sortable' , 'true' ); })(); </ script > < script > $ ( function () { $ ( '#table_filter' ). bootstrapTable () }) </ script > {% endblock%} \u6211\u4eec\u901a\u8fc7 libs \u5f15\u5165\u9700\u8981\u7528\u5230\u7684 JS \u5e93\uff0c \u901a\u8fc7 styles \u5f15\u5165\u9700\u8981\u7528\u5230\u7684\u6837\u5f0f\u8868\uff0c \u901a\u8fc7 scripts \u5b9a\u4e49\u8981\u6267\u884c\u7684 JS \u51fd\u6570\uff0c\u5176\u4e2d {{ super() }} \u7684\u542b\u4e49\u662f\u7ee7\u627f\u7236\u4eb2\u6a21\u677f\u4e2d\u539f\u6765\u5c31\u5305\u542b\u7684\u4e1c\u897f\u3002 \u6211\u4eec\u901a\u8fc7 JS \u811a\u672c\u5b9e\u73b0\u67e5\u627e div.table_filter_start \u548c div.table_filter_end \u5305\u542b\u7684\u8868\u683c\uff0c \u52a8\u6001\u6dfb\u52a0\u8868\u683c\u7684\u5c5e\u6027\u4f7f\u5b83\u652f\u6301\u641c\u7d22\u548c\u6392\u5e8f\u3002 \u5728\u4e66\u5199markdown\u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u7ed9\u8fd9\u4e2a\u8868\u683c\u6dfb\u52a0\u67e5\u627e\u548c\u6392\u5e8f\u7684\u529f\u80fd\uff0c\u53ea\u9700\u8981\u5728\u9996\u5c3e\u7528 div \u5305\u88f9\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 <div class=\"table_filter_start\"></div> | title1 | title2 | title3 | | ------ | ------ | ------ | | item1 | item2 | item3 | | item4 | item5 | item6 | <div class=\"table_filter_end\"></div>","title":"4. \u4e3a table \u589e\u52a0\u67e5\u627e\u548c\u8fc7\u6ee4\u529f\u80fd"},{"location":"%E5%B7%A5%E5%85%B7/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/","text":"VS Code \u914d\u7f6e\u591a\u79cd\u7f16\u8bd1\u8c03\u8bd5\u73af\u5883 \u00b6 VS Code \u662f\u4f7f\u7528\u8bed\u8a00\u670d\u52a1\u5668\u5b9e\u73b0\u7684\u7f16\u8bd1\u8c03\u8bd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u914d\u7f6e\u591a\u79cd\u7f16\u8bd1\u8c03\u8bd5\u73af\u5883\u3002 \u6839\u636e\u6587\u4ef6\u9009\u62e9\u4e0d\u540c\u7684\u7f16\u8bd1\u8c03\u8bd5\u547d\u4ee4\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e00\u4e2a\u7f16\u8f91\u5668\u4e2d\u7f16\u5199\u5404\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u975e\u5e38\u65b9\u4fbf\u3002 1. Python \u73af\u5883\u914d\u7f6e \u00b6 launch.json \u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Python: \u5f53\u524d\u6587\u4ef6\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"program\" : \"${file}\" , // ${file } \u662f\u5185\u7f6e\u53d8\u91cf\uff0c\u89e3\u6790\u6210\u5f53\u524d\u6587\u4ef6\u8def\u5f84 \"console\" : \"integratedTerminal\" } ] } 2. C, C++ \u73af\u5883\u914d\u7f6e \u00b6 2.1 Windows \u4e0b\u4f7f\u7528 WSL \u7f16\u8bd1\u548c\u8c03\u8bd5 \u00b6 task.json \u4e2d\u914d\u7f6e { \"version\" : \"2.0.0\" , \"windows\" : { \"options\" : { \"shell\" : { \"executable\" : \"c:\\\\windows\\\\System32\\\\bash.exe\" , \"args\" : [ \"-c\" ] } } }, \"tasks\" : [ { \"label\" : \"build\" , \"type\" : \"shell\" , \"command\" : \"g++\" , \"args\" : [ \"-g\" , \"-I\" , \"/usr/include/c++/8\" , \"-o\" , \"/mnt/d/FF120/workspace/leetcode/tmp/${fileBasename}.out\" , \"/mnt/d/FF120/workspace/leetcode/docs/leetcode/${fileBasenameNoExtension}/${fileBasename}\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"problemMatcher\" : [] } ] } launch.json \u4e2d\u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"GDB: \u5f53\u524d\u6587\u4ef6\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"/mnt/d/FF120/workspace/leetcode/tmp/${fileBasename}.out\" , \"args\" : [ \"-fThreading\" ], \"stopAtEntry\" : true , \"cwd\" : \"/mnt/d/FF120/workspace/leetcode/\" , \"environment\" : [], \"externalConsole\" : true , \"windows\" : { \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"/usr/bin/gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] }, \"pipeTransport\" : { \"pipeCwd\" : \"\" , \"pipeProgram\" : \"c:\\\\windows\\\\System32\\\\bash.exe\" , \"pipeArgs\" : [ \"-c\" ], \"debuggerPath\" : \"/usr/bin/gdb\" }, \"sourceFileMap\" : { \"/mnt/d\" : \"d://\" , \"/usr\" : \"C:\\\\Users\\\\FF120\\\\AppData\\\\Local\\\\Packages\\\\KaliLinux.54290C8133FEE_ey8k8hqnwqnmg\\\\LocalState\\\\rootfs\\\\usr\\\\\" }, \"preLaunchTask\" : \"build\" } ] } c_cpp_properties.json \u4e2d\u914d\u7f6e, \u7528\u6765\u652f\u6301\u667a\u80fd\u63d0\u793a\u548c\u8df3\u8f6c\u5230\u5934\u6587\u4ef6 { \"configurations\" : [ { \"name\" : \"Win32\" , \"includePath\" : [ \"${workspaceFolder}/**\" ], \"defines\" : [ \"_DEBUG\" , \"UNICODE\" , \"_UNICODE\" ], \"compilerPath\" : \"/usr/bin/g++\" , \"cStandard\" : \"c11\" , \"cppStandard\" : \"c++17\" , \"intelliSenseMode\" : \"gcc-x64\" } ], \"version\" : 4 } 2.2 Windows\u4e0b\u53ea\u8fd0\u884cclient, WSL \u4e0b\u5b89\u88c5VS Code Server\u7f16\u8bd1\u548c\u8c03\u8bd5 \u00b6 task.json \u4e2d\u914d\u7f6e { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"type\" : \"shell\" , \"label\" : \"g++ build active file\" , \"command\" : \"/usr/bin/g++\" , \"args\" : [ \"-g\" , \"${file}\" , \"-o\" , \"${file}.o\" ], \"options\" : { \"cwd\" : \"/usr/bin\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } ] } launch.json \u4e2d\u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"g++ build and debug active file\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${file}.o\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"g++ build active file\" , \"miDebuggerPath\" : \"/usr/bin/gdb\" } ] } c_cpp_properties.json \u4e2d\u914d\u7f6e { \"configurations\" : [ { \"name\" : \"Win32\" , \"includePath\" : [ \"${workspaceFolder}/**\" ], \"defines\" : [ \"_DEBUG\" , \"UNICODE\" , \"_UNICODE\" ], \"compilerPath\" : \"/usr/bin/g++\" , \"cStandard\" : \"c11\" , \"cppStandard\" : \"c++17\" , \"intelliSenseMode\" : \"gcc-x64\" } ], \"version\" : 4 }","title":"VS Code \u914d\u7f6e\u591a\u79cd\u7f16\u8bd1\u8c03\u8bd5\u73af\u5883"},{"location":"%E5%B7%A5%E5%85%B7/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#vs-code","text":"VS Code \u662f\u4f7f\u7528\u8bed\u8a00\u670d\u52a1\u5668\u5b9e\u73b0\u7684\u7f16\u8bd1\u8c03\u8bd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u914d\u7f6e\u591a\u79cd\u7f16\u8bd1\u8c03\u8bd5\u73af\u5883\u3002 \u6839\u636e\u6587\u4ef6\u9009\u62e9\u4e0d\u540c\u7684\u7f16\u8bd1\u8c03\u8bd5\u547d\u4ee4\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e00\u4e2a\u7f16\u8f91\u5668\u4e2d\u7f16\u5199\u5404\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u975e\u5e38\u65b9\u4fbf\u3002","title":"VS Code \u914d\u7f6e\u591a\u79cd\u7f16\u8bd1\u8c03\u8bd5\u73af\u5883"},{"location":"%E5%B7%A5%E5%85%B7/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#1-python","text":"launch.json \u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Python: \u5f53\u524d\u6587\u4ef6\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"program\" : \"${file}\" , // ${file } \u662f\u5185\u7f6e\u53d8\u91cf\uff0c\u89e3\u6790\u6210\u5f53\u524d\u6587\u4ef6\u8def\u5f84 \"console\" : \"integratedTerminal\" } ] }","title":"1. Python \u73af\u5883\u914d\u7f6e"},{"location":"%E5%B7%A5%E5%85%B7/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#2-c-c","text":"","title":"2. C, C++ \u73af\u5883\u914d\u7f6e"},{"location":"%E5%B7%A5%E5%85%B7/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#21-windows-wsl","text":"task.json \u4e2d\u914d\u7f6e { \"version\" : \"2.0.0\" , \"windows\" : { \"options\" : { \"shell\" : { \"executable\" : \"c:\\\\windows\\\\System32\\\\bash.exe\" , \"args\" : [ \"-c\" ] } } }, \"tasks\" : [ { \"label\" : \"build\" , \"type\" : \"shell\" , \"command\" : \"g++\" , \"args\" : [ \"-g\" , \"-I\" , \"/usr/include/c++/8\" , \"-o\" , \"/mnt/d/FF120/workspace/leetcode/tmp/${fileBasename}.out\" , \"/mnt/d/FF120/workspace/leetcode/docs/leetcode/${fileBasenameNoExtension}/${fileBasename}\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"problemMatcher\" : [] } ] } launch.json \u4e2d\u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"GDB: \u5f53\u524d\u6587\u4ef6\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"/mnt/d/FF120/workspace/leetcode/tmp/${fileBasename}.out\" , \"args\" : [ \"-fThreading\" ], \"stopAtEntry\" : true , \"cwd\" : \"/mnt/d/FF120/workspace/leetcode/\" , \"environment\" : [], \"externalConsole\" : true , \"windows\" : { \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"/usr/bin/gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] }, \"pipeTransport\" : { \"pipeCwd\" : \"\" , \"pipeProgram\" : \"c:\\\\windows\\\\System32\\\\bash.exe\" , \"pipeArgs\" : [ \"-c\" ], \"debuggerPath\" : \"/usr/bin/gdb\" }, \"sourceFileMap\" : { \"/mnt/d\" : \"d://\" , \"/usr\" : \"C:\\\\Users\\\\FF120\\\\AppData\\\\Local\\\\Packages\\\\KaliLinux.54290C8133FEE_ey8k8hqnwqnmg\\\\LocalState\\\\rootfs\\\\usr\\\\\" }, \"preLaunchTask\" : \"build\" } ] } c_cpp_properties.json \u4e2d\u914d\u7f6e, \u7528\u6765\u652f\u6301\u667a\u80fd\u63d0\u793a\u548c\u8df3\u8f6c\u5230\u5934\u6587\u4ef6 { \"configurations\" : [ { \"name\" : \"Win32\" , \"includePath\" : [ \"${workspaceFolder}/**\" ], \"defines\" : [ \"_DEBUG\" , \"UNICODE\" , \"_UNICODE\" ], \"compilerPath\" : \"/usr/bin/g++\" , \"cStandard\" : \"c11\" , \"cppStandard\" : \"c++17\" , \"intelliSenseMode\" : \"gcc-x64\" } ], \"version\" : 4 }","title":"2.1 Windows \u4e0b\u4f7f\u7528 WSL \u7f16\u8bd1\u548c\u8c03\u8bd5"},{"location":"%E5%B7%A5%E5%85%B7/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#22-windowsclient-wsl-vs-code-server","text":"task.json \u4e2d\u914d\u7f6e { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"type\" : \"shell\" , \"label\" : \"g++ build active file\" , \"command\" : \"/usr/bin/g++\" , \"args\" : [ \"-g\" , \"${file}\" , \"-o\" , \"${file}.o\" ], \"options\" : { \"cwd\" : \"/usr/bin\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true } } ] } launch.json \u4e2d\u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"g++ build and debug active file\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${file}.o\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"g++ build active file\" , \"miDebuggerPath\" : \"/usr/bin/gdb\" } ] } c_cpp_properties.json \u4e2d\u914d\u7f6e { \"configurations\" : [ { \"name\" : \"Win32\" , \"includePath\" : [ \"${workspaceFolder}/**\" ], \"defines\" : [ \"_DEBUG\" , \"UNICODE\" , \"_UNICODE\" ], \"compilerPath\" : \"/usr/bin/g++\" , \"cStandard\" : \"c11\" , \"cppStandard\" : \"c++17\" , \"intelliSenseMode\" : \"gcc-x64\" } ], \"version\" : 4 }","title":"2.2 Windows\u4e0b\u53ea\u8fd0\u884cclient, WSL \u4e0b\u5b89\u88c5VS Code Server\u7f16\u8bd1\u548c\u8c03\u8bd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u4e8c\u53c9\u6811 \u00b6 \u6811\u662f\u6ca1\u6709\u73af\u7684\u56fe\u3002\u6811\u548c\u94fe\u8868\u3001\u56fe\u90fd\u6709\u5173\u8054\u3002\u94fe\u8868\u662f\u6811\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u800c\u56fe\u90fd\u53ef\u4ee5\u5bf9\u5e94\u4e00\u68f5\u751f\u6210\u6811\u3002\u5b66\u4e60\u5b8c\u94fe\u8868\uff0c\u5b66\u4e60\u6811\uff0c\u7136\u540e\u5b66\u4e60\u56fe\uff0c\u662f\u4e00\u4e2a\u6bd4\u8f83\u5bb9\u6613\u63a5\u53d7\u7684\u8fc7\u7a0b\u3002\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u6811\u53eb\u505a\u4e8c\u53c9\u6811\u3002\u4e8c\u53c9\u6811\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u8fd9\u5bfc\u81f4\u5f88\u591a\u6d89\u53ca\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u6c42\u89e3\u3002\u6309\u7167\u8282\u70b9\u6570\u76ee\u7684\u4e0d\u540c\uff0c\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u6709\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6ee1\u4e8c\u53c9\u6811\u548c\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002 1. \u4e8c\u53c9\u6811\u7684\u901a\u7528\u6027\u8d28 \u00b6 \u4e8c\u53c9\u6811\u7684\u7b2ci\u5c42\u8282\u70b9\u6570\u76ee\u81f3\u591a\u662f 2^(i-1); (i>=1) \u6df1\u5ea6\u4e3aK\u7684\u4e8c\u53c9\u6811\u81f3\u591a\u6709 2^(K-1) \u4e2a\u8282\u70b9\u3002 \u4e8c\u53c9\u6811\u4e2d\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\u6570\u76ee\u8bb0\u4f5cn2, \u53f6\u8282\u70b9\u8bb0\u4f5cn0; \u5219\u6709 n0 = n2 + 1 \u6df1\u5ea6\u4e3an\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u5176\u8282\u70b9\u7684\u6570\u76ee\u662f 2^n -1 , \u53f6\u8282\u70b9\u6570\u76ee\u662f 2^(n-1) , \u975e\u53f6\u8282\u70b9\u7684\u6570\u76ee\u662f 2^(n-1)-1 \u8282\u70b9\u6570\u76ee\u4e3an\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6df1\u5ea6\u662f log2(n+1) \u8282\u70b9\u6570\u76ee\u4e3an\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6df1\u5ea6\u662f [log2(n)] + 1 \u5176\u4e2d[]\u8868\u793a\u5411\u4e0b\u53d6\u6574 2. \u4e8c\u53c9\u6811\u7684\u5b9a\u4e49 \u00b6 \u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u548c\u53cc\u5411\u94fe\u8868\u6bd4\u8f83\u76f8\u4f3c\uff0c\u9700\u8981\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u3002 // \u5b9a\u4e49\u4e8c\u53c9\u6811\u7684\u7ed3\u6784 class TreeNode { public : int val ; TreeNode * left , * right ; TreeNode ( int val ) { this -> val = val ; this -> left = this -> right = nullptr ; } } 3. \u4e8c\u53c9\u6811\u7684\u521b\u5efa(\u751f\u6210) \u00b6 \u521b\u5efa\u4e00\u68f5\u4e8c\u53c9\u6811\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u7b97\u6cd5\u4e2d\u6307\u5b9a\u4e8c\u53c9\u6811\u901a\u5e38\u4f7f\u7528\"#\"\u8868\u793a\u4e0d\u5b58\u5728\u7684\u8282\u70b9\uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e24\u4e2a\u904d\u5386\u5e8f\u5217\u7684\u65b9\u5f0f\u6765\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u3002\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e5f\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u3002 3.1 \u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 \u00b6 \u6839\u636e\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u521b\u5efa\u4e8c\u53c9\u6811\uff0c\u6839\u636e\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002 \u5047\u8bbe\u524d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u662fpre; \u4e2d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u662fvin;\u91cc\u9762\u90fd\u4e0d\u542b\u6709\u91cd\u590d\u6570\u5b57\uff1b\u9996\u5148\u786e\u5b9a\u6839\u8282\u70b9\uff0c\u80af\u5b9a\u662fpre[0], \u7136\u540e\u5728vin\u4e2d\u5bfb\u627epre[0], \u5b83\u524d\u9762\u7684\u4e00\u5b9a\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c\u540e\u9762\u7684\u90fd\u662f\u53f3\u5b50\u6811\u4e0a\u7684\u3002\u5047\u8bbepre[0]\u51fa\u73b0\u5728vin[3],\u53ef\u4ee5\u77e5\u9053\u5de6\u5b50\u6811\u4e0a\u6709\u4e09\u4e2a\u8282\u70b9\uff0c\u5206\u522b\u662fvin[0],vin[1],vin[2], \u5728pre\u4e2d\u4ecepre[0]\u4ee5\u540e\u65703\u4e2a\u6570\u5b57\u8fd9\u4e09\u4e2a\u6570\u5b57\u4e00\u5b9a\u662f\u4f4d\u4e8e\u5de6\u5b50\u6811\u4e0a\u7684\uff0c\u5269\u4e0b\u7684\u5c5e\u4e8e\u53f3\u5b50\u6811\u3002\u5206\u522b\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u9012\u5f52\u5904\u7406\u5de6\u53f3\u5b50\u6811\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u7b54\u6848\uff1b\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe pre = [1,2,4,7,3,5,6,8] vin=[4,7,2,1,5,3,8,6] \u7b2c\u4e00\u6b21\uff1a \u53ef\u77e51\u662f\u6839\uff0c2\uff0c4\uff0c7\u662f1\u7684\u5de6\u5b50\u6811\u4e0a\u7684\uff0c3,5,6,8,\u662f1\u7684\u53f3\u5b50\u6811\u4e0a\u7684\u3002 \u5206\u522b\u5904\u7406\u5e8f\u5217 [2,4,7] [4,7,2] \u548c [3,5,6,8] [5,3,6,8] \u7b2c\u4e8c\u6b21\uff1a \u5bf9\u4e8e [2,4,7] [4,7,2] \u53ef\u4ee5\u5f97\u52302\u662f\u6839\uff0c\u800c4\uff0c7\u90fd\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c \u63a5\u7740\u5904\u7406 [4,7] [4,7] \u6b64\u65f64\u662f\u6839\uff0c\u800c7\u4f4d\u4e8e\u53f3\u5b50\u6811\u4e0a\uff0c\u8fd9\u8fb9\u5904\u7406\u5b8c\u6bd5\uff1b\u5bf9\u4e8e [3,5,6,8] [5,3,8,6] \u53ef\u4ee5\u5f97\u52303\u662f\u6839\uff0c5\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c [6,8] \u662f\u53f3\u5b50\u6811\u4e0a\u7684\u3002\u63a5\u7740\u5904\u7406 [6,8][8,6] \u6b64\u65f66\u662f\u6839\uff0c\u800c8\u4f4d\u4e8e\u5de6\u5b50\u6811\u4e0a\u3002 \u7efc\u5408\u4e0a\u9762\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u5f62\u72b6\u5982\u4e0b\uff1a //\u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode * reConstructBinaryTree ( vector < int > pre , vector < int > vin ) { if ( pre . empty () || vin . empty ()){ return nullptr ;} TreeNode * node = new TreeNode ( pre [ 0 ]); // \u5148\u5efa\u7acb\u6839\u8282\u70b9 int len = pre . size (); for ( size_t i = 0 ; i < vin . size (); ++ i ){ if ( vin [ i ] == pre [ 0 ]){ // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002 vector < int > left_pre ( i , 0 ); vector < int > left_vin ( i , 0 ); vector < int > right_pre ( len - 1 - i , 0 ); vector < int > right_vin ( len - 1 - i , 0 ); copy ( vin . begin (), vin . begin () + i , left_vin . begin ()); copy ( vin . begin () + i + 1 , vin . end (), right_vin . begin ()); copy ( pre . begin () + 1 , pre . begin () + 1 + i , left_pre . begin ()); copy ( pre . begin () + i + 1 , pre . end (), right_pre . begin ()); node -> left = reConstructBinaryTree ( left_pre , left_vin ); node -> right = reConstructBinaryTree ( right_pre , right_vin ); } } return node ; leetcode gist 3.2 \u6839\u636e\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 \u00b6 //\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode * buildTree ( vector < int >& inorder , vector < int >& postorder ) { if ( inorder . empty () || postorder . empty ()) { return nullptr ; } TreeNode * node = new TreeNode ( postorder [ postorder . size () - 1 ]); // \u5148\u5efa\u7acb\u6839\u8282\u70b9 int len = inorder . size (); for ( size_t i = 0 ; i < inorder . size (); ++ i ) { if ( inorder [ i ] == postorder [ postorder . size () - 1 ]) { // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002 vector < int > left_post ( i , 0 ); vector < int > left_vin ( i , 0 ); vector < int > right_post ( len - 1 - i , 0 ); vector < int > right_vin ( len - 1 - i , 0 ); copy ( inorder . begin (), inorder . begin () + i , left_vin . begin ()); copy ( inorder . begin () + i + 1 , inorder . end (), right_vin . begin ()); copy ( postorder . begin (), postorder . begin () + i , left_post . begin ()); copy ( postorder . begin () + i , postorder . end () - 1 , right_post . begin ()); node -> left = buildTree ( left_vin , left_post ); node -> right = buildTree ( right_vin , right_post ); } } return node ; } leetcode gist 4. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u00b6 \u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7ecf\u8fc7\u7684\u8282\u70b9\u6570\u91cf\u5b9a\u4e49\u4e3a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u3002 4.1 \u6700\u5927\u6df1\u5ea6 \u00b6 // \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 int maxDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return maxDepth2 ( root -> left , dep + 1 ); if ( root -> right && ! root -> left ) return maxDepth2 ( root -> right , dep + 1 ); return max ( maxDepth2 ( root -> left , dep + 1 ), maxDepth2 ( root -> right , dep + 1 )); } 4.2 \u6700\u5c0f\u6df1\u5ea6 \u00b6 // \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6 int minDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return minDepth2 ( root -> left , dep + 1 ); if ( ! root -> left && root -> right ) return minDepth2 ( root -> right , dep + 1 ); return min ( minDepth2 ( root -> left , dep + 1 ), minDepth2 ( root -> right , dep + 1 )); } 5. \u4e8c\u53c9\u6811\u7684\u904d\u5386 \u00b6 \u4e8c\u53c9\u6811\u6709\u4e09\u79cd\u5e38\u89c1\u7684\u904d\u5386\u65b9\u5f0f\uff1a\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u3002\u524d\u4e2d\u540e\u6307\u7684\u90fd\u662f\u6839\u8282\u70b9\u76f8\u5bf9\u4e8e\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u987a\u5e8f\u3002\u6240\u4ee5\u524d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f root-left-right , \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f left-root-right , \u540e\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f left-right-root . 5.1 \u524d\u5e8f\u904d\u5386(\u9012\u5f52) \u00b6 \u524d\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4 \uff1a \u8f93\u51fa\u5f53\u524d\u8282\u70b9 \u5982\u679c\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u505a\u53c2\u6570\u9012\u5f52 \u5982\u679c\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u7531\u5b69\u5b50\u505a\u53c2\u6570\u9012\u5f52 // \u524d\u5e8f\u904d\u5386 vector < int > preorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; re . push_back ( root -> val ); if ( root -> left ){ vector < int > ll = preorderTraversal ( root -> left ); re . insert ( re . end (), ll . begin (), ll . end ()); } if ( root -> right ){ vector < int > rr = preorderTraversal ( root -> right ); re . insert ( re . end (), rr . begin (), rr . end ()); } return re ; } 5.2 \u524d\u5e8f\u904d\u5386(\u975e\u9012\u5f52) \u00b6 \u975e\u9012\u5f52\u7684\u5b9e\u73b0\uff0c\u9012\u5f52\u51fd\u6570\u7684\u5b9e\u73b0\u662f\u4f7f\u7528\u5806\u6808\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u628a\u9012\u5f52\u8c03\u7528\u7684\u51fd\u6570\u6539\u5199\u6210\u975e\u9012\u5f52\u7684\u5f62\u5f0f\u4e00\u822c\u4e5f\u662f\u4f7f\u7528\u5806\u6808\u4f5c\u4e3a\u6570\u636e\u7ed3\u6784\u3002 \u524d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u904d\u5386\u6b65\u9aa4 \u8f93\u51fa\u5f53\u524d\u7684\u8282\u70b9\u503c\uff0c\u5e76\u628a\u5f53\u524d\u7684\u8282\u70b9\u538b\u5165\u6808 current = current->left ;\u5faa\u73af\u4ee5\u4e0a\u6b65\u9aa4\u76f4\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4 \u53d6\u6808\u9876\u5143\u7d20\u7684\u53f3\u5b69\u5b50\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7136\u540e\u56de\u5230\u6b65\u9aa41. //\u524d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > preorderTraversal ( TreeNode * root ) { vector < int > re ; if ( root == nullptr ) return re ; stack < TreeNode *> s ; TreeNode * tmp = root ; while ( tmp != nullptr || ! s . empty ()){ // \u903b\u8f91\u6216\u662f\u77ed\u8def\u7684 while ( tmp != nullptr ){ re . push_back ( tmp -> val ); s . push ( tmp ); tmp = tmp -> left ; } // \u5faa\u73af\u9000\u51fa\u8bf4\u660e\u6ca1\u6709\u4e86\u5de6\u5b69\u5b50 if ( ! s . empty ()){ tmp = s . top (); s . pop (); tmp = tmp -> right ; } } return re ; } 5.3 \u4e2d\u5e8f\u904d\u5386(\u9012\u5f52) \u00b6 \u4e2d\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4 \u5982\u679c\u5f53\u524d\u7684\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 \u8f93\u51fa\u5f53\u524d\u8282\u70b9 \u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u53f3\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 // \u4e2d\u5e8f\u904d\u5386\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > inorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; if ( root -> left ){ vector < int > ll = inorderTraversal ( root -> left ); re . insert ( re . end (), ll . begin (), ll . end ()); } re . push_back ( root -> val ); if ( root -> right ){ vector < int > rr = inorderTraversal ( root -> right ); re . insert ( re . end (), rr . begin (), rr . end ()); } return re ; } 5.4 \u4e2d\u5e8f\u904d\u5386(\u975e\u9012\u5f52) \u00b6 \u4e2d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 \u5bf9\u4e8e\u5f53\u524d\u7684\u8282\u70b9\uff0c\u653e\u5165\u5806\u6808\uff0c\u7136\u540e\u641c\u7d22\u6709\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u4e00\u76f4\u5411\u4e0b\u641c\u7d22\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\u4e3a\u6b62\u3002 \u4ece\u5806\u6808\u53d6\u51fa\u6808\u9876\u5143\u7d20\uff0c\u8f93\u51fa\uff0c\u7136\u540e\u641c\u7d22\u53f3\u5b69\u5b50 //\u4e2d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > inorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; TreeNode * iter = root ; stack < TreeNode *> s ; while ( iter || ! s . empty ()){ while ( iter ){ s . push ( iter ); iter = iter -> left ; } if ( ! s . empty ()){ iter = s . top (); s . pop (); re . push_back ( iter -> val ); iter = iter -> right ; } } return re ; } 5.5 \u540e\u5e8f\u904d\u5386(\u9012\u5f52) \u00b6 \u540e\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4\u662f \u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 \u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u53f3\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 \u8f93\u51fa\u5f53\u524d\u8282\u70b9 // \u540e\u7eed\u904d\u5386\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > postorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; if ( root -> left ){ vector < int > ll = postorderTraversal ( root -> left ); re . insert ( re . end (), ll . begin (), ll . end ()); } if ( root -> right ){ vector < int > rr = postorderTraversal ( root -> right ); re . insert ( re . end (), rr . begin (), rr . end ()); } re . push_back ( root -> val ); return re ; } 5.6 \u540e\u5e8f\u904d\u5386(\u975e\u9012\u5f52) \u00b6 \u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 \u7b2c\u4e00\u79cd\u601d\u8def\uff1a\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9P\uff0c\u5c06\u5176\u5165\u6808\uff0c\u7136\u540e\u6cbf\u5176\u5de6\u5b50\u6811\u4e00\u76f4\u5f80\u4e0b\u641c\u7d22\uff0c\u76f4\u5230\u641c\u7d22\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\u7684\u7ed3\u70b9\uff0c\u6b64\u65f6\u8be5\u7ed3\u70b9\u51fa\u73b0\u5728\u6808\u9876\uff0c\u4f46\u662f\u6b64\u65f6\u4e0d\u80fd\u5c06\u5176\u51fa\u6808\u5e76\u8bbf\u95ee\uff0c\u56e0\u6b64\u5176\u53f3\u5b69\u5b50\u8fd8\u4e3a\u88ab\u8bbf\u95ee\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u6309\u7167\u76f8\u540c\u7684\u89c4\u5219\u5bf9\u5176\u53f3\u5b50\u6811\u8fdb\u884c\u76f8\u540c\u7684\u5904\u7406\uff0c\u5f53\u8bbf\u95ee\u5b8c\u5176\u53f3\u5b69\u5b50\u65f6\uff0c\u8be5\u7ed3\u70b9\u53c8\u51fa\u73b0\u5728\u6808\u9876\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u5176\u51fa\u6808\u5e76\u8bbf\u95ee\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6b63\u786e\u7684\u8bbf\u95ee\u987a\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4e24\u6b21\u51fa\u73b0\u5728\u6808\u9876\uff0c\u53ea\u6709\u5728\u7b2c\u4e8c\u6b21\u51fa\u73b0\u5728\u6808\u9876\u65f6\uff0c\u624d\u80fd\u8bbf\u95ee\u5b83\u3002\u56e0\u6b64\u9700\u8981\u591a\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\u6807\u8bc6\u8be5\u7ed3\u70b9\u662f\u5426\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\u5728\u6808\u9876\u3002 //\u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 \u7b2c\u4e8c\u79cd\u601d\u8def\uff1a\u8981\u4fdd\u8bc1\u6839\u7ed3\u70b9\u5728\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u8bbf\u95ee\u4e4b\u540e\u624d\u80fd\u8bbf\u95ee\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9P\uff0c\u5148\u5c06\u5176\u5165\u6808\u3002\u5982\u679cP\u4e0d\u5b58\u5728\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5b83\uff1b\u6216\u8005P\u5b58\u5728\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\uff0c\u4f46\u662f\u5176\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u5df2\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u540c\u6837\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8be5\u7ed3\u70b9\u3002\u82e5\u975e\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\uff0c\u5219\u5c06P\u7684\u53f3\u5b69\u5b50\u548c\u5de6\u5b69\u5b50\u4f9d\u6b21\u5165\u6808\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u53d6\u6808\u9876\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5de6\u5b69\u5b50\u5728\u53f3\u5b69\u5b50\u524d\u9762\u88ab\u8bbf\u95ee\uff0c\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u5728\u6839\u7ed3\u70b9\u524d\u9762\u88ab\u8bbf\u95ee\u3002 // \u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > postOrder ( TreeNode * root ) { vector < int > re ; if ( root == nullptr ) return re ; TreeNode * p = root ; stack < TreeNode *> s ; TreeNode * last = root ; s . push ( p ); while ( ! s . empty ()) { p = s . top (); if ( ( p -> left == nullptr && p -> right == nullptr ) || ( p -> right == nullptr && last == p -> left ) || ( last == p -> right ) ) { re . push_back ( p -> val ); last = p ; s . pop (); } else { if ( p -> right ) s . push ( p -> right ); if ( p -> left ) s . push ( p -> left ); } } return re ; } 5.7 \u5c42\u6b21\u904d\u5386 \u00b6 \u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7c7b\u4f3c\u4e0e\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u53ef\u4ee5\u4f7f\u7528\u961f\u5217\u6765\u5b9e\u73b0\u3002\u601d\u8def\u662f\uff1a \u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u4fdd\u5b58\u76f8\u90bb\u4e24\u5c42\u7684\u8282\u70b9\uff0c\u5faa\u73af\u8f93\u51fa\u6bcf\u5c42\u7684\u8282\u70b9 \u5c42\u6b21\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4 \u521d\u59cb\u5316\u4e24\u4e2a\u961f\u5217d1,d2;\u4ee4d1\u4fdd\u5b58root,d2\u4e3a\u7a7a \u6e05\u7a7ad2,\u904d\u5386d1\u4e2d\u7684\u8282\u70b9\uff0c\u628ad1\u4e2d\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50\u8282\u70b9\u6309\u7167\u987a\u5e8f\u653e\u5165d2\u4e2d \u6253\u5370d1\u4e2d\u7684\u8282\u70b9 \u4ea4\u6362d1\u548cd2;\u8f6c\u52302 \u5faa\u73af\u76f4\u5230d2\u4e2d\u4e3a\u7a7a\uff0c\u7ed3\u675f\u3002 // \u4ece\u5e95\u5411\u4e0a\u5c42\u6b21\u904d\u5386\u4e8c\u53c9\u6811 vector < vector < int >> levelOrderBottom ( TreeNode * root ) { // write your code here vector < vector < int >> result ; vector < TreeNode *> v1 , v2 ; if ( root == nullptr ){ return result ; } v1 . push_back ( root ); while ( ! v1 . empty ()){ // \u904d\u5386v1\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u5c06\u4e0b\u4e00\u5c42\u8282\u70b9\u4fdd\u5b58\u5728v2\u4e2d for ( int i = 0 ; i < v1 . size (); i ++ ){ if ( v1 [ i ] -> left ){ v2 . push_back ( v1 [ i ] -> left ); } if ( v1 [ i ] -> right ){ v2 . push_back ( v1 [ i ] -> right ); } } vector < int > tmp ; //\u6253\u5370v1 for ( int i = 0 ; i < v1 . size (); i ++ ){ tmp . push_back ( v1 [ i ] -> val ); } result . insert ( result . begin (), tmp ); swap ( v1 , v2 ); v2 . clear (); } return result ; } // \u81ea\u9876\u5411\u4e0b\u904d\u5386\u4e8c\u53c9\u6811 vector < vector < int >> zigzagLevelOrder ( TreeNode * root ) { // write your code here vector < vector < int >> result ; if ( ! root ) return result ; vector < TreeNode *> v1 , v2 ; v1 . push_back ( root ); int level = 1 ; while ( ! v1 . empty ()){ //\u904d\u5386v1\u4e2d\u7684\u8282\u70b9\uff0c\u628av1\u4e2d\u6240\u6709\u8282\u70b9\u7684\u4e0b\u4e00\u7ea7\u8282\u70b9\u5b58\u50a8\u5728v2\u4e2d for ( int i = 0 ; i < v1 . size (); i ++ ){ if ( v1 [ i ] -> left ){ v2 . push_back ( v1 [ i ] -> left ); } if ( v1 [ i ] -> right ){ v2 . push_back ( v1 [ i ] -> right ); } } // \u6253\u5370v1\u4e2d\u7684\u8282\u70b9,\u5982\u679clevel \u662f\u5947\u6570\uff0c\u5219\u4ece\u5de6\u5411\u53c8\u6253\u5370\uff0c // \u5982\u679clevel\u662f\u5076\u6570\uff0c\u5219\u4ece\u53f3\u5411\u5de6\u6253\u5370 vector < int > tmp ; if ( level % 2 == 0 ){ for ( int i = v1 . size () - 1 ; i >= 0 ; i -- ){ tmp . push_back ( v1 [ i ] -> val ); } } if ( level % 2 ){ for ( int i = 0 ; i < v1 . size (); i ++ ){ tmp . push_back ( v1 [ i ] -> val ); } } result . push_back ( tmp ); // \u66f4\u65b0\u8be5\u66f4\u65b0\u7684\u6570\u636e swap ( v1 , v2 ); v2 . clear (); level ++ ; } return result ; } // \u4e4b\u5b57\u5f62\u904d\u5386\u4e8c\u53c9\u6811 vector < vector < int > > Print ( TreeNode * pRoot ) { vector < vector < int > > output ; vector < int > row ; if ( pRoot == nullptr ) return output ; vector < TreeNode *> first ; vector < TreeNode *> second ; bool odd = true ; first . push_back ( pRoot ); while ( ! first . empty ()){ if ( odd ){ for ( int i = 0 ; i < first . size (); ++ i ) { row . push_back ( first [ i ] -> val ); if ( first [ i ] -> left ){ second . push_back ( first [ i ] -> left ); } if ( first [ i ] -> right ){ second . push_back ( first [ i ] -> right ); } } output . push_back ( row ); row . clear (); swap ( first , second ); second . clear (); odd = ! odd ; } else { for ( int i = first . size () - 1 ; i >= 0 ; -- i ) { row . push_back ( first [ i ] -> val ); } output . push_back ( row ); row . clear (); for ( int j = 0 ; j < first . size (); ++ j ) { if ( first [ j ] -> left ){ second . push_back ( first [ j ] -> left ); } if ( first [ j ] -> right ){ second . push_back ( first [ j ] -> right ); } } swap ( first , second ); second . clear (); odd = ! odd ; } } return output ; } 6. \u7ebf\u7d22\u4e8c\u53c9\u6811 \u00b6 6.1 \u539f\u7406 \u00b6 6.2 \u904d\u5386\u4e8c\u53c9\u6811 \u00b6 \u5229\u7528\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u601d\u60f3\u53ef\u4ee5\u5b9e\u73b0\u5728 O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c\u904d\u5386\u3002 6.2.1 morris \u5148\u5e8f\u904d\u5386 \u00b6 6.2.2 morris \u4e2d\u5e8f\u904d\u5386 \u00b6 6.2.3 morris \u540e\u5e8f\u904d\u5386 \u00b6 7. \u5e73\u8861\u4e8c\u53c9\u6811 \u00b6 \u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u662f\uff1a\u8981\u4e48\u662f\u4e00\u68f5\u7a7a\u6811\uff0c\u8981\u4e48\u6839\u8282\u70b9\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\u7684\u9ad8\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 7.1 \u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5224\u5b9a \u00b6 // \u6c42\u6811\u7684\u6700\u5927\u6df1\u5ea6 int maxDepth ( TreeNode * root ) { if ( root == nullptr ) return 0 ; int left = 1 ; int right = 1 ; int depth = 1 ; if ( root -> left ){ left += maxDepth ( root -> left ); } if ( root -> right ){ right += maxDepth ( root -> right ); } depth = max ( left , right ); return depth ; } // \u5224\u65ad\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811 bool isBalanced ( TreeNode * root ) { if ( root == nullptr ) return true ; if ( root -> left == nullptr && root -> right == nullptr ) return true ; if ( root -> left && root -> right == nullptr ){ if ( root -> left -> left == nullptr && root -> left -> right == nullptr ){ return true ; } return false ; } if ( root -> left == nullptr && root -> right ){ if ( root -> right -> left == nullptr && root -> right -> right == nullptr ){ return true ; } return false ; } bool left = isBalanced ( root -> left ); bool right = isBalanced ( root -> right ); int ldepth = maxDepth ( root -> left ); int rdepth = maxDepth ( root -> right ); if ( abs ( ldepth - rdepth ) <= 1 && left && right ) return true ; return false ; } 8. \u4e8c\u53c9\u641c\u7d22\u6811(\u4e8c\u53c9\u67e5\u627e\u6811) \u00b6 \u4e8c\u53c9\u67e5\u627e\u6811\uff08Binary Search Tree\uff09\uff0c\u4e5f\u79f0\u6709\u5e8f\u4e8c\u53c9\u6811\uff08ordered binary tree\uff09,\u6392\u5e8f\u4e8c\u53c9\u6811\uff08sorted binary tree\uff09\uff0c\u662f\u6307\u4e00\u68f5\u7a7a\u6811\u6216\u8005\u5177\u6709\u4e0b\u5217\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a \u82e5\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b \u82e5\u4efb\u610f\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b \u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\u3002 \u6ca1\u6709\u952e\u503c\u76f8\u7b49\u7684\u7ed3\u70b9\uff08no duplicate nodes\uff09\u3002 \u56e0\u4e3a\uff0c\u4e00\u68f5\u7531n\u4e2a\u7ed3\u70b9\uff0c\u968f\u673a\u6784\u9020\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u9ad8\u5ea6\u4e3algn\uff0c\u6240\u4ee5\u987a\u7406\u6210\u7ae0\uff0c\u4e00\u822c\u64cd\u4f5c\u7684\u6267\u884c\u65f6\u95f4\u4e3aO\uff08lgn\uff09.\uff08\u81f3\u4e8en\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6\u4e3algn\u7684\u8bc1\u660e\uff0c\u53ef\u53c2\u8003\u7b97\u6cd5\u5bfc\u8bba \u7b2c12\u7ae0 \u4e8c\u53c9\u67e5\u627e\u6811 \u7b2c12.4\u8282\uff09\u3002 \u4f46\u4e8c\u53c9\u6811\u82e5\u9000\u5316\u6210\u4e86\u4e00\u68f5\u5177\u6709n\u4e2a\u7ed3\u70b9\u7684\u7ebf\u6027\u94fe\u540e\uff0c\u5219\u6b64\u4e9b\u64cd\u4f5c\u6700\u574f\u60c5\u51b5\u8fd0\u884c\u65f6\u95f4\u4e3aO\uff08n\uff09\u3002\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u79cd\u57fa\u4e8e\u4e8c\u53c9\u67e5\u627e\u6811-\u7ea2\u9ed1\u6811\uff0c\u5b83\u901a\u8fc7\u4e00\u4e9b\u6027\u8d28\u4f7f\u5f97\u6811\u76f8\u5bf9\u5e73\u8861\uff0c\u4f7f\u5f97\u6700\u7ec8\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u4f9d\u7136\u4e3aO\uff08lgn\uff09\u3002 8.1 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 class BinaryTree (): def __init__ ( self , parent = None , left = None , right = None ): self . parent = parent self . left = left self . right = right self . value = value def insert ( root , value ): if not root : root = Node ( value ) return root if root . value == value : return root if value < root . value : root . left = insert ( root . left , value ) else : root . right = insert ( root . right , value ) return root def search ( root , value ): if not root : return None if root . value == value : return root if value < root . value : return search ( root . left , value ) else : return search ( root . right , value ) def delete ( root , value ): if root is None : return root if value < root . value : root . left = delete ( root . left , value ) elif value > root . value : root . right = delete ( root . right , value ) else : if root . left is None and root . right is None : return None if root . left is None : tmp = root . right root = None return tmp if root . right is None : tmp = root . left root = None return tmp current = root . right currentParent = None while current . left is not None : currentParent = current current = current . left currentParent . left = current . right root . value = current . value return root def build ( array ): tree = None for v in array : tree = insert ( tree , v ) return tree def max ( root ): if root is None : return None current = root while current . right is not None : current = current . right return current . value def min ( root ): if root is None : return None current = root while current . left is not None : current = current . left return current . value # \u67e5\u627e\u6bd4node\u8282\u70b9\u5c0f\u7684\u8282\u70b9 def pre ( node ): if node is None : return None if node . left is not None : tmp = node . left while tmp . right is not None : tmp = tmp . right return tmp parent = node . parent current = node while parent is not None and parent . left == current : parent = parent . parent current = parent return parent def next ( node ): if node is None : return None if node . right is not None : tmp = node . right while tmp . left is not None : tmp = tmp . left return tmp parent = node . parent current = node while parent is not None and parent . right == current : parent = parent . parent current = parent return parent 8.2 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u904d\u5386\u5e8f\u5217 \u00b6 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 // \u601d\u8def\uff1a\u5982\u679c\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u4e00\u5b9a\u662f\u6839\uff0c\u5e76\u4e14\u4e00\u5b9a\u53ef\u4ee5\u5b58\u5728\u8fd9\u6837\u7684\u5173\u7cfb\uff1a\u6839\u524d\u9762\u7684\u5143\u7d20\u5206\u6210\u4e24\u90e8\u5206\uff0c\u524d\u4e00\u90e8\u5206\u90fd\u6bd4\u6839\u5c0f\uff0c\u540e\u4e00\u90e8\u5206\u90fd\u6bd4\u6839\u5927\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u524d\u4e00\u90e8\u5206\u548c\u540e\u4e00\u90e8\u5206\u90fd\u53ef\u80fd\u4e3a\u7a7a\u3002\u5224\u65ad\u7ed9\u51fa\u7684\u5e8f\u5217\u662f\u5426\u6ee1\u8db3\u8fd9\u6837\u7684\u89c4\u5f8b\uff0c\u7136\u540e\u5206\u522b\u9012\u5f52\u5224\u65ad\u5de6\u53f3\u4e24\u4e2a\u5206\u652f\u3002 bool bst ( vector < int > & a , int l , int r ){ // 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4\u6839(r)\u5c0f\u7684\u5143\u7d20\uff0c\u8fd9\u91cc\u4f5c\u4e3a\u5de6\u53f3\u5b50\u6811\u7684\u5206\u754c if ( l >= r ) return true ; int i = r - 1 ; while ( i >= l && a [ i ] > a [ r ]){ -- i ; } // \u6b64\u65f6i\u6307\u5411\u4ece\u540e\u5411\u524d\u7b2c\u4e00\u4e2a\u5c0f\u4e8ea[r]\u7684\u5143\u7d20 // 2. \u68c0\u67e5\u4ecei\u5230l\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u5c0f\u4e8ea[r] int mid = i ; while ( i >= l ){ if ( a [ i ] >= a [ r ]){ return false ; } i -- ; } // \u6b64\u65f6 i\u5e94\u8be5\u7b49\u4e8el-1 // 3. \u5212\u5206\u51fa\u5de6\u53f3\u5b50\u6811\u5e76\u4e14\u786e\u4fdd\u7b26\u5408\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8981\u6c42\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811\uff0c\u770b\u662f\u5426\u7b26\u5408\u8981\u6c42 return bst ( a , l , mid ) && bst ( a , mid + 1 , r - 1 ); } bool VerifySquenceOfBST ( vector < int > sequence ) { if ( sequence . empty ()) return false ; return bst ( sequence , 0 , sequence . size () - 1 ); } 9. AVL\u6811 \u00b6 \u5b9a\u4e49\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u4e3a \u5de6\u5b50\u6811\u7684\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c AVL\u6811\u662f\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u90fd\u5c0f\u4e8e\u7b49\u4e8e1\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5982\u679c\u63d2\u5165\uff0c\u5220\u9664\u64cd\u4f5c\u6bd4\u8f83\u5c11\uff0c \u67e5\u8be2\u64cd\u4f5c\u6bd4\u8f83\u591a\uff0c \u4f7f\u7528AVL\u6811\uff1b \u5982\u679c\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u5f88\u9891\u7e41\uff0c\u4f7f\u7528\u7ea2\u9ed1\u6811\uff0c\u56e0\u4e3a\u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u5220\u9664\u6548\u7387\u9ad8\u3002 def get_height ( node ): if node is None : return 0 return node . height def get_balance ( node ): if node is None : return 0 balance = get_height ( node . left ) - get_height ( node . right ) return balance def left_rotate ( node ): node_right = node . right node_right_left = node_right . left # \u5de6\u65cb node_right . left = node node . right = node_right_left # \u66f4\u65b0\u9ad8\u5ea6 node_left_height = get_height ( node . left ) node_right_height = get_height ( node . right ) root . height = 1 + max ( node_left_height , node_right_height ) # \u8fd4\u56de\u65cb\u8f6c\u4e4b\u540e\u65b0\u7684\u6839 return node_right def right_rotate ( node ): node_left = node . left node_left_right = node_left . right # \u53f3\u65cb node_left . right = node node . left = node_left_right node_left_height = get_height ( node . left ) node_right_height = het_height ( node . right ) node . height = 1 + max ( node_left_height , node_right_height ) return node_left def insert ( root , value ): if root is None : root = Node ( value ) return root if value == root . value : return root if value < root . value : root . left = insert ( root . left , value ) else : root . right = insert ( root . right , value ) # \u63d2\u5165\u5b8c\u6210\u4e4b\u540e\u8c03\u6574 left_height = get_height ( root . left ) right_height = get_height ( root . right ) root . height = 1 + max ( left_height , right_height ) balance = get_balance ( root ) # LL type if balance > 1 and value < root . left . value : return right_rotate ( root ) # RR type if balance < - 1 and value > root . right . value : return left_rotate ( root ) # LR type if balance > 1 and value > root . left . value : return right_rotate ( root ) # RL type if balance < - 1 and value < root . right . value : return left_rotate ( root ) def delete ( root , value ): if root is None : return root if value < root . value : root . left = delete ( root . left , value ) elif value > root . value : root . right = delete ( root . right , value ) else : if root . left is None and root . right is None : return None if root . left is None : tmp = root . right root = None return tmp if root . right is None : tmp = root . left root = None return tmp current = root . right currentParent = None while current . left is not None : currentParent = current current = current . left currentParent . left = current . right root . value = current . value if root is None : return root root . height = 1 + max ( get_height ( root . left ), get_height ( root . right )) balance = get_balance ( root ) # LL if balace > 1 and get_balance ( root . left ) >= 0 : return right_rotate ( root ) # LR if balance > 1 and get_balance ( root . left ) < 0 : root . left = left_rotate ( root . left ) return right_rotate ( root ) # RR if balance < - 1 and get_balance ( root . right ) <= 0 : return left_rotate ( root ) # RL if balance < - 1 and get_balance ( root . right ) > 0 : root . right = right_rotate ( root . right ) return left_rotate ( root ) return root 10. \u7ea2\u9ed1\u6811 \u00b6 \u53c2\u8003\u6587\u7ae0\uff1a http://blog.csdn.net/chenhuajie123/article/details/11951777 \u7ea2\u9ed1\u6811\uff0c\u672c\u8d28\u4e0a\u6765\u8bf4\u5c31\u662f\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4f46\u5b83\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u7740\u8272\u548c\u76f8\u5173\u7684\u6027\u8d28\u4f7f\u5f97\u7ea2\u9ed1\u6811\u76f8\u5bf9\u5e73\u8861\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u7ea2\u9ed1\u6811\u7684\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u4e3aO(log n) \u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff1a \u6bcf\u4e2a\u7ed3\u70b9\u8981\u4e48\u662f\u7ea2\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u7684\u3002 \u6839\u7ed3\u70b9\u662f\u9ed1\u7684\u3002 \u6bcf\u4e2a\u53f6\u7ed3\u70b9\uff08\u53f6\u7ed3\u70b9\u5373\u6307\u6811\u5c3e\u7aefNIL\u6307\u9488\u6216NULL\u7ed3\u70b9\uff09\u662f\u9ed1\u7684\u3002 \u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u662f\u7ea2\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4fe9\u4e2a\u513f\u5b50\u90fd\u662f\u9ed1\u7684\u3002 \u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9\u800c\u8a00\uff0c\u5176\u5230\u53f6\u7ed3\u70b9\u6811\u5c3e\u7aefNIL\u6307\u9488\u7684\u6bcf\u4e00\u6761\u8def\u5f84\u90fd\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u7ed3\u70b9\u3002 \u7ea2\u9ed1\u6811\u7684\u793a\u4f8b\uff1a 11. \u4e8c\u53c9\u6811\u76f8\u5173\u9898\u76ee \u00b6 \u4e8c\u53c9\u6811","title":"\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"\u6811\u662f\u6ca1\u6709\u73af\u7684\u56fe\u3002\u6811\u548c\u94fe\u8868\u3001\u56fe\u90fd\u6709\u5173\u8054\u3002\u94fe\u8868\u662f\u6811\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u800c\u56fe\u90fd\u53ef\u4ee5\u5bf9\u5e94\u4e00\u68f5\u751f\u6210\u6811\u3002\u5b66\u4e60\u5b8c\u94fe\u8868\uff0c\u5b66\u4e60\u6811\uff0c\u7136\u540e\u5b66\u4e60\u56fe\uff0c\u662f\u4e00\u4e2a\u6bd4\u8f83\u5bb9\u6613\u63a5\u53d7\u7684\u8fc7\u7a0b\u3002\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u6811\u53eb\u505a\u4e8c\u53c9\u6811\u3002\u4e8c\u53c9\u6811\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u8fd9\u5bfc\u81f4\u5f88\u591a\u6d89\u53ca\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u6c42\u89e3\u3002\u6309\u7167\u8282\u70b9\u6570\u76ee\u7684\u4e0d\u540c\uff0c\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u6709\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6ee1\u4e8c\u53c9\u6811\u548c\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002","title":"\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#1","text":"\u4e8c\u53c9\u6811\u7684\u7b2ci\u5c42\u8282\u70b9\u6570\u76ee\u81f3\u591a\u662f 2^(i-1); (i>=1) \u6df1\u5ea6\u4e3aK\u7684\u4e8c\u53c9\u6811\u81f3\u591a\u6709 2^(K-1) \u4e2a\u8282\u70b9\u3002 \u4e8c\u53c9\u6811\u4e2d\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\u6570\u76ee\u8bb0\u4f5cn2, \u53f6\u8282\u70b9\u8bb0\u4f5cn0; \u5219\u6709 n0 = n2 + 1 \u6df1\u5ea6\u4e3an\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u5176\u8282\u70b9\u7684\u6570\u76ee\u662f 2^n -1 , \u53f6\u8282\u70b9\u6570\u76ee\u662f 2^(n-1) , \u975e\u53f6\u8282\u70b9\u7684\u6570\u76ee\u662f 2^(n-1)-1 \u8282\u70b9\u6570\u76ee\u4e3an\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6df1\u5ea6\u662f log2(n+1) \u8282\u70b9\u6570\u76ee\u4e3an\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6df1\u5ea6\u662f [log2(n)] + 1 \u5176\u4e2d[]\u8868\u793a\u5411\u4e0b\u53d6\u6574","title":"1. \u4e8c\u53c9\u6811\u7684\u901a\u7528\u6027\u8d28"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#2","text":"\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u548c\u53cc\u5411\u94fe\u8868\u6bd4\u8f83\u76f8\u4f3c\uff0c\u9700\u8981\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u3002 // \u5b9a\u4e49\u4e8c\u53c9\u6811\u7684\u7ed3\u6784 class TreeNode { public : int val ; TreeNode * left , * right ; TreeNode ( int val ) { this -> val = val ; this -> left = this -> right = nullptr ; } }","title":"2. \u4e8c\u53c9\u6811\u7684\u5b9a\u4e49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#3","text":"\u521b\u5efa\u4e00\u68f5\u4e8c\u53c9\u6811\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u7b97\u6cd5\u4e2d\u6307\u5b9a\u4e8c\u53c9\u6811\u901a\u5e38\u4f7f\u7528\"#\"\u8868\u793a\u4e0d\u5b58\u5728\u7684\u8282\u70b9\uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e24\u4e2a\u904d\u5386\u5e8f\u5217\u7684\u65b9\u5f0f\u6765\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u3002\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e5f\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u3002","title":"3. \u4e8c\u53c9\u6811\u7684\u521b\u5efa(\u751f\u6210)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#31","text":"\u6839\u636e\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u521b\u5efa\u4e8c\u53c9\u6811\uff0c\u6839\u636e\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002 \u5047\u8bbe\u524d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u662fpre; \u4e2d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u662fvin;\u91cc\u9762\u90fd\u4e0d\u542b\u6709\u91cd\u590d\u6570\u5b57\uff1b\u9996\u5148\u786e\u5b9a\u6839\u8282\u70b9\uff0c\u80af\u5b9a\u662fpre[0], \u7136\u540e\u5728vin\u4e2d\u5bfb\u627epre[0], \u5b83\u524d\u9762\u7684\u4e00\u5b9a\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c\u540e\u9762\u7684\u90fd\u662f\u53f3\u5b50\u6811\u4e0a\u7684\u3002\u5047\u8bbepre[0]\u51fa\u73b0\u5728vin[3],\u53ef\u4ee5\u77e5\u9053\u5de6\u5b50\u6811\u4e0a\u6709\u4e09\u4e2a\u8282\u70b9\uff0c\u5206\u522b\u662fvin[0],vin[1],vin[2], \u5728pre\u4e2d\u4ecepre[0]\u4ee5\u540e\u65703\u4e2a\u6570\u5b57\u8fd9\u4e09\u4e2a\u6570\u5b57\u4e00\u5b9a\u662f\u4f4d\u4e8e\u5de6\u5b50\u6811\u4e0a\u7684\uff0c\u5269\u4e0b\u7684\u5c5e\u4e8e\u53f3\u5b50\u6811\u3002\u5206\u522b\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u9012\u5f52\u5904\u7406\u5de6\u53f3\u5b50\u6811\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u7b54\u6848\uff1b\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe pre = [1,2,4,7,3,5,6,8] vin=[4,7,2,1,5,3,8,6] \u7b2c\u4e00\u6b21\uff1a \u53ef\u77e51\u662f\u6839\uff0c2\uff0c4\uff0c7\u662f1\u7684\u5de6\u5b50\u6811\u4e0a\u7684\uff0c3,5,6,8,\u662f1\u7684\u53f3\u5b50\u6811\u4e0a\u7684\u3002 \u5206\u522b\u5904\u7406\u5e8f\u5217 [2,4,7] [4,7,2] \u548c [3,5,6,8] [5,3,6,8] \u7b2c\u4e8c\u6b21\uff1a \u5bf9\u4e8e [2,4,7] [4,7,2] \u53ef\u4ee5\u5f97\u52302\u662f\u6839\uff0c\u800c4\uff0c7\u90fd\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c \u63a5\u7740\u5904\u7406 [4,7] [4,7] \u6b64\u65f64\u662f\u6839\uff0c\u800c7\u4f4d\u4e8e\u53f3\u5b50\u6811\u4e0a\uff0c\u8fd9\u8fb9\u5904\u7406\u5b8c\u6bd5\uff1b\u5bf9\u4e8e [3,5,6,8] [5,3,8,6] \u53ef\u4ee5\u5f97\u52303\u662f\u6839\uff0c5\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c [6,8] \u662f\u53f3\u5b50\u6811\u4e0a\u7684\u3002\u63a5\u7740\u5904\u7406 [6,8][8,6] \u6b64\u65f66\u662f\u6839\uff0c\u800c8\u4f4d\u4e8e\u5de6\u5b50\u6811\u4e0a\u3002 \u7efc\u5408\u4e0a\u9762\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u5f62\u72b6\u5982\u4e0b\uff1a //\u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode * reConstructBinaryTree ( vector < int > pre , vector < int > vin ) { if ( pre . empty () || vin . empty ()){ return nullptr ;} TreeNode * node = new TreeNode ( pre [ 0 ]); // \u5148\u5efa\u7acb\u6839\u8282\u70b9 int len = pre . size (); for ( size_t i = 0 ; i < vin . size (); ++ i ){ if ( vin [ i ] == pre [ 0 ]){ // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002 vector < int > left_pre ( i , 0 ); vector < int > left_vin ( i , 0 ); vector < int > right_pre ( len - 1 - i , 0 ); vector < int > right_vin ( len - 1 - i , 0 ); copy ( vin . begin (), vin . begin () + i , left_vin . begin ()); copy ( vin . begin () + i + 1 , vin . end (), right_vin . begin ()); copy ( pre . begin () + 1 , pre . begin () + 1 + i , left_pre . begin ()); copy ( pre . begin () + i + 1 , pre . end (), right_pre . begin ()); node -> left = reConstructBinaryTree ( left_pre , left_vin ); node -> right = reConstructBinaryTree ( right_pre , right_vin ); } } return node ; leetcode gist","title":"3.1 \u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#32","text":"//\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode * buildTree ( vector < int >& inorder , vector < int >& postorder ) { if ( inorder . empty () || postorder . empty ()) { return nullptr ; } TreeNode * node = new TreeNode ( postorder [ postorder . size () - 1 ]); // \u5148\u5efa\u7acb\u6839\u8282\u70b9 int len = inorder . size (); for ( size_t i = 0 ; i < inorder . size (); ++ i ) { if ( inorder [ i ] == postorder [ postorder . size () - 1 ]) { // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002 vector < int > left_post ( i , 0 ); vector < int > left_vin ( i , 0 ); vector < int > right_post ( len - 1 - i , 0 ); vector < int > right_vin ( len - 1 - i , 0 ); copy ( inorder . begin (), inorder . begin () + i , left_vin . begin ()); copy ( inorder . begin () + i + 1 , inorder . end (), right_vin . begin ()); copy ( postorder . begin (), postorder . begin () + i , left_post . begin ()); copy ( postorder . begin () + i , postorder . end () - 1 , right_post . begin ()); node -> left = buildTree ( left_vin , left_post ); node -> right = buildTree ( right_vin , right_post ); } } return node ; } leetcode gist","title":"3.2 \u6839\u636e\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#4","text":"\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7ecf\u8fc7\u7684\u8282\u70b9\u6570\u91cf\u5b9a\u4e49\u4e3a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u3002","title":"4. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#41","text":"// \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 int maxDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return maxDepth2 ( root -> left , dep + 1 ); if ( root -> right && ! root -> left ) return maxDepth2 ( root -> right , dep + 1 ); return max ( maxDepth2 ( root -> left , dep + 1 ), maxDepth2 ( root -> right , dep + 1 )); }","title":"4.1 \u6700\u5927\u6df1\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#42","text":"// \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6 int minDepth2 ( TreeNode * root , const int dep ){ if ( ! root ) return dep ; if ( ! root -> left && ! root -> right ) return dep + 1 ; if ( root -> left && ! root -> right ) return minDepth2 ( root -> left , dep + 1 ); if ( ! root -> left && root -> right ) return minDepth2 ( root -> right , dep + 1 ); return min ( minDepth2 ( root -> left , dep + 1 ), minDepth2 ( root -> right , dep + 1 )); }","title":"4.2 \u6700\u5c0f\u6df1\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#5","text":"\u4e8c\u53c9\u6811\u6709\u4e09\u79cd\u5e38\u89c1\u7684\u904d\u5386\u65b9\u5f0f\uff1a\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u3002\u524d\u4e2d\u540e\u6307\u7684\u90fd\u662f\u6839\u8282\u70b9\u76f8\u5bf9\u4e8e\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u987a\u5e8f\u3002\u6240\u4ee5\u524d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f root-left-right , \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f left-root-right , \u540e\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f left-right-root .","title":"5. \u4e8c\u53c9\u6811\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#51","text":"\u524d\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4 \uff1a \u8f93\u51fa\u5f53\u524d\u8282\u70b9 \u5982\u679c\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u505a\u53c2\u6570\u9012\u5f52 \u5982\u679c\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u7531\u5b69\u5b50\u505a\u53c2\u6570\u9012\u5f52 // \u524d\u5e8f\u904d\u5386 vector < int > preorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; re . push_back ( root -> val ); if ( root -> left ){ vector < int > ll = preorderTraversal ( root -> left ); re . insert ( re . end (), ll . begin (), ll . end ()); } if ( root -> right ){ vector < int > rr = preorderTraversal ( root -> right ); re . insert ( re . end (), rr . begin (), rr . end ()); } return re ; }","title":"5.1 \u524d\u5e8f\u904d\u5386(\u9012\u5f52)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#52","text":"\u975e\u9012\u5f52\u7684\u5b9e\u73b0\uff0c\u9012\u5f52\u51fd\u6570\u7684\u5b9e\u73b0\u662f\u4f7f\u7528\u5806\u6808\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u628a\u9012\u5f52\u8c03\u7528\u7684\u51fd\u6570\u6539\u5199\u6210\u975e\u9012\u5f52\u7684\u5f62\u5f0f\u4e00\u822c\u4e5f\u662f\u4f7f\u7528\u5806\u6808\u4f5c\u4e3a\u6570\u636e\u7ed3\u6784\u3002 \u524d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u904d\u5386\u6b65\u9aa4 \u8f93\u51fa\u5f53\u524d\u7684\u8282\u70b9\u503c\uff0c\u5e76\u628a\u5f53\u524d\u7684\u8282\u70b9\u538b\u5165\u6808 current = current->left ;\u5faa\u73af\u4ee5\u4e0a\u6b65\u9aa4\u76f4\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4 \u53d6\u6808\u9876\u5143\u7d20\u7684\u53f3\u5b69\u5b50\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7136\u540e\u56de\u5230\u6b65\u9aa41. //\u524d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > preorderTraversal ( TreeNode * root ) { vector < int > re ; if ( root == nullptr ) return re ; stack < TreeNode *> s ; TreeNode * tmp = root ; while ( tmp != nullptr || ! s . empty ()){ // \u903b\u8f91\u6216\u662f\u77ed\u8def\u7684 while ( tmp != nullptr ){ re . push_back ( tmp -> val ); s . push ( tmp ); tmp = tmp -> left ; } // \u5faa\u73af\u9000\u51fa\u8bf4\u660e\u6ca1\u6709\u4e86\u5de6\u5b69\u5b50 if ( ! s . empty ()){ tmp = s . top (); s . pop (); tmp = tmp -> right ; } } return re ; }","title":"5.2 \u524d\u5e8f\u904d\u5386(\u975e\u9012\u5f52)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#53","text":"\u4e2d\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4 \u5982\u679c\u5f53\u524d\u7684\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 \u8f93\u51fa\u5f53\u524d\u8282\u70b9 \u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u53f3\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 // \u4e2d\u5e8f\u904d\u5386\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > inorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; if ( root -> left ){ vector < int > ll = inorderTraversal ( root -> left ); re . insert ( re . end (), ll . begin (), ll . end ()); } re . push_back ( root -> val ); if ( root -> right ){ vector < int > rr = inorderTraversal ( root -> right ); re . insert ( re . end (), rr . begin (), rr . end ()); } return re ; }","title":"5.3 \u4e2d\u5e8f\u904d\u5386(\u9012\u5f52)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#54","text":"\u4e2d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 \u5bf9\u4e8e\u5f53\u524d\u7684\u8282\u70b9\uff0c\u653e\u5165\u5806\u6808\uff0c\u7136\u540e\u641c\u7d22\u6709\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u4e00\u76f4\u5411\u4e0b\u641c\u7d22\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\u4e3a\u6b62\u3002 \u4ece\u5806\u6808\u53d6\u51fa\u6808\u9876\u5143\u7d20\uff0c\u8f93\u51fa\uff0c\u7136\u540e\u641c\u7d22\u53f3\u5b69\u5b50 //\u4e2d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > inorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; TreeNode * iter = root ; stack < TreeNode *> s ; while ( iter || ! s . empty ()){ while ( iter ){ s . push ( iter ); iter = iter -> left ; } if ( ! s . empty ()){ iter = s . top (); s . pop (); re . push_back ( iter -> val ); iter = iter -> right ; } } return re ; }","title":"5.4 \u4e2d\u5e8f\u904d\u5386(\u975e\u9012\u5f52)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#55","text":"\u540e\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4\u662f \u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 \u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u53f3\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52 \u8f93\u51fa\u5f53\u524d\u8282\u70b9 // \u540e\u7eed\u904d\u5386\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > postorderTraversal ( TreeNode * root ) { // write your code here vector < int > re ; if ( root == nullptr ) return re ; if ( root -> left ){ vector < int > ll = postorderTraversal ( root -> left ); re . insert ( re . end (), ll . begin (), ll . end ()); } if ( root -> right ){ vector < int > rr = postorderTraversal ( root -> right ); re . insert ( re . end (), rr . begin (), rr . end ()); } re . push_back ( root -> val ); return re ; }","title":"5.5 \u540e\u5e8f\u904d\u5386(\u9012\u5f52)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#56","text":"\u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 \u7b2c\u4e00\u79cd\u601d\u8def\uff1a\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9P\uff0c\u5c06\u5176\u5165\u6808\uff0c\u7136\u540e\u6cbf\u5176\u5de6\u5b50\u6811\u4e00\u76f4\u5f80\u4e0b\u641c\u7d22\uff0c\u76f4\u5230\u641c\u7d22\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\u7684\u7ed3\u70b9\uff0c\u6b64\u65f6\u8be5\u7ed3\u70b9\u51fa\u73b0\u5728\u6808\u9876\uff0c\u4f46\u662f\u6b64\u65f6\u4e0d\u80fd\u5c06\u5176\u51fa\u6808\u5e76\u8bbf\u95ee\uff0c\u56e0\u6b64\u5176\u53f3\u5b69\u5b50\u8fd8\u4e3a\u88ab\u8bbf\u95ee\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u6309\u7167\u76f8\u540c\u7684\u89c4\u5219\u5bf9\u5176\u53f3\u5b50\u6811\u8fdb\u884c\u76f8\u540c\u7684\u5904\u7406\uff0c\u5f53\u8bbf\u95ee\u5b8c\u5176\u53f3\u5b69\u5b50\u65f6\uff0c\u8be5\u7ed3\u70b9\u53c8\u51fa\u73b0\u5728\u6808\u9876\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u5176\u51fa\u6808\u5e76\u8bbf\u95ee\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6b63\u786e\u7684\u8bbf\u95ee\u987a\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4e24\u6b21\u51fa\u73b0\u5728\u6808\u9876\uff0c\u53ea\u6709\u5728\u7b2c\u4e8c\u6b21\u51fa\u73b0\u5728\u6808\u9876\u65f6\uff0c\u624d\u80fd\u8bbf\u95ee\u5b83\u3002\u56e0\u6b64\u9700\u8981\u591a\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\u6807\u8bc6\u8be5\u7ed3\u70b9\u662f\u5426\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\u5728\u6808\u9876\u3002 //\u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 \u7b2c\u4e8c\u79cd\u601d\u8def\uff1a\u8981\u4fdd\u8bc1\u6839\u7ed3\u70b9\u5728\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u8bbf\u95ee\u4e4b\u540e\u624d\u80fd\u8bbf\u95ee\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9P\uff0c\u5148\u5c06\u5176\u5165\u6808\u3002\u5982\u679cP\u4e0d\u5b58\u5728\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5b83\uff1b\u6216\u8005P\u5b58\u5728\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\uff0c\u4f46\u662f\u5176\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u5df2\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u540c\u6837\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8be5\u7ed3\u70b9\u3002\u82e5\u975e\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\uff0c\u5219\u5c06P\u7684\u53f3\u5b69\u5b50\u548c\u5de6\u5b69\u5b50\u4f9d\u6b21\u5165\u6808\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u53d6\u6808\u9876\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5de6\u5b69\u5b50\u5728\u53f3\u5b69\u5b50\u524d\u9762\u88ab\u8bbf\u95ee\uff0c\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u5728\u6839\u7ed3\u70b9\u524d\u9762\u88ab\u8bbf\u95ee\u3002 // \u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > postOrder ( TreeNode * root ) { vector < int > re ; if ( root == nullptr ) return re ; TreeNode * p = root ; stack < TreeNode *> s ; TreeNode * last = root ; s . push ( p ); while ( ! s . empty ()) { p = s . top (); if ( ( p -> left == nullptr && p -> right == nullptr ) || ( p -> right == nullptr && last == p -> left ) || ( last == p -> right ) ) { re . push_back ( p -> val ); last = p ; s . pop (); } else { if ( p -> right ) s . push ( p -> right ); if ( p -> left ) s . push ( p -> left ); } } return re ; }","title":"5.6 \u540e\u5e8f\u904d\u5386(\u975e\u9012\u5f52)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#57","text":"\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7c7b\u4f3c\u4e0e\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u53ef\u4ee5\u4f7f\u7528\u961f\u5217\u6765\u5b9e\u73b0\u3002\u601d\u8def\u662f\uff1a \u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u4fdd\u5b58\u76f8\u90bb\u4e24\u5c42\u7684\u8282\u70b9\uff0c\u5faa\u73af\u8f93\u51fa\u6bcf\u5c42\u7684\u8282\u70b9 \u5c42\u6b21\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4 \u521d\u59cb\u5316\u4e24\u4e2a\u961f\u5217d1,d2;\u4ee4d1\u4fdd\u5b58root,d2\u4e3a\u7a7a \u6e05\u7a7ad2,\u904d\u5386d1\u4e2d\u7684\u8282\u70b9\uff0c\u628ad1\u4e2d\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50\u8282\u70b9\u6309\u7167\u987a\u5e8f\u653e\u5165d2\u4e2d \u6253\u5370d1\u4e2d\u7684\u8282\u70b9 \u4ea4\u6362d1\u548cd2;\u8f6c\u52302 \u5faa\u73af\u76f4\u5230d2\u4e2d\u4e3a\u7a7a\uff0c\u7ed3\u675f\u3002 // \u4ece\u5e95\u5411\u4e0a\u5c42\u6b21\u904d\u5386\u4e8c\u53c9\u6811 vector < vector < int >> levelOrderBottom ( TreeNode * root ) { // write your code here vector < vector < int >> result ; vector < TreeNode *> v1 , v2 ; if ( root == nullptr ){ return result ; } v1 . push_back ( root ); while ( ! v1 . empty ()){ // \u904d\u5386v1\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u5c06\u4e0b\u4e00\u5c42\u8282\u70b9\u4fdd\u5b58\u5728v2\u4e2d for ( int i = 0 ; i < v1 . size (); i ++ ){ if ( v1 [ i ] -> left ){ v2 . push_back ( v1 [ i ] -> left ); } if ( v1 [ i ] -> right ){ v2 . push_back ( v1 [ i ] -> right ); } } vector < int > tmp ; //\u6253\u5370v1 for ( int i = 0 ; i < v1 . size (); i ++ ){ tmp . push_back ( v1 [ i ] -> val ); } result . insert ( result . begin (), tmp ); swap ( v1 , v2 ); v2 . clear (); } return result ; } // \u81ea\u9876\u5411\u4e0b\u904d\u5386\u4e8c\u53c9\u6811 vector < vector < int >> zigzagLevelOrder ( TreeNode * root ) { // write your code here vector < vector < int >> result ; if ( ! root ) return result ; vector < TreeNode *> v1 , v2 ; v1 . push_back ( root ); int level = 1 ; while ( ! v1 . empty ()){ //\u904d\u5386v1\u4e2d\u7684\u8282\u70b9\uff0c\u628av1\u4e2d\u6240\u6709\u8282\u70b9\u7684\u4e0b\u4e00\u7ea7\u8282\u70b9\u5b58\u50a8\u5728v2\u4e2d for ( int i = 0 ; i < v1 . size (); i ++ ){ if ( v1 [ i ] -> left ){ v2 . push_back ( v1 [ i ] -> left ); } if ( v1 [ i ] -> right ){ v2 . push_back ( v1 [ i ] -> right ); } } // \u6253\u5370v1\u4e2d\u7684\u8282\u70b9,\u5982\u679clevel \u662f\u5947\u6570\uff0c\u5219\u4ece\u5de6\u5411\u53c8\u6253\u5370\uff0c // \u5982\u679clevel\u662f\u5076\u6570\uff0c\u5219\u4ece\u53f3\u5411\u5de6\u6253\u5370 vector < int > tmp ; if ( level % 2 == 0 ){ for ( int i = v1 . size () - 1 ; i >= 0 ; i -- ){ tmp . push_back ( v1 [ i ] -> val ); } } if ( level % 2 ){ for ( int i = 0 ; i < v1 . size (); i ++ ){ tmp . push_back ( v1 [ i ] -> val ); } } result . push_back ( tmp ); // \u66f4\u65b0\u8be5\u66f4\u65b0\u7684\u6570\u636e swap ( v1 , v2 ); v2 . clear (); level ++ ; } return result ; } // \u4e4b\u5b57\u5f62\u904d\u5386\u4e8c\u53c9\u6811 vector < vector < int > > Print ( TreeNode * pRoot ) { vector < vector < int > > output ; vector < int > row ; if ( pRoot == nullptr ) return output ; vector < TreeNode *> first ; vector < TreeNode *> second ; bool odd = true ; first . push_back ( pRoot ); while ( ! first . empty ()){ if ( odd ){ for ( int i = 0 ; i < first . size (); ++ i ) { row . push_back ( first [ i ] -> val ); if ( first [ i ] -> left ){ second . push_back ( first [ i ] -> left ); } if ( first [ i ] -> right ){ second . push_back ( first [ i ] -> right ); } } output . push_back ( row ); row . clear (); swap ( first , second ); second . clear (); odd = ! odd ; } else { for ( int i = first . size () - 1 ; i >= 0 ; -- i ) { row . push_back ( first [ i ] -> val ); } output . push_back ( row ); row . clear (); for ( int j = 0 ; j < first . size (); ++ j ) { if ( first [ j ] -> left ){ second . push_back ( first [ j ] -> left ); } if ( first [ j ] -> right ){ second . push_back ( first [ j ] -> right ); } } swap ( first , second ); second . clear (); odd = ! odd ; } } return output ; }","title":"5.7 \u5c42\u6b21\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#6","text":"","title":"6. \u7ebf\u7d22\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#61","text":"","title":"6.1 \u539f\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#62","text":"\u5229\u7528\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u601d\u60f3\u53ef\u4ee5\u5b9e\u73b0\u5728 O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c\u904d\u5386\u3002","title":"6.2 \u904d\u5386\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#621-morris","text":"","title":"6.2.1 morris \u5148\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#622-morris","text":"","title":"6.2.2 morris \u4e2d\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#623-morris","text":"","title":"6.2.3 morris \u540e\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#7","text":"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u662f\uff1a\u8981\u4e48\u662f\u4e00\u68f5\u7a7a\u6811\uff0c\u8981\u4e48\u6839\u8282\u70b9\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\u7684\u9ad8\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002","title":"7. \u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#71","text":"// \u6c42\u6811\u7684\u6700\u5927\u6df1\u5ea6 int maxDepth ( TreeNode * root ) { if ( root == nullptr ) return 0 ; int left = 1 ; int right = 1 ; int depth = 1 ; if ( root -> left ){ left += maxDepth ( root -> left ); } if ( root -> right ){ right += maxDepth ( root -> right ); } depth = max ( left , right ); return depth ; } // \u5224\u65ad\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811 bool isBalanced ( TreeNode * root ) { if ( root == nullptr ) return true ; if ( root -> left == nullptr && root -> right == nullptr ) return true ; if ( root -> left && root -> right == nullptr ){ if ( root -> left -> left == nullptr && root -> left -> right == nullptr ){ return true ; } return false ; } if ( root -> left == nullptr && root -> right ){ if ( root -> right -> left == nullptr && root -> right -> right == nullptr ){ return true ; } return false ; } bool left = isBalanced ( root -> left ); bool right = isBalanced ( root -> right ); int ldepth = maxDepth ( root -> left ); int rdepth = maxDepth ( root -> right ); if ( abs ( ldepth - rdepth ) <= 1 && left && right ) return true ; return false ; }","title":"7.1 \u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5224\u5b9a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#8","text":"\u4e8c\u53c9\u67e5\u627e\u6811\uff08Binary Search Tree\uff09\uff0c\u4e5f\u79f0\u6709\u5e8f\u4e8c\u53c9\u6811\uff08ordered binary tree\uff09,\u6392\u5e8f\u4e8c\u53c9\u6811\uff08sorted binary tree\uff09\uff0c\u662f\u6307\u4e00\u68f5\u7a7a\u6811\u6216\u8005\u5177\u6709\u4e0b\u5217\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a \u82e5\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b \u82e5\u4efb\u610f\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b \u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\u3002 \u6ca1\u6709\u952e\u503c\u76f8\u7b49\u7684\u7ed3\u70b9\uff08no duplicate nodes\uff09\u3002 \u56e0\u4e3a\uff0c\u4e00\u68f5\u7531n\u4e2a\u7ed3\u70b9\uff0c\u968f\u673a\u6784\u9020\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u9ad8\u5ea6\u4e3algn\uff0c\u6240\u4ee5\u987a\u7406\u6210\u7ae0\uff0c\u4e00\u822c\u64cd\u4f5c\u7684\u6267\u884c\u65f6\u95f4\u4e3aO\uff08lgn\uff09.\uff08\u81f3\u4e8en\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6\u4e3algn\u7684\u8bc1\u660e\uff0c\u53ef\u53c2\u8003\u7b97\u6cd5\u5bfc\u8bba \u7b2c12\u7ae0 \u4e8c\u53c9\u67e5\u627e\u6811 \u7b2c12.4\u8282\uff09\u3002 \u4f46\u4e8c\u53c9\u6811\u82e5\u9000\u5316\u6210\u4e86\u4e00\u68f5\u5177\u6709n\u4e2a\u7ed3\u70b9\u7684\u7ebf\u6027\u94fe\u540e\uff0c\u5219\u6b64\u4e9b\u64cd\u4f5c\u6700\u574f\u60c5\u51b5\u8fd0\u884c\u65f6\u95f4\u4e3aO\uff08n\uff09\u3002\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u79cd\u57fa\u4e8e\u4e8c\u53c9\u67e5\u627e\u6811-\u7ea2\u9ed1\u6811\uff0c\u5b83\u901a\u8fc7\u4e00\u4e9b\u6027\u8d28\u4f7f\u5f97\u6811\u76f8\u5bf9\u5e73\u8861\uff0c\u4f7f\u5f97\u6700\u7ec8\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u4f9d\u7136\u4e3aO\uff08lgn\uff09\u3002","title":"8. \u4e8c\u53c9\u641c\u7d22\u6811(\u4e8c\u53c9\u67e5\u627e\u6811)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#81","text":"class BinaryTree (): def __init__ ( self , parent = None , left = None , right = None ): self . parent = parent self . left = left self . right = right self . value = value def insert ( root , value ): if not root : root = Node ( value ) return root if root . value == value : return root if value < root . value : root . left = insert ( root . left , value ) else : root . right = insert ( root . right , value ) return root def search ( root , value ): if not root : return None if root . value == value : return root if value < root . value : return search ( root . left , value ) else : return search ( root . right , value ) def delete ( root , value ): if root is None : return root if value < root . value : root . left = delete ( root . left , value ) elif value > root . value : root . right = delete ( root . right , value ) else : if root . left is None and root . right is None : return None if root . left is None : tmp = root . right root = None return tmp if root . right is None : tmp = root . left root = None return tmp current = root . right currentParent = None while current . left is not None : currentParent = current current = current . left currentParent . left = current . right root . value = current . value return root def build ( array ): tree = None for v in array : tree = insert ( tree , v ) return tree def max ( root ): if root is None : return None current = root while current . right is not None : current = current . right return current . value def min ( root ): if root is None : return None current = root while current . left is not None : current = current . left return current . value # \u67e5\u627e\u6bd4node\u8282\u70b9\u5c0f\u7684\u8282\u70b9 def pre ( node ): if node is None : return None if node . left is not None : tmp = node . left while tmp . right is not None : tmp = tmp . right return tmp parent = node . parent current = node while parent is not None and parent . left == current : parent = parent . parent current = parent return parent def next ( node ): if node is None : return None if node . right is not None : tmp = node . right while tmp . left is not None : tmp = tmp . left return tmp parent = node . parent current = node while parent is not None and parent . right == current : parent = parent . parent current = parent return parent","title":"8.1 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#82","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 // \u601d\u8def\uff1a\u5982\u679c\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u4e00\u5b9a\u662f\u6839\uff0c\u5e76\u4e14\u4e00\u5b9a\u53ef\u4ee5\u5b58\u5728\u8fd9\u6837\u7684\u5173\u7cfb\uff1a\u6839\u524d\u9762\u7684\u5143\u7d20\u5206\u6210\u4e24\u90e8\u5206\uff0c\u524d\u4e00\u90e8\u5206\u90fd\u6bd4\u6839\u5c0f\uff0c\u540e\u4e00\u90e8\u5206\u90fd\u6bd4\u6839\u5927\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u524d\u4e00\u90e8\u5206\u548c\u540e\u4e00\u90e8\u5206\u90fd\u53ef\u80fd\u4e3a\u7a7a\u3002\u5224\u65ad\u7ed9\u51fa\u7684\u5e8f\u5217\u662f\u5426\u6ee1\u8db3\u8fd9\u6837\u7684\u89c4\u5f8b\uff0c\u7136\u540e\u5206\u522b\u9012\u5f52\u5224\u65ad\u5de6\u53f3\u4e24\u4e2a\u5206\u652f\u3002 bool bst ( vector < int > & a , int l , int r ){ // 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4\u6839(r)\u5c0f\u7684\u5143\u7d20\uff0c\u8fd9\u91cc\u4f5c\u4e3a\u5de6\u53f3\u5b50\u6811\u7684\u5206\u754c if ( l >= r ) return true ; int i = r - 1 ; while ( i >= l && a [ i ] > a [ r ]){ -- i ; } // \u6b64\u65f6i\u6307\u5411\u4ece\u540e\u5411\u524d\u7b2c\u4e00\u4e2a\u5c0f\u4e8ea[r]\u7684\u5143\u7d20 // 2. \u68c0\u67e5\u4ecei\u5230l\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u5c0f\u4e8ea[r] int mid = i ; while ( i >= l ){ if ( a [ i ] >= a [ r ]){ return false ; } i -- ; } // \u6b64\u65f6 i\u5e94\u8be5\u7b49\u4e8el-1 // 3. \u5212\u5206\u51fa\u5de6\u53f3\u5b50\u6811\u5e76\u4e14\u786e\u4fdd\u7b26\u5408\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8981\u6c42\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811\uff0c\u770b\u662f\u5426\u7b26\u5408\u8981\u6c42 return bst ( a , l , mid ) && bst ( a , mid + 1 , r - 1 ); } bool VerifySquenceOfBST ( vector < int > sequence ) { if ( sequence . empty ()) return false ; return bst ( sequence , 0 , sequence . size () - 1 ); }","title":"8.2 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u904d\u5386\u5e8f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#9-avl","text":"\u5b9a\u4e49\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u4e3a \u5de6\u5b50\u6811\u7684\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c AVL\u6811\u662f\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u90fd\u5c0f\u4e8e\u7b49\u4e8e1\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5982\u679c\u63d2\u5165\uff0c\u5220\u9664\u64cd\u4f5c\u6bd4\u8f83\u5c11\uff0c \u67e5\u8be2\u64cd\u4f5c\u6bd4\u8f83\u591a\uff0c \u4f7f\u7528AVL\u6811\uff1b \u5982\u679c\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u5f88\u9891\u7e41\uff0c\u4f7f\u7528\u7ea2\u9ed1\u6811\uff0c\u56e0\u4e3a\u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u5220\u9664\u6548\u7387\u9ad8\u3002 def get_height ( node ): if node is None : return 0 return node . height def get_balance ( node ): if node is None : return 0 balance = get_height ( node . left ) - get_height ( node . right ) return balance def left_rotate ( node ): node_right = node . right node_right_left = node_right . left # \u5de6\u65cb node_right . left = node node . right = node_right_left # \u66f4\u65b0\u9ad8\u5ea6 node_left_height = get_height ( node . left ) node_right_height = get_height ( node . right ) root . height = 1 + max ( node_left_height , node_right_height ) # \u8fd4\u56de\u65cb\u8f6c\u4e4b\u540e\u65b0\u7684\u6839 return node_right def right_rotate ( node ): node_left = node . left node_left_right = node_left . right # \u53f3\u65cb node_left . right = node node . left = node_left_right node_left_height = get_height ( node . left ) node_right_height = het_height ( node . right ) node . height = 1 + max ( node_left_height , node_right_height ) return node_left def insert ( root , value ): if root is None : root = Node ( value ) return root if value == root . value : return root if value < root . value : root . left = insert ( root . left , value ) else : root . right = insert ( root . right , value ) # \u63d2\u5165\u5b8c\u6210\u4e4b\u540e\u8c03\u6574 left_height = get_height ( root . left ) right_height = get_height ( root . right ) root . height = 1 + max ( left_height , right_height ) balance = get_balance ( root ) # LL type if balance > 1 and value < root . left . value : return right_rotate ( root ) # RR type if balance < - 1 and value > root . right . value : return left_rotate ( root ) # LR type if balance > 1 and value > root . left . value : return right_rotate ( root ) # RL type if balance < - 1 and value < root . right . value : return left_rotate ( root ) def delete ( root , value ): if root is None : return root if value < root . value : root . left = delete ( root . left , value ) elif value > root . value : root . right = delete ( root . right , value ) else : if root . left is None and root . right is None : return None if root . left is None : tmp = root . right root = None return tmp if root . right is None : tmp = root . left root = None return tmp current = root . right currentParent = None while current . left is not None : currentParent = current current = current . left currentParent . left = current . right root . value = current . value if root is None : return root root . height = 1 + max ( get_height ( root . left ), get_height ( root . right )) balance = get_balance ( root ) # LL if balace > 1 and get_balance ( root . left ) >= 0 : return right_rotate ( root ) # LR if balance > 1 and get_balance ( root . left ) < 0 : root . left = left_rotate ( root . left ) return right_rotate ( root ) # RR if balance < - 1 and get_balance ( root . right ) <= 0 : return left_rotate ( root ) # RL if balance < - 1 and get_balance ( root . right ) > 0 : root . right = right_rotate ( root . right ) return left_rotate ( root ) return root","title":"9. AVL\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#10","text":"\u53c2\u8003\u6587\u7ae0\uff1a http://blog.csdn.net/chenhuajie123/article/details/11951777 \u7ea2\u9ed1\u6811\uff0c\u672c\u8d28\u4e0a\u6765\u8bf4\u5c31\u662f\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4f46\u5b83\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u7740\u8272\u548c\u76f8\u5173\u7684\u6027\u8d28\u4f7f\u5f97\u7ea2\u9ed1\u6811\u76f8\u5bf9\u5e73\u8861\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u7ea2\u9ed1\u6811\u7684\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u4e3aO(log n) \u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff1a \u6bcf\u4e2a\u7ed3\u70b9\u8981\u4e48\u662f\u7ea2\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u7684\u3002 \u6839\u7ed3\u70b9\u662f\u9ed1\u7684\u3002 \u6bcf\u4e2a\u53f6\u7ed3\u70b9\uff08\u53f6\u7ed3\u70b9\u5373\u6307\u6811\u5c3e\u7aefNIL\u6307\u9488\u6216NULL\u7ed3\u70b9\uff09\u662f\u9ed1\u7684\u3002 \u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u662f\u7ea2\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4fe9\u4e2a\u513f\u5b50\u90fd\u662f\u9ed1\u7684\u3002 \u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9\u800c\u8a00\uff0c\u5176\u5230\u53f6\u7ed3\u70b9\u6811\u5c3e\u7aefNIL\u6307\u9488\u7684\u6bcf\u4e00\u6761\u8def\u5f84\u90fd\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u7ed3\u70b9\u3002 \u7ea2\u9ed1\u6811\u7684\u793a\u4f8b\uff1a","title":"10. \u7ea2\u9ed1\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#11","text":"\u4e8c\u53c9\u6811","title":"11. \u4e8c\u53c9\u6811\u76f8\u5173\u9898\u76ee"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/","text":"\u4f4d\u8fd0\u7b97 \u00b6 \u6bcf\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u4f1a\u6709\u76f8\u5173\u7684\u4f4d\u8fd0\u7b97\u64cd\u4f5c\u7b26\uff0c\u5b9e\u73b0\u4e8c\u8fdb\u5236\u7684\u6309\u4f4d\u8fd0\u7b97\u3002 \u4f4d\u8fd0\u7b97\u6709\u56db\u79cd\uff1a\u4e0e(&)\uff0c\u6216(|)\uff0c\u975e(~),\u5f02\u6216(^) \u719f\u6089\u6bcf\u79cd\u4f4d\u8fd0\u7b97\u7684\u7279\u70b9\uff0c\u662f\u505a\u4e0e\u4f4d\u8fd0\u7b97\u6709\u5173\u7684\u9898\u76ee\u7684\u57fa\u7840\u3002 1. \u57fa\u7840\u77e5\u8bc6 \u00b6 1.1 \u4e0e(&) \u00b6 0&0=0; 0&1=0; 1&0=0; 1&1=1; \u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u4e0e\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0e\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7684\u8fdb\u4f4d\u89c4\u5219\u975e\u5e38\u4e00\u81f4\u3002 0+0=0 ; 0+1=0; 1+0=0; 1+1 = 1; (\u6b64\u5904\u7b49\u53f7\u540e\u9762\u7684\u6570\u5b57\u8868\u793a\u5e94\u8be5\u7684\u8fdb\u4f4d) n = n&(n-1) \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u628an\u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u52361\u53d8\u4e3a0. \u6b64\u64cd\u4f5c\u5728\u6d89\u53ca\u7edf\u8ba1\u4e8c\u8fdb\u5236\u6570\u4e2d1\u7684\u4e2a\u6570\u7684\u65f6\u5019\u6bd4\u8f83\u6709\u7528\u3002 n = n&(~n+1) \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u628an\u7684\u6700\u53f3\u8fb9\u7684\u4e8c\u8fdb\u52361\u7559\u4e0b\uff0c\u5176\u4f59\u76841\u5168\u90e8\u7f6e0. n = n&(-n) \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u5f97\u5230n\u7684\u6700\u540e\u4e00\u4e2a1 1.2 \u6216(|) \u00b6 0|0=0; 0|1=1; 1|0=1; 1|1=1; `` 1.3 \u975e(~) \u00b6 ~0=1; ~1=0 1.4 \u5f02\u6216(^) \u00b6 0^0=0;1^1=0; 0^1=1;1^0=1; \u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u5f02\u6216\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0e\u4e8c\u8fdb\u5236\u52a0\u6cd5(\u5ffd\u7565\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b)\u89c4\u5219\u4e00\u81f4\u3002 0+0=0;0+1=1;1+0=1;1+1=0; (\u6b64\u5904\u7b49\u53f7\u540e\u9762\u7684\u6570\u5b57\u662f\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7684\u7ed3\u679c) a^0=a; a^a=0; a^a^a=a \u5076\u6570\u4e2aa\u5f02\u6216\u7684\u7ed3\u679c\u662f0\uff0c\u5947\u6570\u4e2aa\u5f02\u6216\u7684\u7ed3\u679c\u662fa. a^(a^b)=b;b^(a^b)=a; \u6b64\u89c4\u5219\u53ef\u4ee5\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u6570\u5b57\uff0c\u65e0\u9700\u989d\u5916\u7684\u7a7a\u95f4 1.5 \u9664\u6cd5 \u00b6 (a)/(a & (-a)); , \u53bb\u9664\u672b\u5c3e\u7684\u82e5\u5e72\u4e2a0. \u4f8b\u5982 1011000 -> 1011 2. \u76f8\u5173\u7684\u5e94\u7528 \u00b6 2.1 \u4ea4\u6362\u4e24\u4e2a\u6574\u6570(\u4e0d\u9002\u7528\u989d\u5916\u7684\u7a7a\u95f4) \u00b6 \u6b64\u9898\u662f\u5178\u578b\u7684\u5229\u7528\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\u6c42\u89e3\u7684\u9898\u3002 - a^a = 0; a^0 = a; - a^(a^b) = b ; b^(a^b) = a ; \u5177\u4f53\u7684\u4ea4\u6362\u4ee3\u7801\u5982\u4e0b\uff1a a = a ^ b ; b = a ^ b ; a = a ^ b ; \u5206\u6790\u4e00\u4e0b\u8fd9\u4e09\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u628a\u539f\u6765\u7684a,b \u8bb0\u4f5ca1,b1;\u628a\u4ea4\u6362\u4e4b\u540e\u7684\u8bb0\u4f5ca2,b2;\u6700\u540e\u8981\u8fbe\u5230\u7684\u7ed3\u679c\u662fa2=b1;b2=a1; \u7b2c\u4e00\u884c\uff0c a=a^b , \u6b64\u65f6a\u7684\u503c\u5df2\u7ecf\u6539\u53d8\uff0c\u53d8\u6210\u4e86 a^b \u7684\u503c\uff1b \u7b2c\u4e8c\u884c\u53d8\u6210 b = (a^b)^b = a , \u6b64\u65f6b\u7684\u503c\u5df2\u7ecf\u6539\u53d8\uff0c\u53d8\u6210\u4e86a\u7684\u503c\u3002 \u7b2c\u4e09\u884c\uff0c\u6b64\u65f6\u7684 a=a^b ,\u800c b=a ,\u6240\u4ee5 a=a^b=(a^b)^a=b ,a\u53d8\u6210\u4e86b\u7684\u503c\u3002 \u901a\u8fc7\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u5145\u5f53\u6682\u5b58\u4e2d\u95f4\u7ed3\u679c\u7684\u53d8\u91cf\u662fa, a\u5148\u5b58\u50a8\u4e86a^b\u7684\u503c\uff0c\u7136\u540e\u53bb\u8ddfb\u5f02\u6216\u5f97\u5230a,\u518d\u8ddf\u5f97\u5230\u7684a\u5f02\u6216\u5f97\u5230b. \u800c\u4e00\u822c\u7684\u9700\u8981\u7b2c\u4e09\u4e2a\u53d8\u91cf\u505a\u4e2d\u4ecb\u7684\u4ea4\u6362\u601d\u8def\u662f\u9996\u5148\u628ab\u5b58\u8d77\u6765\uff0c\u56e0\u4e3a\u5728b=a\u65f6\uff0cb\u7684\u503c\u4e22\u5931\u4e86\u3002\u4e4b\u6240\u4ee5\u5229\u7528\u5f02\u6216\u4e0d\u6015b\u7684\u503c\u4e22\u5931\uff0c \u662f\u56e0\u4e3a\u53ef\u4ee5\u5229\u7528\u5f97\u5230\u7684a\u518d\u6b21\u5f97\u5230b. 2.2 \u4e0d\u7528\u6bd4\u8f83\u627e\u51fa\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u6570 \u00b6 \u4e0d\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u6570\u5b57\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u51cf\u6cd5\u8fd0\u7b97\u7b26\u3002 \u5982\u679c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u51cf\u6cd5\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u8003\u8651\u53ea\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u51cf\u6cd5\u8fd0\u7b97\u3002 a-b = c \u5982\u679c c>0,a>b; \u5982\u679c c<0;c<b; \u4f46\u662f\u4e0d\u5e78\u7684\u662f\uff0c\u8fd8\u662f\u7528\u5230\u7684 < \u6216\u8005 > C++\u4e2d\u6709\u51fd\u6570 signbit(x) \u53ef\u4ee5\u8fd4\u56dex\u7684\u7b26\u53f7\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u5305\u542b\u5934\u6587\u4ef6 #include <cmath> \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u5c31\u662f\u6574\u6570\u7684\u6ea2\u51fa\uff0c a-b \u5982\u679ca\u662f\u6b63\u6570\uff0cb\u662f\u8d1f\u6570\uff0c\u5c31\u4f1a\u53d8\u6210\u4e24\u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u8fd9\u65f6\u5019\u5982\u679c\u4e8c\u8005\u90fd\u63a5\u8fd1 INT\u7c7b\u578b\u8868\u793a\u7684\u8fb9\u754c\uff0c\u5c31\u4f1a\u8d85\u51fa\u80fd\u591f\u8868\u793a\u7684\u6700\u5927\u7684\u6570\u7684\u8303\u56f4\uff0c\u4ea7\u751f\u6b63\u6ea2\u51fa\u3002 \u540c\u7406\uff0c\u5982\u679ca\u662f\u8d1f\u6570,b\u662f\u6b63\u6570\uff0c\u540c\u6837\u53ef\u80fd\u8d85\u51fa \u80fd\u591f\u8868\u793a\u7684\u6700\u5c0f\u7684\u8d1f\u6570\u7684\u8303\u56f4\uff0c\u4ea7\u751f\u8d1f\u6ea2\u51fa\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u77e5\u9053\u4e8c\u8005\u5f02\u53f7\uff0c\u5f88\u5bb9\u6613\u5224\u65ad\u8c01\u5927\u8c01\u5c0f\u3002\u6240\u4ee5\u5148\u5224\u65ad\u662f\u5426\u662f\u5f02\u53f7\u6bd4\u8f83\u597d\uff0c\u53ef\u4ee5\u9632\u6b62\u6570\u636e\u6ea2\u51fa\u4ea7\u751f\u9519\u8bef\u3002 #include <iostream> #include <cmath> using namespace std ; //\u627e\u51fa\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u6570\u5b57\uff0c\u4e0d\u4f7f\u7528\u4efb\u4f55\u6bd4\u8f83\u8fd0\u7b97 // \u4e0d\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\uff0c\u53ea\u80fd\u505a\u5dee //\u4e24\u4e2a\u6570\u505a\u5dee\u6216\u6d89\u53ca\u5230\u6ea2\u51fa\u7684\u95ee\u9898 // a - b \u5982\u679ca \u63a5\u8fd1\u6700\u5927\u7684\u6574\u6570\uff0cb\u63a5\u8fd1\u6700\u5927\u7684\u8d1f\u6570\uff0c \u5c31\u4f1a\u6ea2\u51fa // a- b \u5982\u679ca \u63a5\u8fd1\u6700\u5927\u7684\u8d1f\u6570\uff0cb\u63a5\u8fd1\u6700\u5927\u7684\u6b63\u6570\uff0c\u4e5f\u4f1a\u6ea2\u51fa //\u6240\u4ee5\u5148\u5224\u65ad\u6b63\u8d1f\uff0c\u518d\u505a\u5dee int getMax ( int a , int b ){ if ( signbit ( a ) && ! signbit ( b )){ return b ;} if ( signbit ( b ) && ! signbit ( a )){ return a ;} if ( signbit ( a - b )){ return b ;} return a ; } int main () { cout << getMax ( 5435651 , - 2393 ) << endl ; return 0 ; } 2.3 \u4e0d\u4f7f\u7528\u4efb\u4f55\u7b97\u672f\u8fd0\u7b97\u53ea\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u52a0\u51cf\u4e58\u9664 \u00b6 \u52a0\u6cd5\u8fd0\u7b97\u7684\u601d\u8def \u4e0d\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c a^b \u5c31\u662f a+b \u7684\u7ed3\u679c \u53ea\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c (a&b)<<1 \u5c31\u662f a+b \u7684\u7ed3\u679c \u6240\u4ee5\u7efc\u5408\u4e8c\u8005\uff0c\u5c31\u80fd\u5f97\u5230\u52a0\u6cd5\u7684\u6b63\u786e\u7b54\u6848\u3002 \u51cf\u6cd5\u7684\u601d\u8def a-b = a+(-b); \u800c -b = ~b+1 \u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\u518d\u52a01. \u4e58\u6cd5\u8fd0\u7b97\u7684\u601d\u8def a*b \u628ab\u770b\u6210\u4e8c\u8fdb\u5236\u4f4d\uff0c\u6bcf\u6b21\u628aa\u5de6\u79fb\uff08\u76f8\u5f53\u4e8e\u4e58\u4ee52\uff09\uff0c\u770bb\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\u662f\u5426\u662f1\uff0c \u662f1\u5c31\u5c06\u7ed3\u679c\u52a0\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u4e0a\uff0c\u662f0\u5c31\u4e0d\u52a0\uff0c\u8fd4\u56de\u6700\u540e\u7684\u7ed3\u679c\u3002 \u9664\u6cd5\u8fd0\u7b97\u7684\u601d\u8def #include <iostream> using namespace std ; /** * \u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u52a0\u6cd5\u8fd0\u7b97 * \u6309\u7167\u4e8c\u8fdb\u5236\u4f4d\u52a0\u6cd5 0 + 0 = 0 | 0 + 1 = 1 | 1 + 1 = 0 * \u5982\u679c\u4e0d\u8003\u8651\u8fdb\u4f4d\uff0c\u8be5\u89c4\u5219\u6b63\u597d\u4e0e\u5f02\u6216\u76f8\u540c * * \u8003\u8651\u4ec0\u4e48\u65f6\u5019\u4f1a\u4ea7\u751f\u8fdb\u4f4d 0 + 0 = 0 0 + 1 = 0 1+ 1 = 1 * \u8be5\u89c4\u5219\u6b63\u597d\u4e0e & \u8fd0\u7b97\u4e00\u81f4 * * \u6240\u4ee5\u5206\u522b\u8003\u8651\u65e0\u8fdb\u4f4d\u76f8\u52a0\u548c\u53ea\u8003\u8651\u8fdb\u4f4d\u7684\u7ed3\u679c \u52a0\u5728\u4e00\u8d77\u5c31\u597d\u4e86\u3002 * @return */ int add ( int a , int b ){ int sum = a ; while ( b != 0 ){ sum = a ^ b ; b = ( a & b ) << 1 ; a = sum ; } return a ; } /** * \u7528\u4f4d\u5b9e\u73b0\u51cf\u6cd5\u8fd0\u7b97\uff0c \u4e0d\u80fd\u7528-\u8fd0\u7b97\u7b26 * @param a * @param b * @return */ int minus2 ( int a , int b ){ // a - b == a + (-b) // -b == ~b + 1 add ( a , add ( ~ b , 1 )); } /** * \u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u4e58\u6cd5 * * @return */ int cheng ( int a , int b ){ int sum = 0 ; while ( b != 0 ){ if ( b & 1 != 0 ){ sum = add ( sum , a ); } a <<= 1 ; b >>= 1 ; } } int main () { std :: cout << cheng ( - 20 , 500 ) << std :: endl ; return 0 ; } 2.4 \u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1 \u00b6 \u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a32\u4f4d\u7684\u6574\u6570\uff0c\u53ef0\uff0c\u53ef\u6b63\uff0c\u53ef\u8d1f\uff0c\u8fd4\u56de\u8be5\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1. \u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u6bcf\u6b21\u53f3\u79fb\uff0c\u7136\u540e\u7edf\u8ba11\u7684\u4e2a\u6570\uff0c\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u7edf\u8ba132\u6b21\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53ea\u6709\u539f\u6765\u6570\u5b57\u4e2d\u6709\u591a\u5c11\u4e2a1\u6709\u5173\uff0c1\u8d8a\u5c11\u901f\u5ea6\u8d8a\u5feb\u3002 n = n&(n-1) \u8be5\u64cd\u4f5c\u53ef\u4ee5\u62b9\u6389n\u6700\u53f3\u8fb9\u76841 n = n&(~n+1) \u8be5\u64cd\u4f5c\u53ef\u4ee5\u5f97\u5230n\u6700\u53f3\u4fa7\u76841 \u4f7f\u7528\u4e0a\u9762\u7684\u4efb\u610f\u4e00\u79cd\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u7b97\u6cd5\u5b9e\u73b0\u53ea\u4e0e1\u7684\u4e2a\u6570\u6709\u5173\u7684\u7b97\u6cd5\u3002 #include <iostream> #include <cmath> using namespace std ; /** * \u7edf\u8ba1\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1 * @return */ int getSum ( int a ){ int sum = 0 ; while ( a != 0 ){ if ( a & 1 == 1 ){ sum ++ ; } a = a >> 1 ; } return sum ; } /** * n&(n-1)\u7684\u4f5c\u7528\u5c31\u662f\u6d88\u9664n\u6700\u53f3\u8fb9\u76841 * @param a * @return */ int getSumA ( int a ){ int sum = 0 ; while ( a != 0 ){ a = a & ( a - 1 ); ++ sum ; } return sum ; } int main () { std :: cout << getSumA ( 8 ) << std :: endl ; return 0 ; } 2.5 \u627e\u51fa\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u00b6 \u9898\u76ee\uff1a \u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u53d8\u79cd\uff1a \u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u5b57\u3002 \u4e86\u89e3\u5f02\u6216\u8fd0\u7b97\u7279\u70b9\uff0c a^a = 0; a^0 = a; a^a^a = a; \u51fa\u73b0\u5076\u6570\u6b21\u7684\u6570\u5728\u5f02\u6216\u8fd0\u7b97\u4e0b\u90fd\u662f0\uff0c\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u5f02\u6216\u4e4b\u540e\u5c31\u662f\u5b83\u672c\u8eab\u3002 /** * \u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5176\u4f59\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57 * \u627e\u51fa\u8fd9\u4e2a\u6570\u5b57 * @param v * @return */ int research ( vector < int > v ){ int re = 0 ; for ( auto a : v ){ re = re ^ a ; } return re ; } \u8fd9\u4e2a\u9898\u76ee\u8fd8\u53ef\u4ee5\u4ece\u53e6\u5916\u4e00\u4e2a\u89d2\u5ea6\u53bb\u7406\u89e3\uff0cK\u4e2aK\u8fdb\u5236\u7684\u6570\u5b57\u5982\u679c\u5ffd\u7565\u8fdb\u4f4d\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c\u4e00\u5b9a\u662f0.\u90a3\u4e48nK\u4e2aK\u8fdb\u5236\u7684\u6570\u5b57\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c \u4e5f\u4e00\u5b9a\u662f0. \u800c\u5f02\u6216\u6070\u597d\u662f\u4e8c\u8fdb\u5236\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u5b9e\u73b0\u3002 \u4e86\u89e3\u4e86\u8fd9\u4e00\u70b9\uff0c\u5982\u679c\u6211\u4eec\u80fd\u591f\u50cf\u5f02\u6216\u8fd9\u6837\uff0c\u5b9e\u73b0\u4efb\u610f\u7684K\u8fdb\u5236\u6570\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e0b\u9762\u8fd9\u6837\u7684\u95ee\u9898\uff1a \u5728\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0K\u6b21\u7684\u6570\u7ec4\u4e2d\u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 2.6 \u627e\u51fa\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u00b6 \u9898\u76ee\uff1a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e24\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570\u5b57\u3002 \u601d\u8def\uff1a\u5f02\u6216\u4e00\u904d\u4e4b\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662fa^b\uff0c a,b\u5fc5\u7136\u6709\u4e00\u4f4d\u662f\u4e0d\u540c\u7684(\u5982\u679c\u7ed3\u679c\u662f0\uff0c\u90a3\u4e48a=b\uff0c\u8bf4\u660e\u5e76\u6ca1\u6709\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57)\u3002 \u6839\u636e\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5c06\u539f\u6765\u7684\u6570\u636e\u5206\u6210\u4e24\u7ec4\uff0c\u5206\u522b\u5f02\u6216\u4e00\u904d\u5373\u53ef\u5f97\u5230\u8fd9\u4e24\u4e2a\u6570\u5b57\u3002 /** * \u53ea\u6709\u4e24\u4e2a\u6570\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570 * @param v * @return */ vector < int > research2 ( vector < int > v ){ vector < int > result ; int r1 = 0 ; for ( auto i : v ){ r1 = r1 ^ i ; } int bit1 = r1 & ( ~ r1 + 1 ); int ab = 0 ; // \u73b0\u5728r1\u4fdd\u5b58\u7684\u662f\u4e24\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u7684\u5f02\u6216 for ( auto j : v ){ if (( j & bit1 ) != 0 ){ ab = ab ^ j ; } } result . push_back ( ab ); result . push_back ( ab ^ r1 ); return result ; } 2.7 \u627e\u51fa\u4e09\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u00b6 \u9898\u76ee\uff1a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e09\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u3002 \u601d\u8def\uff1a\u6574\u4f53\u5f02\u6216\u4e00\u904d\uff0c\u5f97\u5230 x=a^b^c . \u8bbe f(x) \u8868\u793a\u83b7\u53d6x\u7684\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\uff0c\u4f8b\u5982 f(10100)=00100 . n = f(x^a)^f(x^b)^f(x^c) , \u8bben\u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d1\u5728\u7b2cm\u4f4d\u4e0a\u3002\u5219\u6709 x^a,x^b,x^c \u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u5728\u7b2cm\u4f4d\u4e0a\u662f1\uff0c\u5176\u4f59\u7684\u4e24\u4e2a\u6570\u5b57\u5728\u7b2cm\u4f4d\u4e0a\u90fd\u662f0. (\u5177\u4f53\u7684\u63a8\u5bfc\u8fc7\u7a0b\u53c2\u8003 \u8fd9\u91cc ). \u7b97\u6cd5\u6b65\u9aa4\uff1a abc = 0; \u5faa\u73af\u4e00\u904d\uff1aabc^=v[i] , \u5f97\u5230 x=a^b^c ; g1 = 0; \u5faa\u73af\u4e00\u904d\uff1ag1^=getLastOne(abc^v[i]); , \u5f97\u5230\u4e0a\u9762\u63d0\u5230\u7684n. g1 = getLastOne(g1) , \u5f97\u5230\u5206\u754c\u6570\u5b57\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u7b2cm\u4f4d\u7f6e1\u7684\u6570\u5b57\u3002 \u628a\u6240\u6709\u6ee1\u8db3 getLastOne( v[i] ^ abc ) == g1 \u6761\u4ef6\u7684\u5206\u6210\u4e00\u7ec4\uff0c\u8be5\u7ec4\u4e2d\u53ea\u5305\u542b a,b,c \u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u5f02\u6216\u4e00\u904d\uff0c\u5f97\u5230a. \u5269\u4e0b\u7684\u5c31\u662f\u627e\u5230\u4e24\u4e2a\u6570\u5b57\u4e86\u3002 int getLastOne ( int n ){ return n & - ( n - 1 ); } void solve ( vector < int > v , int & a , int & b , int & c ){ if ( v . size () == 0 ) return ; int abc = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ abc = abc ^ v [ i ]; } int g1 = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ g1 = g1 ^ getLastOne ( abc ^ v [ i ]); } // g1 \u53ea\u67091\u4f4d\u662f1\uff0ca,b,c\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u8fd9\u4e00\u4f4d\u662f1 g1 = getLastOne ( g1 ); a = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ if ( getLastOne ( v [ i ] ^ abc ) == g1 ){ a = a ^ v [ i ]; } } int bc = abc ^ a ; int g2 = getLastOne ( bc ); b = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ if ( v [ i ] & g2 && v [ i ] != a ){ b = b ^ v [ i ]; } } c = bc ^ b ; } 2.8 \u5728\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0K\u6b21\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570 \u00b6 \u8fd9\u91cc\u8981\u660e\u767d\u4e00\u4e2a\u89c4\u5f8b\uff0cK\u4e2a\u76f8\u540c\u7684K\u8fdb\u5236\u7684\u6570\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c\u5fc5\u7136\u662f0\uff0c\u56e0\u4e3a\u6240\u6709\u662f0\u7684\u4f4d\u8fd8\u662f0\uff0c\u6240\u6709\u4e0d\u662f0\u7684\u4f4d\u90fd\u52a0\u5230\u4e86\u9700\u8981\u8fdb\u4f4d\uff0c\u9664\u53bb\u8fdb\u4f4d\uff0c\u5c31\u662f0. \u660e\u767d\u4e86\u4e0a\u9762\u7684\u4e00\u70b9\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\u9996\u5148\u628a\u6240\u6709\u7684\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236\uff0c\u7136\u540e\u5b9e\u73b0\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u51fd\u6570,\u518d\u628a\u7ed3\u679c\u8f6c\u6362\u56de\u5341\u8fdb\u5236\u8f93\u51fa\u5373\u53ef\u3002 \u53e6\u5916\u4e00\u79cd\u89e3\u6cd5\uff1a \u53ef\u4ee5\u7edf\u8ba1\u6240\u6709\u6570\u5b57\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0a1\u7684\u4e2a\u6570\u3002\u7136\u540e\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5bf9K\u53d6\u4f59\uff0c\u54ea\u4e9b\u51fa\u73b0K\u6b21\u7684\u6570\u5b57\u7d2f\u52a0\u5230\u5bf9\u5e94\u4f4d\u4e0a\u7684\u548c\u80af\u5b9a\u662fK\u7684\u500d\u6570\uff0c\u53d6\u4f59\u4e4b\u540e\u5c31\u662f0.\u5269\u4e0b\u6765\u7684\u5c31\u662f\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 /** * \u5c06\u4e00\u4e2a\u5341\u8fdb\u5236\u7684\u6570\u8f6c\u6362\u6210K\u8fdb\u5236 * @param n * @return */ deque < int > Kin ( int n , int k ){ deque < int > result ; while ( n / k != 0 ){ result . push_front ( n % k ); n = n / k ; } result . push_front ( n ); return result ; } /** * \u5c06K\u8fdb\u5236\u7684deque\u8f6c\u6362\u621010\u8fdb\u5236 * @param v * @return */ int Kinverse ( deque < int > v , int k ){ int s = 0 ; int i = 0 ; while ( ! v . empty ()){ s += v . back () * std :: pow ( float ( k ), i ); ++ i ; } return s ; } /** * \u5b9e\u73b0\u4e24\u4e2avector\u6309\u7167K\u8fdb\u5236\u76f8\u52a0\uff0c\u5ffd\u7565\u8fdb\u4f4d * @param v1 * @param v2 * @return */ deque < int > addV ( deque < int > v1 , deque < int > v2 , int k ){ deque < int > result ; if ( v1 . size () < v2 . size ()){ auto tmp = v1 ; v1 = v2 ; v2 = tmp ; } while ( ! v2 . empty ()){ result . push_front ( ( v1 . back () + v2 . back () ) % k ); v1 . pop_back (); v2 . pop_back (); } while ( ! v1 . empty ()){ result . push_front ( v1 . back () ); v1 . pop_back (); } return result ; } /** * \u5b9e\u73b0v\u4e2d\u7684\u5341\u8fdb\u5236\u6570\u6309\u7167K\u8fdb\u5236\u76f8\u52a0\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u8fd4\u56de\u548c * @param v * @param k * @return */ int Kplus ( vector < int > v , int k ){ deque < int > result ; for ( auto i : v ){ result = addV ( result , Kin ( i , k ), k ); } return Kinverse ( result , k ); } int main () { // vector<int> v = {1,2,2,3,3,4,4,5,5,70}; // auto reuslt = research2(v); // std::cout << reuslt[0] <<\" \"<<reuslt[1] << std::endl; vector < int > v = { 3 , 4 , 5 , 6 }; cout << Kplus ( v , 10 ); return 0 ; } int solve ( vector < int > & v , int k ){ vector < int > counts ( 64 , 0 ); for ( int i = 0 ; i < v . size (); i ++ ){ int index = 0 ; int tmp = v [ i ]; while ( tmp ){ if ( tmp & 1 ){ counts [ index ] ++ ; } tmp = tmp >> 1 ; index ++ ; } } for ( int i = 0 ; i < v . size (); i ++ ){ counts [ i ] = counts [ i ] % k ; } int number = 0 ; int base = 1 ; for ( int i = 0 ; i < counts . size (); i ++ ){ number += counts [ i ] * base ; base = base * 2 ; } return number ; } 2.9 \u5feb\u901f\u7684\u6c42\u4e00\u4e2a\u6574\u6570\u7684N\u6b21\u65b9 \u00b6 #include <iostream> #include <vector> #include <cmath> #include <bitset> using namespace std ; /** * f(n) = f(n-1) + f(n-2) * 1 1 2 3 5 8 ... * \u8981\u6c42\u5b9e\u73b0O(logn)\u7684\u7b97\u6cd5 * @return */ int getNum ( int n ){ vector < int > v ; for ( int i = 0 ; i < n ; i ++ ){ if ( i == 0 ){ v . insert ( v . end (), 1 ); } else if ( i == 1 ){ v . insert ( v . end (), 1 ); } else { v . insert ( v . end (), v [ i - 2 ] + v [ i - 1 ]); } } for ( auto i : v ){ cout << i << endl ; } return v . back (); } /** * * @param n * @return */ int getNum2 ( int a , int n ){ int i = 0 ; double sum = 0 ; while ( n != 0 ){ int s = n & 1 ; if ( s == 1 ){ double t = powf ( 2 , i ); sum += powf ( a , t ); } n >> 1 ; ++ i ; } cout << sum << endl ; } int main () { int a = 3 ; int n = 5 ; while ( n != 0 ){ } }","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_1","text":"\u6bcf\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u4f1a\u6709\u76f8\u5173\u7684\u4f4d\u8fd0\u7b97\u64cd\u4f5c\u7b26\uff0c\u5b9e\u73b0\u4e8c\u8fdb\u5236\u7684\u6309\u4f4d\u8fd0\u7b97\u3002 \u4f4d\u8fd0\u7b97\u6709\u56db\u79cd\uff1a\u4e0e(&)\uff0c\u6216(|)\uff0c\u975e(~),\u5f02\u6216(^) \u719f\u6089\u6bcf\u79cd\u4f4d\u8fd0\u7b97\u7684\u7279\u70b9\uff0c\u662f\u505a\u4e0e\u4f4d\u8fd0\u7b97\u6709\u5173\u7684\u9898\u76ee\u7684\u57fa\u7840\u3002","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#1","text":"","title":"1. \u57fa\u7840\u77e5\u8bc6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#11","text":"0&0=0; 0&1=0; 1&0=0; 1&1=1; \u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u4e0e\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0e\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7684\u8fdb\u4f4d\u89c4\u5219\u975e\u5e38\u4e00\u81f4\u3002 0+0=0 ; 0+1=0; 1+0=0; 1+1 = 1; (\u6b64\u5904\u7b49\u53f7\u540e\u9762\u7684\u6570\u5b57\u8868\u793a\u5e94\u8be5\u7684\u8fdb\u4f4d) n = n&(n-1) \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u628an\u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u52361\u53d8\u4e3a0. \u6b64\u64cd\u4f5c\u5728\u6d89\u53ca\u7edf\u8ba1\u4e8c\u8fdb\u5236\u6570\u4e2d1\u7684\u4e2a\u6570\u7684\u65f6\u5019\u6bd4\u8f83\u6709\u7528\u3002 n = n&(~n+1) \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u628an\u7684\u6700\u53f3\u8fb9\u7684\u4e8c\u8fdb\u52361\u7559\u4e0b\uff0c\u5176\u4f59\u76841\u5168\u90e8\u7f6e0. n = n&(-n) \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u5f97\u5230n\u7684\u6700\u540e\u4e00\u4e2a1","title":"1.1 \u4e0e(&amp;)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#12","text":"0|0=0; 0|1=1; 1|0=1; 1|1=1; ``","title":"1.2 \u6216(|)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#13","text":"~0=1; ~1=0","title":"1.3 \u975e(~)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#14","text":"0^0=0;1^1=0; 0^1=1;1^0=1; \u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u5f02\u6216\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0e\u4e8c\u8fdb\u5236\u52a0\u6cd5(\u5ffd\u7565\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b)\u89c4\u5219\u4e00\u81f4\u3002 0+0=0;0+1=1;1+0=1;1+1=0; (\u6b64\u5904\u7b49\u53f7\u540e\u9762\u7684\u6570\u5b57\u662f\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7684\u7ed3\u679c) a^0=a; a^a=0; a^a^a=a \u5076\u6570\u4e2aa\u5f02\u6216\u7684\u7ed3\u679c\u662f0\uff0c\u5947\u6570\u4e2aa\u5f02\u6216\u7684\u7ed3\u679c\u662fa. a^(a^b)=b;b^(a^b)=a; \u6b64\u89c4\u5219\u53ef\u4ee5\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u6570\u5b57\uff0c\u65e0\u9700\u989d\u5916\u7684\u7a7a\u95f4","title":"1.4 \u5f02\u6216(^)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#15","text":"(a)/(a & (-a)); , \u53bb\u9664\u672b\u5c3e\u7684\u82e5\u5e72\u4e2a0. \u4f8b\u5982 1011000 -> 1011","title":"1.5 \u9664\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#2","text":"","title":"2. \u76f8\u5173\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#21","text":"\u6b64\u9898\u662f\u5178\u578b\u7684\u5229\u7528\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\u6c42\u89e3\u7684\u9898\u3002 - a^a = 0; a^0 = a; - a^(a^b) = b ; b^(a^b) = a ; \u5177\u4f53\u7684\u4ea4\u6362\u4ee3\u7801\u5982\u4e0b\uff1a a = a ^ b ; b = a ^ b ; a = a ^ b ; \u5206\u6790\u4e00\u4e0b\u8fd9\u4e09\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u628a\u539f\u6765\u7684a,b \u8bb0\u4f5ca1,b1;\u628a\u4ea4\u6362\u4e4b\u540e\u7684\u8bb0\u4f5ca2,b2;\u6700\u540e\u8981\u8fbe\u5230\u7684\u7ed3\u679c\u662fa2=b1;b2=a1; \u7b2c\u4e00\u884c\uff0c a=a^b , \u6b64\u65f6a\u7684\u503c\u5df2\u7ecf\u6539\u53d8\uff0c\u53d8\u6210\u4e86 a^b \u7684\u503c\uff1b \u7b2c\u4e8c\u884c\u53d8\u6210 b = (a^b)^b = a , \u6b64\u65f6b\u7684\u503c\u5df2\u7ecf\u6539\u53d8\uff0c\u53d8\u6210\u4e86a\u7684\u503c\u3002 \u7b2c\u4e09\u884c\uff0c\u6b64\u65f6\u7684 a=a^b ,\u800c b=a ,\u6240\u4ee5 a=a^b=(a^b)^a=b ,a\u53d8\u6210\u4e86b\u7684\u503c\u3002 \u901a\u8fc7\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u5145\u5f53\u6682\u5b58\u4e2d\u95f4\u7ed3\u679c\u7684\u53d8\u91cf\u662fa, a\u5148\u5b58\u50a8\u4e86a^b\u7684\u503c\uff0c\u7136\u540e\u53bb\u8ddfb\u5f02\u6216\u5f97\u5230a,\u518d\u8ddf\u5f97\u5230\u7684a\u5f02\u6216\u5f97\u5230b. \u800c\u4e00\u822c\u7684\u9700\u8981\u7b2c\u4e09\u4e2a\u53d8\u91cf\u505a\u4e2d\u4ecb\u7684\u4ea4\u6362\u601d\u8def\u662f\u9996\u5148\u628ab\u5b58\u8d77\u6765\uff0c\u56e0\u4e3a\u5728b=a\u65f6\uff0cb\u7684\u503c\u4e22\u5931\u4e86\u3002\u4e4b\u6240\u4ee5\u5229\u7528\u5f02\u6216\u4e0d\u6015b\u7684\u503c\u4e22\u5931\uff0c \u662f\u56e0\u4e3a\u53ef\u4ee5\u5229\u7528\u5f97\u5230\u7684a\u518d\u6b21\u5f97\u5230b.","title":"2.1 \u4ea4\u6362\u4e24\u4e2a\u6574\u6570(\u4e0d\u9002\u7528\u989d\u5916\u7684\u7a7a\u95f4)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#22","text":"\u4e0d\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u6570\u5b57\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u51cf\u6cd5\u8fd0\u7b97\u7b26\u3002 \u5982\u679c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u51cf\u6cd5\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u8003\u8651\u53ea\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u51cf\u6cd5\u8fd0\u7b97\u3002 a-b = c \u5982\u679c c>0,a>b; \u5982\u679c c<0;c<b; \u4f46\u662f\u4e0d\u5e78\u7684\u662f\uff0c\u8fd8\u662f\u7528\u5230\u7684 < \u6216\u8005 > C++\u4e2d\u6709\u51fd\u6570 signbit(x) \u53ef\u4ee5\u8fd4\u56dex\u7684\u7b26\u53f7\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u5305\u542b\u5934\u6587\u4ef6 #include <cmath> \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u5c31\u662f\u6574\u6570\u7684\u6ea2\u51fa\uff0c a-b \u5982\u679ca\u662f\u6b63\u6570\uff0cb\u662f\u8d1f\u6570\uff0c\u5c31\u4f1a\u53d8\u6210\u4e24\u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u8fd9\u65f6\u5019\u5982\u679c\u4e8c\u8005\u90fd\u63a5\u8fd1 INT\u7c7b\u578b\u8868\u793a\u7684\u8fb9\u754c\uff0c\u5c31\u4f1a\u8d85\u51fa\u80fd\u591f\u8868\u793a\u7684\u6700\u5927\u7684\u6570\u7684\u8303\u56f4\uff0c\u4ea7\u751f\u6b63\u6ea2\u51fa\u3002 \u540c\u7406\uff0c\u5982\u679ca\u662f\u8d1f\u6570,b\u662f\u6b63\u6570\uff0c\u540c\u6837\u53ef\u80fd\u8d85\u51fa \u80fd\u591f\u8868\u793a\u7684\u6700\u5c0f\u7684\u8d1f\u6570\u7684\u8303\u56f4\uff0c\u4ea7\u751f\u8d1f\u6ea2\u51fa\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u77e5\u9053\u4e8c\u8005\u5f02\u53f7\uff0c\u5f88\u5bb9\u6613\u5224\u65ad\u8c01\u5927\u8c01\u5c0f\u3002\u6240\u4ee5\u5148\u5224\u65ad\u662f\u5426\u662f\u5f02\u53f7\u6bd4\u8f83\u597d\uff0c\u53ef\u4ee5\u9632\u6b62\u6570\u636e\u6ea2\u51fa\u4ea7\u751f\u9519\u8bef\u3002 #include <iostream> #include <cmath> using namespace std ; //\u627e\u51fa\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u6570\u5b57\uff0c\u4e0d\u4f7f\u7528\u4efb\u4f55\u6bd4\u8f83\u8fd0\u7b97 // \u4e0d\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\uff0c\u53ea\u80fd\u505a\u5dee //\u4e24\u4e2a\u6570\u505a\u5dee\u6216\u6d89\u53ca\u5230\u6ea2\u51fa\u7684\u95ee\u9898 // a - b \u5982\u679ca \u63a5\u8fd1\u6700\u5927\u7684\u6574\u6570\uff0cb\u63a5\u8fd1\u6700\u5927\u7684\u8d1f\u6570\uff0c \u5c31\u4f1a\u6ea2\u51fa // a- b \u5982\u679ca \u63a5\u8fd1\u6700\u5927\u7684\u8d1f\u6570\uff0cb\u63a5\u8fd1\u6700\u5927\u7684\u6b63\u6570\uff0c\u4e5f\u4f1a\u6ea2\u51fa //\u6240\u4ee5\u5148\u5224\u65ad\u6b63\u8d1f\uff0c\u518d\u505a\u5dee int getMax ( int a , int b ){ if ( signbit ( a ) && ! signbit ( b )){ return b ;} if ( signbit ( b ) && ! signbit ( a )){ return a ;} if ( signbit ( a - b )){ return b ;} return a ; } int main () { cout << getMax ( 5435651 , - 2393 ) << endl ; return 0 ; }","title":"2.2 \u4e0d\u7528\u6bd4\u8f83\u627e\u51fa\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#23","text":"\u52a0\u6cd5\u8fd0\u7b97\u7684\u601d\u8def \u4e0d\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c a^b \u5c31\u662f a+b \u7684\u7ed3\u679c \u53ea\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c (a&b)<<1 \u5c31\u662f a+b \u7684\u7ed3\u679c \u6240\u4ee5\u7efc\u5408\u4e8c\u8005\uff0c\u5c31\u80fd\u5f97\u5230\u52a0\u6cd5\u7684\u6b63\u786e\u7b54\u6848\u3002 \u51cf\u6cd5\u7684\u601d\u8def a-b = a+(-b); \u800c -b = ~b+1 \u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\u518d\u52a01. \u4e58\u6cd5\u8fd0\u7b97\u7684\u601d\u8def a*b \u628ab\u770b\u6210\u4e8c\u8fdb\u5236\u4f4d\uff0c\u6bcf\u6b21\u628aa\u5de6\u79fb\uff08\u76f8\u5f53\u4e8e\u4e58\u4ee52\uff09\uff0c\u770bb\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\u662f\u5426\u662f1\uff0c \u662f1\u5c31\u5c06\u7ed3\u679c\u52a0\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u4e0a\uff0c\u662f0\u5c31\u4e0d\u52a0\uff0c\u8fd4\u56de\u6700\u540e\u7684\u7ed3\u679c\u3002 \u9664\u6cd5\u8fd0\u7b97\u7684\u601d\u8def #include <iostream> using namespace std ; /** * \u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u52a0\u6cd5\u8fd0\u7b97 * \u6309\u7167\u4e8c\u8fdb\u5236\u4f4d\u52a0\u6cd5 0 + 0 = 0 | 0 + 1 = 1 | 1 + 1 = 0 * \u5982\u679c\u4e0d\u8003\u8651\u8fdb\u4f4d\uff0c\u8be5\u89c4\u5219\u6b63\u597d\u4e0e\u5f02\u6216\u76f8\u540c * * \u8003\u8651\u4ec0\u4e48\u65f6\u5019\u4f1a\u4ea7\u751f\u8fdb\u4f4d 0 + 0 = 0 0 + 1 = 0 1+ 1 = 1 * \u8be5\u89c4\u5219\u6b63\u597d\u4e0e & \u8fd0\u7b97\u4e00\u81f4 * * \u6240\u4ee5\u5206\u522b\u8003\u8651\u65e0\u8fdb\u4f4d\u76f8\u52a0\u548c\u53ea\u8003\u8651\u8fdb\u4f4d\u7684\u7ed3\u679c \u52a0\u5728\u4e00\u8d77\u5c31\u597d\u4e86\u3002 * @return */ int add ( int a , int b ){ int sum = a ; while ( b != 0 ){ sum = a ^ b ; b = ( a & b ) << 1 ; a = sum ; } return a ; } /** * \u7528\u4f4d\u5b9e\u73b0\u51cf\u6cd5\u8fd0\u7b97\uff0c \u4e0d\u80fd\u7528-\u8fd0\u7b97\u7b26 * @param a * @param b * @return */ int minus2 ( int a , int b ){ // a - b == a + (-b) // -b == ~b + 1 add ( a , add ( ~ b , 1 )); } /** * \u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u4e58\u6cd5 * * @return */ int cheng ( int a , int b ){ int sum = 0 ; while ( b != 0 ){ if ( b & 1 != 0 ){ sum = add ( sum , a ); } a <<= 1 ; b >>= 1 ; } } int main () { std :: cout << cheng ( - 20 , 500 ) << std :: endl ; return 0 ; }","title":"2.3 \u4e0d\u4f7f\u7528\u4efb\u4f55\u7b97\u672f\u8fd0\u7b97\u53ea\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u52a0\u51cf\u4e58\u9664"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#24-1","text":"\u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a32\u4f4d\u7684\u6574\u6570\uff0c\u53ef0\uff0c\u53ef\u6b63\uff0c\u53ef\u8d1f\uff0c\u8fd4\u56de\u8be5\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1. \u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u6bcf\u6b21\u53f3\u79fb\uff0c\u7136\u540e\u7edf\u8ba11\u7684\u4e2a\u6570\uff0c\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u7edf\u8ba132\u6b21\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53ea\u6709\u539f\u6765\u6570\u5b57\u4e2d\u6709\u591a\u5c11\u4e2a1\u6709\u5173\uff0c1\u8d8a\u5c11\u901f\u5ea6\u8d8a\u5feb\u3002 n = n&(n-1) \u8be5\u64cd\u4f5c\u53ef\u4ee5\u62b9\u6389n\u6700\u53f3\u8fb9\u76841 n = n&(~n+1) \u8be5\u64cd\u4f5c\u53ef\u4ee5\u5f97\u5230n\u6700\u53f3\u4fa7\u76841 \u4f7f\u7528\u4e0a\u9762\u7684\u4efb\u610f\u4e00\u79cd\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u7b97\u6cd5\u5b9e\u73b0\u53ea\u4e0e1\u7684\u4e2a\u6570\u6709\u5173\u7684\u7b97\u6cd5\u3002 #include <iostream> #include <cmath> using namespace std ; /** * \u7edf\u8ba1\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1 * @return */ int getSum ( int a ){ int sum = 0 ; while ( a != 0 ){ if ( a & 1 == 1 ){ sum ++ ; } a = a >> 1 ; } return sum ; } /** * n&(n-1)\u7684\u4f5c\u7528\u5c31\u662f\u6d88\u9664n\u6700\u53f3\u8fb9\u76841 * @param a * @return */ int getSumA ( int a ){ int sum = 0 ; while ( a != 0 ){ a = a & ( a - 1 ); ++ sum ; } return sum ; } int main () { std :: cout << getSumA ( 8 ) << std :: endl ; return 0 ; }","title":"2.4 \u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#25","text":"\u9898\u76ee\uff1a \u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u53d8\u79cd\uff1a \u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u5b57\u3002 \u4e86\u89e3\u5f02\u6216\u8fd0\u7b97\u7279\u70b9\uff0c a^a = 0; a^0 = a; a^a^a = a; \u51fa\u73b0\u5076\u6570\u6b21\u7684\u6570\u5728\u5f02\u6216\u8fd0\u7b97\u4e0b\u90fd\u662f0\uff0c\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u5f02\u6216\u4e4b\u540e\u5c31\u662f\u5b83\u672c\u8eab\u3002 /** * \u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5176\u4f59\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57 * \u627e\u51fa\u8fd9\u4e2a\u6570\u5b57 * @param v * @return */ int research ( vector < int > v ){ int re = 0 ; for ( auto a : v ){ re = re ^ a ; } return re ; } \u8fd9\u4e2a\u9898\u76ee\u8fd8\u53ef\u4ee5\u4ece\u53e6\u5916\u4e00\u4e2a\u89d2\u5ea6\u53bb\u7406\u89e3\uff0cK\u4e2aK\u8fdb\u5236\u7684\u6570\u5b57\u5982\u679c\u5ffd\u7565\u8fdb\u4f4d\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c\u4e00\u5b9a\u662f0.\u90a3\u4e48nK\u4e2aK\u8fdb\u5236\u7684\u6570\u5b57\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c \u4e5f\u4e00\u5b9a\u662f0. \u800c\u5f02\u6216\u6070\u597d\u662f\u4e8c\u8fdb\u5236\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u5b9e\u73b0\u3002 \u4e86\u89e3\u4e86\u8fd9\u4e00\u70b9\uff0c\u5982\u679c\u6211\u4eec\u80fd\u591f\u50cf\u5f02\u6216\u8fd9\u6837\uff0c\u5b9e\u73b0\u4efb\u610f\u7684K\u8fdb\u5236\u6570\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e0b\u9762\u8fd9\u6837\u7684\u95ee\u9898\uff1a \u5728\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0K\u6b21\u7684\u6570\u7ec4\u4e2d\u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002","title":"2.5 \u627e\u51fa\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#26","text":"\u9898\u76ee\uff1a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e24\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570\u5b57\u3002 \u601d\u8def\uff1a\u5f02\u6216\u4e00\u904d\u4e4b\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662fa^b\uff0c a,b\u5fc5\u7136\u6709\u4e00\u4f4d\u662f\u4e0d\u540c\u7684(\u5982\u679c\u7ed3\u679c\u662f0\uff0c\u90a3\u4e48a=b\uff0c\u8bf4\u660e\u5e76\u6ca1\u6709\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57)\u3002 \u6839\u636e\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5c06\u539f\u6765\u7684\u6570\u636e\u5206\u6210\u4e24\u7ec4\uff0c\u5206\u522b\u5f02\u6216\u4e00\u904d\u5373\u53ef\u5f97\u5230\u8fd9\u4e24\u4e2a\u6570\u5b57\u3002 /** * \u53ea\u6709\u4e24\u4e2a\u6570\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570 * @param v * @return */ vector < int > research2 ( vector < int > v ){ vector < int > result ; int r1 = 0 ; for ( auto i : v ){ r1 = r1 ^ i ; } int bit1 = r1 & ( ~ r1 + 1 ); int ab = 0 ; // \u73b0\u5728r1\u4fdd\u5b58\u7684\u662f\u4e24\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u7684\u5f02\u6216 for ( auto j : v ){ if (( j & bit1 ) != 0 ){ ab = ab ^ j ; } } result . push_back ( ab ); result . push_back ( ab ^ r1 ); return result ; }","title":"2.6 \u627e\u51fa\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#27","text":"\u9898\u76ee\uff1a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e09\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u3002 \u601d\u8def\uff1a\u6574\u4f53\u5f02\u6216\u4e00\u904d\uff0c\u5f97\u5230 x=a^b^c . \u8bbe f(x) \u8868\u793a\u83b7\u53d6x\u7684\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\uff0c\u4f8b\u5982 f(10100)=00100 . n = f(x^a)^f(x^b)^f(x^c) , \u8bben\u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d1\u5728\u7b2cm\u4f4d\u4e0a\u3002\u5219\u6709 x^a,x^b,x^c \u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u5728\u7b2cm\u4f4d\u4e0a\u662f1\uff0c\u5176\u4f59\u7684\u4e24\u4e2a\u6570\u5b57\u5728\u7b2cm\u4f4d\u4e0a\u90fd\u662f0. (\u5177\u4f53\u7684\u63a8\u5bfc\u8fc7\u7a0b\u53c2\u8003 \u8fd9\u91cc ). \u7b97\u6cd5\u6b65\u9aa4\uff1a abc = 0; \u5faa\u73af\u4e00\u904d\uff1aabc^=v[i] , \u5f97\u5230 x=a^b^c ; g1 = 0; \u5faa\u73af\u4e00\u904d\uff1ag1^=getLastOne(abc^v[i]); , \u5f97\u5230\u4e0a\u9762\u63d0\u5230\u7684n. g1 = getLastOne(g1) , \u5f97\u5230\u5206\u754c\u6570\u5b57\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u7b2cm\u4f4d\u7f6e1\u7684\u6570\u5b57\u3002 \u628a\u6240\u6709\u6ee1\u8db3 getLastOne( v[i] ^ abc ) == g1 \u6761\u4ef6\u7684\u5206\u6210\u4e00\u7ec4\uff0c\u8be5\u7ec4\u4e2d\u53ea\u5305\u542b a,b,c \u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u5f02\u6216\u4e00\u904d\uff0c\u5f97\u5230a. \u5269\u4e0b\u7684\u5c31\u662f\u627e\u5230\u4e24\u4e2a\u6570\u5b57\u4e86\u3002 int getLastOne ( int n ){ return n & - ( n - 1 ); } void solve ( vector < int > v , int & a , int & b , int & c ){ if ( v . size () == 0 ) return ; int abc = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ abc = abc ^ v [ i ]; } int g1 = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ g1 = g1 ^ getLastOne ( abc ^ v [ i ]); } // g1 \u53ea\u67091\u4f4d\u662f1\uff0ca,b,c\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u8fd9\u4e00\u4f4d\u662f1 g1 = getLastOne ( g1 ); a = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ if ( getLastOne ( v [ i ] ^ abc ) == g1 ){ a = a ^ v [ i ]; } } int bc = abc ^ a ; int g2 = getLastOne ( bc ); b = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ if ( v [ i ] & g2 && v [ i ] != a ){ b = b ^ v [ i ]; } } c = bc ^ b ; }","title":"2.7 \u627e\u51fa\u4e09\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#28-k","text":"\u8fd9\u91cc\u8981\u660e\u767d\u4e00\u4e2a\u89c4\u5f8b\uff0cK\u4e2a\u76f8\u540c\u7684K\u8fdb\u5236\u7684\u6570\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c\u5fc5\u7136\u662f0\uff0c\u56e0\u4e3a\u6240\u6709\u662f0\u7684\u4f4d\u8fd8\u662f0\uff0c\u6240\u6709\u4e0d\u662f0\u7684\u4f4d\u90fd\u52a0\u5230\u4e86\u9700\u8981\u8fdb\u4f4d\uff0c\u9664\u53bb\u8fdb\u4f4d\uff0c\u5c31\u662f0. \u660e\u767d\u4e86\u4e0a\u9762\u7684\u4e00\u70b9\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\u9996\u5148\u628a\u6240\u6709\u7684\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236\uff0c\u7136\u540e\u5b9e\u73b0\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u51fd\u6570,\u518d\u628a\u7ed3\u679c\u8f6c\u6362\u56de\u5341\u8fdb\u5236\u8f93\u51fa\u5373\u53ef\u3002 \u53e6\u5916\u4e00\u79cd\u89e3\u6cd5\uff1a \u53ef\u4ee5\u7edf\u8ba1\u6240\u6709\u6570\u5b57\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0a1\u7684\u4e2a\u6570\u3002\u7136\u540e\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5bf9K\u53d6\u4f59\uff0c\u54ea\u4e9b\u51fa\u73b0K\u6b21\u7684\u6570\u5b57\u7d2f\u52a0\u5230\u5bf9\u5e94\u4f4d\u4e0a\u7684\u548c\u80af\u5b9a\u662fK\u7684\u500d\u6570\uff0c\u53d6\u4f59\u4e4b\u540e\u5c31\u662f0.\u5269\u4e0b\u6765\u7684\u5c31\u662f\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 /** * \u5c06\u4e00\u4e2a\u5341\u8fdb\u5236\u7684\u6570\u8f6c\u6362\u6210K\u8fdb\u5236 * @param n * @return */ deque < int > Kin ( int n , int k ){ deque < int > result ; while ( n / k != 0 ){ result . push_front ( n % k ); n = n / k ; } result . push_front ( n ); return result ; } /** * \u5c06K\u8fdb\u5236\u7684deque\u8f6c\u6362\u621010\u8fdb\u5236 * @param v * @return */ int Kinverse ( deque < int > v , int k ){ int s = 0 ; int i = 0 ; while ( ! v . empty ()){ s += v . back () * std :: pow ( float ( k ), i ); ++ i ; } return s ; } /** * \u5b9e\u73b0\u4e24\u4e2avector\u6309\u7167K\u8fdb\u5236\u76f8\u52a0\uff0c\u5ffd\u7565\u8fdb\u4f4d * @param v1 * @param v2 * @return */ deque < int > addV ( deque < int > v1 , deque < int > v2 , int k ){ deque < int > result ; if ( v1 . size () < v2 . size ()){ auto tmp = v1 ; v1 = v2 ; v2 = tmp ; } while ( ! v2 . empty ()){ result . push_front ( ( v1 . back () + v2 . back () ) % k ); v1 . pop_back (); v2 . pop_back (); } while ( ! v1 . empty ()){ result . push_front ( v1 . back () ); v1 . pop_back (); } return result ; } /** * \u5b9e\u73b0v\u4e2d\u7684\u5341\u8fdb\u5236\u6570\u6309\u7167K\u8fdb\u5236\u76f8\u52a0\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u8fd4\u56de\u548c * @param v * @param k * @return */ int Kplus ( vector < int > v , int k ){ deque < int > result ; for ( auto i : v ){ result = addV ( result , Kin ( i , k ), k ); } return Kinverse ( result , k ); } int main () { // vector<int> v = {1,2,2,3,3,4,4,5,5,70}; // auto reuslt = research2(v); // std::cout << reuslt[0] <<\" \"<<reuslt[1] << std::endl; vector < int > v = { 3 , 4 , 5 , 6 }; cout << Kplus ( v , 10 ); return 0 ; } int solve ( vector < int > & v , int k ){ vector < int > counts ( 64 , 0 ); for ( int i = 0 ; i < v . size (); i ++ ){ int index = 0 ; int tmp = v [ i ]; while ( tmp ){ if ( tmp & 1 ){ counts [ index ] ++ ; } tmp = tmp >> 1 ; index ++ ; } } for ( int i = 0 ; i < v . size (); i ++ ){ counts [ i ] = counts [ i ] % k ; } int number = 0 ; int base = 1 ; for ( int i = 0 ; i < counts . size (); i ++ ){ number += counts [ i ] * base ; base = base * 2 ; } return number ; }","title":"2.8 \u5728\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0K\u6b21\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#29-n","text":"#include <iostream> #include <vector> #include <cmath> #include <bitset> using namespace std ; /** * f(n) = f(n-1) + f(n-2) * 1 1 2 3 5 8 ... * \u8981\u6c42\u5b9e\u73b0O(logn)\u7684\u7b97\u6cd5 * @return */ int getNum ( int n ){ vector < int > v ; for ( int i = 0 ; i < n ; i ++ ){ if ( i == 0 ){ v . insert ( v . end (), 1 ); } else if ( i == 1 ){ v . insert ( v . end (), 1 ); } else { v . insert ( v . end (), v [ i - 2 ] + v [ i - 1 ]); } } for ( auto i : v ){ cout << i << endl ; } return v . back (); } /** * * @param n * @return */ int getNum2 ( int a , int n ){ int i = 0 ; double sum = 0 ; while ( n != 0 ){ int s = n & 1 ; if ( s == 1 ){ double t = powf ( 2 , i ); sum += powf ( a , t ); } n >> 1 ; ++ i ; } cout << sum << endl ; } int main () { int a = 3 ; int n = 5 ; while ( n != 0 ){ } }","title":"2.9 \u5feb\u901f\u7684\u6c42\u4e00\u4e2a\u6574\u6570\u7684N\u6b21\u65b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/","text":"\u5b57\u5178\u6811(Trie\u6811) \u00b6 Trie\u6811\uff0c \u524d\u7f00\u6811\uff0c\u5b57\u5178\u6811\uff0c \u6307\u7684\u90fd\u662f\u540c\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u8be5\u7ed3\u6784\u4ee5\u7a7a\u5b57\u7b26\u4e3a\u6839\u8282\u70b9\uff0c \u5176\u5b83\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u3002 \u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u4e00\u6761\u8def\u5f84\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u3002\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2a\u662f\u5426\u6709\u5355\u8bcd\u7684\u6807\u8bb0\u3002 \u524d\u7f00\u6811\u80fd\u5b8c\u6210\u5b57\u7b26\u4e32\u7684\u9ad8\u6548\u67e5\u627e\u548c\u589e\u5220\u3002 1. \u5b57\u5178\u6811\u7684\u5b9e\u73b0 \u00b6 1.1 Python \u00b6 class Trie : def __init__ ( self ): self . root = {} self . end = 'END' def insert ( self , word ): cur_node = self . root for c in word : if c not in cur_node : cur_node [ c ] = {} cur_node = cur_node [ c ] cur_node [ self . end ] = True def search ( self , word ): current = self . root for c in word : if c not in current : return False current = current [ c ] if self . end not in current : return False return True def indexof ( self , word ): # \u8fd4\u56de\u662f\u5426\u662f\u67d0\u4e2a\u5355\u8bcd\u7684\u524d\u7f00 current = self . root for c in word : if c not in current : return False current = current [ c ] if self . end in current : current . pop ( self . end ) if len ( current ) > 0 : return True return False 1.2 C++ \u00b6 1.3 C \u00b6 2. \u76f8\u5173\u9898\u76ee \u00b6 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) 212. \u5355\u8bcd\u641c\u7d22 II 336. \u56de\u6587\u5bf9 472. \u8fde\u63a5\u8bcd 2.1 \u5f02\u6216\uff08\u4eca\u65e5\u5934\u67612017\u79cb\u62db\u771f\u9898\uff09 \u00b6 \u5f02\u6216\uff08\u4eca\u65e5\u5934\u67612017\u79cb\u62db\u771f\u9898\uff09 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u6574\u6570m\u4ee5\u53can\u4e2a\u6570\u5b57A1, A2, \u2026, An\uff0c\u5c06\u6570\u5217A\u4e2d\u6240\u6709\u5143\u7d20\u4e24\u4e24\u5f02\u6216\uff0c\u5171\u80fd\u5f97\u5230n(n-1)/2\u4e2a\u7ed3\u679c\u3002\u8bf7\u6c42\u51fa\u8fd9\u4e9b\u7ed3\u679c\u4e2d\u5927\u4e8em\u7684\u6709\u591a\u5c11\u4e2a\u3002 \u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570n, m\u3002 \u7b2c\u4e8c\u884c\u7ed9\u51fan\u4e2a\u6574\u6570A1, A2, \u2026, An\u3002 \u6837\u4f8b\u8f93\u5165 3 10 6 5 10 \u8f93\u51fa \u8f93\u51fa\u4ec5\u5305\u62ec\u4e00\u884c\uff0c\u5373\u6240\u6c42\u7684\u7b54\u6848\u3002 \u6837\u4f8b\u8f93\u51fa 2 \u65f6\u95f4\u9650\u5236 C/C++\u8bed\u8a00\uff1a1000MS\u5176\u5b83\u8bed\u8a00\uff1a3000MS \u5185\u5b58\u9650\u5236 C/C++\u8bed\u8a00\uff1a65536KB\u5176\u5b83\u8bed\u8a00\uff1a589824K \u601d\u8def\uff1a \u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u5efa\u7acb\u5b57\u5178\u6811\uff0c\u5de6\u5b50\u6811\u8868\u793a\u4e8c\u8fdb\u52360\uff0c\u53f3\u5b50\u6811\u8868\u793a\u4e8c\u8fdb\u5236\u4f4d1. \u6bcf\u4e2a\u8282\u70b9\u7edf\u8ba1\u5728n\u4e2a\u6570\u5b57\u4e2d\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u6709\u591a\u5c11\u4e2a\u5bf9\u5e94\u76840\u6216\u80051. \u67e5\u8be2\u6bcf\u4e2a\u6570\u5b57a\u548cm\uff0c\u6bd4\u8f83a\u548cm\u5bf9\u5e94\u7684\u4f4d\uff0c\u6709\u5982\u4e0b\u60c5\u51b5 2.1 a = 0, m = 0, \u8fd9\u4e2a\u65f6\u5019 b=0 , a^b = 0 \u4e0d\u80fd\u786e\u5b9a\u8c01\u5927\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d 2.2 a = 0, m = 1, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u80af\u5b9a\u6709a^b < m, \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u8df3\u8fc7\uff1b b = 1, \u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d 2.3 a = 1, m = 0, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u80af\u5b9a\u6709a^b > m, \u6ee1\u8db3\u6761\u4ef6\uff0c\u76f4\u63a5\u5c06\u5bf9\u5e94\u7684count\u52a0\u5728\u7ed3\u679c\u4e0a\uff0c b=1,\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d 2.4 a = 1, m = 1, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d\uff0cb = 1,\u80af\u5b9a\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c \u6700\u540e\u7684\u7ed3\u679c\u9664\u4ee52\u8fd4\u56de\uff0c \u56e0\u4e3a\u6211\u4eec\u65e2\u7edf\u8ba1\u4e86a\u4e0eb\u7684\u5f02\u6216\uff0c\u4e5f\u7edf\u8ba1\u4e86b\u4e0ea\u7684\u5f02\u6216\u3002 #include <iostream> #include <vector> using namespace std ; struct TrieTree { int count ; struct TrieTree * next [ 2 ]{ NULL , NULL }; TrieTree () : count ( 1 ){} }; TrieTree * buildTrieTree ( const vector < int >& array ) { TrieTree * trieTree = new TrieTree (); for ( int i = 0 ; i < ( int ) array . size (); ++ i ) { TrieTree * cur = trieTree ; for ( int j = 16 ; j >= 0 ; -- j ) { int digit = ( array [ i ] >> j ) & 1 ; if ( NULL == cur -> next [ digit ]) cur -> next [ digit ] = new TrieTree (); else ++ ( cur -> next [ digit ] -> count ); cur = cur -> next [ digit ]; } } return trieTree ; } long long queryTrieTree ( TrieTree *& trieTree , const int a , const int m , const int index ) { if ( NULL == trieTree ) return 0 ; TrieTree * cur = trieTree ; for ( int i = index ; i >= 0 ; -- i ) { int aDigit = ( a >> i ) & 1 ; int mDigit = ( m >> i ) & 1 ; if ( 1 == aDigit && 1 == mDigit ) { if ( NULL == cur -> next [ 0 ]) return 0 ; cur = cur -> next [ 0 ]; } else if ( 0 == aDigit && 1 == mDigit ) { if ( NULL == cur -> next [ 1 ]) return 0 ; cur = cur -> next [ 1 ]; } else if ( 1 == aDigit && 0 == mDigit ) { long long val0 = ( NULL == cur -> next [ 0 ]) ? 0 : cur -> next [ 0 ] -> count ; long long val1 = queryTrieTree ( cur -> next [ 1 ], a , m , i - 1 ); return val0 + val1 ; } else if ( 0 == aDigit && 0 == mDigit ) { long long val0 = queryTrieTree ( cur -> next [ 0 ], a , m , i - 1 ); long long val1 = ( NULL == cur -> next [ 1 ]) ? 0 : cur -> next [ 1 ] -> count ; return val0 + val1 ; } } return 0 ; } long long solve ( const vector < int >& array , const int & m ) { TrieTree * trieTree = buildTrieTree ( array ); long long result = 0 ; for ( int i = 0 ; i < ( int ) array . size (); ++ i ) { result += queryTrieTree ( trieTree , array [ i ], m , 16 ); } return result / 2 ; } int main () { freopen ( \"d:/A.in\" , \"r\" , stdin ); int n , m ; while ( cin >> n >> m ) { vector < int > array ( n ); for ( int i = 0 ; i < n ; ++ i ) cin >> array [ i ]; cout << solve ( array , m ) << endl ; } return 0 ; } #include <iostream> #include <vector> #include <string> #include <map> #include <set> #include <algorithm> #include <cmath> #include <sstream> #include <iomanip> using namespace std ; using ll = long long ; const int MAXBIT = 17 ; struct trieTree { ll count = 0 ; trieTree * next [ 2 ] = { nullptr , nullptr }; trieTree () : count ( 0 ){} trieTree ( int c ) : count ( c ){} }; trieTree * createTree ( const vector < int > & arr ){ trieTree * root = new trieTree ( 1 ); for ( int i = 0 ; i < arr . size (); ++ i ) { int index = MAXBIT ; // int \u6574\u5f62\u6700\u591a32\u4f4d trieTree * cur = root ; while ( index >= 0 ){ int digit = ( arr [ i ] >> index ) & 1 ; // \u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7b2cindex+1\u4f4d\u7684\u503c if ( cur -> next [ digit ] == nullptr ){ cur -> next [ digit ] = new trieTree ( 1 ); } else { cur -> next [ digit ] -> count ++ ; } cur = cur -> next [ digit ]; index -- ; } } return root ; } /** * \u67e5\u8be2trie\u6811\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u6ee1\u8db3a^b>m * @param root * @param a * @param m * @param index * @return */ ll queryTree ( trieTree * root , int a , int m , int index ){ if ( root == nullptr ) return 0 ; for ( int i = index ; i >= 0 ; -- i ) { int aDigit = ( a >> i ) & 1 ; int mDigit = ( m >> i ) & 1 ; if ( aDigit == 0 && mDigit == 0 ){ ll v0 = 0 , v1 = 0 ; if ( root -> next [ 1 ] != nullptr ){ v0 = root -> next [ 1 ] -> count ; } v1 = queryTree ( root -> next [ 0 ], a , m , i - 1 ); return v0 + v1 ; } else if ( aDigit == 0 && mDigit == 1 ){ if ( root -> next [ 1 ] == nullptr ) return 0 ; return queryTree ( root -> next [ 1 ], a , m , i - 1 ); } else if ( aDigit == 1 && mDigit == 0 ){ ll v0 = 0 , v1 = 0 ; if ( root -> next [ 0 ] != nullptr ){ v0 = root -> next [ 0 ] -> count ; } v1 = queryTree ( root -> next [ 1 ], a , m , i - 1 ); return v0 + v1 ; } else if ( aDigit == 1 && mDigit == 1 ){ if ( root -> next [ 0 ] == nullptr ) return 0 ; return queryTree ( root -> next [ 0 ], a , m , i - 1 ); } else { cout << \"error\" << endl ; } } return 0 ; } ll solve ( vector < int > & v , int m ){ trieTree * root = createTree ( v ); ll result = 0 ; for ( int i = 0 ; i < v . size (); ++ i ) { result += queryTree ( root , v [ i ], m , MAXBIT ); } return result / 2 ; } int main (){ freopen ( \"d:/A.in\" , \"r\" , stdin ); int n , m ; cin >> n >> m ; vector < int > v ( n , 0 ); for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ]; } cout << solve ( v , m ) << endl ; return 0 ; } 2.2 \u7edf\u8ba1\u5b50\u76ee\u5f55 \u00b6 \u7edf\u8ba1\u5b50\u76ee\u5f55 \u63cf\u8ff0 \u5c0fHi\u7684\u7535\u8111\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e00\u5171\u6709N\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a /hihocoder/offer22/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u5c0fHi\u60f3\u7edf\u8ba1\u5176\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5b50\u76ee\u5f55\u3002\u4e0a\u4f8b\u4e2d\u4e00\u5171\u67098\u4e2a\u4e0d\u540c\u7684\u5b50\u76ee\u5f55\uff1a /hihocoder /hihocoder/offer22 /hihocoder/offer22/solutions /hihocoder/challenge30 /hihocoder/challenge30/p1 /game /game/moba /game/moba/dota2/ \u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N (1 \u2264 N \u2264 10000) \u4ee5\u4e0bN\u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002\u4fdd\u8bc1\u8def\u5f84\u4ece\u6839\u76ee\u5f55\"/\"\u5f00\u59cb\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u548c\u76ee\u5f55\u540d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002 \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc710000 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc7500000 \u8f93\u51fa \u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u4e0d\u540c\u5b50\u76ee\u5f55\u7684\u6570\u76ee\u3002 \u6837\u4f8b\u8f93\u5165 3 /hihocoder/offer22/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u6837\u4f8b\u8f93\u51fa 8 \u601d\u8def\uff1a \u7528\u6bcf\u4e2a\u76ee\u5f55\u7684\u540d\u5b57\u5efa\u7acb\u5b57\u5178\u6811\uff0c\u6839\u662f\u7a7a\u5b57\u7b26\uff0c\u7136\u540e\u7edf\u8ba1\u6574\u68f5\u6811\u8282\u70b9\u7684\u6570\u76ee\uff0c\u6700\u540e\u8fd4\u56de\u8282\u70b9\u7684\u6570\u76ee-1. #include <iostream> #include <vector> #include <string> #include <map> #include <set> #include <algorithm> #include <cmath> #include <sstream> #include <iomanip> #include <deque> #include <stack> using namespace std ; /* * [\u7edf\u8ba1\u5b50\u76ee\u5f55](http://hihocoder.com/problemset/solution/1157194) * */ struct trieTree { string description ; vector < trieTree *> sons ; trieTree () : description ( \"\" ){} trieTree ( string & s ) : description ( s ){} }; /** * \u5c42\u6b21\u904d\u5386\u7edf\u8ba1\u8282\u70b9\u6570\u76ee * @param root * @return */ int countNodes ( trieTree * root ){ if ( root == nullptr ) return 0 ; if ( root -> sons . empty ()) return 1 ; vector < trieTree *> nodes , next ; nodes . push_back ( root ); int re = 0 ; while ( ! nodes . empty ()){ for ( int i = 0 ; i < nodes . size (); ++ i ) { next . insert ( next . end (), nodes [ i ] -> sons . begin (), nodes [ i ] -> sons . end ()); } re += nodes . size (); nodes = next ; next . clear (); } return re ; } /** * \u9012\u5f52\u904d\u5386\u8282\u70b9\u6570\u76ee * @param root * @return */ int countNode2 ( trieTree * root ){ if ( root == nullptr ) return 0 ; if ( root -> sons . empty ()) return 1 ; int re = 1 ; for ( int i = 0 ; i < root -> sons . size (); ++ i ) { re += countNode2 ( root -> sons [ i ]); } return re ; } vector < string > splitString ( const string & s ){ vector < string > re ; if ( s . empty ()) return re ; size_t index1 = 0 ; size_t index2 = 1 ; while ( s . find ( '/' , index2 ) != - 1 ){ index2 = s . find ( '/' , index1 + 1 ); re . push_back ( s . substr ( index1 + 1 , index2 - index1 - 1 )); index1 = index2 ; index2 ++ ; } return re ; } int solve ( vector < string > & pathes , int n ){ if ( pathes . empty () || n <= 0 ) return 0 ; int result = 0 ; trieTree * root = new trieTree (); for ( int i = 0 ; i < n ; ++ i ) { vector < string > path = splitString ( pathes [ i ]); trieTree * cur = root ; for ( int j = 0 ; j < path . size (); ++ j ) { if ( cur -> sons . empty ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ 0 ]; } else { int index = cur -> sons . size (); for ( int k = 0 ; k < cur -> sons . size (); ++ k ) { if ( cur -> sons [ k ] -> description == path [ j ]){ index = k ; break ; } } if ( index == cur -> sons . size ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ cur -> sons . size () - 1 ]; } else { cur = cur -> sons [ index ]; } } } } int re = countNode2 ( root ) - 1 ; return result ; } int main (){ freopen ( \"d:/A.in\" , \"r\" , stdin ); int n ; cin >> n ; vector < string > pathes ( n , \"\" ); for ( int i = 0 ; i < n ; ++ i ) { cin >> pathes [ i ]; } cout << solve ( pathes , n ) << endl ; return 0 ; } 2.3 \u5408\u5e76\u5b50\u76ee\u5f55 \u00b6 \u5408\u5e76\u5b50\u76ee\u5f55 \u63cf\u8ff0 \u5c0fHi\u7684\u7535\u8111\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e00\u5171\u6709N\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a /hihocoder/offer23/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u7ecf\u8fc7\u7edf\u8ba1\uff0c\u5c0fHi\u8ba4\u4e3a\u4ed6\u7684\u7535\u8111\u4e2d\u5b50\u76ee\u5f55\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u51cf\u5c11\u5b50\u76ee\u5f55\u7684\u6570\u91cf\u3002\u5c0fHi\u53d1\u73b0\u5176\u4e2d\u4e00\u4e9b\u5b50\u76ee\u5f55\u53ea\u5305\u542b\u53e6\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u4f8b\u5982/hihocoder/offer22\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55solution\uff0c/game\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55moba\uff0c\u800cmoba\u4e5f\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55dota2\u3002\u5c0fHi\u51b3\u5b9a\u628a\u8fd9\u6837\u7684\u5b50\u76ee\u5f55\u5408\u5e76\u6210\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u5e76\u4e14\u5c06\u88ab\u5408\u5e76\u7684\u5b50\u76ee\u5f55\u7684\u540d\u5b57\u7528'-'\u8fde\u8d77\u6765\u4f5c\u4e3a\u65b0\u5b50\u76ee\u5f55\u7684\u540d\u5b57\u3002\u5408\u5e76\u4e4b\u540e\u4e0a\u4f8b\u76843\u4e2a\u6587\u4ef6\u7684\u8def\u5f84\u4f1a\u53d8\u4e3a\uff1a /hihocoder/offer23-solutions/p1 /hihocoder/challenge30-p1/test /game-moba-dota2/uninstall \u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N (1 \u2264 N \u2264 10000) \u4ee5\u4e0bN\u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002\u4fdd\u8bc1\u8def\u5f84\u4ece\u6839\u76ee\u5f55\"/\"\u5f00\u59cb\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u548c\u76ee\u5f55\u540d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002 \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc710000 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc7500000 \u8f93\u51fa \u5bf9\u4e8e\u8f93\u5165\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\uff0c\u8f93\u51fa\u5408\u5e76\u5b50\u76ee\u5f55\u4e4b\u540e\u8be5\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u6837\u4f8b\u8f93\u5165 3 /hihocoder/offer23/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u6837\u4f8b\u8f93\u51fa /hihocoder/offer23-solutions/p1 /hihocoder/challenge30-p1/test /game-moba-dota2/uninstall #include <iostream> #include <vector> #include <string> #include <map> #include <set> #include <algorithm> #include <cmath> #include <sstream> #include <iomanip> #include <deque> #include <stack> using namespace std ; /* * [\u7edf\u8ba1\u5b50\u76ee\u5f55](http://hihocoder.com/problemset/solution/1157194) * */ struct trieTree { string description ; vector < trieTree *> sons ; trieTree () : description ( \"\" ){} trieTree ( string & s ) : description ( s ){} }; vector < string > splitString ( string & s ){ vector < string > re ; if ( s . empty ()) return re ; s . push_back ( '/' ); size_t index1 = 0 ; size_t index2 = 1 ; while ( s . find ( '/' , index2 ) != - 1 ){ index2 = s . find ( '/' , index1 + 1 ); re . push_back ( s . substr ( index1 + 1 , index2 - index1 - 1 )); index1 = index2 ; index2 ++ ; } return re ; } trieTree * createTree ( vector < string > & pathes ){ if ( pathes . empty ()) return 0 ; int result = 0 ; trieTree * root = new trieTree (); for ( int i = 0 ; i < pathes . size (); ++ i ) { vector < string > path = splitString ( pathes [ i ]); trieTree * cur = root ; for ( int j = 0 ; j < path . size (); ++ j ) { if ( cur -> sons . empty ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ 0 ]; } else { int index = cur -> sons . size (); for ( int k = 0 ; k < cur -> sons . size (); ++ k ) { if ( cur -> sons [ k ] -> description == path [ j ]){ index = k ; break ; } } if ( index == cur -> sons . size ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ cur -> sons . size () - 1 ]; } else { cur = cur -> sons [ index ]; } } } } return root ; } trieTree * reduceTree ( trieTree * root ){ trieTree * re = root ; if ( root -> sons . empty ()) return root ; if ( root -> sons . size () >= 2 ){ for ( int i = 0 ; i < root -> sons . size (); ++ i ) { reduceTree ( root -> sons [ i ]); } } if ( root -> sons . size () == 1 ){ trieTree * next = root -> sons [ 0 ]; if ( next -> sons . empty ()){ // root->description = root->description + \"-\"; // root->description = root->description + next->description; // root->sons.clear(); return root ; } root -> sons . clear (); for ( int i = 0 ; i < next -> sons . size (); ++ i ) { root -> sons . push_back ( next -> sons [ i ]); } root -> description = root -> description + \"-\" ; root -> description = root -> description + next -> description ; reduceTree ( root ); } return re ; } void printTree ( trieTree * root , string out ){ if ( nullptr == root ) return ; out += root -> description + \"/\" ; if ( root -> sons . empty ()){ if ( out . find_last_of ( '/' ) == out . size () - 1 ){ out . erase ( out . size () - 1 ); } cout << out << endl ; } else { for ( int i = 0 ; i < root -> sons . size (); ++ i ) { printTree ( root -> sons [ i ], out ); } } } void solve ( vector < string > & pathes , int n ){ int result = 0 ; trieTree * root = createTree ( pathes ); trieTree * reduced = reduceTree ( root ); string out = \"\" ; printTree ( reduced , out ); } int main (){ freopen ( \"d:/A.in\" , \"r\" , stdin ); int n ; cin >> n ; vector < string > pathes ( n , \"\" ); for ( int i = 0 ; i < n ; ++ i ) { cin >> pathes [ i ]; } solve ( pathes , n ); return 0 ; }","title":"\u5b57\u5178\u6811(Trie\u6811)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#trie","text":"Trie\u6811\uff0c \u524d\u7f00\u6811\uff0c\u5b57\u5178\u6811\uff0c \u6307\u7684\u90fd\u662f\u540c\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u8be5\u7ed3\u6784\u4ee5\u7a7a\u5b57\u7b26\u4e3a\u6839\u8282\u70b9\uff0c \u5176\u5b83\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u3002 \u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u4e00\u6761\u8def\u5f84\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u3002\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2a\u662f\u5426\u6709\u5355\u8bcd\u7684\u6807\u8bb0\u3002 \u524d\u7f00\u6811\u80fd\u5b8c\u6210\u5b57\u7b26\u4e32\u7684\u9ad8\u6548\u67e5\u627e\u548c\u589e\u5220\u3002","title":"\u5b57\u5178\u6811(Trie\u6811)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#1","text":"","title":"1. \u5b57\u5178\u6811\u7684\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#11-python","text":"class Trie : def __init__ ( self ): self . root = {} self . end = 'END' def insert ( self , word ): cur_node = self . root for c in word : if c not in cur_node : cur_node [ c ] = {} cur_node = cur_node [ c ] cur_node [ self . end ] = True def search ( self , word ): current = self . root for c in word : if c not in current : return False current = current [ c ] if self . end not in current : return False return True def indexof ( self , word ): # \u8fd4\u56de\u662f\u5426\u662f\u67d0\u4e2a\u5355\u8bcd\u7684\u524d\u7f00 current = self . root for c in word : if c not in current : return False current = current [ c ] if self . end in current : current . pop ( self . end ) if len ( current ) > 0 : return True return False","title":"1.1 Python"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#12-c","text":"","title":"1.2 C++"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#13-c","text":"","title":"1.3 C"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#2","text":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) 212. \u5355\u8bcd\u641c\u7d22 II 336. \u56de\u6587\u5bf9 472. \u8fde\u63a5\u8bcd","title":"2. \u76f8\u5173\u9898\u76ee"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#21-2017","text":"\u5f02\u6216\uff08\u4eca\u65e5\u5934\u67612017\u79cb\u62db\u771f\u9898\uff09 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u6574\u6570m\u4ee5\u53can\u4e2a\u6570\u5b57A1, A2, \u2026, An\uff0c\u5c06\u6570\u5217A\u4e2d\u6240\u6709\u5143\u7d20\u4e24\u4e24\u5f02\u6216\uff0c\u5171\u80fd\u5f97\u5230n(n-1)/2\u4e2a\u7ed3\u679c\u3002\u8bf7\u6c42\u51fa\u8fd9\u4e9b\u7ed3\u679c\u4e2d\u5927\u4e8em\u7684\u6709\u591a\u5c11\u4e2a\u3002 \u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570n, m\u3002 \u7b2c\u4e8c\u884c\u7ed9\u51fan\u4e2a\u6574\u6570A1, A2, \u2026, An\u3002 \u6837\u4f8b\u8f93\u5165 3 10 6 5 10 \u8f93\u51fa \u8f93\u51fa\u4ec5\u5305\u62ec\u4e00\u884c\uff0c\u5373\u6240\u6c42\u7684\u7b54\u6848\u3002 \u6837\u4f8b\u8f93\u51fa 2 \u65f6\u95f4\u9650\u5236 C/C++\u8bed\u8a00\uff1a1000MS\u5176\u5b83\u8bed\u8a00\uff1a3000MS \u5185\u5b58\u9650\u5236 C/C++\u8bed\u8a00\uff1a65536KB\u5176\u5b83\u8bed\u8a00\uff1a589824K \u601d\u8def\uff1a \u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u5efa\u7acb\u5b57\u5178\u6811\uff0c\u5de6\u5b50\u6811\u8868\u793a\u4e8c\u8fdb\u52360\uff0c\u53f3\u5b50\u6811\u8868\u793a\u4e8c\u8fdb\u5236\u4f4d1. \u6bcf\u4e2a\u8282\u70b9\u7edf\u8ba1\u5728n\u4e2a\u6570\u5b57\u4e2d\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u6709\u591a\u5c11\u4e2a\u5bf9\u5e94\u76840\u6216\u80051. \u67e5\u8be2\u6bcf\u4e2a\u6570\u5b57a\u548cm\uff0c\u6bd4\u8f83a\u548cm\u5bf9\u5e94\u7684\u4f4d\uff0c\u6709\u5982\u4e0b\u60c5\u51b5 2.1 a = 0, m = 0, \u8fd9\u4e2a\u65f6\u5019 b=0 , a^b = 0 \u4e0d\u80fd\u786e\u5b9a\u8c01\u5927\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d 2.2 a = 0, m = 1, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u80af\u5b9a\u6709a^b < m, \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u8df3\u8fc7\uff1b b = 1, \u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d 2.3 a = 1, m = 0, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u80af\u5b9a\u6709a^b > m, \u6ee1\u8db3\u6761\u4ef6\uff0c\u76f4\u63a5\u5c06\u5bf9\u5e94\u7684count\u52a0\u5728\u7ed3\u679c\u4e0a\uff0c b=1,\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d 2.4 a = 1, m = 1, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d\uff0cb = 1,\u80af\u5b9a\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c \u6700\u540e\u7684\u7ed3\u679c\u9664\u4ee52\u8fd4\u56de\uff0c \u56e0\u4e3a\u6211\u4eec\u65e2\u7edf\u8ba1\u4e86a\u4e0eb\u7684\u5f02\u6216\uff0c\u4e5f\u7edf\u8ba1\u4e86b\u4e0ea\u7684\u5f02\u6216\u3002 #include <iostream> #include <vector> using namespace std ; struct TrieTree { int count ; struct TrieTree * next [ 2 ]{ NULL , NULL }; TrieTree () : count ( 1 ){} }; TrieTree * buildTrieTree ( const vector < int >& array ) { TrieTree * trieTree = new TrieTree (); for ( int i = 0 ; i < ( int ) array . size (); ++ i ) { TrieTree * cur = trieTree ; for ( int j = 16 ; j >= 0 ; -- j ) { int digit = ( array [ i ] >> j ) & 1 ; if ( NULL == cur -> next [ digit ]) cur -> next [ digit ] = new TrieTree (); else ++ ( cur -> next [ digit ] -> count ); cur = cur -> next [ digit ]; } } return trieTree ; } long long queryTrieTree ( TrieTree *& trieTree , const int a , const int m , const int index ) { if ( NULL == trieTree ) return 0 ; TrieTree * cur = trieTree ; for ( int i = index ; i >= 0 ; -- i ) { int aDigit = ( a >> i ) & 1 ; int mDigit = ( m >> i ) & 1 ; if ( 1 == aDigit && 1 == mDigit ) { if ( NULL == cur -> next [ 0 ]) return 0 ; cur = cur -> next [ 0 ]; } else if ( 0 == aDigit && 1 == mDigit ) { if ( NULL == cur -> next [ 1 ]) return 0 ; cur = cur -> next [ 1 ]; } else if ( 1 == aDigit && 0 == mDigit ) { long long val0 = ( NULL == cur -> next [ 0 ]) ? 0 : cur -> next [ 0 ] -> count ; long long val1 = queryTrieTree ( cur -> next [ 1 ], a , m , i - 1 ); return val0 + val1 ; } else if ( 0 == aDigit && 0 == mDigit ) { long long val0 = queryTrieTree ( cur -> next [ 0 ], a , m , i - 1 ); long long val1 = ( NULL == cur -> next [ 1 ]) ? 0 : cur -> next [ 1 ] -> count ; return val0 + val1 ; } } return 0 ; } long long solve ( const vector < int >& array , const int & m ) { TrieTree * trieTree = buildTrieTree ( array ); long long result = 0 ; for ( int i = 0 ; i < ( int ) array . size (); ++ i ) { result += queryTrieTree ( trieTree , array [ i ], m , 16 ); } return result / 2 ; } int main () { freopen ( \"d:/A.in\" , \"r\" , stdin ); int n , m ; while ( cin >> n >> m ) { vector < int > array ( n ); for ( int i = 0 ; i < n ; ++ i ) cin >> array [ i ]; cout << solve ( array , m ) << endl ; } return 0 ; } #include <iostream> #include <vector> #include <string> #include <map> #include <set> #include <algorithm> #include <cmath> #include <sstream> #include <iomanip> using namespace std ; using ll = long long ; const int MAXBIT = 17 ; struct trieTree { ll count = 0 ; trieTree * next [ 2 ] = { nullptr , nullptr }; trieTree () : count ( 0 ){} trieTree ( int c ) : count ( c ){} }; trieTree * createTree ( const vector < int > & arr ){ trieTree * root = new trieTree ( 1 ); for ( int i = 0 ; i < arr . size (); ++ i ) { int index = MAXBIT ; // int \u6574\u5f62\u6700\u591a32\u4f4d trieTree * cur = root ; while ( index >= 0 ){ int digit = ( arr [ i ] >> index ) & 1 ; // \u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7b2cindex+1\u4f4d\u7684\u503c if ( cur -> next [ digit ] == nullptr ){ cur -> next [ digit ] = new trieTree ( 1 ); } else { cur -> next [ digit ] -> count ++ ; } cur = cur -> next [ digit ]; index -- ; } } return root ; } /** * \u67e5\u8be2trie\u6811\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u6ee1\u8db3a^b>m * @param root * @param a * @param m * @param index * @return */ ll queryTree ( trieTree * root , int a , int m , int index ){ if ( root == nullptr ) return 0 ; for ( int i = index ; i >= 0 ; -- i ) { int aDigit = ( a >> i ) & 1 ; int mDigit = ( m >> i ) & 1 ; if ( aDigit == 0 && mDigit == 0 ){ ll v0 = 0 , v1 = 0 ; if ( root -> next [ 1 ] != nullptr ){ v0 = root -> next [ 1 ] -> count ; } v1 = queryTree ( root -> next [ 0 ], a , m , i - 1 ); return v0 + v1 ; } else if ( aDigit == 0 && mDigit == 1 ){ if ( root -> next [ 1 ] == nullptr ) return 0 ; return queryTree ( root -> next [ 1 ], a , m , i - 1 ); } else if ( aDigit == 1 && mDigit == 0 ){ ll v0 = 0 , v1 = 0 ; if ( root -> next [ 0 ] != nullptr ){ v0 = root -> next [ 0 ] -> count ; } v1 = queryTree ( root -> next [ 1 ], a , m , i - 1 ); return v0 + v1 ; } else if ( aDigit == 1 && mDigit == 1 ){ if ( root -> next [ 0 ] == nullptr ) return 0 ; return queryTree ( root -> next [ 0 ], a , m , i - 1 ); } else { cout << \"error\" << endl ; } } return 0 ; } ll solve ( vector < int > & v , int m ){ trieTree * root = createTree ( v ); ll result = 0 ; for ( int i = 0 ; i < v . size (); ++ i ) { result += queryTree ( root , v [ i ], m , MAXBIT ); } return result / 2 ; } int main (){ freopen ( \"d:/A.in\" , \"r\" , stdin ); int n , m ; cin >> n >> m ; vector < int > v ( n , 0 ); for ( int i = 0 ; i < n ; ++ i ) { cin >> v [ i ]; } cout << solve ( v , m ) << endl ; return 0 ; }","title":"2.1 \u5f02\u6216\uff08\u4eca\u65e5\u5934\u67612017\u79cb\u62db\u771f\u9898\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#22","text":"\u7edf\u8ba1\u5b50\u76ee\u5f55 \u63cf\u8ff0 \u5c0fHi\u7684\u7535\u8111\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e00\u5171\u6709N\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a /hihocoder/offer22/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u5c0fHi\u60f3\u7edf\u8ba1\u5176\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5b50\u76ee\u5f55\u3002\u4e0a\u4f8b\u4e2d\u4e00\u5171\u67098\u4e2a\u4e0d\u540c\u7684\u5b50\u76ee\u5f55\uff1a /hihocoder /hihocoder/offer22 /hihocoder/offer22/solutions /hihocoder/challenge30 /hihocoder/challenge30/p1 /game /game/moba /game/moba/dota2/ \u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N (1 \u2264 N \u2264 10000) \u4ee5\u4e0bN\u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002\u4fdd\u8bc1\u8def\u5f84\u4ece\u6839\u76ee\u5f55\"/\"\u5f00\u59cb\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u548c\u76ee\u5f55\u540d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002 \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc710000 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc7500000 \u8f93\u51fa \u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u4e0d\u540c\u5b50\u76ee\u5f55\u7684\u6570\u76ee\u3002 \u6837\u4f8b\u8f93\u5165 3 /hihocoder/offer22/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u6837\u4f8b\u8f93\u51fa 8 \u601d\u8def\uff1a \u7528\u6bcf\u4e2a\u76ee\u5f55\u7684\u540d\u5b57\u5efa\u7acb\u5b57\u5178\u6811\uff0c\u6839\u662f\u7a7a\u5b57\u7b26\uff0c\u7136\u540e\u7edf\u8ba1\u6574\u68f5\u6811\u8282\u70b9\u7684\u6570\u76ee\uff0c\u6700\u540e\u8fd4\u56de\u8282\u70b9\u7684\u6570\u76ee-1. #include <iostream> #include <vector> #include <string> #include <map> #include <set> #include <algorithm> #include <cmath> #include <sstream> #include <iomanip> #include <deque> #include <stack> using namespace std ; /* * [\u7edf\u8ba1\u5b50\u76ee\u5f55](http://hihocoder.com/problemset/solution/1157194) * */ struct trieTree { string description ; vector < trieTree *> sons ; trieTree () : description ( \"\" ){} trieTree ( string & s ) : description ( s ){} }; /** * \u5c42\u6b21\u904d\u5386\u7edf\u8ba1\u8282\u70b9\u6570\u76ee * @param root * @return */ int countNodes ( trieTree * root ){ if ( root == nullptr ) return 0 ; if ( root -> sons . empty ()) return 1 ; vector < trieTree *> nodes , next ; nodes . push_back ( root ); int re = 0 ; while ( ! nodes . empty ()){ for ( int i = 0 ; i < nodes . size (); ++ i ) { next . insert ( next . end (), nodes [ i ] -> sons . begin (), nodes [ i ] -> sons . end ()); } re += nodes . size (); nodes = next ; next . clear (); } return re ; } /** * \u9012\u5f52\u904d\u5386\u8282\u70b9\u6570\u76ee * @param root * @return */ int countNode2 ( trieTree * root ){ if ( root == nullptr ) return 0 ; if ( root -> sons . empty ()) return 1 ; int re = 1 ; for ( int i = 0 ; i < root -> sons . size (); ++ i ) { re += countNode2 ( root -> sons [ i ]); } return re ; } vector < string > splitString ( const string & s ){ vector < string > re ; if ( s . empty ()) return re ; size_t index1 = 0 ; size_t index2 = 1 ; while ( s . find ( '/' , index2 ) != - 1 ){ index2 = s . find ( '/' , index1 + 1 ); re . push_back ( s . substr ( index1 + 1 , index2 - index1 - 1 )); index1 = index2 ; index2 ++ ; } return re ; } int solve ( vector < string > & pathes , int n ){ if ( pathes . empty () || n <= 0 ) return 0 ; int result = 0 ; trieTree * root = new trieTree (); for ( int i = 0 ; i < n ; ++ i ) { vector < string > path = splitString ( pathes [ i ]); trieTree * cur = root ; for ( int j = 0 ; j < path . size (); ++ j ) { if ( cur -> sons . empty ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ 0 ]; } else { int index = cur -> sons . size (); for ( int k = 0 ; k < cur -> sons . size (); ++ k ) { if ( cur -> sons [ k ] -> description == path [ j ]){ index = k ; break ; } } if ( index == cur -> sons . size ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ cur -> sons . size () - 1 ]; } else { cur = cur -> sons [ index ]; } } } } int re = countNode2 ( root ) - 1 ; return result ; } int main (){ freopen ( \"d:/A.in\" , \"r\" , stdin ); int n ; cin >> n ; vector < string > pathes ( n , \"\" ); for ( int i = 0 ; i < n ; ++ i ) { cin >> pathes [ i ]; } cout << solve ( pathes , n ) << endl ; return 0 ; }","title":"2.2 \u7edf\u8ba1\u5b50\u76ee\u5f55"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#23","text":"\u5408\u5e76\u5b50\u76ee\u5f55 \u63cf\u8ff0 \u5c0fHi\u7684\u7535\u8111\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e00\u5171\u6709N\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a /hihocoder/offer23/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u7ecf\u8fc7\u7edf\u8ba1\uff0c\u5c0fHi\u8ba4\u4e3a\u4ed6\u7684\u7535\u8111\u4e2d\u5b50\u76ee\u5f55\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u51cf\u5c11\u5b50\u76ee\u5f55\u7684\u6570\u91cf\u3002\u5c0fHi\u53d1\u73b0\u5176\u4e2d\u4e00\u4e9b\u5b50\u76ee\u5f55\u53ea\u5305\u542b\u53e6\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u4f8b\u5982/hihocoder/offer22\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55solution\uff0c/game\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55moba\uff0c\u800cmoba\u4e5f\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55dota2\u3002\u5c0fHi\u51b3\u5b9a\u628a\u8fd9\u6837\u7684\u5b50\u76ee\u5f55\u5408\u5e76\u6210\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u5e76\u4e14\u5c06\u88ab\u5408\u5e76\u7684\u5b50\u76ee\u5f55\u7684\u540d\u5b57\u7528'-'\u8fde\u8d77\u6765\u4f5c\u4e3a\u65b0\u5b50\u76ee\u5f55\u7684\u540d\u5b57\u3002\u5408\u5e76\u4e4b\u540e\u4e0a\u4f8b\u76843\u4e2a\u6587\u4ef6\u7684\u8def\u5f84\u4f1a\u53d8\u4e3a\uff1a /hihocoder/offer23-solutions/p1 /hihocoder/challenge30-p1/test /game-moba-dota2/uninstall \u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N (1 \u2264 N \u2264 10000) \u4ee5\u4e0bN\u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002\u4fdd\u8bc1\u8def\u5f84\u4ece\u6839\u76ee\u5f55\"/\"\u5f00\u59cb\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u548c\u76ee\u5f55\u540d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002 \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc710000 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc7500000 \u8f93\u51fa \u5bf9\u4e8e\u8f93\u5165\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\uff0c\u8f93\u51fa\u5408\u5e76\u5b50\u76ee\u5f55\u4e4b\u540e\u8be5\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u6837\u4f8b\u8f93\u5165 3 /hihocoder/offer23/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u6837\u4f8b\u8f93\u51fa /hihocoder/offer23-solutions/p1 /hihocoder/challenge30-p1/test /game-moba-dota2/uninstall #include <iostream> #include <vector> #include <string> #include <map> #include <set> #include <algorithm> #include <cmath> #include <sstream> #include <iomanip> #include <deque> #include <stack> using namespace std ; /* * [\u7edf\u8ba1\u5b50\u76ee\u5f55](http://hihocoder.com/problemset/solution/1157194) * */ struct trieTree { string description ; vector < trieTree *> sons ; trieTree () : description ( \"\" ){} trieTree ( string & s ) : description ( s ){} }; vector < string > splitString ( string & s ){ vector < string > re ; if ( s . empty ()) return re ; s . push_back ( '/' ); size_t index1 = 0 ; size_t index2 = 1 ; while ( s . find ( '/' , index2 ) != - 1 ){ index2 = s . find ( '/' , index1 + 1 ); re . push_back ( s . substr ( index1 + 1 , index2 - index1 - 1 )); index1 = index2 ; index2 ++ ; } return re ; } trieTree * createTree ( vector < string > & pathes ){ if ( pathes . empty ()) return 0 ; int result = 0 ; trieTree * root = new trieTree (); for ( int i = 0 ; i < pathes . size (); ++ i ) { vector < string > path = splitString ( pathes [ i ]); trieTree * cur = root ; for ( int j = 0 ; j < path . size (); ++ j ) { if ( cur -> sons . empty ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ 0 ]; } else { int index = cur -> sons . size (); for ( int k = 0 ; k < cur -> sons . size (); ++ k ) { if ( cur -> sons [ k ] -> description == path [ j ]){ index = k ; break ; } } if ( index == cur -> sons . size ()){ cur -> sons . push_back ( new trieTree ( path [ j ])); result ++ ; cur = cur -> sons [ cur -> sons . size () - 1 ]; } else { cur = cur -> sons [ index ]; } } } } return root ; } trieTree * reduceTree ( trieTree * root ){ trieTree * re = root ; if ( root -> sons . empty ()) return root ; if ( root -> sons . size () >= 2 ){ for ( int i = 0 ; i < root -> sons . size (); ++ i ) { reduceTree ( root -> sons [ i ]); } } if ( root -> sons . size () == 1 ){ trieTree * next = root -> sons [ 0 ]; if ( next -> sons . empty ()){ // root->description = root->description + \"-\"; // root->description = root->description + next->description; // root->sons.clear(); return root ; } root -> sons . clear (); for ( int i = 0 ; i < next -> sons . size (); ++ i ) { root -> sons . push_back ( next -> sons [ i ]); } root -> description = root -> description + \"-\" ; root -> description = root -> description + next -> description ; reduceTree ( root ); } return re ; } void printTree ( trieTree * root , string out ){ if ( nullptr == root ) return ; out += root -> description + \"/\" ; if ( root -> sons . empty ()){ if ( out . find_last_of ( '/' ) == out . size () - 1 ){ out . erase ( out . size () - 1 ); } cout << out << endl ; } else { for ( int i = 0 ; i < root -> sons . size (); ++ i ) { printTree ( root -> sons [ i ], out ); } } } void solve ( vector < string > & pathes , int n ){ int result = 0 ; trieTree * root = createTree ( pathes ); trieTree * reduced = reduceTree ( root ); string out = \"\" ; printTree ( reduced , out ); } int main (){ freopen ( \"d:/A.in\" , \"r\" , stdin ); int n ; cin >> n ; vector < string > pathes ( n , \"\" ); for ( int i = 0 ; i < n ; ++ i ) { cin >> pathes [ i ]; } solve ( pathes , n ); return 0 ; }","title":"2.3 \u5408\u5e76\u5b50\u76ee\u5f55"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/","text":"\u54c8\u5e0c\u8868 \u00b6 \u54c8\u5e0c\u8868\u662f\u6570\u7ec4\u7684\u6269\u5c55\uff0c\u6570\u7ec4\u53ea\u80fd\u7528\u8fde\u7eed\u7684\u6574\u6570\u8868\u793a\u952e\uff1b\u54c8\u5e0c\u8868\u53ef\u4ee5\u7528\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u3002 1. \u54c8\u5e0c\u8868\u7684\u539f\u7406 \u00b6 \u7b80\u5355\u7684\u7406\u89e3\uff0c \u54c8\u5e0c\u8868\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u5c06\u952e\u8f6c\u6362\u4e3a\u5177\u4f53\u7684\u6570\u5b57\uff0c \u7528\u8be5\u6570\u5b57\u4f5c\u4e3a\u4e0b\u6807\u8fbe\u5230\u76f4\u63a5\u5bfb\u5740\u7684\u76ee\u7684\u3002 \u4e0d\u540c\u7684\u952e\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u4e4b\u540e\u53ef\u80fd\u7ed3\u679c\u76f8\u540c\uff0c\u8fd9\u6837\u7ed3\u679c\u5c31\u4f1a\u51b2\u7a81\uff0c\u6240\u4ee5\u6bcf\u4e2a\u4e0b\u6807\u5b58\u50a8\u7684\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u8bb0\u5f55\u4e86\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u4e4b\u540e\u6709\u591a\u5c11\u4e2a\u952e\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002 \u9009\u62e9\u597d\u7684\u54c8\u5e0c\u51fd\u6570\u53ef\u4ee5\u4f7f\u94fe\u8868\u7684\u957f\u5ea6\u5747\u5300\u5206\u5e03\uff0c\u8fd9\u6837\u67e5\u627e\u7684\u6548\u7387\u8fd1\u4f3cO(1). 2. \u54c8\u5e0c\u8868\u76f8\u5173\u7684\u4e60\u9898 \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 1. \u4e24\u6570\u4e4b\u548c \u7b80\u5355 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u7b80\u5355 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u56f0\u96be 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 \u4e2d\u7b49 609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 \u56f0\u96be 1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 \u4e2d\u7b49","title":"\u54c8\u5e0c\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_1","text":"\u54c8\u5e0c\u8868\u662f\u6570\u7ec4\u7684\u6269\u5c55\uff0c\u6570\u7ec4\u53ea\u80fd\u7528\u8fde\u7eed\u7684\u6574\u6570\u8868\u793a\u952e\uff1b\u54c8\u5e0c\u8868\u53ef\u4ee5\u7528\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u3002","title":"\u54c8\u5e0c\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#1","text":"\u7b80\u5355\u7684\u7406\u89e3\uff0c \u54c8\u5e0c\u8868\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u5c06\u952e\u8f6c\u6362\u4e3a\u5177\u4f53\u7684\u6570\u5b57\uff0c \u7528\u8be5\u6570\u5b57\u4f5c\u4e3a\u4e0b\u6807\u8fbe\u5230\u76f4\u63a5\u5bfb\u5740\u7684\u76ee\u7684\u3002 \u4e0d\u540c\u7684\u952e\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u4e4b\u540e\u53ef\u80fd\u7ed3\u679c\u76f8\u540c\uff0c\u8fd9\u6837\u7ed3\u679c\u5c31\u4f1a\u51b2\u7a81\uff0c\u6240\u4ee5\u6bcf\u4e2a\u4e0b\u6807\u5b58\u50a8\u7684\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u8bb0\u5f55\u4e86\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u4e4b\u540e\u6709\u591a\u5c11\u4e2a\u952e\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002 \u9009\u62e9\u597d\u7684\u54c8\u5e0c\u51fd\u6570\u53ef\u4ee5\u4f7f\u94fe\u8868\u7684\u957f\u5ea6\u5747\u5300\u5206\u5e03\uff0c\u8fd9\u6837\u67e5\u627e\u7684\u6548\u7387\u8fd1\u4f3cO(1).","title":"1. \u54c8\u5e0c\u8868\u7684\u539f\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#2","text":"LeetCode\u9898\u76ee \u96be\u5ea6 1. \u4e24\u6570\u4e4b\u548c \u7b80\u5355 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u7b80\u5355 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u56f0\u96be 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 \u4e2d\u7b49 609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 \u56f0\u96be 1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 \u4e2d\u7b49","title":"2. \u54c8\u5e0c\u8868\u76f8\u5173\u7684\u4e60\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/","text":"\u5806 \u00b6 \u5806\uff0c\u6216\u8005\u66f4\u51c6\u786e\u7684\u53eb\u4f5c\u4e8c\u53c9\u5806\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u901a\u5e38\u5206\u4e3a\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\u3002\u6700\u5927\u5806\u662f\u6307\u5806\u9876\u7684\u5143\u7d20\u6700\u5927\uff0c\u5806\u9876\u7684\u5de6\u53f3\u5b69\u5b50\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5b83\uff0c\u7136\u540e\u5de6\u53f3\u5b50\u6811\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002\u6700\u5c0f\u5806\u662f\u6307\u5806\u9876\u7684\u5143\u7d20\u6700\u5c0f\uff0c\u5de6\u53f3\u5b69\u5b50\u5927\u4e8e\u7b49\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5de6\u53f3\u5b50\u6811\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5806\u662f\u9012\u5f52\u5b9a\u4e49\u4e86\uff0c\u800c\u4e14\u662f\u4e00\u79cd\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u8282\u70b9\u4e4b\u95f4\u662f\u6709\u5927\u5c0f\u6b21\u5e8f\u5173\u7cfb\u7684\u3002\u4f46\u662f\u5de6\u53f3\u5b50\u6811\u662f\u6ca1\u6709\u987a\u5e8f\u7684\u3002\u800c\u4e8c\u53c9\u641c\u7d22\u6811\u5de6\u53f3\u5b69\u5b50\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u4e0d\u80fd\u98a0\u5012\u3002 \u65e2\u7136\u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u6765\u7b80\u4fbf\u7684\u8868\u793a\u4e00\u68f5\u6811\u3002\u5047\u8bbe\u4e00\u4e2a\u8282\u70b9\u7684\u4e0b\u6807\u662f i ,\u90a3\u4e48\u5b83\u7684\u5de6\u5b69\u5b50\u4e3a 2*i ,\u53f3\u5b69\u5b50\u4e3a 2*i+1 ,\u7236\u8282\u70b9\u4e3a i/2 . \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e8c\u53c9\u5806\u7684\u6784\u5efa\uff0c\u8c03\u6574\u548c\u6709\u5173\u5e94\u7528(\u5806\u6392\u5e8f\u548c\u4f18\u5148\u961f\u5217)\u3002\u6ce8\u610f\u8fd9\u91cc\u5047\u8bbe\u6839\u8282\u70b9\u7684\u6807\u53f7\u662f1. \u5982\u679c\u6839\u8282\u70b9\u662f\u4ece0\u5f00\u59cb\u6807\u53f7\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9 i , \u5de6\u5b69\u5b50\u4e3a 2*i+1 ,\u53f3\u5b69\u5b50\u4e3a 2*i+2 ,\u7236\u8282\u70b9\u4e3a (i-1)/2 . // \u6839\u8282\u70b9\u4ece0\u5f00\u59cb\u6807\u53f7\uff0c\u5bf9\u4e8e\u8282\u70b9i\uff0c\u6c42\u5176\u5de6\u5b69\u5b50\uff0c\u53f3\u5b69\u5b50\u548c\u7236\u8282\u70b9 inline int left ( int i ){ return ( i << 1 ) + 1 ; } inline int right ( int i ){ return ( i << 1 ) + 2 ; } inline int parent ( int i ){ if ( i == 0 ) return - 1 ; return ( i - 1 ) >> 1 ; } 1. \u6700\u5927\u5806 \u00b6 \u6700\u5927\u5806\u5c31\u662f\u6ee1\u8db3\u7236\u8282\u70b9\u5927\u4e8e\u7b49\u4e8e\u5b50\u8282\u70b9\u7684\u5806\u3002\u6700\u5927\u5806\u7684\u6839\u8282\u70b9\u662f\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5927\u7684(\u4f46\u53ef\u80fd\u4e0d\u662f\u552f\u4e00\u7684\u6700\u5927\u7684\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5927\u4e8e\u7b49\u4e8e)\u3002 1.1 \u8c03\u6574\u6700\u5927\u5806 \u00b6 \u5047\u8bbe A \u662f\u5b58\u50a8\u5806\u7684\u6570\u7ec4, A.length() \u8868\u793a\u6570\u7ec4\u7684\u5927\u5c0f\uff0c heap_size \u8868\u793a\u5806\u4e2d\u5143\u7d20\u7684\u4e2a\u6570, \u6ee1\u8db3 heap_size <= A.length() .\u5047\u8bbe\u6211\u4eec\u9700\u8981\u8c03\u6574\u8282\u70b9 i \u4ee5\u4f7f\u5f97\u5806\u91cd\u65b0\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28(\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u53ea\u6709\u8282\u70b9i\u662f\u4e0d\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\u7684)\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u627e\u51fa\u8282\u70b9 i \u7684\u5de6\u53f3\u5b69\u5b50 l , r ; \u5982\u679c l , r \u8d85\u8fc7\u4e86\u5806\u7684\u5927\u5c0f\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u5982\u679cA[i]\u5927\u4e8e\u7b49\u4e8e l , r ,\u76f4\u63a5\u8fd4\u56de \u627e\u5230 l , r \u4e2d\u7684\u8f83\u5927\u8005,\u8bb0\u4e3a maxIndex \uff0c\u548c A[i] \u4ea4\u6362 \u4ee4i = maxIndex, \u8f6c\u52301\u3002 /** * \u8c03\u6574\u8282\u70b9i,\u4f7f\u5f97\u6574\u4e2a\u5806\u4fdd\u6301\u6700\u5927\u5806\u7684\u6027\u8d28 * @param A * @param i */ void max_heap ( vector < int > & A , int i ){ int heap_size = A . size (); // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09 if ( i >= heap_size || i < 0 ) return ; auto l = left ( i ); auto r = right ( i ); // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86 if ( l >= heap_size ) return ; int maxIndex = - 1 ; if ( r >= heap_size ){ if ( A [ i ] >= A [ l ]) return ; maxIndex = l ; } else { // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5927\uff0c\u5219\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574 if ( A [ i ] >= A [ l ] && A [ i ] >= A [ r ]) return ; // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a A [ l ] >= A [ r ] ? maxIndex = l : maxIndex = r ; } swap ( A [ i ], A [ maxIndex ]); max_heap ( A , maxIndex ); } /** * \u8c03\u6574\u8282\u70b9i,\u4f7f\u5f97\u6574\u4e2a\u5806\u4fdd\u6301\u6700\u5c0f\u5806\u7684\u6027\u8d28 * @param A * @param i */ void min_heap ( vector < int > & A , int i ){ int heap_size = A . size (); // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09 if ( i >= heap_size || i < 0 ) return ; auto l = left ( i ); auto r = right ( i ); // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86 if ( l >= heap_size ) return ; int minIndex = - 1 ; if ( r >= heap_size ) { if ( A [ i ] <= A [ l ]) return ; minIndex = l ; } else { // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5c0f\uff0c\u5219\u6ee1\u8db3\u6700\u5c0f\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574 if ( A [ i ] <= A [ l ] && A [ i ] <= A [ r ]) return ; // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a A [ l ] <= A [ r ] ? minIndex = l : minIndex = r ; } swap ( A [ i ], A [ minIndex ]); min_heap ( A , minIndex ); } 1.2 \u5efa\u5806 \u00b6 \u5982\u4f55\u4ece\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4\u5efa\u7acb\u4e00\u4e2a\u5806\u662f\u5806\u64cd\u4f5c\u4e2d\u4e00\u4e2a\u57fa\u672c\u7684\uff0c\u4f46\u5f88\u91cd\u8981\u7684\u95ee\u9898\uff0c\u5b83\u901a\u5e38\u662f\u5f88\u591a\u95ee\u9898\u7684\u7b2c\u4e00\u6b65\u3002 \u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u5305\u542bn\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5f62\u6210\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0cn - ([n/2] + 1) + 1\u4e2a\u5143\u7d20\u662f\u53f6\u5b50\u8282\u70b9\u3002\u6211\u4eec\u53ea\u9700\u8981\u9488\u5bf9\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u4e4b\u5916\u7684\u8282\u70b9\u8c03\u7528\u4e0a\u9762\u7684\u91cd\u5efa\u5806\u7684\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u6700\u5927\u5806\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n). /** * \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u6700\u5927\u5806 * @param A */ void build_max_heap ( vector < int > & A ){ int leaf = A . size () / 2 ; for ( int i = leaf - 1 ; i >= 0 ; -- i ) { max_heap ( A , i ); } } /** * \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u6700\u5c0f\u5806 * @param A */ void build_min_heap ( vector < int > & A ){ int leaf = A . size () / 2 ; for ( int i = leaf - 1 ; i >= 0 ; -- i ) { min_heap ( A , i ); } } 2. \u5806\u6392\u5e8f \u00b6 \u5806\u6392\u5e8f\u5c31\u662f\u5229\u7528\u5806\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\u5b9e\u73b0\u6392\u5e8f\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u8fd9\u91cc\u4ee5\u6700\u5927\u5806\u4e3a\u4f8b\u6765\u8bf4\u660e\u3002 \u9996\u5148\u628a\u65e0\u5e8f\u6570\u7ec4\u91cd\u5efa\u4e00\u4e2a\u6700\u5927\u5806\uff0c\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u51fd\u6570\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u8f7b\u677e\u7684\u5728O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u3002 \u6b64\u65f6A[0]\u5b58\u50a8\u7684\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u503c\uff0c\u5c06\u5b83\u4e0e\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7136\u540e\u5806\u7684\u957f\u5ea6\u51cf\u5c111\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u518d\u5f53\u4f5c\u5806\u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u4e86\uff0c\u7136\u540e\u8c03\u6574\u5806\u4f7f\u4e4b\u7b26\u5408\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 \u91cd\u590d\u8fd9\u4e2a\u6b65\u9aa4\u76f4\u5230\u6240\u6709\u7684\u5143\u7d20\u653e\u5230\u4e86\u6b63\u786e\u7684\u4f4d\u7f6e\u4e4b\u4e0a\u3002 void max_heap ( vector < int > & A , int heap_size , int i ){ // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09 if ( i >= heap_size || i < 0 ) return ; auto l = left ( i ); auto r = right ( i ); // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86 if ( l >= heap_size ) return ; int maxIndex = - 1 ; if ( r >= heap_size ){ if ( A [ i ] >= A [ l ]) return ; maxIndex = l ; } else { // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5927\uff0c\u5219\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574 if ( A [ i ] >= A [ l ] && A [ i ] >= A [ r ]) return ; // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a A [ l ] >= A [ r ] ? maxIndex = l : maxIndex = r ; } swap ( A [ i ], A [ maxIndex ]); max_heap ( A , heap_size , maxIndex ); } void build_max_heap ( vector < int > & A ){ int leaf = A . size () / 2 ; for ( int i = leaf - 1 ; i >= 0 ; -- i ) { max_heap ( A , A . size (), i ); } } void sort_with_max_heap ( vector < int > & v ){ build_max_heap ( v ); int heap_size = v . size (); while ( heap_size ){ swap ( v [ 0 ], v [ heap_size - 1 ]); heap_size -- ; max_heap ( v , heap_size , 0 ); } } \u5806\u6392\u5e8f\u7684\u65f6\u95f4\u6027\u80fd\u662fnlogn,\u4f46\u662f\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\u66f4\u597d\u4e00\u4e9b\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u3002 3. \u4f18\u5148\u961f\u5217 \u00b6 \u4f18\u5148\u961f\u5217\u662f\u80fd\u591f \u5feb\u901f \u7684\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a \u8fd4\u56de\u6700\u5927\u503c \u8fd4\u56de\u6700\u5927\u503c\u5e76\u5220\u9664\u8be5\u5143\u7d20 \u5c06\u4efb\u610f\u4e00\u4e2a\u5df2\u5728\u4f18\u5148\u961f\u5217\u4e2d\u7684\u5143\u7d20\u589e\u52a0k. \u63d2\u5165\u4e00\u4e2a\u4efb\u610f\u503c \u80fd\u591f\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5feb\u901f\u7684\u5b9e\u73b0\u4ee5\u4e0a\u6240\u6709\u64cd\u4f5c\u7684\u53eb\u505a\u4f18\u5148\u961f\u5217\u3002\u4f7f\u7528\u5806\u6765\u5b9e\u73b0\u4f18\u5148\u961f\u5217\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5728 o(lgn) \u5b8c\u6210\u3002 \u8fd4\u56de\u6700\u5927\u503c \u4f7f\u7528\u6700\u5927\u5806\u5b9e\u73b0\u4f18\u5148\u961f\u5217\u8fd9\u79cd\u7ed3\u6784\uff0c\u76f4\u63a5\u8fd4\u56de A[0] \u5c31\u662f\u6700\u5927\u503c\u3002 \u8fd4\u56de\u6700\u5927\u503c\u5e76\u5220\u9664\u8be5\u5143\u7d20 \u9996\u5148\u8f93\u51fa A[0] , \u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9 A[0] ,\u8c03\u6574\u5806\u4f7f\u4e4b\u7b26\u5408\u6700\u5927\u5806\u6027\u8d28\u3002 int maxP ( vector < int > & A ){ int maxV = A [ 0 ]; A [ 0 ] = A [ A . size () - 1 ]; int heap_size = A . size () - 1 ; max_heap ( A , heap_size , 0 ); return maxV ; }","title":"\u5806"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_1","text":"\u5806\uff0c\u6216\u8005\u66f4\u51c6\u786e\u7684\u53eb\u4f5c\u4e8c\u53c9\u5806\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u901a\u5e38\u5206\u4e3a\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\u3002\u6700\u5927\u5806\u662f\u6307\u5806\u9876\u7684\u5143\u7d20\u6700\u5927\uff0c\u5806\u9876\u7684\u5de6\u53f3\u5b69\u5b50\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5b83\uff0c\u7136\u540e\u5de6\u53f3\u5b50\u6811\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002\u6700\u5c0f\u5806\u662f\u6307\u5806\u9876\u7684\u5143\u7d20\u6700\u5c0f\uff0c\u5de6\u53f3\u5b69\u5b50\u5927\u4e8e\u7b49\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5de6\u53f3\u5b50\u6811\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5806\u662f\u9012\u5f52\u5b9a\u4e49\u4e86\uff0c\u800c\u4e14\u662f\u4e00\u79cd\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u8282\u70b9\u4e4b\u95f4\u662f\u6709\u5927\u5c0f\u6b21\u5e8f\u5173\u7cfb\u7684\u3002\u4f46\u662f\u5de6\u53f3\u5b50\u6811\u662f\u6ca1\u6709\u987a\u5e8f\u7684\u3002\u800c\u4e8c\u53c9\u641c\u7d22\u6811\u5de6\u53f3\u5b69\u5b50\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u4e0d\u80fd\u98a0\u5012\u3002 \u65e2\u7136\u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u6765\u7b80\u4fbf\u7684\u8868\u793a\u4e00\u68f5\u6811\u3002\u5047\u8bbe\u4e00\u4e2a\u8282\u70b9\u7684\u4e0b\u6807\u662f i ,\u90a3\u4e48\u5b83\u7684\u5de6\u5b69\u5b50\u4e3a 2*i ,\u53f3\u5b69\u5b50\u4e3a 2*i+1 ,\u7236\u8282\u70b9\u4e3a i/2 . \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e8c\u53c9\u5806\u7684\u6784\u5efa\uff0c\u8c03\u6574\u548c\u6709\u5173\u5e94\u7528(\u5806\u6392\u5e8f\u548c\u4f18\u5148\u961f\u5217)\u3002\u6ce8\u610f\u8fd9\u91cc\u5047\u8bbe\u6839\u8282\u70b9\u7684\u6807\u53f7\u662f1. \u5982\u679c\u6839\u8282\u70b9\u662f\u4ece0\u5f00\u59cb\u6807\u53f7\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9 i , \u5de6\u5b69\u5b50\u4e3a 2*i+1 ,\u53f3\u5b69\u5b50\u4e3a 2*i+2 ,\u7236\u8282\u70b9\u4e3a (i-1)/2 . // \u6839\u8282\u70b9\u4ece0\u5f00\u59cb\u6807\u53f7\uff0c\u5bf9\u4e8e\u8282\u70b9i\uff0c\u6c42\u5176\u5de6\u5b69\u5b50\uff0c\u53f3\u5b69\u5b50\u548c\u7236\u8282\u70b9 inline int left ( int i ){ return ( i << 1 ) + 1 ; } inline int right ( int i ){ return ( i << 1 ) + 2 ; } inline int parent ( int i ){ if ( i == 0 ) return - 1 ; return ( i - 1 ) >> 1 ; }","title":"\u5806"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#1","text":"\u6700\u5927\u5806\u5c31\u662f\u6ee1\u8db3\u7236\u8282\u70b9\u5927\u4e8e\u7b49\u4e8e\u5b50\u8282\u70b9\u7684\u5806\u3002\u6700\u5927\u5806\u7684\u6839\u8282\u70b9\u662f\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5927\u7684(\u4f46\u53ef\u80fd\u4e0d\u662f\u552f\u4e00\u7684\u6700\u5927\u7684\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5927\u4e8e\u7b49\u4e8e)\u3002","title":"1. \u6700\u5927\u5806"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#11","text":"\u5047\u8bbe A \u662f\u5b58\u50a8\u5806\u7684\u6570\u7ec4, A.length() \u8868\u793a\u6570\u7ec4\u7684\u5927\u5c0f\uff0c heap_size \u8868\u793a\u5806\u4e2d\u5143\u7d20\u7684\u4e2a\u6570, \u6ee1\u8db3 heap_size <= A.length() .\u5047\u8bbe\u6211\u4eec\u9700\u8981\u8c03\u6574\u8282\u70b9 i \u4ee5\u4f7f\u5f97\u5806\u91cd\u65b0\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28(\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u53ea\u6709\u8282\u70b9i\u662f\u4e0d\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\u7684)\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u627e\u51fa\u8282\u70b9 i \u7684\u5de6\u53f3\u5b69\u5b50 l , r ; \u5982\u679c l , r \u8d85\u8fc7\u4e86\u5806\u7684\u5927\u5c0f\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u5982\u679cA[i]\u5927\u4e8e\u7b49\u4e8e l , r ,\u76f4\u63a5\u8fd4\u56de \u627e\u5230 l , r \u4e2d\u7684\u8f83\u5927\u8005,\u8bb0\u4e3a maxIndex \uff0c\u548c A[i] \u4ea4\u6362 \u4ee4i = maxIndex, \u8f6c\u52301\u3002 /** * \u8c03\u6574\u8282\u70b9i,\u4f7f\u5f97\u6574\u4e2a\u5806\u4fdd\u6301\u6700\u5927\u5806\u7684\u6027\u8d28 * @param A * @param i */ void max_heap ( vector < int > & A , int i ){ int heap_size = A . size (); // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09 if ( i >= heap_size || i < 0 ) return ; auto l = left ( i ); auto r = right ( i ); // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86 if ( l >= heap_size ) return ; int maxIndex = - 1 ; if ( r >= heap_size ){ if ( A [ i ] >= A [ l ]) return ; maxIndex = l ; } else { // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5927\uff0c\u5219\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574 if ( A [ i ] >= A [ l ] && A [ i ] >= A [ r ]) return ; // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a A [ l ] >= A [ r ] ? maxIndex = l : maxIndex = r ; } swap ( A [ i ], A [ maxIndex ]); max_heap ( A , maxIndex ); } /** * \u8c03\u6574\u8282\u70b9i,\u4f7f\u5f97\u6574\u4e2a\u5806\u4fdd\u6301\u6700\u5c0f\u5806\u7684\u6027\u8d28 * @param A * @param i */ void min_heap ( vector < int > & A , int i ){ int heap_size = A . size (); // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09 if ( i >= heap_size || i < 0 ) return ; auto l = left ( i ); auto r = right ( i ); // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86 if ( l >= heap_size ) return ; int minIndex = - 1 ; if ( r >= heap_size ) { if ( A [ i ] <= A [ l ]) return ; minIndex = l ; } else { // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5c0f\uff0c\u5219\u6ee1\u8db3\u6700\u5c0f\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574 if ( A [ i ] <= A [ l ] && A [ i ] <= A [ r ]) return ; // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a A [ l ] <= A [ r ] ? minIndex = l : minIndex = r ; } swap ( A [ i ], A [ minIndex ]); min_heap ( A , minIndex ); }","title":"1.1 \u8c03\u6574\u6700\u5927\u5806"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#12","text":"\u5982\u4f55\u4ece\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4\u5efa\u7acb\u4e00\u4e2a\u5806\u662f\u5806\u64cd\u4f5c\u4e2d\u4e00\u4e2a\u57fa\u672c\u7684\uff0c\u4f46\u5f88\u91cd\u8981\u7684\u95ee\u9898\uff0c\u5b83\u901a\u5e38\u662f\u5f88\u591a\u95ee\u9898\u7684\u7b2c\u4e00\u6b65\u3002 \u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u5305\u542bn\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5f62\u6210\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0cn - ([n/2] + 1) + 1\u4e2a\u5143\u7d20\u662f\u53f6\u5b50\u8282\u70b9\u3002\u6211\u4eec\u53ea\u9700\u8981\u9488\u5bf9\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u4e4b\u5916\u7684\u8282\u70b9\u8c03\u7528\u4e0a\u9762\u7684\u91cd\u5efa\u5806\u7684\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u6700\u5927\u5806\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n). /** * \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u6700\u5927\u5806 * @param A */ void build_max_heap ( vector < int > & A ){ int leaf = A . size () / 2 ; for ( int i = leaf - 1 ; i >= 0 ; -- i ) { max_heap ( A , i ); } } /** * \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u6700\u5c0f\u5806 * @param A */ void build_min_heap ( vector < int > & A ){ int leaf = A . size () / 2 ; for ( int i = leaf - 1 ; i >= 0 ; -- i ) { min_heap ( A , i ); } }","title":"1.2 \u5efa\u5806"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#2","text":"\u5806\u6392\u5e8f\u5c31\u662f\u5229\u7528\u5806\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\u5b9e\u73b0\u6392\u5e8f\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u8fd9\u91cc\u4ee5\u6700\u5927\u5806\u4e3a\u4f8b\u6765\u8bf4\u660e\u3002 \u9996\u5148\u628a\u65e0\u5e8f\u6570\u7ec4\u91cd\u5efa\u4e00\u4e2a\u6700\u5927\u5806\uff0c\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u51fd\u6570\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u8f7b\u677e\u7684\u5728O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u3002 \u6b64\u65f6A[0]\u5b58\u50a8\u7684\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u503c\uff0c\u5c06\u5b83\u4e0e\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7136\u540e\u5806\u7684\u957f\u5ea6\u51cf\u5c111\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u518d\u5f53\u4f5c\u5806\u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u4e86\uff0c\u7136\u540e\u8c03\u6574\u5806\u4f7f\u4e4b\u7b26\u5408\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 \u91cd\u590d\u8fd9\u4e2a\u6b65\u9aa4\u76f4\u5230\u6240\u6709\u7684\u5143\u7d20\u653e\u5230\u4e86\u6b63\u786e\u7684\u4f4d\u7f6e\u4e4b\u4e0a\u3002 void max_heap ( vector < int > & A , int heap_size , int i ){ // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09 if ( i >= heap_size || i < 0 ) return ; auto l = left ( i ); auto r = right ( i ); // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86 if ( l >= heap_size ) return ; int maxIndex = - 1 ; if ( r >= heap_size ){ if ( A [ i ] >= A [ l ]) return ; maxIndex = l ; } else { // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5927\uff0c\u5219\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574 if ( A [ i ] >= A [ l ] && A [ i ] >= A [ r ]) return ; // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a A [ l ] >= A [ r ] ? maxIndex = l : maxIndex = r ; } swap ( A [ i ], A [ maxIndex ]); max_heap ( A , heap_size , maxIndex ); } void build_max_heap ( vector < int > & A ){ int leaf = A . size () / 2 ; for ( int i = leaf - 1 ; i >= 0 ; -- i ) { max_heap ( A , A . size (), i ); } } void sort_with_max_heap ( vector < int > & v ){ build_max_heap ( v ); int heap_size = v . size (); while ( heap_size ){ swap ( v [ 0 ], v [ heap_size - 1 ]); heap_size -- ; max_heap ( v , heap_size , 0 ); } } \u5806\u6392\u5e8f\u7684\u65f6\u95f4\u6027\u80fd\u662fnlogn,\u4f46\u662f\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\u66f4\u597d\u4e00\u4e9b\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u3002","title":"2. \u5806\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#3","text":"\u4f18\u5148\u961f\u5217\u662f\u80fd\u591f \u5feb\u901f \u7684\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a \u8fd4\u56de\u6700\u5927\u503c \u8fd4\u56de\u6700\u5927\u503c\u5e76\u5220\u9664\u8be5\u5143\u7d20 \u5c06\u4efb\u610f\u4e00\u4e2a\u5df2\u5728\u4f18\u5148\u961f\u5217\u4e2d\u7684\u5143\u7d20\u589e\u52a0k. \u63d2\u5165\u4e00\u4e2a\u4efb\u610f\u503c \u80fd\u591f\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5feb\u901f\u7684\u5b9e\u73b0\u4ee5\u4e0a\u6240\u6709\u64cd\u4f5c\u7684\u53eb\u505a\u4f18\u5148\u961f\u5217\u3002\u4f7f\u7528\u5806\u6765\u5b9e\u73b0\u4f18\u5148\u961f\u5217\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5728 o(lgn) \u5b8c\u6210\u3002 \u8fd4\u56de\u6700\u5927\u503c \u4f7f\u7528\u6700\u5927\u5806\u5b9e\u73b0\u4f18\u5148\u961f\u5217\u8fd9\u79cd\u7ed3\u6784\uff0c\u76f4\u63a5\u8fd4\u56de A[0] \u5c31\u662f\u6700\u5927\u503c\u3002 \u8fd4\u56de\u6700\u5927\u503c\u5e76\u5220\u9664\u8be5\u5143\u7d20 \u9996\u5148\u8f93\u51fa A[0] , \u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9 A[0] ,\u8c03\u6574\u5806\u4f7f\u4e4b\u7b26\u5408\u6700\u5927\u5806\u6027\u8d28\u3002 int maxP ( vector < int > & A ){ int maxV = A [ 0 ]; A [ 0 ] = A [ A . size () - 1 ]; int heap_size = A . size () - 1 ; max_heap ( A , heap_size , 0 ); return maxV ; }","title":"3. \u4f18\u5148\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/","text":"\u591a\u53c9\u6811 \u00b6 \u8bb0\u5f55\u4e0d\u662f\u4e8c\u53c9\u6811\u7684\u5176\u4ed6\u6811\u578b\u7ed3\u6784 1. \u4e00\u822c\u6811 \u00b6 \u5b66\u4e60\u6811\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u505a\u4e86\u5927\u91cf\u4e8c\u53c9\u6811\u7684\u9898\u76ee\uff0c\u4e86\u89e3\u4e86\u4e8c\u53c9\u6811\u7684\u8868\u793a\u7ed3\u6784\u548c\u5404\u79cd\u64cd\u4f5c\u3002\u4f46\u662f\u5f53\u9047\u5230\u666e\u901a\u7684\u6811\u7684\u65f6\u5019\uff0c\u4e00\u65f6\u7adf\u4e0d\u77e5\u9053\u5982\u4f55\u8868\u793a\u3002\u5176\u5b9e\u6811\u5c31\u662f\u6ca1\u6709\u73af\u7684\u56fe\u3002\u6240\u4ee5\u7528\u6765\u8868\u793a\u56fe\u7684\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u822c\u7684\u6811\u7ed3\u6784\u3002 1.1 \u8868\u793a \u00b6 \u90bb\u63a5\u8868 \u7528\u4e00\u4e2a\u4e8c\u7ef4\u7684\u6570\u7ec4(\u6216\u8005\u94fe\u8868)\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u76f8\u90bb\u7684\u8282\u70b9\u6709\u54ea\u4e9b\u3002 \u90bb\u63a5\u77e9\u9635 \u7528\u4e00\u4e2a\u77e9\u9635\u8868\u793a\u54ea\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u76f4\u63a5\u76f8\u8fde\u3002 1.2 \u5e94\u7528 \u00b6 1.2.1 \u65e0\u6839\u6811\u5316\u4e3a\u6709\u6839\u6811 \u00b6 \u5c06\u4e00\u68f5\u6811\u8f6c\u6362\u6210\u4ee5\u5176\u4e2d\u67d0\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u6811\u3002 hihocoder 1542 #include <bits/stdc++.h> using namespace std ; const int maxn = 1005 ; vector < int > v [ maxn ]; int n , rt ; int par [ maxn ]; void dfs ( int x , int p ) { par [ x ] = p ; for ( int i = 0 ; i < v [ x ]. size (); i ++ ) { int toit = v [ x ][ i ]; if ( toit != p ) dfs ( toit , x ); } } int main () { cin >> n >> rt ; int a , b ; for ( int i = 1 ; i < n ; i ++ ) { cin >> a >> b ; v [ a ]. push_back ( b ); v [ b ]. push_back ( a ); } dfs ( rt , 0 ); for ( int i = 1 ; i <= n ; i ++ ) cout << par [ i ] << ( i == n ? '\\n' : ' ' ); return 0 ; } 2. \u970d\u592b\u66fc\u7f16\u7801 \u00b6 \u970d\u592b\u66fc\u7f16\u7801\u662f\u4e00\u79cd\u65e0\u635f\u7f16\u7801\u65b9\u6cd5\uff0c\u5b83\u662f\u65e0\u635f\u7f16\u7801\u65b9\u6848\u4e2d\u6700\u4f18\u7684\uff0c\u57fa\u672c\u601d\u60f3\u662f\u7ed9\u51fa\u73b0\u9891\u7387\u9ad8\u7684\u5b57\u7b26\u4ee5\u8f83\u77ed\u7684\u7f16\u7801\uff0c\u7ed9\u51fa\u73b0\u9891\u7387\u4f4e\u7684\u5b57\u7b26\u4ee5\u957f\u7684\u7f16\u7801\u3002\u672c\u6587\u5c06\u4ecb\u7ecd\u970d\u592b\u66fc\u7f16\u7801\u7684\u7b97\u6cd5\u6b65\u9aa4\u548c\u5177\u4f53\u5b9e\u73b0\u3002 2.1 \u4e8c\u53c9\u970d\u592b\u66fc\u7f16\u7801 \u00b6 \u524d\u7f00\u7801 \uff1a \u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7f16\u7801\u662f\u5176\u4ed6\u7f16\u7801\u7684\u524d\u7f00\uff0c\u8fd9\u6837\u7684\u4e00\u5957\u7f16\u7801\u4f53\u7cfb\u53eb\u505a\u524d\u7f00\u7801\u3002\u4f8b\u5982a\u7684\u7f16\u7801\u662f010\uff0c\u90a3\u4e48\u4e0d\u4f1a\u5b58\u5728\u7f16\u7801\u662f0\uff0c01\uff0c0101\uff0c0100\uff0c010**\u7684\u5b57\u7b26\u3002\u524d\u7f00\u7801\u786e\u4fdd\u4e86\u89e3\u7801\u65f6\u7684\u552f\u4e00\u6027\u3002 \u970d\u592b\u66fc\u7f16\u7801\u7684\u7b97\u6cd5\u6b65\u9aa4\uff1a 1. \u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9891\u7387\uff0c\u6309\u7167\u9891\u7387\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002 2. \u627e\u5230\u51fa\u73b0\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u5b57\u7b26\uff0c\u628a\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5de6\u53f3\u5b69\u5b50\uff0c\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5b83\u4eec\u5171\u540c\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u7236\u4eb2\u8282\u70b9\u7684\u503c\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u9891\u7387\u7684\u548c\u3002 3. \u91cd\u590d\u6b65\u9aa42\u76f4\u5230\u603b\u6982\u7387\u4e3a1\u4e3a\u4e4b\u3002 4. \u4ee5\u4e0a\u6b65\u9aa4\u6784\u9020\u4e86\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u6839\u7684\u6982\u7387\u662f1.\u4ece\u6839\u5f00\u59cb\uff0c\u9012\u5f52\u7684\u6807\u8bb0\u6bcf\u4e2a\u8282\u70b9\uff0c\u5de6\u5b69\u5b50\u6807\u8bb0\u4e3a0\uff0c\u53f3\u5b69\u5b50\u6807\u8bb0\u4e3a1\uff0c\u76f4\u5230\u5230\u8fbe\u53f6\u8282\u70b9\u3002 5. \u4ece\u8ddf\u51fa\u53d1\u5230\u6bcf\u4e2a\u53f6\u8282\u70b9\u7ecf\u8fc7\u76840--1\u8def\u5f84\u5c31\u662f\u8be5\u5b57\u7b26\u7684\u7f16\u7801\u3002 \u4e0b\u9762\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a \u5047\u8bbe\u4e00\u4e2a\u6587\u4ef6\u4e2d\u53ea\u5305\u542ba,b,c,d,e,f\u516d\u79cd\u5b57\u7b26\uff0c\u5b83\u4eec\u7684\u51fa\u73b0\u9891\u7387\u5982\u4e0b\u8868\u6240\u793a\uff1a a b c d e f \u51fa\u73b0\u6b21\u6570 45 13 12 16 9 5 \u51fa\u73b0\u9891\u7387 0.45 0.13 0.12 0.16 0.09 0.05 \u7b2c\u4e00\u6b65\uff0c\u627e\u5230\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\uff0c\u5e94\u8be5\u662fe,f,\u6211\u4eec\u628ae\u548cf\u7684\u6839\u8bb0\u4f5cef\uff0c\u8fd9\u4e2a\u65f6\u5019\u6784\u9020\u4e86\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u7684\u6839\u662fef,\u9891\u7387\u662f(9+5)/100 = 0.14. \u7b2c\u4e8c\u6b65\uff0c\u7528ef\u4ee3\u66ffe\u548cf\u4e4b\u540e\uff0c\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fb,c,\u6211\u4eec\u628ab\u548cc\u7684\u6839\u8bb0\u4f5cbc,\u8fd9\u4e2abc\u7684\u9891\u7387\u662f(12+13)/100 = 0.25. \u7b2c\u4e09\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u4f4e\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fd\u548cef. \u6211\u4eec\u628ad\u548cef\u7684\u6839\u8bb0\u4f5cdef,\u5b83\u7684\u9891\u7387\u662f(16+14)/100 = 0.3. \u7b2c\u56db\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u503c\u5408\u5e76\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fbc\u548cdef,\u6211\u4eec\u8bb0\u4f5cbcdef,\u5b83\u7684\u9891\u7387\u662f0.55. \u7b2c\u4e94\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u503c\u5408\u5e76\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ea\u5269\u4e0b\u4e24\u4e2a\u503c\u4e86\uff0c\u5c31\u662fa\u548cbcde,\u5b83\u4eec\u548c\u7684\u9891\u7387\u662f1. \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u6700\u7ec8\u5f62\u6210\u4e86\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u8c03\u6574\u4e00\u4e0b\u4f4d\u7f6e\uff0c\u4f7f\u4e4b\u66f4\u597d\u770b\u4e00\u4e9b\u3002\u7f16\u53f7\u4e4b\u540e\u7684\u60c5\u51b5\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u4ece\u4e2d\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\uff1a a b c d e f 00 0100 0101 0111 01100 01101 \u8fd9\u5c31\u662f\u6574\u4e2a\u970d\u592b\u66fc\u7f16\u7801\u8fc7\u7a0b\u3002\u9664\u4e86\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u8fdb\u5236\u7f16\u7801\uff0c\u53ea\u8981\u6269\u5c55\u5206\u652f\u7684\u6570\u76ee\u5c31\u53ef\u4ee5\u4e86\u3002 2.2 N\u53c9\u970d\u592b\u66fc\u7f16\u7801 \u00b6 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u8fd8\u662f\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u7f16\u7801\u7684\u6570\u5b57\u5141\u8bb8\u4f7f\u75280\uff0c1\uff0c2\u4e09\u4e2a\u6570\u5b57\u3002\u90a3\u4e48\u970d\u592b\u66fc\u7f16\u7801\u7684\u6b65\u9aa4\u53d8\u4e3a\uff1a \u8bbe\u5b57\u7b26\u6570\u91cf\u4e3aK\uff0c\u5219\u7b2c\u4e00\u6b21\u9009\u62e9num = K-2*[(K-1)/2] ,[]\u4ee3\u8868\u4e0b\u53d6\u6574\u7684\u610f\u601d\u3002\u8fd9\u91ccK=6\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u5bfb\u627e2\u4e2a\u9891\u7387\u6700\u4f4e\u7684\u5b57\u7b26\uff0ce,f.\u5982\u679cnum=0,\u53d62\uff0c\u5982\u679cnum=1,\u53d63. \u628a\u627e\u51fa\u6765\u7684\u5b57\u7b26\u7684\u6982\u7387\u5408\u5e76\u4f5c\u4e3a\u65b0\u7684\u4e00\u9879\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u539f\u6765\u7684\u5220\u6389\uff0c\u7ee7\u7eed\u75281\u4e2d\u7684\u65b9\u6cd5\u5bfb\u627e\u76f4\u5230\u6700\u540e\u5269\u4e0b\u4e09\u4e2a\u4e3a\u6b62\u3002 \u5177\u4f53\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5177\u4f53\u7684\u8fc7\u7a0b\u4e3a\uff1a \u8fd9\u4e2a\u65f6\u5019\uff0c\u5f97\u5230\u7684\u6700\u4f18\u7f16\u7801\u662f\uff1a a d c b e f 0 2 10 12 110 111 \u4e8e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u63a8\u5e7f\u5230N\u53c9\u970d\u592b\u66fc\u7f16\u7801\uff0c\u601d\u60f3\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u8d2a\u5fc3\u6cd5\u548c\u524d\u7f00\u7801\u3002 2.3 \u4e8c\u53c9\u54c8\u592b\u66fc\u7f16\u7801\u7684\u5b9e\u73b0 \u00b6 \u4e0b\u9762\u7ed9\u51fa\u4e8c\u53c9\u970d\u592b\u66fc\u7f16\u7801\u7684C++\u5b9e\u73b0\u7684\u7248\u672c\uff1a struct Node { int label ; // \u8282\u70b9\u7684\u7f16\u7801\uff0c 0 \u6216\u8005 1 char c ; // \u8282\u70b9\u8868\u793a\u7684\u5b57\u7b26 Node * left ; Node * right ; Node () : label ( - 1 ), left ( nullptr ), right ( nullptr ){} Node ( char cc ) : label ( - 1 ), c ( cc ), left ( nullptr ), right ( nullptr ){} Node ( int la ) : label ( la ), left ( nullptr ), right ( nullptr ){} }; /** * \u8f93\u51fa\u5b57\u7b26\u7684\u7f16\u7801 * @param root * @param s * @param re */ void dfs ( Node * root , string & s , map < char , string > & re ){ if ( ! root ) return ; if ( ! root -> left && ! root -> right ){ re [ root -> c ] = s + to_string ( root -> label ); s . clear (); return ; } else { s += to_string ( root -> label ); string s1 ( s ); string s2 ( s ); if ( root -> left ) dfs ( root -> left , s1 , re ); if ( root -> right ) dfs ( root -> right , s2 , re ); } } /** * \u54c8\u592b\u66fc\u7f16\u7801 * @param source \u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9891\u7387 * @return \u6bcf\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u7f16\u7801 */ map < char , string > huff ( map < char , double > & source ){ // 1. \u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784 multimap < double , Node *> tree ; for ( auto iter : source ){ Node * newNode = new Node ( iter . first ); tree . insert ( make_pair ( iter . second , newNode )); } // 2. \u6784\u5efa\u54c8\u592b\u66fc\u6811 Node * newNode ; while ( tree . size () > 1 ){ auto ff = tree . begin (); auto ss = ++ ( tree . begin ()); newNode = new Node (); newNode -> left = ff -> second ; ff -> second -> label = 0 ; // \u5de6\u5b50\u6811\u7f16\u7801\u4e3a0 newNode -> right = ss -> second ; ss -> second -> label = 1 ; // \u53f3\u5b50\u6811\u7f16\u7801\u4e3a1 tree . insert ( make_pair ( ff -> first + ss -> first , newNode )); tree . erase ( ff ); tree . erase ( ss ); } newNode -> label = 0 ; // \u6839\u8282\u70b9\u7f16\u7801\u4e3a0 // 3. \u8f93\u51fa\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7f16\u7801 Node * root = newNode ; string tmp = \"\" ; map < char , string > re ; dfs ( root , tmp , re ); return re ; } import heapq class Node : def __init__ ( self , left = None , right = None , char = None , double ): self . left = left self . right = right self . char = char self . double = double def huffman ( c ): \"\"\" c: (double, char) \u6bcf\u4e2achar\u51fa\u73b0\u7684\u9891\u7387 \"\"\" heap = heapq . heapify () for char , double in c : node = Node ( char = char , double = double ) heapq . heappush ( heap , [ double , node ]) while len ( heap ) > 1 : a = heapq . heappop ( heap ) b = heaq . heappop ( heap ) node = Node ( double = a [ 0 ] + b [ 0 ]) node . left = a node . right = b heapq . heappush ( heap , [ a [ 0 ] + b [ 0 ], node ]) root = heap [ 0 ] return root","title":"\u591a\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_1","text":"\u8bb0\u5f55\u4e0d\u662f\u4e8c\u53c9\u6811\u7684\u5176\u4ed6\u6811\u578b\u7ed3\u6784","title":"\u591a\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#1","text":"\u5b66\u4e60\u6811\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u505a\u4e86\u5927\u91cf\u4e8c\u53c9\u6811\u7684\u9898\u76ee\uff0c\u4e86\u89e3\u4e86\u4e8c\u53c9\u6811\u7684\u8868\u793a\u7ed3\u6784\u548c\u5404\u79cd\u64cd\u4f5c\u3002\u4f46\u662f\u5f53\u9047\u5230\u666e\u901a\u7684\u6811\u7684\u65f6\u5019\uff0c\u4e00\u65f6\u7adf\u4e0d\u77e5\u9053\u5982\u4f55\u8868\u793a\u3002\u5176\u5b9e\u6811\u5c31\u662f\u6ca1\u6709\u73af\u7684\u56fe\u3002\u6240\u4ee5\u7528\u6765\u8868\u793a\u56fe\u7684\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u822c\u7684\u6811\u7ed3\u6784\u3002","title":"1. \u4e00\u822c\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#11","text":"\u90bb\u63a5\u8868 \u7528\u4e00\u4e2a\u4e8c\u7ef4\u7684\u6570\u7ec4(\u6216\u8005\u94fe\u8868)\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u76f8\u90bb\u7684\u8282\u70b9\u6709\u54ea\u4e9b\u3002 \u90bb\u63a5\u77e9\u9635 \u7528\u4e00\u4e2a\u77e9\u9635\u8868\u793a\u54ea\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u76f4\u63a5\u76f8\u8fde\u3002","title":"1.1 \u8868\u793a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#12","text":"","title":"1.2 \u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#121","text":"\u5c06\u4e00\u68f5\u6811\u8f6c\u6362\u6210\u4ee5\u5176\u4e2d\u67d0\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u6811\u3002 hihocoder 1542 #include <bits/stdc++.h> using namespace std ; const int maxn = 1005 ; vector < int > v [ maxn ]; int n , rt ; int par [ maxn ]; void dfs ( int x , int p ) { par [ x ] = p ; for ( int i = 0 ; i < v [ x ]. size (); i ++ ) { int toit = v [ x ][ i ]; if ( toit != p ) dfs ( toit , x ); } } int main () { cin >> n >> rt ; int a , b ; for ( int i = 1 ; i < n ; i ++ ) { cin >> a >> b ; v [ a ]. push_back ( b ); v [ b ]. push_back ( a ); } dfs ( rt , 0 ); for ( int i = 1 ; i <= n ; i ++ ) cout << par [ i ] << ( i == n ? '\\n' : ' ' ); return 0 ; }","title":"1.2.1 \u65e0\u6839\u6811\u5316\u4e3a\u6709\u6839\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#2","text":"\u970d\u592b\u66fc\u7f16\u7801\u662f\u4e00\u79cd\u65e0\u635f\u7f16\u7801\u65b9\u6cd5\uff0c\u5b83\u662f\u65e0\u635f\u7f16\u7801\u65b9\u6848\u4e2d\u6700\u4f18\u7684\uff0c\u57fa\u672c\u601d\u60f3\u662f\u7ed9\u51fa\u73b0\u9891\u7387\u9ad8\u7684\u5b57\u7b26\u4ee5\u8f83\u77ed\u7684\u7f16\u7801\uff0c\u7ed9\u51fa\u73b0\u9891\u7387\u4f4e\u7684\u5b57\u7b26\u4ee5\u957f\u7684\u7f16\u7801\u3002\u672c\u6587\u5c06\u4ecb\u7ecd\u970d\u592b\u66fc\u7f16\u7801\u7684\u7b97\u6cd5\u6b65\u9aa4\u548c\u5177\u4f53\u5b9e\u73b0\u3002","title":"2. \u970d\u592b\u66fc\u7f16\u7801"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#21","text":"\u524d\u7f00\u7801 \uff1a \u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7f16\u7801\u662f\u5176\u4ed6\u7f16\u7801\u7684\u524d\u7f00\uff0c\u8fd9\u6837\u7684\u4e00\u5957\u7f16\u7801\u4f53\u7cfb\u53eb\u505a\u524d\u7f00\u7801\u3002\u4f8b\u5982a\u7684\u7f16\u7801\u662f010\uff0c\u90a3\u4e48\u4e0d\u4f1a\u5b58\u5728\u7f16\u7801\u662f0\uff0c01\uff0c0101\uff0c0100\uff0c010**\u7684\u5b57\u7b26\u3002\u524d\u7f00\u7801\u786e\u4fdd\u4e86\u89e3\u7801\u65f6\u7684\u552f\u4e00\u6027\u3002 \u970d\u592b\u66fc\u7f16\u7801\u7684\u7b97\u6cd5\u6b65\u9aa4\uff1a 1. \u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9891\u7387\uff0c\u6309\u7167\u9891\u7387\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002 2. \u627e\u5230\u51fa\u73b0\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u5b57\u7b26\uff0c\u628a\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5de6\u53f3\u5b69\u5b50\uff0c\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5b83\u4eec\u5171\u540c\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u7236\u4eb2\u8282\u70b9\u7684\u503c\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u9891\u7387\u7684\u548c\u3002 3. \u91cd\u590d\u6b65\u9aa42\u76f4\u5230\u603b\u6982\u7387\u4e3a1\u4e3a\u4e4b\u3002 4. \u4ee5\u4e0a\u6b65\u9aa4\u6784\u9020\u4e86\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u6839\u7684\u6982\u7387\u662f1.\u4ece\u6839\u5f00\u59cb\uff0c\u9012\u5f52\u7684\u6807\u8bb0\u6bcf\u4e2a\u8282\u70b9\uff0c\u5de6\u5b69\u5b50\u6807\u8bb0\u4e3a0\uff0c\u53f3\u5b69\u5b50\u6807\u8bb0\u4e3a1\uff0c\u76f4\u5230\u5230\u8fbe\u53f6\u8282\u70b9\u3002 5. \u4ece\u8ddf\u51fa\u53d1\u5230\u6bcf\u4e2a\u53f6\u8282\u70b9\u7ecf\u8fc7\u76840--1\u8def\u5f84\u5c31\u662f\u8be5\u5b57\u7b26\u7684\u7f16\u7801\u3002 \u4e0b\u9762\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a \u5047\u8bbe\u4e00\u4e2a\u6587\u4ef6\u4e2d\u53ea\u5305\u542ba,b,c,d,e,f\u516d\u79cd\u5b57\u7b26\uff0c\u5b83\u4eec\u7684\u51fa\u73b0\u9891\u7387\u5982\u4e0b\u8868\u6240\u793a\uff1a a b c d e f \u51fa\u73b0\u6b21\u6570 45 13 12 16 9 5 \u51fa\u73b0\u9891\u7387 0.45 0.13 0.12 0.16 0.09 0.05 \u7b2c\u4e00\u6b65\uff0c\u627e\u5230\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\uff0c\u5e94\u8be5\u662fe,f,\u6211\u4eec\u628ae\u548cf\u7684\u6839\u8bb0\u4f5cef\uff0c\u8fd9\u4e2a\u65f6\u5019\u6784\u9020\u4e86\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u7684\u6839\u662fef,\u9891\u7387\u662f(9+5)/100 = 0.14. \u7b2c\u4e8c\u6b65\uff0c\u7528ef\u4ee3\u66ffe\u548cf\u4e4b\u540e\uff0c\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fb,c,\u6211\u4eec\u628ab\u548cc\u7684\u6839\u8bb0\u4f5cbc,\u8fd9\u4e2abc\u7684\u9891\u7387\u662f(12+13)/100 = 0.25. \u7b2c\u4e09\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u4f4e\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fd\u548cef. \u6211\u4eec\u628ad\u548cef\u7684\u6839\u8bb0\u4f5cdef,\u5b83\u7684\u9891\u7387\u662f(16+14)/100 = 0.3. \u7b2c\u56db\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u503c\u5408\u5e76\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fbc\u548cdef,\u6211\u4eec\u8bb0\u4f5cbcdef,\u5b83\u7684\u9891\u7387\u662f0.55. \u7b2c\u4e94\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u503c\u5408\u5e76\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ea\u5269\u4e0b\u4e24\u4e2a\u503c\u4e86\uff0c\u5c31\u662fa\u548cbcde,\u5b83\u4eec\u548c\u7684\u9891\u7387\u662f1. \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u6700\u7ec8\u5f62\u6210\u4e86\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u8c03\u6574\u4e00\u4e0b\u4f4d\u7f6e\uff0c\u4f7f\u4e4b\u66f4\u597d\u770b\u4e00\u4e9b\u3002\u7f16\u53f7\u4e4b\u540e\u7684\u60c5\u51b5\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u4ece\u4e2d\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\uff1a a b c d e f 00 0100 0101 0111 01100 01101 \u8fd9\u5c31\u662f\u6574\u4e2a\u970d\u592b\u66fc\u7f16\u7801\u8fc7\u7a0b\u3002\u9664\u4e86\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u8fdb\u5236\u7f16\u7801\uff0c\u53ea\u8981\u6269\u5c55\u5206\u652f\u7684\u6570\u76ee\u5c31\u53ef\u4ee5\u4e86\u3002","title":"2.1 \u4e8c\u53c9\u970d\u592b\u66fc\u7f16\u7801"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#22-n","text":"\u4e3e\u4f8b\u6765\u8bf4\uff0c\u8fd8\u662f\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u7f16\u7801\u7684\u6570\u5b57\u5141\u8bb8\u4f7f\u75280\uff0c1\uff0c2\u4e09\u4e2a\u6570\u5b57\u3002\u90a3\u4e48\u970d\u592b\u66fc\u7f16\u7801\u7684\u6b65\u9aa4\u53d8\u4e3a\uff1a \u8bbe\u5b57\u7b26\u6570\u91cf\u4e3aK\uff0c\u5219\u7b2c\u4e00\u6b21\u9009\u62e9num = K-2*[(K-1)/2] ,[]\u4ee3\u8868\u4e0b\u53d6\u6574\u7684\u610f\u601d\u3002\u8fd9\u91ccK=6\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u5bfb\u627e2\u4e2a\u9891\u7387\u6700\u4f4e\u7684\u5b57\u7b26\uff0ce,f.\u5982\u679cnum=0,\u53d62\uff0c\u5982\u679cnum=1,\u53d63. \u628a\u627e\u51fa\u6765\u7684\u5b57\u7b26\u7684\u6982\u7387\u5408\u5e76\u4f5c\u4e3a\u65b0\u7684\u4e00\u9879\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u539f\u6765\u7684\u5220\u6389\uff0c\u7ee7\u7eed\u75281\u4e2d\u7684\u65b9\u6cd5\u5bfb\u627e\u76f4\u5230\u6700\u540e\u5269\u4e0b\u4e09\u4e2a\u4e3a\u6b62\u3002 \u5177\u4f53\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5177\u4f53\u7684\u8fc7\u7a0b\u4e3a\uff1a \u8fd9\u4e2a\u65f6\u5019\uff0c\u5f97\u5230\u7684\u6700\u4f18\u7f16\u7801\u662f\uff1a a d c b e f 0 2 10 12 110 111 \u4e8e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u63a8\u5e7f\u5230N\u53c9\u970d\u592b\u66fc\u7f16\u7801\uff0c\u601d\u60f3\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u8d2a\u5fc3\u6cd5\u548c\u524d\u7f00\u7801\u3002","title":"2.2 N\u53c9\u970d\u592b\u66fc\u7f16\u7801"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#23","text":"\u4e0b\u9762\u7ed9\u51fa\u4e8c\u53c9\u970d\u592b\u66fc\u7f16\u7801\u7684C++\u5b9e\u73b0\u7684\u7248\u672c\uff1a struct Node { int label ; // \u8282\u70b9\u7684\u7f16\u7801\uff0c 0 \u6216\u8005 1 char c ; // \u8282\u70b9\u8868\u793a\u7684\u5b57\u7b26 Node * left ; Node * right ; Node () : label ( - 1 ), left ( nullptr ), right ( nullptr ){} Node ( char cc ) : label ( - 1 ), c ( cc ), left ( nullptr ), right ( nullptr ){} Node ( int la ) : label ( la ), left ( nullptr ), right ( nullptr ){} }; /** * \u8f93\u51fa\u5b57\u7b26\u7684\u7f16\u7801 * @param root * @param s * @param re */ void dfs ( Node * root , string & s , map < char , string > & re ){ if ( ! root ) return ; if ( ! root -> left && ! root -> right ){ re [ root -> c ] = s + to_string ( root -> label ); s . clear (); return ; } else { s += to_string ( root -> label ); string s1 ( s ); string s2 ( s ); if ( root -> left ) dfs ( root -> left , s1 , re ); if ( root -> right ) dfs ( root -> right , s2 , re ); } } /** * \u54c8\u592b\u66fc\u7f16\u7801 * @param source \u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9891\u7387 * @return \u6bcf\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u7f16\u7801 */ map < char , string > huff ( map < char , double > & source ){ // 1. \u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784 multimap < double , Node *> tree ; for ( auto iter : source ){ Node * newNode = new Node ( iter . first ); tree . insert ( make_pair ( iter . second , newNode )); } // 2. \u6784\u5efa\u54c8\u592b\u66fc\u6811 Node * newNode ; while ( tree . size () > 1 ){ auto ff = tree . begin (); auto ss = ++ ( tree . begin ()); newNode = new Node (); newNode -> left = ff -> second ; ff -> second -> label = 0 ; // \u5de6\u5b50\u6811\u7f16\u7801\u4e3a0 newNode -> right = ss -> second ; ss -> second -> label = 1 ; // \u53f3\u5b50\u6811\u7f16\u7801\u4e3a1 tree . insert ( make_pair ( ff -> first + ss -> first , newNode )); tree . erase ( ff ); tree . erase ( ss ); } newNode -> label = 0 ; // \u6839\u8282\u70b9\u7f16\u7801\u4e3a0 // 3. \u8f93\u51fa\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7f16\u7801 Node * root = newNode ; string tmp = \"\" ; map < char , string > re ; dfs ( root , tmp , re ); return re ; } import heapq class Node : def __init__ ( self , left = None , right = None , char = None , double ): self . left = left self . right = right self . char = char self . double = double def huffman ( c ): \"\"\" c: (double, char) \u6bcf\u4e2achar\u51fa\u73b0\u7684\u9891\u7387 \"\"\" heap = heapq . heapify () for char , double in c : node = Node ( char = char , double = double ) heapq . heappush ( heap , [ double , node ]) while len ( heap ) > 1 : a = heapq . heappop ( heap ) b = heaq . heappop ( heap ) node = Node ( double = a [ 0 ] + b [ 0 ]) node . left = a node . right = b heapq . heappush ( heap , [ a [ 0 ] + b [ 0 ], node ]) root = heap [ 0 ] return root","title":"2.3 \u4e8c\u53c9\u54c8\u592b\u66fc\u7f16\u7801\u7684\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/","text":"\u5e76\u67e5\u96c6 \u00b6 \u5e76\u67e5\u96c6\u662f\u7528\u6765\u8868\u793a\u4e00\u7ec4\u4e00\u7ec4\u7684\u6570\u636e\u7684\uff0c\u4f7f\u7528\u5b83\u53ef\u4ee5 1. \u5feb\u901f\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4 2. \u5feb\u901f\u5408\u5e76\u4e24\u4e2a\u7ec4\u4e3a\u4e00\u4e2a\u7ec4 \u5e76\u67e5\u96c6\u5176\u5b9e\u662f\u4e00\u4e2a\u68ee\u6797\uff0c \u68ee\u6797\u4e2d\u6bcf\u68f5\u6811\u8868\u793a\u4e00\u4e2a\u7ec4\uff0c \u7528\u6811\u7684\u6839\u8282\u70b9\u4ee3\u8868\u8be5\u7ec4\u3002 \u67e5\u8be2\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\uff0c \u6cbf\u7740\u6811\u5bfb\u627e\u6839\uff0c\u6bd4\u8f83\u6839\u662f\u5426\u76f8\u540c \u5408\u5e76\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u7ec4\u7684\u65f6\u5019\uff0c \u628a\u4e24\u68f5\u6811\u8fde\u63a5\u5728\u4e00\u8d77\u3002 1. \u5e76\u67e5\u96c6\u7684\u5b9e\u73b0 \u00b6 1.1 \u5b9e\u73b0\u4e00 \u00b6 \u521d\u59cb\u5316\u7684\u65f6\u5019\u8d4b\u503c\u4e3a\u4e0e\u7d22\u5f15\u4e00\u6837\u7684\u503c\u3002 \u5982\u679c array[i] == i\uff0c \u8868\u793a\u662f\u6839\u8282\u70b9\u3002 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \u5408\u5e76\u4e24\u4e2a\u7ec4\u7684\u65f6\u5019\uff0c\u5148\u67e5\u627e\u5230\u5404\u81ea\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9075\u5faa\u5411\u5de6\u5408\u5e76\u539f\u5219\u3002\u4f8b\u5982\uff0c merge(1, 9)\u7684\u65f6\u5019 array[9] = 1 . class BingSet : \"\"\" \u8be5\u5b9e\u73b0\u4e0d\u80fd\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u90fd\u662f\u8def\u5f84\u538b\u7f29\u5230\u6781\u81f4\u7684\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u662f\u5426\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5224\u65ad \u4e3b\u8981\u662f\u5728merge\u7684\u65f6\u5019\u6ca1\u6709\u9012\u5f52\u66f4\u65b0\uff0c\u53ea\u5728parent\u7684\u65f6\u5019\u9012\u5f52\u538b\u7f29\u8def\u5f84\uff0c\u5bfc\u81f4\u53ea\u6709\u6267\u884c\u8fc7parent\u64cd\u4f5c\u7684\u8def\u5f84\u624d\u662f\u538b\u7f29\u7684\u3002 \"\"\" def __init__ ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def compress ( self ): \"\"\" \u4fdd\u8bc1\u538b\u7f29\u5230\u6700\u77ed\u8def\u5f84 \"\"\" for i in self . array : self . parent ( i ) def print ( self ): \"\"\" \u6253\u5370\u5e76\u67e5\u96c6\u5f53\u524d\u7684\u72b6\u6001 \"\"\" print ([ i for i in range ( len ( self . array ))]) print ( self . array ) # \u6d4b\u8bd5\u4ee3\u7801 # \u8282\u70b9\u6570\u91cf n = 20 # \u5408\u5e76\u6570\u91cf m = 10 # \u968f\u673a\u751f\u6210\u6570\u636e merges = [] for i in range ( m ): a = random . randint ( 0 , n - 1 ) b = random . randint ( 0 , n - 1 ) if a != b : merges . append (( a , b )) # \u5408\u5e76\u96c6\u5408 bs = BingSet ( n ) for a , b in merges : bs . merge ( a , b ) bs . print () # \u968f\u673a\u9009\u62e9\u4e00\u7ec4\uff0c\u67e5\u8be2\u662f\u5426\u5408\u5e76\u5230\u4e86\u540c\u4e00\u4e2a\u7ec4\u4e2d for i in range ( 10 ): index = random . randint ( 0 , len ( merges ) - 1 ) p1 = bs . parent ( merges [ index ][ 0 ]) p2 = bs . parent ( merges [ index ][ 1 ]) assert p1 == p2 \u8be5\u65b9\u6cd5\u7684\u95ee\u9898\u662f\u4e0d\u80fd\u5f88\u5feb\u7684\u6c42\u89e3\u6bcf\u4e2a\u7ec4\u6709\u51e0\u4e2a\u5143\u7d20\u3002 \u901a\u8fc7\u89c2\u5bdf\u4e0a\u9762\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5229\u7528 array[i] == i \u6807\u8bb0\u6839\u8282\u70b9\uff0c \u9664\u6b64\u4e4b\u5916\u6ca1\u6709\u5176\u4ed6\u7684\u4fe1\u606f\u4e86\u3002 \u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8d1f\u6570\u6807\u8bb0\u6839\u8282\u70b9\uff0c \u7528\u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u8bb0\u5f55\u96c6\u5408\u4e2d\u6709\u51e0\u4e2a\u5143\u7d20\u3002 1.2 \u5b9e\u73b0\u4e8c \u00b6 \u4e0e\u4e0a\u9762\u7684\u5b9e\u73b0\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u8d1f\u6570\u7684\u7b26\u53f7\u6307\u793a\u6839\uff0c\u5229\u7528\u5176\u7edd\u5bf9\u503c\u6307\u793a\u96c6\u5408\u7684\u5927\u5c0f\u3002 class BingSet : \"\"\" \u8be5\u5b9e\u73b0\u4e0d\u80fd\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u90fd\u662f\u8def\u5f84\u538b\u7f29\u5230\u6781\u81f4\u7684\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u662f\u5426\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5224\u65ad \u4e3b\u8981\u662f\u5728merge\u7684\u65f6\u5019\u6ca1\u6709\u9012\u5f52\u66f4\u65b0\uff0c\u53ea\u5728parent\u7684\u65f6\u5019\u9012\u5f52\u538b\u7f29\u8def\u5f84\uff0c\u5bfc\u81f4\u53ea\u6709\u6267\u884c\u8fc7parent\u64cd\u4f5c\u7684\u8def\u5f84\u624d\u662f\u538b\u7f29\u7684\u3002 \"\"\" def __init__ ( self , n ): self . array = [ - 1 for _ in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] < 0 : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pi ] += self . array [ pj ] # \u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u4e4b\u524d\u5148\u7ef4\u62a4\u96c6\u5408\u91cc\u9762\u5143\u7d20\u7684\u6570\u91cf self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def counti ( self , i ): \"\"\" \u8fd4\u56de i \u6240\u5728\u7ec4\u7684\u6570\u91cf \"\"\" pi = self . parent ( i ) return 0 - self . array [ i ]; def compress ( self ): \"\"\" \u4fdd\u8bc1\u538b\u7f29\u5230\u6700\u77ed\u8def\u5f84 \"\"\" for i in self . array : self . parent ( i ) def print ( self ): \"\"\" \u6253\u5370\u5e76\u67e5\u96c6\u5f53\u524d\u7684\u72b6\u6001 \"\"\" print ([ i for i in range ( len ( self . array ))]) print ( self . array ) # \u8282\u70b9\u6570\u91cf n = 20 # \u5408\u5e76\u6570\u91cf m = 10 # \u968f\u673a\u751f\u6210\u6570\u636e merges = [] for i in range ( m ): a = random . randint ( 0 , n - 1 ) b = random . randint ( 0 , n - 1 ) if a != b : merges . append (( a , b )) # \u5408\u5e76\u96c6\u5408 bs = BingSet ( n ) for a , b in merges : bs . merge ( a , b ) bs . print () # \u968f\u673a\u9009\u62e9\u4e00\u7ec4\uff0c\u67e5\u8be2\u662f\u5426\u5408\u5e76\u5230\u4e86\u540c\u4e00\u4e2a\u7ec4\u4e2d for i in range ( 10 ): index = random . randint ( 0 , len ( merges ) - 1 ) p1 = bs . parent ( merges [ index ][ 0 ]) p2 = bs . parent ( merges [ index ][ 1 ]) assert p1 == p2 2. \u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 200. \u5c9b\u5c7f\u6570\u91cf \u4e2d\u7b49 547. \u670b\u53cb\u5708 \u4e2d\u7b49 684. \u5197\u4f59\u8fde\u63a5 \u4e2d\u7b49 685. \u5197\u4f59\u8fde\u63a5 II \u56f0\u96be 839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4 \u56f0\u96be 924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad \u4e2d\u7b49","title":"\u5e76\u67e5\u96c6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","text":"\u5e76\u67e5\u96c6\u662f\u7528\u6765\u8868\u793a\u4e00\u7ec4\u4e00\u7ec4\u7684\u6570\u636e\u7684\uff0c\u4f7f\u7528\u5b83\u53ef\u4ee5 1. \u5feb\u901f\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4 2. \u5feb\u901f\u5408\u5e76\u4e24\u4e2a\u7ec4\u4e3a\u4e00\u4e2a\u7ec4 \u5e76\u67e5\u96c6\u5176\u5b9e\u662f\u4e00\u4e2a\u68ee\u6797\uff0c \u68ee\u6797\u4e2d\u6bcf\u68f5\u6811\u8868\u793a\u4e00\u4e2a\u7ec4\uff0c \u7528\u6811\u7684\u6839\u8282\u70b9\u4ee3\u8868\u8be5\u7ec4\u3002 \u67e5\u8be2\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\uff0c \u6cbf\u7740\u6811\u5bfb\u627e\u6839\uff0c\u6bd4\u8f83\u6839\u662f\u5426\u76f8\u540c \u5408\u5e76\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u7ec4\u7684\u65f6\u5019\uff0c \u628a\u4e24\u68f5\u6811\u8fde\u63a5\u5728\u4e00\u8d77\u3002","title":"\u5e76\u67e5\u96c6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#1","text":"","title":"1. \u5e76\u67e5\u96c6\u7684\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#11","text":"\u521d\u59cb\u5316\u7684\u65f6\u5019\u8d4b\u503c\u4e3a\u4e0e\u7d22\u5f15\u4e00\u6837\u7684\u503c\u3002 \u5982\u679c array[i] == i\uff0c \u8868\u793a\u662f\u6839\u8282\u70b9\u3002 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \u5408\u5e76\u4e24\u4e2a\u7ec4\u7684\u65f6\u5019\uff0c\u5148\u67e5\u627e\u5230\u5404\u81ea\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9075\u5faa\u5411\u5de6\u5408\u5e76\u539f\u5219\u3002\u4f8b\u5982\uff0c merge(1, 9)\u7684\u65f6\u5019 array[9] = 1 . class BingSet : \"\"\" \u8be5\u5b9e\u73b0\u4e0d\u80fd\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u90fd\u662f\u8def\u5f84\u538b\u7f29\u5230\u6781\u81f4\u7684\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u662f\u5426\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5224\u65ad \u4e3b\u8981\u662f\u5728merge\u7684\u65f6\u5019\u6ca1\u6709\u9012\u5f52\u66f4\u65b0\uff0c\u53ea\u5728parent\u7684\u65f6\u5019\u9012\u5f52\u538b\u7f29\u8def\u5f84\uff0c\u5bfc\u81f4\u53ea\u6709\u6267\u884c\u8fc7parent\u64cd\u4f5c\u7684\u8def\u5f84\u624d\u662f\u538b\u7f29\u7684\u3002 \"\"\" def __init__ ( self , n ): self . array = [ i for i in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] == i : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def compress ( self ): \"\"\" \u4fdd\u8bc1\u538b\u7f29\u5230\u6700\u77ed\u8def\u5f84 \"\"\" for i in self . array : self . parent ( i ) def print ( self ): \"\"\" \u6253\u5370\u5e76\u67e5\u96c6\u5f53\u524d\u7684\u72b6\u6001 \"\"\" print ([ i for i in range ( len ( self . array ))]) print ( self . array ) # \u6d4b\u8bd5\u4ee3\u7801 # \u8282\u70b9\u6570\u91cf n = 20 # \u5408\u5e76\u6570\u91cf m = 10 # \u968f\u673a\u751f\u6210\u6570\u636e merges = [] for i in range ( m ): a = random . randint ( 0 , n - 1 ) b = random . randint ( 0 , n - 1 ) if a != b : merges . append (( a , b )) # \u5408\u5e76\u96c6\u5408 bs = BingSet ( n ) for a , b in merges : bs . merge ( a , b ) bs . print () # \u968f\u673a\u9009\u62e9\u4e00\u7ec4\uff0c\u67e5\u8be2\u662f\u5426\u5408\u5e76\u5230\u4e86\u540c\u4e00\u4e2a\u7ec4\u4e2d for i in range ( 10 ): index = random . randint ( 0 , len ( merges ) - 1 ) p1 = bs . parent ( merges [ index ][ 0 ]) p2 = bs . parent ( merges [ index ][ 1 ]) assert p1 == p2 \u8be5\u65b9\u6cd5\u7684\u95ee\u9898\u662f\u4e0d\u80fd\u5f88\u5feb\u7684\u6c42\u89e3\u6bcf\u4e2a\u7ec4\u6709\u51e0\u4e2a\u5143\u7d20\u3002 \u901a\u8fc7\u89c2\u5bdf\u4e0a\u9762\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5229\u7528 array[i] == i \u6807\u8bb0\u6839\u8282\u70b9\uff0c \u9664\u6b64\u4e4b\u5916\u6ca1\u6709\u5176\u4ed6\u7684\u4fe1\u606f\u4e86\u3002 \u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8d1f\u6570\u6807\u8bb0\u6839\u8282\u70b9\uff0c \u7528\u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u8bb0\u5f55\u96c6\u5408\u4e2d\u6709\u51e0\u4e2a\u5143\u7d20\u3002","title":"1.1 \u5b9e\u73b0\u4e00"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#12","text":"\u4e0e\u4e0a\u9762\u7684\u5b9e\u73b0\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u8d1f\u6570\u7684\u7b26\u53f7\u6307\u793a\u6839\uff0c\u5229\u7528\u5176\u7edd\u5bf9\u503c\u6307\u793a\u96c6\u5408\u7684\u5927\u5c0f\u3002 class BingSet : \"\"\" \u8be5\u5b9e\u73b0\u4e0d\u80fd\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u90fd\u662f\u8def\u5f84\u538b\u7f29\u5230\u6781\u81f4\u7684\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u662f\u5426\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5224\u65ad \u4e3b\u8981\u662f\u5728merge\u7684\u65f6\u5019\u6ca1\u6709\u9012\u5f52\u66f4\u65b0\uff0c\u53ea\u5728parent\u7684\u65f6\u5019\u9012\u5f52\u538b\u7f29\u8def\u5f84\uff0c\u5bfc\u81f4\u53ea\u6709\u6267\u884c\u8fc7parent\u64cd\u4f5c\u7684\u8def\u5f84\u624d\u662f\u538b\u7f29\u7684\u3002 \"\"\" def __init__ ( self , n ): self . array = [ - 1 for _ in range ( n )] self . n = n def parent ( self , i ): \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9 array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9 \u5426\u5219\uff0c array \"\"\" if self . array [ i ] < 0 : return i self . array [ i ] = self . parent ( self . array [ i ]) return self . array [ i ] def merge ( self , i , j ): \"\"\" \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd \"\"\" if i > j : return self . merge ( j , i ) pi = self . parent ( i ) pj = self . parent ( j ) if pi != pj : self . array [ pi ] += self . array [ pj ] # \u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u4e4b\u524d\u5148\u7ef4\u62a4\u96c6\u5408\u91cc\u9762\u5143\u7d20\u7684\u6570\u91cf self . array [ pj ] = pi self . n -= 1 def count ( self ): \"\"\" \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf \"\"\" return self . n def counti ( self , i ): \"\"\" \u8fd4\u56de i \u6240\u5728\u7ec4\u7684\u6570\u91cf \"\"\" pi = self . parent ( i ) return 0 - self . array [ i ]; def compress ( self ): \"\"\" \u4fdd\u8bc1\u538b\u7f29\u5230\u6700\u77ed\u8def\u5f84 \"\"\" for i in self . array : self . parent ( i ) def print ( self ): \"\"\" \u6253\u5370\u5e76\u67e5\u96c6\u5f53\u524d\u7684\u72b6\u6001 \"\"\" print ([ i for i in range ( len ( self . array ))]) print ( self . array ) # \u8282\u70b9\u6570\u91cf n = 20 # \u5408\u5e76\u6570\u91cf m = 10 # \u968f\u673a\u751f\u6210\u6570\u636e merges = [] for i in range ( m ): a = random . randint ( 0 , n - 1 ) b = random . randint ( 0 , n - 1 ) if a != b : merges . append (( a , b )) # \u5408\u5e76\u96c6\u5408 bs = BingSet ( n ) for a , b in merges : bs . merge ( a , b ) bs . print () # \u968f\u673a\u9009\u62e9\u4e00\u7ec4\uff0c\u67e5\u8be2\u662f\u5426\u5408\u5e76\u5230\u4e86\u540c\u4e00\u4e2a\u7ec4\u4e2d for i in range ( 10 ): index = random . randint ( 0 , len ( merges ) - 1 ) p1 = bs . parent ( merges [ index ][ 0 ]) p2 = bs . parent ( merges [ index ][ 1 ]) assert p1 == p2","title":"1.2 \u5b9e\u73b0\u4e8c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#2","text":"LeetCode\u9898\u76ee \u96be\u5ea6 200. \u5c9b\u5c7f\u6570\u91cf \u4e2d\u7b49 547. \u670b\u53cb\u5708 \u4e2d\u7b49 684. \u5197\u4f59\u8fde\u63a5 \u4e2d\u7b49 685. \u5197\u4f59\u8fde\u63a5 II \u56f0\u96be 839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4 \u56f0\u96be 924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad \u4e2d\u7b49","title":"2. \u76f8\u5173\u9898\u76ee"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/","text":"\u6392\u5e8f \u00b6 \u6392\u5e8f\u7b97\u6cd5\uff0c\u662f\u5c06\u65e0\u5e8f\u6570\u636e\u53d8\u4e3a\u6709\u5e8f\u7684\u4e00\u79cd\u7b97\u6cd5\u3002\u901a\u5e38\u5206\u4e3a\u5185\u90e8\u6392\u5e8f\u548c\u5916\u90e8\u6392\u5e8f\u3002\u5185\u90e8\u6392\u5e8f\u662f\u6307\u6240\u6709\u5f85\u6392\u5e8f\u7684\u6570\u636e\u90fd\u5728\u5185\u5b58\u4e2d\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5f97\u5230\u3002 \u5916\u90e8\u6392\u5e8f\u662f\u6307\u6570\u636e\u5b58\u50a8\u5728\u5916\u90e8\uff0c\u901a\u5e38\u90fd\u6d89\u53ca\u5927\u91cf\u7684\u6570\u636e\u7684\u6392\u5e8f\u95ee\u9898\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u4e0d\u8ba8\u8bba\u3002\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e3b\u8981\u7684\u5185\u90e8\u6392\u5e8f\u7b97\u6cd5\u3002 \u5185\u90e8\u6392\u5e8f\u6309\u7167\u7b97\u6cd5\u601d\u60f3\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a \u63d2\u5165\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u4ea4\u6362\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u57fa\u6570\u6392\u5e8f 1. \u63d2\u5165\u6392\u5e8f \u00b6 \u63d2\u5165\u6392\u5e8f\u7684\u601d\u60f3\u662f\u5c06\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u4e00\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u5e8f\u5217\u4e2d\uff0c\u5728\u63d2\u5165\u7684\u65f6\u5019\u9010\u4e2a\u6bd4\u8f83\u5e26\u63d2\u5165\u5143\u7d20\u548c\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u627e\u5230\u65b0\u63d2\u5165\u5143\u7d20\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u63d2\u5165\u5230\u5e8f\u5217\u4e2d\u3002 1.1 \u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u00b6 \u6700\u7b80\u5355\u7684\u63d2\u5165\u6392\u5e8f\uff0c\u76f4\u63a5\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u7684\u601d\u60f3\u800c\u6ca1\u6709\u7ecf\u8fc7\u4efb\u4f55\u7684\u4f18\u5316\u8fc7\u7a0b\u3002 #include <iostream> #include <vector> #include <algorithm> using namespace std ; void print ( vector < int > v , int i ){ int count = 0 ; for ( auto a : v ){ if ( count == i ){ cout << \" : \" ; } cout << a << \" \" ; count ++ ; } cout << endl ; } vector < int > SimpleInsertSort ( vector < int > & a ) { int n = a . size (); // \u6bcf\u6b21\u5faa\u73af\uff0c\u90fd\u5047\u8bbei\u524d\u9762\u7684\u6570\u5b57\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\uff0ci\u662f\u8981\u63d2\u5165\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u6570\u5b57\uff0ci\u4e4b\u540e\u7684\u6570\u5b57\u90fd\u662f\u672a\u6392\u5e8f\u7684\u3002 for ( int i = 1 ; i < n ; i ++ ){ // \u6253\u5370\u5f53\u524d\u7684\u72b6\u6001 print ( a , i ); // \u627e\u5230\u5f53\u524d\u6570\u5b57i\u5e94\u5f53\u63d2\u5165\u7684\u4f4d\u7f6e int curValue = a [ i ]; int ii = i ; if ( a [ ii ] < a [ 0 ]){ //\u5e94\u5f53\u63d2\u5165\u9996\u4f4d while ( ii - 1 >= 0 ){ a [ ii ] = a [ ii - 1 ]; ii -- ; } a [ 0 ] = curValue ; } else if ( a [ ii ] >= a [ ii - 1 ]){ //\u5e94\u5f53\u63d2\u5165\u672b\u5c3e continue ; //\u5982\u679c\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u662f\u6709\u5e8f\u5217\u8868\u7684\u672b\u5c3e\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u7528\u505a\u3002 } else { for ( int j = 0 ; j < ii - 1 ; j ++ ){ if ( a [ ii ] >= a [ j ] && a [ ii ] < a [ j + 1 ]){ //\u5e94\u5f53\u63d2\u5165j\u4e4b\u540e while ( ii - 1 > j ){ a [ ii ] = a [ ii - 1 ]; ii -- ; } a [ ii ] = curValue ; } } } } print ( a , a . size ()); return a ; } int main () { vector < int > v = { 49 , 38 , 65 , 97 , 76 , 13 , 27 , 49 }; auto re = SimpleInsertSort ( v ); return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a 49 : 38 65 97 76 13 27 49 38 49 : 65 97 76 13 27 49 38 49 65 : 97 76 13 27 49 38 49 65 97 : 76 13 27 49 38 49 65 76 97 : 13 27 49 13 38 49 65 76 97 : 27 49 13 27 38 49 65 76 97 : 49 13 27 38 49 49 65 76 97 \u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f o(n^2) ; 1.2 \u6298\u534a\u63d2\u5165\u6392\u5e8f(\u4e8c\u5206\u63d2\u5165\u6392\u5e8f) \u00b6 \u7b80\u5355\u63d2\u5165\u6392\u5e8f\u6ca1\u6709\u7ecf\u8fc7\u4efb\u4f55\u7684\u8fc7\u7a0b\u4f18\u5316\uff0c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u5bfb\u627e\u5143\u7d20\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u8fd9\u4e00\u8fc7\u7a0b\u662f\u53ef\u4ee5\u4f18\u5316\u7684\u3002\u56e0\u4e3a\u662f\u5728\u6709\u5e8f\u5e8f\u5217\u4e2d\u67e5\u627e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u65b9\u6cd5\u7f29\u77ed\u67e5\u627e\u7684\u65f6\u95f4\u3002\u8be5\u65b9\u6cd5\u88ab\u53eb\u505a\u4e8c\u5206\u63d2\u5165\u6392\u5e8f\u3002 STL\u4e2d lower_bound(a.begin(),a.end()+ii,a[i]); \u5b9e\u73b0\u4e86\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5b83\u66ff\u6362\u539f\u6765\u7684\u5faa\u73af\u8bed\u53e5\u67e5\u627e\u51fa\u63d2\u5165\u4f4d\u7f6e\u5373\u53ef\u3002 def binary_search ( arr , start , end , value ): while start <= end : mid = ( start + end ) // 2 if value > arr [ mid ]: start = mid + 1 else : end = mid - 1 return start def sort_insert ( arr ): unorder = 1 while unorder < len ( arr ): ordered = binary_search ( arr , 0 , unorder - 1 , arr [ unorder ]) current = arr [ unorder ] tmp_index = unorder while tmp_index > ordered : arr [ tmp_index ] = arr [ tmp_index - 1 ] tmp_index -= 1 arr [ ordered ] = current unorder += 1 return arr 1.3 \u4e8c\u8def\u63d2\u5165\u6392\u5e8f \u00b6 1.4 \u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\uff08\u5e0c\u5c14\u6392\u5e8f\uff09 \u00b6 2. \u9009\u62e9\u6392\u5e8f \u00b6 2.1 \u7b80\u5355\u9009\u62e9\u6392\u5e8f \u00b6 \u5728\u8981\u6392\u5e8f\u7684\u4e00\u7ec4\u6570\u4e2d\uff0c\u9009\u51fa\u6700\u5c0f\uff08\u6216\u8005\u6700\u5927\uff09\u7684\u4e00\u4e2a\u6570\u4e0e\u7b2c1\u4e2a\u4f4d\u7f6e\u7684\u6570\u4ea4\u6362\uff1b\u7136\u540e\u5728\u5269\u4e0b\u7684\u6570\u5f53\u4e2d\u518d\u627e\u6700\u5c0f\uff08\u6216\u8005\u6700\u5927\uff09\u7684\u4e0e\u7b2c2\u4e2a\u4f4d\u7f6e\u7684\u6570\u4ea4\u6362\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u7b2cn-1\u4e2a\u5143\u7d20\uff08\u5012\u6570\u7b2c\u4e8c\u4e2a\u6570\uff09\u548c\u7b2cn\u4e2a\u5143\u7d20\uff08\u6700\u540e\u4e00\u4e2a\u6570\uff09\u6bd4\u8f83\u4e3a\u6b62\u3002 2.2 \u4e8c\u5143\u9009\u62e9\u6392\u5e8f \u00b6 \u7b80\u5355\u9009\u62e9\u6392\u5e8f\uff0c\u6bcf\u8d9f\u5faa\u73af\u53ea\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u6392\u5e8f\u540e\u7684\u5b9a\u4f4d\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6539\u8fdb\u4e3a\u6bcf\u8d9f\u5faa\u73af\u786e\u5b9a\u4e24\u4e2a\u5143\u7d20\uff08\u5f53\u524d\u8d9f\u6700\u5927\u548c\u6700\u5c0f\u8bb0\u5f55\uff09\u7684\u4f4d\u7f6e,\u4ece\u800c\u51cf\u5c11\u6392\u5e8f\u6240\u9700\u7684\u5faa\u73af\u6b21\u6570\u3002\u6539\u8fdb\u540e\u5bf9n\u4e2a\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u591a\u53ea\u9700\u8fdb\u884c[n/2]\u8d9f\u5faa\u73af\u5373\u53ef\u3002 3. \u4ea4\u6362\u6392\u5e8f \u00b6 3.1 \u5192\u6ce1\u6392\u5e8f \u00b6 \u5192\u6ce1\u6392\u5e8f\u603b\u662f\u4ea4\u6362\u76f8\u90bb\u7684\u4e24\u4e2a\u503c\u3002 \u5728\u8981\u6392\u5e8f\u7684\u4e00\u7ec4\u6570\u4e2d\uff0c\u5bf9\u5f53\u524d\u8fd8\u672a\u6392\u597d\u5e8f\u7684\u8303\u56f4\u5185\u7684\u5168\u90e8\u6570\uff0c\u81ea\u4e0a\u800c\u4e0b\u5bf9\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u4f9d\u6b21\u8fdb\u884c\u6bd4\u8f83\u548c\u8c03\u6574\uff0c\u8ba9\u8f83\u5927\u7684\u6570\u5f80\u4e0b\u6c89\uff0c\u8f83\u5c0f\u7684\u5f80\u4e0a\u5192\u3002\u5373\uff1a\u6bcf\u5f53\u4e24\u76f8\u90bb\u7684\u6570\u6bd4\u8f83\u540e\u53d1\u73b0\u5b83\u4eec\u7684\u6392\u5e8f\u4e0e\u6392\u5e8f\u8981\u6c42\u76f8\u53cd\u65f6\uff0c\u5c31\u5c06\u5b83\u4eec\u4e92\u6362\u3002 void print ( vector < int > v , int i ){ int count = 0 ; for ( auto a : v ){ if ( count == i ){ cout << \" | \" ; } cout << a << \" \" ; count ++ ; } cout << endl ; } //\u5192\u6ce1\u6392\u5e8f vector < int > sortTop ( vector < int > & v ){ int tmp ; for ( int j = v . size () - 1 ; j > 0 ; j -- ){ print ( v , j + 1 ); for ( int i = 0 ; i < j ; i ++ ){ if ( v [ i + 1 ] < v [ i ]){ tmp = v [ i ]; v [ i ] = v [ i + 1 ]; v [ i + 1 ] = tmp ; } } } return v ; } int main () { vector < int > v = { 49 , 38 , 65 , 97 , 76 , 13 , 27 , 12 }; auto a = sortTop ( v ); print ( a ); return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a 49 38 65 97 76 13 27 12 38 49 65 76 13 27 12 | 97 38 49 65 13 27 12 | 76 97 38 49 13 27 12 | 65 76 97 38 13 27 12 | 49 65 76 97 13 27 12 | 38 49 65 76 97 13 12 | 27 38 49 65 76 97 12 13 27 38 49 65 76 97 | 4. \u7ebf\u6027\u65f6\u95f4\u6392\u5e8f \u00b6 \u6bd4\u8f83\u6392\u5e8f\u4f9d\u8d56\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\uff0c\u6240\u4ee5\u6700\u4f18\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u4f1a\u4f4e\u4e8e O(n*logn) ;\u5f52\u5e76\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f\u90fd\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e00\u6c34\u5e73\u3002\u8fd8\u6709\u4e00\u4e9b\u4e0d\u4f9d\u8d56\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\u786e\u5b9a\u5143\u7d20\u987a\u5e8f\u7684\u6392\u5e8f\u7b97\u6cd5\u53ef\u4ee5\u8fbe\u5230\u66f4\u4f4e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f8b\u5982\uff1a\u8ba1\u6570\u6392\u5e8f\uff0c\u57fa\u6570\u6392\u5e8f\u548c\u6876\u6392\u5e8f\u3002 4.1 \u8ba1\u6570\u6392\u5e8f \u00b6 \u8ba1\u6570\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a \u5f00\u8f9f\u4e00\u4e2a\u4e0e\u6700\u5927\u6570\u7684\u503c\u5927\u5c0f\u4e00\u6837\u7684\u6570\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u6570\u5b57\u653e\u5230\u5bf9\u5e94\u7684\u6570\u7ec4\u4e2d\uff0c\u81ea\u7136\u800c\u7136\u5c31\u6709\u5e8f\u4e86\u3002\u4f8b\u5982\u5bf9 [9,23,2,100,34,398,5] \u6392\u5e8f\uff0c\u5f00\u8f9f\u4e00\u4e2aa[399]\u7684\u6570\u7ec4\uff0c\u7136\u540e \u4ee4a[9] = 1;a[23] = 1;a[2]=1;a[100] = 1; a[34] = 1;a[398] = 1;a[5] = 1 ;\u7136\u540e\u4ece\u5934\u5f00\u59cb\u628a\u6709\u503c\u7684\u5143\u7d20\u53d6\u51fa\u6765\u5c31\u81ea\u7136\u6709\u4e86\u987a\u5e8f\u3002\u5982\u679c\u6709\u5143\u7d20\u7684\u503c\u76f8\u7b49\uff0c\u4f8b\u5982\u67092\u4e2a100\uff0c\u53ea\u9700\u8981\u8ba9a[100] = 2\u5c31\u884c\u4e86\u3002\u4e0b\u9762\u770b\u770b\u5982\u4f55\u53d6\u51fa\u6392\u5e8f\u597d\u7684\u6570\u636e\u3002 //\u8ba1\u6570\u6392\u5e8f vector < int > countSort ( vector < int > & v ){ //1.\u627e\u5230\u6700\u5927\u503c\uff0c\u5f00\u8f9f\u6570\u7ec4 if ( v . empty ()) return v ; int maxValue = v [ 0 ]; for ( int i = 1 ; i < v . size (); i ++ ){ maxValue = v [ i ] > maxValue ? v [ i ] : maxValue ; } //2. \u5f00\u8f9f\u5bf9\u5e94\u7684\u6570\u7ec4\u5e76\u8ba1\u6570 vector < int > b ( maxValue + 1 , 0 ); for ( int i = 0 ; i < v . size (); i ++ ){ b [ v [ i ]] = b [ v [ i ]] + 1 ; } //3. \u53d6\u51fa\u7ed3\u679c v . clear (); for ( int i = 0 ; i < b . size (); i ++ ){ while ( b [ i ] > 0 ){ v . push_back ( i ); b [ i ] = b [ i ] - 1 ; } } return v ; } \u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u80fd\u5904\u7406\u975e\u8d1f\u6570\u7684\u60c5\u51b5\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8ba1\u6570\u6392\u5e8f\u5f53\u5904\u7406\u6709\u5927\u91cf\u91cd\u590d\u6570\u5b57\uff0c\u800c\u6570\u636e\u7684\u8303\u56f4\u4e0d\u5927\u7684\u65f6\u5019\u5f88\u6709\u7528\u3002 4.2 \u57fa\u6570\u6392\u5e8f(\u6876\u6392\u5e8f) \u00b6 \u6876\u6392\u5e8f\u662f\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230O(n)\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f46\u662f\u5b83\u4f7f\u7528\u7684\u7a7a\u95f4\u8f83\u591a\uff0c\u4e5f\u6709\u8f83\u5927\u7684\u9650\u5236\u6761\u4ef6\uff0c\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u6392\u5e8f\uff0c\u53ea\u9002\u7528\u7279\u5b9a\u7684\u60c5\u51b5\u4e0b\u7684\u6392\u5e8f\u3002 \u4e00\u79cd\u66f4\u4e00\u822c\u7684\u7b97\u6cd5\u601d\u60f3\u662f\u5206\u6876\u6cd5\u3002\u5b83\u7684\u601d\u60f3\u662f\u628a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u8303\u56f4\u5206\u522b\u653e\u5728\u5bf9\u5e94\u7684\u6876\u4e2d\uff0c\u7136\u540e\u518d\u505a\u76f8\u5e94\u7684\u5904\u7406\u3002\u5206\u7ec4\u540e\u5904\u7406\u7684\u590d\u6742\u5ea6\u5c31\u4f1a\u964d\u4f4e\u5f88\u591a\uff0c\u7136\u540e\u518d\u60f3\u529e\u6cd5\u628a\u6bcf\u4e2a\u6876\u4e2d\u7684\u7ed3\u679c\u5408\u5e76\u8d77\u6765\u3002 \u57fa\u6570\u6392\u5e8f\u4e13\u95e8\u9488\u5bf9\u7684\u662f\u6574\u6570\u7684\u6392\u5e8f\uff0c\uff08\u56e0\u4e3a\u5b57\u7b26\u4e32\u4e5f\u662f\u6574\u6570\u8868\u793a\u7684\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u7684\u6392\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6876\u6392\u5e8f\uff09\u3002\u8fd9\u91cc\u56fa\u5b9a\u7684\u628a\u6876\u5b9a\u4e3a10\u4e2a\uff0c\u5206\u522b\u5bf9\u5e94\u6570\u5b570--9.\u9996\u5148\u6309\u7167\u4e2a\u4f4d\u6570\u5b57\u5165\u6876\uff0c\u7136\u540e\u6309\u7167\u5341\u4f4d\u6570\u5b57\uff0c\u7136\u540e\u6309\u7167\u767e\u4f4d\u6570\u5b57\uff0c...\u76f4\u5230\u6700\u9ad8\u4f4d\u6570\u5b57\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u53d6\u51fa\u6765\u5c31\u662f\u4e86\u3002\u4e0b\u9762\u4ee5 [521 310 72 373 15 546 385 856 187 147] \u4e3a\u4f8b\u5b50\u8bf4\u660e\u5177\u4f53\u7684\u8fc7\u7a0b\u3002 // \u8fd4\u56dea\u7684\u7b2ci\u4f4d\u6570\u5b57\uff0c // i = 0 \u4e2a\u4f4d // i = 1 \u5341\u4f4d int gg ( int a , int i ){ int re ; while ( i >= 0 ){ re = a % 10 ; a = a / 10 ; i -- ; } return re ; } vector < int > baseSort ( vector < int > & v ){ if ( v . empty ()) return v ; int maxValue = v [ 0 ]; //\u627e\u5230\u6700\u5927\u503c for ( int i = 0 ; i < v . size (); i ++ ){ maxValue = v [ i ] > maxValue ? v [ i ] : maxValue ; } int high = 0 ; // \u83b7\u5f97\u6700\u9ad8\u4f4d\uff0c\u9700\u8981\u5faa\u73af\u8fd9\u4e48\u591a\u6b21 while ( maxValue ){ maxValue /= 10 ; high ++ ; } // i = 0 \u6309\u7167\u4e2a\u4f4d\u5165\u6876\uff0c\u6536\u96c6 // i = 1 \u6309\u7167\u5341\u4f4d\u5165\u6876\uff0c\u6536\u96c6 // ... for ( int i = 0 ; i < high ; i ++ ){ vector < vector < int >> t ( 10 , vector < int > ( 0 )); // \u5165\u6876\u64cd\u4f5c for ( int j = 0 ; j < v . size (); j ++ ){ t [ gg ( v [ j ], i ) ]. push_back ( v [ j ]); } // \u4ece0\u53f7\u6876\u5f00\u59cb\u6309\u7167\u987a\u5e8f\u6536\u96c6 v . clear (); for ( auto a : t ){ for ( auto b : a ){ v . push_back ( b ); } } } return v ; } 5. \u5feb\u901f\u6392\u5e8f \u00b6 \u5feb\u901f\u6392\u5e8f\u662f\u5206\u6cbb\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f o(nlogn) ,\u5728\u6570\u636e\u6ca1\u6709\u7279\u6b8a\u7684\u89c4\u5f8b\u7684\u60c5\u51b5\u4e0b\uff0c\u5feb\u901f\u6392\u5e8f\u662f\u9996\u9009\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u5b83\u7684\u601d\u60f3\u4e5f\u7ecf\u5e38\u7528\u6765\u51fa\u5404\u79cd\u7b97\u6cd5\u9898\u76ee\u3002 \u5feb\u901f\u6392\u5e8f\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\u5143\u7d20\uff0c \u901a\u8fc7\u6bd4\u8f83\u5176\u4ed6\u5143\u7d20\u548c\u8be5\u5143\u7d20\u7684\u5927\u5c0f\u79fb\u52a8\u4f4d\u7f6e\uff0c\u6700\u7ec8\u628a\u8be5\u5143\u7d20\u79fb\u52a8\u5230\u6392\u597d\u5e8f\u4e4b\u540e\u5b83\u5e94\u8be5\u5904\u4e8e\u7684\u4f4d\u7f6e\u4e0a\u3002 \u5feb\u901f\u6392\u5e8f\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u505a\u5230 nlogn \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5feb\u901f\u6392\u5e8f\u7684\u5173\u952e\u5c31\u662f\u5b9e\u73b0\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u901a\u5e38\u53eb\u505a partition \u5728 partiton \u4e2d\uff0c i \u6307\u5411\u7684\u59cb\u7ec8\u662f\u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c i + 1 \u53ef\u80fd\u662f j, \u4e5f\u53ef\u80fd\u662f\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019 i + 1 == j, \u4e00\u65e6\u9047\u5230\u5927\u4e8e\u57fa\u51c6\u7684\u503c\uff0c j++ \u800c i \u4e0d\u52a8\uff0c i \u548c j \u62c9\u5f00\u8ddd\u79bb\uff0c \u4e0b\u4e00\u6b21\u5c0f\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u51fa\u73b0\u7684\u65f6\u5019\uff0c \u4ea4\u6362\u7684\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\u548c j. \u5faa\u73af\u7ed3\u675f\u7684\u65f6\u5019\uff0c i \u6307\u5411\u7684\u662f\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8ebase\u7684\u503c\uff0c\u6240\u4ee5\u53ea\u8981\u628a i + 1 \u548c base \u4ea4\u6362\uff0c base \u5c31\u653e\u5728\u4e86\u6392\u5e8f\u4e4b\u540e\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u503c\u7684\u51fd\u6570\u662f\u57fa\u51c6\u5143\u7d20\u662f\u7b2c\u51e0\u5927(\u5c0f)\u3002 5.1 C\u5b9e\u73b0 \u00b6 // \u5feb\u901f\u6392\u5e8f\u7684\u4e00\u8d9f\u8fc7\u7a0b int partition ( int * arr , int left , int right ) { int base = arr [ right ]; // \u9009\u62e9\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u57fa\u51c6\u5143\u7d20 int i = left - 1 ; // \u904d\u5386[left, right-1], \u6bcf\u4e00\u4e2a\u90fd\u548c\u57fa\u51c6\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u57fa\u51c6\uff0c\u5c31\u4ea4\u6362 for ( int j = left ; j < right ; j ++ ) { if ( arr [ j ] <= arr [ base ]) { i = i + 1 ; swap ( arr , i , j ); } } swap ( arr , i + 1 , right ); return i + 1 ; } 5.2 Python \u5b9e\u73b0 \u00b6 def partition ( array , begin , end ): base = array [ end ] i = begin - 1 for j in range ( begin , end ): if array [ j ] < base : i += 1 array [ i ], array [ j ] = array [ j ], array [ i ] array [ i + 1 ], array [ end ] = array [ end ], array [ i + 1 ] return i + 1 # \u9012\u5f52\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f def quicksort ( array , begin , end ): if begin >= end : return mid = partition ( array , begin , end ) quicksort ( array , begin , mid - 1 ) quicksort ( array , mid + 1 , end ) return array # \u975e\u9012\u5f52\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f def quickquicksort ( array ): begin = 0 end = len ( array ) - 1 stack = [( begin , end )] while len ( stack ) > 0 : begin , end = stack . pop () if begin >= end : continue mid = partition ( array , begin , end ) stack . append (( begin , mid - 1 )) stack . append (( mid + 1 , end )) return array 5.3 \u5e94\u7528 \u00b6 5.3.1 \u7b2cK\u5c0f\u7684\u5143\u7d20 \u00b6 \u5982\u679c\u67e5\u627e\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\u6570\u7ec4\u5373\u53ef\u3002\u5982\u679c\u662f\u7b2c2\u5c0f\u7684\uff0c\u9996\u5148\u904d\u5386\u4e00\u904d\u627e\u5230\u6700\u5c0f\u7684\uff0c\u7136\u540e\u518d\u904d\u5386\u4e00\u904d\u5c31\u53ef\u4ee5\u627e\u5230\u7b2c\u4e8c\u5c0f\u7684\u4e86\u3002\u6240\u4ee5\uff0c\u6734\u7d20\u7684\u89e3\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fo(kn),\u4e0ek\u6709\u5173\u7cfb\u3002 \u5feb\u901f\u6392\u5e8f partition \u51fd\u6570\u7684\u7279\u70b9\u662f\u6bcf\u6b21\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u6392\u597d\u5e8f\u4e4b\u540e\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u3002\u5047\u8bbepartition(0,n-1) = i, \u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u8fd9\u6837\u7684\u4fe1\u606f\uff0c[0..i-1]\u4f4d\u7f6e\u7684\u5143\u7d20\u90fd\u6bd4A[i]\u5c0f\uff0c\u800ci\u540e\u9762\u7684\u5143\u7d20\u90fd\u6bd4A[i]\u5927\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u6bcf\u6b21\u8c03\u7528 partition \u90fd\u53ef\u4ee5\u53bb\u6389\u4e00\u534a\u5143\u7d20\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u80fd\u964d\u5230o(n)\u4e86\u3002 lintcode int Kth ( vector < int > & v , int k ){ if ( v . empty () || k <= 0 ) return - 1 ; int begin = 0 ; int end = v . size () - 1 ; while ( true ){ int i = partition ( v , begin , end ); if ( i + 1 == k ) return v [ i ]; if ( i + 1 < k ){ begin = i + 1 ; } else { end = i - 1 ; } } } leetcode int partition ( vector < int > & v , int i , int j ){ if ( i > j ) return - 1 ; int tmp ; int start = i ; int end = j ; bool base = true ; // \u6307\u793a i \u662f\u5426\u6307\u5411base \u5143\u7d20\uff0c\u5982\u679ci \u4e0d\u6307\u5411base\u5143\u7d20\uff0c\u5219j\u80af\u5b9a\u6307\u5411base\u5143\u7d20\u3002 while ( i < j ){ if ( v [ i ] > v [ j ] && base ){ tmp = v [ j ]; v [ j ] = v [ i ]; v [ i ] = tmp ; i = i + 1 ; base = false ; } else if ( v [ i ] > v [ j ] && ! base ){ tmp = v [ j ]; v [ j ] = v [ i ]; v [ i ] = tmp ; j = j - 1 ; base = true ; } else if ( base ){ j -- ; } else { i ++ ; } } return i ; } int kthLargestElement ( vector < int >& nums , int k ) { int left = 0 , right = nums . size () - 1 , len = nums . size (); while ( true ) { int pos = partition ( nums , left , right ); if ( len - pos == k ) return nums [ pos ]; if ( len - pos < k ) right = pos - 1 ; else left = pos + 1 ; } return - 1 ; } 5.3.2 \u67e5\u627e\u4e2d\u4f4d\u6570 \u00b6 \u4e00\u822c\u7684\u505a\u6cd5\u662f\u6392\u5e8f\uff0c\u8fd4\u56de\u4e2d\u95f4\u7684\u6570\u5b57\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fo(nlogn). \u5176\u5b9e\u8fd8\u6709o(n)\u7684\u7b97\u6cd5\uff0c\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u4e5f\u662f\u5229\u7528\u4e86\u5feb\u901f\u6392\u5e8f\u7684partition\u51fd\u6570\u3002 lintcode int median ( vector < int > & nums ) { if ( nums . empty ()) return - 1 ; int len = nums . size (); return kthLargestElement ( nums , len / 2 + 1 ); } 6. \u5806\u6392\u5e8f \u00b6 \u5806\u6392\u5e8f\u7684\u539f\u7406\u662f\u5148\u7528\u6240\u6709\u5143\u7d20\u5efa\u5806\uff0c \u7136\u540e\u6bcf\u6b21\u53d6\u5806\u9876\u5143\u7d20\u653e\u5728\u6700\u540e\uff0c\u8c03\u6574\u5806\uff0c \u7136\u540e\u518d\u53d6\u5806\u9876\u5143\u7d20\uff0c\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u5230\u5806\u4e3a\u7a7a\u3002 \u56e0\u4e3a\u8c03\u6574\u5806\u53ea\u9700\u8981\u6d88\u8017 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5806\u6392\u5e8f\u5171\u9700\u8981 nlogn \u7684\u65f6\u95f4\u3002 \u5806\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0 \u5efa\u7acb\u5806 \u548c \u8c03\u6574\u5806 \u7684\u65b9\u6cd5\u3002 // \u8c03\u6574\u5806\u4e2d\u7684\u8282\u70b9 i\uff0c \u4f7f\u5f97\u91cd\u65b0\u6ee1\u8db3\u5927\u9876\u5806 void heapify ( int * arr , int size , int i ) { int left = 2 * i + 1 ; int right = 2 * i + 2 ; int large = i ; if ( left < size && arr [ left ] > arr [ large ]) { large = left ; } if ( right < size && arr [ right ] > arr [ large ]) { large = right ; } // \u5982\u679c\u627e\u5230\u5b50\u8282\u70b9\u4e2d\u6709\u8f83\u5927\u7684\uff0c\u548c\u90a3\u4e2a\u8f83\u5927\u7684\u4ea4\u6362 if ( large != i ) { swap ( arr , i , large ); heapify ( arr , size , large ); } return ; } // \u5efa\u7acb\u5806 void build_heap ( int * arr , int size ) { // \u6570\u7ec4\u540e\u534a\u90e8\u5206\u662f\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u7528\u8c03\u6574 // \u5bf9\u6bcf\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\u8c03\u6574\u4e00\u904d\u5806\uff0c\u4f7f\u5806\u6ee1\u8db3\u6761\u4ef6 int middle = size / 2 ; for ( int i = middle ; i >= 0 ; i ++ ) { heapify ( arr , size , i ); } return ; } void heap_sort ( int * arr , int size ) { int end = size ; build_heap ( arr , end ); while ( end > 0 ) { // \u5806\u9876\u6700\u5927\u7684\u503c\u653e\u5728\u662f\u6700\u540e\uff0c\u5806\u5143\u7d20\u4e2a\u6570\u51cf\u4e00 swap ( arr , 0 , end - 1 ); // \u5806\u9876\u5143\u7d20\u6362\u8fc7\uff0c\u8c03\u6574\u5b83 heapify ( arr , end - 1 , 0 ); end -- ; } return ; } 7. \u6392\u5e8f\u65b9\u6cd5\u6bd4\u8f83 \u00b6 \u8bf4\u660e\uff1a \u5f53\u539f\u8868\u6709\u5e8f\u6216\u57fa\u672c\u6709\u5e8f\u65f6\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u548c\u5192\u6ce1\u6392\u5e8f\u5c06\u5927\u5927\u51cf\u5c11\u6bd4\u8f83\u6b21\u6570\u548c\u79fb\u52a8\u8bb0\u5f55\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u964d\u81f3O\uff08n\uff09\uff1b \u800c\u5feb\u901f\u6392\u5e8f\u5219\u76f8\u53cd\uff0c\u5f53\u539f\u8868\u57fa\u672c\u6709\u5e8f\u65f6\uff0c\u5c06\u8715\u5316\u4e3a\u5192\u6ce1\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u63d0\u9ad8\u4e3aO\uff08n2\uff09\uff1b \u539f\u8868\u662f\u5426\u6709\u5e8f\uff0c\u5bf9\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u548c\u57fa\u6570\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f71\u54cd\u4e0d\u5927\u3002 8. \u6392\u5e8f\u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u4e2d\u7b49","title":"\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_1","text":"\u6392\u5e8f\u7b97\u6cd5\uff0c\u662f\u5c06\u65e0\u5e8f\u6570\u636e\u53d8\u4e3a\u6709\u5e8f\u7684\u4e00\u79cd\u7b97\u6cd5\u3002\u901a\u5e38\u5206\u4e3a\u5185\u90e8\u6392\u5e8f\u548c\u5916\u90e8\u6392\u5e8f\u3002\u5185\u90e8\u6392\u5e8f\u662f\u6307\u6240\u6709\u5f85\u6392\u5e8f\u7684\u6570\u636e\u90fd\u5728\u5185\u5b58\u4e2d\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5f97\u5230\u3002 \u5916\u90e8\u6392\u5e8f\u662f\u6307\u6570\u636e\u5b58\u50a8\u5728\u5916\u90e8\uff0c\u901a\u5e38\u90fd\u6d89\u53ca\u5927\u91cf\u7684\u6570\u636e\u7684\u6392\u5e8f\u95ee\u9898\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u4e0d\u8ba8\u8bba\u3002\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e3b\u8981\u7684\u5185\u90e8\u6392\u5e8f\u7b97\u6cd5\u3002 \u5185\u90e8\u6392\u5e8f\u6309\u7167\u7b97\u6cd5\u601d\u60f3\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a \u63d2\u5165\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u4ea4\u6362\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u57fa\u6570\u6392\u5e8f","title":"\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#1","text":"\u63d2\u5165\u6392\u5e8f\u7684\u601d\u60f3\u662f\u5c06\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u4e00\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u5e8f\u5217\u4e2d\uff0c\u5728\u63d2\u5165\u7684\u65f6\u5019\u9010\u4e2a\u6bd4\u8f83\u5e26\u63d2\u5165\u5143\u7d20\u548c\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u627e\u5230\u65b0\u63d2\u5165\u5143\u7d20\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u63d2\u5165\u5230\u5e8f\u5217\u4e2d\u3002","title":"1. \u63d2\u5165\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#11","text":"\u6700\u7b80\u5355\u7684\u63d2\u5165\u6392\u5e8f\uff0c\u76f4\u63a5\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u7684\u601d\u60f3\u800c\u6ca1\u6709\u7ecf\u8fc7\u4efb\u4f55\u7684\u4f18\u5316\u8fc7\u7a0b\u3002 #include <iostream> #include <vector> #include <algorithm> using namespace std ; void print ( vector < int > v , int i ){ int count = 0 ; for ( auto a : v ){ if ( count == i ){ cout << \" : \" ; } cout << a << \" \" ; count ++ ; } cout << endl ; } vector < int > SimpleInsertSort ( vector < int > & a ) { int n = a . size (); // \u6bcf\u6b21\u5faa\u73af\uff0c\u90fd\u5047\u8bbei\u524d\u9762\u7684\u6570\u5b57\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\uff0ci\u662f\u8981\u63d2\u5165\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u6570\u5b57\uff0ci\u4e4b\u540e\u7684\u6570\u5b57\u90fd\u662f\u672a\u6392\u5e8f\u7684\u3002 for ( int i = 1 ; i < n ; i ++ ){ // \u6253\u5370\u5f53\u524d\u7684\u72b6\u6001 print ( a , i ); // \u627e\u5230\u5f53\u524d\u6570\u5b57i\u5e94\u5f53\u63d2\u5165\u7684\u4f4d\u7f6e int curValue = a [ i ]; int ii = i ; if ( a [ ii ] < a [ 0 ]){ //\u5e94\u5f53\u63d2\u5165\u9996\u4f4d while ( ii - 1 >= 0 ){ a [ ii ] = a [ ii - 1 ]; ii -- ; } a [ 0 ] = curValue ; } else if ( a [ ii ] >= a [ ii - 1 ]){ //\u5e94\u5f53\u63d2\u5165\u672b\u5c3e continue ; //\u5982\u679c\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u662f\u6709\u5e8f\u5217\u8868\u7684\u672b\u5c3e\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u7528\u505a\u3002 } else { for ( int j = 0 ; j < ii - 1 ; j ++ ){ if ( a [ ii ] >= a [ j ] && a [ ii ] < a [ j + 1 ]){ //\u5e94\u5f53\u63d2\u5165j\u4e4b\u540e while ( ii - 1 > j ){ a [ ii ] = a [ ii - 1 ]; ii -- ; } a [ ii ] = curValue ; } } } } print ( a , a . size ()); return a ; } int main () { vector < int > v = { 49 , 38 , 65 , 97 , 76 , 13 , 27 , 49 }; auto re = SimpleInsertSort ( v ); return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a 49 : 38 65 97 76 13 27 49 38 49 : 65 97 76 13 27 49 38 49 65 : 97 76 13 27 49 38 49 65 97 : 76 13 27 49 38 49 65 76 97 : 13 27 49 13 38 49 65 76 97 : 27 49 13 27 38 49 65 76 97 : 49 13 27 38 49 49 65 76 97 \u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f o(n^2) ;","title":"1.1 \u76f4\u63a5\u63d2\u5165\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#12","text":"\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u6ca1\u6709\u7ecf\u8fc7\u4efb\u4f55\u7684\u8fc7\u7a0b\u4f18\u5316\uff0c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u5bfb\u627e\u5143\u7d20\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u8fd9\u4e00\u8fc7\u7a0b\u662f\u53ef\u4ee5\u4f18\u5316\u7684\u3002\u56e0\u4e3a\u662f\u5728\u6709\u5e8f\u5e8f\u5217\u4e2d\u67e5\u627e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u65b9\u6cd5\u7f29\u77ed\u67e5\u627e\u7684\u65f6\u95f4\u3002\u8be5\u65b9\u6cd5\u88ab\u53eb\u505a\u4e8c\u5206\u63d2\u5165\u6392\u5e8f\u3002 STL\u4e2d lower_bound(a.begin(),a.end()+ii,a[i]); \u5b9e\u73b0\u4e86\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5b83\u66ff\u6362\u539f\u6765\u7684\u5faa\u73af\u8bed\u53e5\u67e5\u627e\u51fa\u63d2\u5165\u4f4d\u7f6e\u5373\u53ef\u3002 def binary_search ( arr , start , end , value ): while start <= end : mid = ( start + end ) // 2 if value > arr [ mid ]: start = mid + 1 else : end = mid - 1 return start def sort_insert ( arr ): unorder = 1 while unorder < len ( arr ): ordered = binary_search ( arr , 0 , unorder - 1 , arr [ unorder ]) current = arr [ unorder ] tmp_index = unorder while tmp_index > ordered : arr [ tmp_index ] = arr [ tmp_index - 1 ] tmp_index -= 1 arr [ ordered ] = current unorder += 1 return arr","title":"1.2 \u6298\u534a\u63d2\u5165\u6392\u5e8f(\u4e8c\u5206\u63d2\u5165\u6392\u5e8f)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#13","text":"","title":"1.3 \u4e8c\u8def\u63d2\u5165\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#14","text":"","title":"1.4 \u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\uff08\u5e0c\u5c14\u6392\u5e8f\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#2","text":"","title":"2. \u9009\u62e9\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#21","text":"\u5728\u8981\u6392\u5e8f\u7684\u4e00\u7ec4\u6570\u4e2d\uff0c\u9009\u51fa\u6700\u5c0f\uff08\u6216\u8005\u6700\u5927\uff09\u7684\u4e00\u4e2a\u6570\u4e0e\u7b2c1\u4e2a\u4f4d\u7f6e\u7684\u6570\u4ea4\u6362\uff1b\u7136\u540e\u5728\u5269\u4e0b\u7684\u6570\u5f53\u4e2d\u518d\u627e\u6700\u5c0f\uff08\u6216\u8005\u6700\u5927\uff09\u7684\u4e0e\u7b2c2\u4e2a\u4f4d\u7f6e\u7684\u6570\u4ea4\u6362\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u7b2cn-1\u4e2a\u5143\u7d20\uff08\u5012\u6570\u7b2c\u4e8c\u4e2a\u6570\uff09\u548c\u7b2cn\u4e2a\u5143\u7d20\uff08\u6700\u540e\u4e00\u4e2a\u6570\uff09\u6bd4\u8f83\u4e3a\u6b62\u3002","title":"2.1 \u7b80\u5355\u9009\u62e9\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#22","text":"\u7b80\u5355\u9009\u62e9\u6392\u5e8f\uff0c\u6bcf\u8d9f\u5faa\u73af\u53ea\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u6392\u5e8f\u540e\u7684\u5b9a\u4f4d\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6539\u8fdb\u4e3a\u6bcf\u8d9f\u5faa\u73af\u786e\u5b9a\u4e24\u4e2a\u5143\u7d20\uff08\u5f53\u524d\u8d9f\u6700\u5927\u548c\u6700\u5c0f\u8bb0\u5f55\uff09\u7684\u4f4d\u7f6e,\u4ece\u800c\u51cf\u5c11\u6392\u5e8f\u6240\u9700\u7684\u5faa\u73af\u6b21\u6570\u3002\u6539\u8fdb\u540e\u5bf9n\u4e2a\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u591a\u53ea\u9700\u8fdb\u884c[n/2]\u8d9f\u5faa\u73af\u5373\u53ef\u3002","title":"2.2 \u4e8c\u5143\u9009\u62e9\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#3","text":"","title":"3. \u4ea4\u6362\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#31","text":"\u5192\u6ce1\u6392\u5e8f\u603b\u662f\u4ea4\u6362\u76f8\u90bb\u7684\u4e24\u4e2a\u503c\u3002 \u5728\u8981\u6392\u5e8f\u7684\u4e00\u7ec4\u6570\u4e2d\uff0c\u5bf9\u5f53\u524d\u8fd8\u672a\u6392\u597d\u5e8f\u7684\u8303\u56f4\u5185\u7684\u5168\u90e8\u6570\uff0c\u81ea\u4e0a\u800c\u4e0b\u5bf9\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u4f9d\u6b21\u8fdb\u884c\u6bd4\u8f83\u548c\u8c03\u6574\uff0c\u8ba9\u8f83\u5927\u7684\u6570\u5f80\u4e0b\u6c89\uff0c\u8f83\u5c0f\u7684\u5f80\u4e0a\u5192\u3002\u5373\uff1a\u6bcf\u5f53\u4e24\u76f8\u90bb\u7684\u6570\u6bd4\u8f83\u540e\u53d1\u73b0\u5b83\u4eec\u7684\u6392\u5e8f\u4e0e\u6392\u5e8f\u8981\u6c42\u76f8\u53cd\u65f6\uff0c\u5c31\u5c06\u5b83\u4eec\u4e92\u6362\u3002 void print ( vector < int > v , int i ){ int count = 0 ; for ( auto a : v ){ if ( count == i ){ cout << \" | \" ; } cout << a << \" \" ; count ++ ; } cout << endl ; } //\u5192\u6ce1\u6392\u5e8f vector < int > sortTop ( vector < int > & v ){ int tmp ; for ( int j = v . size () - 1 ; j > 0 ; j -- ){ print ( v , j + 1 ); for ( int i = 0 ; i < j ; i ++ ){ if ( v [ i + 1 ] < v [ i ]){ tmp = v [ i ]; v [ i ] = v [ i + 1 ]; v [ i + 1 ] = tmp ; } } } return v ; } int main () { vector < int > v = { 49 , 38 , 65 , 97 , 76 , 13 , 27 , 12 }; auto a = sortTop ( v ); print ( a ); return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a 49 38 65 97 76 13 27 12 38 49 65 76 13 27 12 | 97 38 49 65 13 27 12 | 76 97 38 49 13 27 12 | 65 76 97 38 13 27 12 | 49 65 76 97 13 27 12 | 38 49 65 76 97 13 12 | 27 38 49 65 76 97 12 13 27 38 49 65 76 97 |","title":"3.1 \u5192\u6ce1\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#4","text":"\u6bd4\u8f83\u6392\u5e8f\u4f9d\u8d56\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\uff0c\u6240\u4ee5\u6700\u4f18\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u4f1a\u4f4e\u4e8e O(n*logn) ;\u5f52\u5e76\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f\u90fd\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e00\u6c34\u5e73\u3002\u8fd8\u6709\u4e00\u4e9b\u4e0d\u4f9d\u8d56\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\u786e\u5b9a\u5143\u7d20\u987a\u5e8f\u7684\u6392\u5e8f\u7b97\u6cd5\u53ef\u4ee5\u8fbe\u5230\u66f4\u4f4e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f8b\u5982\uff1a\u8ba1\u6570\u6392\u5e8f\uff0c\u57fa\u6570\u6392\u5e8f\u548c\u6876\u6392\u5e8f\u3002","title":"4. \u7ebf\u6027\u65f6\u95f4\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#41","text":"\u8ba1\u6570\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a \u5f00\u8f9f\u4e00\u4e2a\u4e0e\u6700\u5927\u6570\u7684\u503c\u5927\u5c0f\u4e00\u6837\u7684\u6570\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u6570\u5b57\u653e\u5230\u5bf9\u5e94\u7684\u6570\u7ec4\u4e2d\uff0c\u81ea\u7136\u800c\u7136\u5c31\u6709\u5e8f\u4e86\u3002\u4f8b\u5982\u5bf9 [9,23,2,100,34,398,5] \u6392\u5e8f\uff0c\u5f00\u8f9f\u4e00\u4e2aa[399]\u7684\u6570\u7ec4\uff0c\u7136\u540e \u4ee4a[9] = 1;a[23] = 1;a[2]=1;a[100] = 1; a[34] = 1;a[398] = 1;a[5] = 1 ;\u7136\u540e\u4ece\u5934\u5f00\u59cb\u628a\u6709\u503c\u7684\u5143\u7d20\u53d6\u51fa\u6765\u5c31\u81ea\u7136\u6709\u4e86\u987a\u5e8f\u3002\u5982\u679c\u6709\u5143\u7d20\u7684\u503c\u76f8\u7b49\uff0c\u4f8b\u5982\u67092\u4e2a100\uff0c\u53ea\u9700\u8981\u8ba9a[100] = 2\u5c31\u884c\u4e86\u3002\u4e0b\u9762\u770b\u770b\u5982\u4f55\u53d6\u51fa\u6392\u5e8f\u597d\u7684\u6570\u636e\u3002 //\u8ba1\u6570\u6392\u5e8f vector < int > countSort ( vector < int > & v ){ //1.\u627e\u5230\u6700\u5927\u503c\uff0c\u5f00\u8f9f\u6570\u7ec4 if ( v . empty ()) return v ; int maxValue = v [ 0 ]; for ( int i = 1 ; i < v . size (); i ++ ){ maxValue = v [ i ] > maxValue ? v [ i ] : maxValue ; } //2. \u5f00\u8f9f\u5bf9\u5e94\u7684\u6570\u7ec4\u5e76\u8ba1\u6570 vector < int > b ( maxValue + 1 , 0 ); for ( int i = 0 ; i < v . size (); i ++ ){ b [ v [ i ]] = b [ v [ i ]] + 1 ; } //3. \u53d6\u51fa\u7ed3\u679c v . clear (); for ( int i = 0 ; i < b . size (); i ++ ){ while ( b [ i ] > 0 ){ v . push_back ( i ); b [ i ] = b [ i ] - 1 ; } } return v ; } \u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u80fd\u5904\u7406\u975e\u8d1f\u6570\u7684\u60c5\u51b5\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8ba1\u6570\u6392\u5e8f\u5f53\u5904\u7406\u6709\u5927\u91cf\u91cd\u590d\u6570\u5b57\uff0c\u800c\u6570\u636e\u7684\u8303\u56f4\u4e0d\u5927\u7684\u65f6\u5019\u5f88\u6709\u7528\u3002","title":"4.1 \u8ba1\u6570\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#42","text":"\u6876\u6392\u5e8f\u662f\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230O(n)\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f46\u662f\u5b83\u4f7f\u7528\u7684\u7a7a\u95f4\u8f83\u591a\uff0c\u4e5f\u6709\u8f83\u5927\u7684\u9650\u5236\u6761\u4ef6\uff0c\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u6392\u5e8f\uff0c\u53ea\u9002\u7528\u7279\u5b9a\u7684\u60c5\u51b5\u4e0b\u7684\u6392\u5e8f\u3002 \u4e00\u79cd\u66f4\u4e00\u822c\u7684\u7b97\u6cd5\u601d\u60f3\u662f\u5206\u6876\u6cd5\u3002\u5b83\u7684\u601d\u60f3\u662f\u628a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u8303\u56f4\u5206\u522b\u653e\u5728\u5bf9\u5e94\u7684\u6876\u4e2d\uff0c\u7136\u540e\u518d\u505a\u76f8\u5e94\u7684\u5904\u7406\u3002\u5206\u7ec4\u540e\u5904\u7406\u7684\u590d\u6742\u5ea6\u5c31\u4f1a\u964d\u4f4e\u5f88\u591a\uff0c\u7136\u540e\u518d\u60f3\u529e\u6cd5\u628a\u6bcf\u4e2a\u6876\u4e2d\u7684\u7ed3\u679c\u5408\u5e76\u8d77\u6765\u3002 \u57fa\u6570\u6392\u5e8f\u4e13\u95e8\u9488\u5bf9\u7684\u662f\u6574\u6570\u7684\u6392\u5e8f\uff0c\uff08\u56e0\u4e3a\u5b57\u7b26\u4e32\u4e5f\u662f\u6574\u6570\u8868\u793a\u7684\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u7684\u6392\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6876\u6392\u5e8f\uff09\u3002\u8fd9\u91cc\u56fa\u5b9a\u7684\u628a\u6876\u5b9a\u4e3a10\u4e2a\uff0c\u5206\u522b\u5bf9\u5e94\u6570\u5b570--9.\u9996\u5148\u6309\u7167\u4e2a\u4f4d\u6570\u5b57\u5165\u6876\uff0c\u7136\u540e\u6309\u7167\u5341\u4f4d\u6570\u5b57\uff0c\u7136\u540e\u6309\u7167\u767e\u4f4d\u6570\u5b57\uff0c...\u76f4\u5230\u6700\u9ad8\u4f4d\u6570\u5b57\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u53d6\u51fa\u6765\u5c31\u662f\u4e86\u3002\u4e0b\u9762\u4ee5 [521 310 72 373 15 546 385 856 187 147] \u4e3a\u4f8b\u5b50\u8bf4\u660e\u5177\u4f53\u7684\u8fc7\u7a0b\u3002 // \u8fd4\u56dea\u7684\u7b2ci\u4f4d\u6570\u5b57\uff0c // i = 0 \u4e2a\u4f4d // i = 1 \u5341\u4f4d int gg ( int a , int i ){ int re ; while ( i >= 0 ){ re = a % 10 ; a = a / 10 ; i -- ; } return re ; } vector < int > baseSort ( vector < int > & v ){ if ( v . empty ()) return v ; int maxValue = v [ 0 ]; //\u627e\u5230\u6700\u5927\u503c for ( int i = 0 ; i < v . size (); i ++ ){ maxValue = v [ i ] > maxValue ? v [ i ] : maxValue ; } int high = 0 ; // \u83b7\u5f97\u6700\u9ad8\u4f4d\uff0c\u9700\u8981\u5faa\u73af\u8fd9\u4e48\u591a\u6b21 while ( maxValue ){ maxValue /= 10 ; high ++ ; } // i = 0 \u6309\u7167\u4e2a\u4f4d\u5165\u6876\uff0c\u6536\u96c6 // i = 1 \u6309\u7167\u5341\u4f4d\u5165\u6876\uff0c\u6536\u96c6 // ... for ( int i = 0 ; i < high ; i ++ ){ vector < vector < int >> t ( 10 , vector < int > ( 0 )); // \u5165\u6876\u64cd\u4f5c for ( int j = 0 ; j < v . size (); j ++ ){ t [ gg ( v [ j ], i ) ]. push_back ( v [ j ]); } // \u4ece0\u53f7\u6876\u5f00\u59cb\u6309\u7167\u987a\u5e8f\u6536\u96c6 v . clear (); for ( auto a : t ){ for ( auto b : a ){ v . push_back ( b ); } } } return v ; }","title":"4.2 \u57fa\u6570\u6392\u5e8f(\u6876\u6392\u5e8f)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#5","text":"\u5feb\u901f\u6392\u5e8f\u662f\u5206\u6cbb\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f o(nlogn) ,\u5728\u6570\u636e\u6ca1\u6709\u7279\u6b8a\u7684\u89c4\u5f8b\u7684\u60c5\u51b5\u4e0b\uff0c\u5feb\u901f\u6392\u5e8f\u662f\u9996\u9009\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u5b83\u7684\u601d\u60f3\u4e5f\u7ecf\u5e38\u7528\u6765\u51fa\u5404\u79cd\u7b97\u6cd5\u9898\u76ee\u3002 \u5feb\u901f\u6392\u5e8f\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\u5143\u7d20\uff0c \u901a\u8fc7\u6bd4\u8f83\u5176\u4ed6\u5143\u7d20\u548c\u8be5\u5143\u7d20\u7684\u5927\u5c0f\u79fb\u52a8\u4f4d\u7f6e\uff0c\u6700\u7ec8\u628a\u8be5\u5143\u7d20\u79fb\u52a8\u5230\u6392\u597d\u5e8f\u4e4b\u540e\u5b83\u5e94\u8be5\u5904\u4e8e\u7684\u4f4d\u7f6e\u4e0a\u3002 \u5feb\u901f\u6392\u5e8f\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u505a\u5230 nlogn \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5feb\u901f\u6392\u5e8f\u7684\u5173\u952e\u5c31\u662f\u5b9e\u73b0\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u901a\u5e38\u53eb\u505a partition \u5728 partiton \u4e2d\uff0c i \u6307\u5411\u7684\u59cb\u7ec8\u662f\u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c i + 1 \u53ef\u80fd\u662f j, \u4e5f\u53ef\u80fd\u662f\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019 i + 1 == j, \u4e00\u65e6\u9047\u5230\u5927\u4e8e\u57fa\u51c6\u7684\u503c\uff0c j++ \u800c i \u4e0d\u52a8\uff0c i \u548c j \u62c9\u5f00\u8ddd\u79bb\uff0c \u4e0b\u4e00\u6b21\u5c0f\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u51fa\u73b0\u7684\u65f6\u5019\uff0c \u4ea4\u6362\u7684\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\u548c j. \u5faa\u73af\u7ed3\u675f\u7684\u65f6\u5019\uff0c i \u6307\u5411\u7684\u662f\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8ebase\u7684\u503c\uff0c\u6240\u4ee5\u53ea\u8981\u628a i + 1 \u548c base \u4ea4\u6362\uff0c base \u5c31\u653e\u5728\u4e86\u6392\u5e8f\u4e4b\u540e\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u503c\u7684\u51fd\u6570\u662f\u57fa\u51c6\u5143\u7d20\u662f\u7b2c\u51e0\u5927(\u5c0f)\u3002","title":"5. \u5feb\u901f\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#51-c","text":"// \u5feb\u901f\u6392\u5e8f\u7684\u4e00\u8d9f\u8fc7\u7a0b int partition ( int * arr , int left , int right ) { int base = arr [ right ]; // \u9009\u62e9\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u57fa\u51c6\u5143\u7d20 int i = left - 1 ; // \u904d\u5386[left, right-1], \u6bcf\u4e00\u4e2a\u90fd\u548c\u57fa\u51c6\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u57fa\u51c6\uff0c\u5c31\u4ea4\u6362 for ( int j = left ; j < right ; j ++ ) { if ( arr [ j ] <= arr [ base ]) { i = i + 1 ; swap ( arr , i , j ); } } swap ( arr , i + 1 , right ); return i + 1 ; }","title":"5.1 C\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#52-python","text":"def partition ( array , begin , end ): base = array [ end ] i = begin - 1 for j in range ( begin , end ): if array [ j ] < base : i += 1 array [ i ], array [ j ] = array [ j ], array [ i ] array [ i + 1 ], array [ end ] = array [ end ], array [ i + 1 ] return i + 1 # \u9012\u5f52\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f def quicksort ( array , begin , end ): if begin >= end : return mid = partition ( array , begin , end ) quicksort ( array , begin , mid - 1 ) quicksort ( array , mid + 1 , end ) return array # \u975e\u9012\u5f52\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f def quickquicksort ( array ): begin = 0 end = len ( array ) - 1 stack = [( begin , end )] while len ( stack ) > 0 : begin , end = stack . pop () if begin >= end : continue mid = partition ( array , begin , end ) stack . append (( begin , mid - 1 )) stack . append (( mid + 1 , end )) return array","title":"5.2 Python \u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#53","text":"","title":"5.3 \u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#531-k","text":"\u5982\u679c\u67e5\u627e\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\u6570\u7ec4\u5373\u53ef\u3002\u5982\u679c\u662f\u7b2c2\u5c0f\u7684\uff0c\u9996\u5148\u904d\u5386\u4e00\u904d\u627e\u5230\u6700\u5c0f\u7684\uff0c\u7136\u540e\u518d\u904d\u5386\u4e00\u904d\u5c31\u53ef\u4ee5\u627e\u5230\u7b2c\u4e8c\u5c0f\u7684\u4e86\u3002\u6240\u4ee5\uff0c\u6734\u7d20\u7684\u89e3\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fo(kn),\u4e0ek\u6709\u5173\u7cfb\u3002 \u5feb\u901f\u6392\u5e8f partition \u51fd\u6570\u7684\u7279\u70b9\u662f\u6bcf\u6b21\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u6392\u597d\u5e8f\u4e4b\u540e\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u3002\u5047\u8bbepartition(0,n-1) = i, \u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u8fd9\u6837\u7684\u4fe1\u606f\uff0c[0..i-1]\u4f4d\u7f6e\u7684\u5143\u7d20\u90fd\u6bd4A[i]\u5c0f\uff0c\u800ci\u540e\u9762\u7684\u5143\u7d20\u90fd\u6bd4A[i]\u5927\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u6bcf\u6b21\u8c03\u7528 partition \u90fd\u53ef\u4ee5\u53bb\u6389\u4e00\u534a\u5143\u7d20\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u80fd\u964d\u5230o(n)\u4e86\u3002 lintcode int Kth ( vector < int > & v , int k ){ if ( v . empty () || k <= 0 ) return - 1 ; int begin = 0 ; int end = v . size () - 1 ; while ( true ){ int i = partition ( v , begin , end ); if ( i + 1 == k ) return v [ i ]; if ( i + 1 < k ){ begin = i + 1 ; } else { end = i - 1 ; } } } leetcode int partition ( vector < int > & v , int i , int j ){ if ( i > j ) return - 1 ; int tmp ; int start = i ; int end = j ; bool base = true ; // \u6307\u793a i \u662f\u5426\u6307\u5411base \u5143\u7d20\uff0c\u5982\u679ci \u4e0d\u6307\u5411base\u5143\u7d20\uff0c\u5219j\u80af\u5b9a\u6307\u5411base\u5143\u7d20\u3002 while ( i < j ){ if ( v [ i ] > v [ j ] && base ){ tmp = v [ j ]; v [ j ] = v [ i ]; v [ i ] = tmp ; i = i + 1 ; base = false ; } else if ( v [ i ] > v [ j ] && ! base ){ tmp = v [ j ]; v [ j ] = v [ i ]; v [ i ] = tmp ; j = j - 1 ; base = true ; } else if ( base ){ j -- ; } else { i ++ ; } } return i ; } int kthLargestElement ( vector < int >& nums , int k ) { int left = 0 , right = nums . size () - 1 , len = nums . size (); while ( true ) { int pos = partition ( nums , left , right ); if ( len - pos == k ) return nums [ pos ]; if ( len - pos < k ) right = pos - 1 ; else left = pos + 1 ; } return - 1 ; }","title":"5.3.1 \u7b2cK\u5c0f\u7684\u5143\u7d20"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#532","text":"\u4e00\u822c\u7684\u505a\u6cd5\u662f\u6392\u5e8f\uff0c\u8fd4\u56de\u4e2d\u95f4\u7684\u6570\u5b57\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fo(nlogn). \u5176\u5b9e\u8fd8\u6709o(n)\u7684\u7b97\u6cd5\uff0c\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u4e5f\u662f\u5229\u7528\u4e86\u5feb\u901f\u6392\u5e8f\u7684partition\u51fd\u6570\u3002 lintcode int median ( vector < int > & nums ) { if ( nums . empty ()) return - 1 ; int len = nums . size (); return kthLargestElement ( nums , len / 2 + 1 ); }","title":"5.3.2 \u67e5\u627e\u4e2d\u4f4d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#6","text":"\u5806\u6392\u5e8f\u7684\u539f\u7406\u662f\u5148\u7528\u6240\u6709\u5143\u7d20\u5efa\u5806\uff0c \u7136\u540e\u6bcf\u6b21\u53d6\u5806\u9876\u5143\u7d20\u653e\u5728\u6700\u540e\uff0c\u8c03\u6574\u5806\uff0c \u7136\u540e\u518d\u53d6\u5806\u9876\u5143\u7d20\uff0c\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u5230\u5806\u4e3a\u7a7a\u3002 \u56e0\u4e3a\u8c03\u6574\u5806\u53ea\u9700\u8981\u6d88\u8017 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5806\u6392\u5e8f\u5171\u9700\u8981 nlogn \u7684\u65f6\u95f4\u3002 \u5806\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0 \u5efa\u7acb\u5806 \u548c \u8c03\u6574\u5806 \u7684\u65b9\u6cd5\u3002 // \u8c03\u6574\u5806\u4e2d\u7684\u8282\u70b9 i\uff0c \u4f7f\u5f97\u91cd\u65b0\u6ee1\u8db3\u5927\u9876\u5806 void heapify ( int * arr , int size , int i ) { int left = 2 * i + 1 ; int right = 2 * i + 2 ; int large = i ; if ( left < size && arr [ left ] > arr [ large ]) { large = left ; } if ( right < size && arr [ right ] > arr [ large ]) { large = right ; } // \u5982\u679c\u627e\u5230\u5b50\u8282\u70b9\u4e2d\u6709\u8f83\u5927\u7684\uff0c\u548c\u90a3\u4e2a\u8f83\u5927\u7684\u4ea4\u6362 if ( large != i ) { swap ( arr , i , large ); heapify ( arr , size , large ); } return ; } // \u5efa\u7acb\u5806 void build_heap ( int * arr , int size ) { // \u6570\u7ec4\u540e\u534a\u90e8\u5206\u662f\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u7528\u8c03\u6574 // \u5bf9\u6bcf\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\u8c03\u6574\u4e00\u904d\u5806\uff0c\u4f7f\u5806\u6ee1\u8db3\u6761\u4ef6 int middle = size / 2 ; for ( int i = middle ; i >= 0 ; i ++ ) { heapify ( arr , size , i ); } return ; } void heap_sort ( int * arr , int size ) { int end = size ; build_heap ( arr , end ); while ( end > 0 ) { // \u5806\u9876\u6700\u5927\u7684\u503c\u653e\u5728\u662f\u6700\u540e\uff0c\u5806\u5143\u7d20\u4e2a\u6570\u51cf\u4e00 swap ( arr , 0 , end - 1 ); // \u5806\u9876\u5143\u7d20\u6362\u8fc7\uff0c\u8c03\u6574\u5b83 heapify ( arr , end - 1 , 0 ); end -- ; } return ; }","title":"6. \u5806\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#7","text":"\u8bf4\u660e\uff1a \u5f53\u539f\u8868\u6709\u5e8f\u6216\u57fa\u672c\u6709\u5e8f\u65f6\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u548c\u5192\u6ce1\u6392\u5e8f\u5c06\u5927\u5927\u51cf\u5c11\u6bd4\u8f83\u6b21\u6570\u548c\u79fb\u52a8\u8bb0\u5f55\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u964d\u81f3O\uff08n\uff09\uff1b \u800c\u5feb\u901f\u6392\u5e8f\u5219\u76f8\u53cd\uff0c\u5f53\u539f\u8868\u57fa\u672c\u6709\u5e8f\u65f6\uff0c\u5c06\u8715\u5316\u4e3a\u5192\u6ce1\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u63d0\u9ad8\u4e3aO\uff08n2\uff09\uff1b \u539f\u8868\u662f\u5426\u6709\u5e8f\uff0c\u5bf9\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u548c\u57fa\u6570\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f71\u54cd\u4e0d\u5927\u3002","title":"7. \u6392\u5e8f\u65b9\u6cd5\u6bd4\u8f83"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#8","text":"LeetCode\u9898\u76ee \u96be\u5ea6 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u4e2d\u7b49","title":"8. \u6392\u5e8f\u76f8\u5173\u9898\u76ee"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/","text":"\u6808 \u00b6 \u6808\u662f\u4e00\u79cd\u5b9e\u73b0\u4e86\u540e\u8fdb\u5148\u51fa\u7684\u89c4\u5219\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u5b9e\u73b0 stack .\u4f7f\u7528\u7684\u65f6\u5019 include <stack> ,\u652f\u6301\u7684\u64cd\u4f5c\u6709 push(),pop(),top() ;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c pop \u7684\u4f5c\u7528\u662f\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u800c\u4e0d\u4f1a\u8fd4\u56de\u6808\u9876\u5143\u7d20\uff0c\u5b9e\u73b0\u8fd4\u56de\u6808\u9876\u5143\u7d20\u5e76\u5f39\u51fa\u7684\u64cd\u4f5c\u5e94\u8be5\u662f int a = s.top(); s.pop(); . 1. \u6808\u76f8\u5173\u7684\u4e60\u9898 \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u4e2d\u7b49 456. 132\u6a21\u5f0f \u4e2d\u7b49 921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 \u4e2d\u7b49 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 \u4e2d\u7b49 LintCode\u9898\u76ee \u96be\u5ea6 423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f 368. \u8868\u8fbe\u5f0f\u6c42\u503c lintcode","title":"\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_1","text":"\u6808\u662f\u4e00\u79cd\u5b9e\u73b0\u4e86\u540e\u8fdb\u5148\u51fa\u7684\u89c4\u5219\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u5b9e\u73b0 stack .\u4f7f\u7528\u7684\u65f6\u5019 include <stack> ,\u652f\u6301\u7684\u64cd\u4f5c\u6709 push(),pop(),top() ;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c pop \u7684\u4f5c\u7528\u662f\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u800c\u4e0d\u4f1a\u8fd4\u56de\u6808\u9876\u5143\u7d20\uff0c\u5b9e\u73b0\u8fd4\u56de\u6808\u9876\u5143\u7d20\u5e76\u5f39\u51fa\u7684\u64cd\u4f5c\u5e94\u8be5\u662f int a = s.top(); s.pop(); .","title":"\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#1","text":"LeetCode\u9898\u76ee \u96be\u5ea6 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u4e2d\u7b49 456. 132\u6a21\u5f0f \u4e2d\u7b49 921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 \u4e2d\u7b49 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 \u4e2d\u7b49 LintCode\u9898\u76ee \u96be\u5ea6 423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f 368. \u8868\u8fbe\u5f0f\u6c42\u503c lintcode","title":"1. \u6808\u76f8\u5173\u7684\u4e60\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/","text":"\u6811\u72b6\u6570\u7ec4 \u00b6 \u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u80fd\u591f\u5feb\u901f\u5b8c\u6210\u4e0b\u672f\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\u5168\u4e3a0\u7684\u6570\u5217\uff0ca1,a2,a3,a4,...an \u7ed9\u5b9ai,\u8ba1\u7b97a1+a2+...+ai \u7ed9\u5b9ai\u548cx,\u8ba1\u7b97ai = ai + x; \u4e00\u53e5\u8bdd\u603b\u7ed3\uff0c\u5c31\u662f\u65e2\u8981\u5feb\u901f\u6c42\u89e3\u533a\u95f4\u548c\uff0c\u53c8\u8981\u5feb\u901f\u66f4\u65b0\u533a\u95f4\u548c\u3002 \u4e0a\u9762\u63d0\u5230\u7684\u7ebf\u6bb5\u6811\u5176\u5b9e\u5df2\u7ecf\u6ee1\u8db3\u4e86\u4e0a\u9762\u7684\u8981\u6c42\uff0c\u53ea\u4e0d\u8fc7\u6709\u4e9b(\u5927\u6750\u5c0f\u7528\u4e86)\u3002\u53ef\u4ee5\u7528\u66f4\u7b80\u5355\u7684\u7ed3\u6784\u5b9e\u73b0\u8fd9\u4e2a\u8981\u6c42\u3002 \u628a\u7ebf\u6bb5\u6811\u6240\u6709\u7684\u53f3\u8282\u70b9\u53bb\u6389\uff0c\u53ea\u5269\u4e0b\u5de6\u8282\u70b9\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u6295\u5c04\u5230\u6700\u4e0b\u9762\u4e00\u884c\uff0c\u5c31\u5f62\u6210\u4e86\u6811\u72b6\u6570\u7ec4\u7684\u7ed3\u6784\u3002\u4f8b\u59828\u4e2a\u5143\u7d20\u7684\u6811\u72b6\u6570\u7ec4\u7684\u7ed3\u6784\u662f\uff1a A[1] A[2] A[3] A[4] A[5] A[6] A[7] A[8] 1 [1,2] 3 [1,4] 5 [5,6] 7 [1,8] 0001 0010 0011 0100 0101 0110 0111 1000 1. \u6c42\u548c\u64cd\u4f5c \u00b6 \u6709\u4e86\u4e0a\u9762\u7684\u7ed3\u6784\uff0c\u5982\u679c\u60f3\u6c42 c[3]+c[4]+c[5] \u5c31\u662f A[4]-A[2]+A[5] ; \u5982\u679c\u60f3\u6c42 c[4] ,\u5c31\u662f A[4]-A[3]-A[2] ; \u603b\u4e4b\uff0c\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u548c\u603b\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5185\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u503c\u6c42\u51fa\u6765\u3002\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4f4d\u6765\u4fdd\u5b58\uff0c\u901a\u8fc7\u5bfb\u627e\u5176\u4e2d\u7684\u89c4\u5f8b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u4f4d\u64cd\u4f5c\u5b9e\u73b0\u6811\u72b6\u6570\u7ec4\u7684\u6c42\u548c\u548c\u66f4\u65b0\u3002\u4e0a\u9762\u8868\u683c\u7684\u6700\u540e\u4e00\u884c\u662f\u5bf9\u6811\u72b6\u6570\u7ec4A\u8fdb\u884c\u7684\u4e8c\u8fdb\u5236\u7684\u7f16\u7801\u3002 \u6c42\u6811\u72b6\u6570\u7ec4\u7684\u524di\u9879\u548c\uff1a i \u8868\u8fbe\u5f0f \u4e8c\u8fdb\u5236\u8868\u793a 1 A[1] 0001 2 A[2] 0010 3 A[3]+A[2] 0011+0010 4 A[4] 0100 5 A[5]+A[4] 0101+0100 6 A[6]+A[4] 0110+0100 7 A[7]+A[6]+A[4] 0111+0110+0100 8 A[8] 1000 \u4ece\u4e8c\u8fdb\u5236\u5f53\u4e2d\u5bfb\u627e\u89c4\u5f8b\uff0c\u6c42\u524di\u9879\uff1a \u521d\u59cb\u5316sum=0; \u4ece\u6811\u72b6\u6570\u7ec4A[i]\u5f00\u59cb\uff0c\u628aA[i]\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\u53bb\u3002\u7136\u540e\u4ecei\u4e2d\u51cf\u53bbi\u6700\u4f4e\u4f4d1\u5bf9\u5e94\u7684\u6570\u5b57\u3002i\u7684\u6700\u4f4e\u4f4d\u76841\u5bf9\u5e94\u7684\u6570\u5b57\u7684\u503c\u7684\u5927\u5c0f\u53ef\u4ee5\u7528 i&(-i) \u6c42\u5f97\u3002 \u76f4\u5230i\u7684\u7ed3\u679c\u4e3a0\u505c\u6b62\u3002 \u6309\u7167\u4e0a\u9762\u7684\u6b65\u9aa4\u5206\u6790\u4e0a\u9762\u8868\u683c\u4e2d\u7684\u6bcf\u4e00\u884c\u7684\u6c42\u89e3\uff1a 0001\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57\uff081\uff09\u4e4b\u540e\u4e3a0\uff0c\u6240\u4ee5\u6700\u540e\u7ed3\u679c\u662fA[1] 0010\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(2)\u4e4b\u540e\u4e3a0\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[2] 0011\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(1)\u4e4b\u540e\u4e3a(0010,A[2]),\u800c0010\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(2)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[3]+A[2] 0100\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(4)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[4] 0101\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(1)\u4e4b\u540e\u4e3a0100,0100\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(4)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[5]+A[4] 0110 = 0110 + 0100 = A[6] + A[4] 0111 = 0111 + 0110 + 0100 + A[7] + A[6] + A[4] 1000 = 1000 = A[8] \u4e0a\u9762\u5c31\u662fBIT\u6570\u7ec4\u6c42\u548c\u7684\u8be6\u7ec6\u89e3\u91ca\uff0c\u4e86\u89e3\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u77e5\u9053\u5982\u4f55\u6c42\u89e3\u4e00\u4e2a\u6570\u5b57\u6700\u4f4e\u4f4d1\u5bf9\u5e94\u7684\u503c\uff0c\u5b9e\u73b0BIT\u7684\u6c42\u548c\u5e94\u8be5\u4e0d\u96be\u3002\u4e0b\u9762\u770b\u770bBIT\u5982\u4f55\u66f4\u65b0\u3002 \u5047\u5982\u6211\u4eec\u60f3\u66f4\u65b0c[2]\u7684\u503c\uff0c\u90a3\u4e48A\u4e2d\u6240\u6709\u5305\u542bc[2]\u7684\u503c\u90fd\u53ef\u80fd\u53d1\u751f\u53d8\u5316\uff0c\u5230\u5e95\u54ea\u4e9b\u503c\u5305\u542bc[2]\u5462\uff1f\u4ece\u4e0a\u9762\u7684\u8868\u683c\u6211\u4eec\u770b\u51fa\uff0c\u5305\u542bc[2]\u7684A\u5143\u7d20\u6709A[2],A[4],A[8];\u4e0b\u9762\u518d\u5217\u4e00\u4e2a\u8868\u683c\uff0c\u663e\u793a\u6bcf\u4e2a\u5143\u7d20\u7684\u66f4\u65b0\u90fd\u6d89\u53ca\u54ea\u4e9b\u5143\u7d20\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83\u5bb9\u6613\u627e\u5230\u5176\u4e2d\u7684\u89c4\u5f8b\u3002 2. \u66f4\u65b0\u64cd\u4f5c \u00b6 \u66f4\u65b0\u7684\u503c \u6d89\u53ca\u7684BIT \u4e8c\u8fdb\u5236\u8868\u793a c[1] A[1],A[2],A[4],A[8] 0001,0010,0100,1000 c[2] A[2],A[4],A[8] 0010,0100,1000 c[3] A[3],A[4],A[8] 0011,0100,1000 c[4] A[4],A[8] 0100,1000 c[5] A[5],A[6],A[8] 0101,0110,1000 c[6] A[6],A[8] 0110,1000 c[7] A[7],A[8] 0111,1000 c[8] A[8] 1000 \u53ef\u4ee5\u770b\u5230\uff0c\u66f4\u65b0\u7684\u65f6\u5019\u548c\u6c42\u548c\u7684\u65f6\u5019\u987a\u5e8f\u4f3c\u4e4e\u76f8\u53cd\uff0c\u89c4\u5f8b\u662f\uff1a\u5982\u679c\u8981\u66f4\u65b0c[i],\u90a3\u4e48\u5c31\u4ecei\u5f00\u59cb\uff0c\u66f4\u65b0A[i]\u4e4b\u540e\u5c06i\u66f4\u65b0\u4e3a i = i+(i&(-i)) ,\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a\u6b62\u3002\u56e0\u4e3a\u65e0\u8bba\u66f4\u65b0\u54ea\u4e2a\u5143\u7d20\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u6240\u6709\u503c\u7684\u548c\uff0c\u6240\u4ee5\u5fc5\u987b\u66f4\u65b0\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 i&(-i) \u662f\u5f97\u5230i\u7684\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u503c\u7684\u5927\u5c0f\uff0c\u7136\u540e\u52a0\u5230i\u4e0a\uff0c\u5bf9\u6bd4\u4e0a\u9762\u7684\u8868\u683c\u3002i\u7684\u66f4\u65b0\u60c5\u51b5\u662f\uff1a 0001(1)-0001+0001(2)-0010+0010(4)-0100+0100(8)=1000 \u505c\u6b62 0010(2)-0010+0010(4)-0100+0100(8)=1000 \u505c\u6b62 0011(3)-0011+0001(4)-0100+0100(8)=1000 \u505c\u6b62 0100(4)-0100+0100(8)=1000 \u505c\u6b62 0101(5)-0101+0001(6)-0110+0010(8)=1000 \u505c\u6b62 0110(6)-0110+0010(8)=1000 \u505c\u6b62 0111(7)-0111+0001(8)=1000 \u505c\u6b62 1000(8) = 1000 \u505c\u6b62 \u6811\u72b6\u6570\u7ec4\u7684\u5b9e\u73b0\uff1a #include <iostream> #include <vector> using namespace std ; class BIT { public : vector < int > v ; int n ; BIT (){} // \u6784\u5efan\u4e2a\u5143\u7d20\u7684\u7a7a\u6811\u72b6\u6570\u7ec4 BIT ( int num ){ n = num + 1 ; // v[0]\u4e0d\u7528\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\u3002 for ( int i = 0 ; i < n ; i ++ ){ v . push_back ( 0 ); } } //\u6c42\u524di\u9879\u7684\u548c int sum ( int i ){ int s = 0 ; while ( i > 0 ){ s += v [ i ]; i -= i & ( - i ); } return s ; } //\u7b2ci \u9879\u52a0\u4e0ax void add ( int i , int x ){ while ( i <= n ){ v [ i ] += x ; i += i & ( - i ); } } //\u6839\u636e\u4f20\u5165\u7684\u6570\u7ec4c\u6784\u5efa\u5b83\u7684\u6811\u72b6\u6570\u7ec4 void create ( vector < int > & c ){ for ( int i = 0 ; i < c . size (); i ++ ){ add ( i + 1 , c [ i ]); } } }; void printV ( vector < int > a ){ for ( auto aa : a ){ cout << aa << \" \" ; } cout << endl ; } int main () { vector < int > c = { 3 , 7 , 6 , 5 , 4 , 2 , 8 , 1 }; BIT * b = new BIT ( c . size ()); b -> create ( c ); printV ( b -> v ); b -> add ( 8 , 10 ); printV ( b -> v ); b -> add ( 1 , 1 ); printV ( b -> v ); return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a 0 3 10 6 21 4 6 8 36 0 3 10 6 21 4 6 8 46 0 4 11 6 22 4 6 8 47 \u53ef\u4ee5\u770b\u5230\uff0c\u6811\u72b6\u6570\u7ec4\u4ec5\u4ec5\u4f7f\u7528\u4f4d\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6c42\u548c\u548c\u66f4\u65b0\uff0c\u6bd4\u7ebf\u6bb5\u6811\u7684\u5f00\u9500\u8981\u5c11\u5f88\u591a\uff0c\u6240\u4ee5\uff0c\u4e00\u4e9b\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e0d\u5b9c\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002 \u53c2\u8003\u535a\u6587\uff1a http://www.cnblogs.com/wuwangchuxin0924/p/5921130.html http://www.cnblogs.com/GeniusYang/p/5756975.html 3. \u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u4e2d\u7b49 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u56f0\u96be","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_1","text":"\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u80fd\u591f\u5feb\u901f\u5b8c\u6210\u4e0b\u672f\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\u5168\u4e3a0\u7684\u6570\u5217\uff0ca1,a2,a3,a4,...an \u7ed9\u5b9ai,\u8ba1\u7b97a1+a2+...+ai \u7ed9\u5b9ai\u548cx,\u8ba1\u7b97ai = ai + x; \u4e00\u53e5\u8bdd\u603b\u7ed3\uff0c\u5c31\u662f\u65e2\u8981\u5feb\u901f\u6c42\u89e3\u533a\u95f4\u548c\uff0c\u53c8\u8981\u5feb\u901f\u66f4\u65b0\u533a\u95f4\u548c\u3002 \u4e0a\u9762\u63d0\u5230\u7684\u7ebf\u6bb5\u6811\u5176\u5b9e\u5df2\u7ecf\u6ee1\u8db3\u4e86\u4e0a\u9762\u7684\u8981\u6c42\uff0c\u53ea\u4e0d\u8fc7\u6709\u4e9b(\u5927\u6750\u5c0f\u7528\u4e86)\u3002\u53ef\u4ee5\u7528\u66f4\u7b80\u5355\u7684\u7ed3\u6784\u5b9e\u73b0\u8fd9\u4e2a\u8981\u6c42\u3002 \u628a\u7ebf\u6bb5\u6811\u6240\u6709\u7684\u53f3\u8282\u70b9\u53bb\u6389\uff0c\u53ea\u5269\u4e0b\u5de6\u8282\u70b9\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u6295\u5c04\u5230\u6700\u4e0b\u9762\u4e00\u884c\uff0c\u5c31\u5f62\u6210\u4e86\u6811\u72b6\u6570\u7ec4\u7684\u7ed3\u6784\u3002\u4f8b\u59828\u4e2a\u5143\u7d20\u7684\u6811\u72b6\u6570\u7ec4\u7684\u7ed3\u6784\u662f\uff1a A[1] A[2] A[3] A[4] A[5] A[6] A[7] A[8] 1 [1,2] 3 [1,4] 5 [5,6] 7 [1,8] 0001 0010 0011 0100 0101 0110 0111 1000","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#1","text":"\u6709\u4e86\u4e0a\u9762\u7684\u7ed3\u6784\uff0c\u5982\u679c\u60f3\u6c42 c[3]+c[4]+c[5] \u5c31\u662f A[4]-A[2]+A[5] ; \u5982\u679c\u60f3\u6c42 c[4] ,\u5c31\u662f A[4]-A[3]-A[2] ; \u603b\u4e4b\uff0c\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u548c\u603b\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5185\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u503c\u6c42\u51fa\u6765\u3002\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4f4d\u6765\u4fdd\u5b58\uff0c\u901a\u8fc7\u5bfb\u627e\u5176\u4e2d\u7684\u89c4\u5f8b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u4f4d\u64cd\u4f5c\u5b9e\u73b0\u6811\u72b6\u6570\u7ec4\u7684\u6c42\u548c\u548c\u66f4\u65b0\u3002\u4e0a\u9762\u8868\u683c\u7684\u6700\u540e\u4e00\u884c\u662f\u5bf9\u6811\u72b6\u6570\u7ec4A\u8fdb\u884c\u7684\u4e8c\u8fdb\u5236\u7684\u7f16\u7801\u3002 \u6c42\u6811\u72b6\u6570\u7ec4\u7684\u524di\u9879\u548c\uff1a i \u8868\u8fbe\u5f0f \u4e8c\u8fdb\u5236\u8868\u793a 1 A[1] 0001 2 A[2] 0010 3 A[3]+A[2] 0011+0010 4 A[4] 0100 5 A[5]+A[4] 0101+0100 6 A[6]+A[4] 0110+0100 7 A[7]+A[6]+A[4] 0111+0110+0100 8 A[8] 1000 \u4ece\u4e8c\u8fdb\u5236\u5f53\u4e2d\u5bfb\u627e\u89c4\u5f8b\uff0c\u6c42\u524di\u9879\uff1a \u521d\u59cb\u5316sum=0; \u4ece\u6811\u72b6\u6570\u7ec4A[i]\u5f00\u59cb\uff0c\u628aA[i]\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\u53bb\u3002\u7136\u540e\u4ecei\u4e2d\u51cf\u53bbi\u6700\u4f4e\u4f4d1\u5bf9\u5e94\u7684\u6570\u5b57\u3002i\u7684\u6700\u4f4e\u4f4d\u76841\u5bf9\u5e94\u7684\u6570\u5b57\u7684\u503c\u7684\u5927\u5c0f\u53ef\u4ee5\u7528 i&(-i) \u6c42\u5f97\u3002 \u76f4\u5230i\u7684\u7ed3\u679c\u4e3a0\u505c\u6b62\u3002 \u6309\u7167\u4e0a\u9762\u7684\u6b65\u9aa4\u5206\u6790\u4e0a\u9762\u8868\u683c\u4e2d\u7684\u6bcf\u4e00\u884c\u7684\u6c42\u89e3\uff1a 0001\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57\uff081\uff09\u4e4b\u540e\u4e3a0\uff0c\u6240\u4ee5\u6700\u540e\u7ed3\u679c\u662fA[1] 0010\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(2)\u4e4b\u540e\u4e3a0\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[2] 0011\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(1)\u4e4b\u540e\u4e3a(0010,A[2]),\u800c0010\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(2)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[3]+A[2] 0100\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(4)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[4] 0101\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(1)\u4e4b\u540e\u4e3a0100,0100\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(4)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[5]+A[4] 0110 = 0110 + 0100 = A[6] + A[4] 0111 = 0111 + 0110 + 0100 + A[7] + A[6] + A[4] 1000 = 1000 = A[8] \u4e0a\u9762\u5c31\u662fBIT\u6570\u7ec4\u6c42\u548c\u7684\u8be6\u7ec6\u89e3\u91ca\uff0c\u4e86\u89e3\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u77e5\u9053\u5982\u4f55\u6c42\u89e3\u4e00\u4e2a\u6570\u5b57\u6700\u4f4e\u4f4d1\u5bf9\u5e94\u7684\u503c\uff0c\u5b9e\u73b0BIT\u7684\u6c42\u548c\u5e94\u8be5\u4e0d\u96be\u3002\u4e0b\u9762\u770b\u770bBIT\u5982\u4f55\u66f4\u65b0\u3002 \u5047\u5982\u6211\u4eec\u60f3\u66f4\u65b0c[2]\u7684\u503c\uff0c\u90a3\u4e48A\u4e2d\u6240\u6709\u5305\u542bc[2]\u7684\u503c\u90fd\u53ef\u80fd\u53d1\u751f\u53d8\u5316\uff0c\u5230\u5e95\u54ea\u4e9b\u503c\u5305\u542bc[2]\u5462\uff1f\u4ece\u4e0a\u9762\u7684\u8868\u683c\u6211\u4eec\u770b\u51fa\uff0c\u5305\u542bc[2]\u7684A\u5143\u7d20\u6709A[2],A[4],A[8];\u4e0b\u9762\u518d\u5217\u4e00\u4e2a\u8868\u683c\uff0c\u663e\u793a\u6bcf\u4e2a\u5143\u7d20\u7684\u66f4\u65b0\u90fd\u6d89\u53ca\u54ea\u4e9b\u5143\u7d20\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83\u5bb9\u6613\u627e\u5230\u5176\u4e2d\u7684\u89c4\u5f8b\u3002","title":"1. \u6c42\u548c\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#2","text":"\u66f4\u65b0\u7684\u503c \u6d89\u53ca\u7684BIT \u4e8c\u8fdb\u5236\u8868\u793a c[1] A[1],A[2],A[4],A[8] 0001,0010,0100,1000 c[2] A[2],A[4],A[8] 0010,0100,1000 c[3] A[3],A[4],A[8] 0011,0100,1000 c[4] A[4],A[8] 0100,1000 c[5] A[5],A[6],A[8] 0101,0110,1000 c[6] A[6],A[8] 0110,1000 c[7] A[7],A[8] 0111,1000 c[8] A[8] 1000 \u53ef\u4ee5\u770b\u5230\uff0c\u66f4\u65b0\u7684\u65f6\u5019\u548c\u6c42\u548c\u7684\u65f6\u5019\u987a\u5e8f\u4f3c\u4e4e\u76f8\u53cd\uff0c\u89c4\u5f8b\u662f\uff1a\u5982\u679c\u8981\u66f4\u65b0c[i],\u90a3\u4e48\u5c31\u4ecei\u5f00\u59cb\uff0c\u66f4\u65b0A[i]\u4e4b\u540e\u5c06i\u66f4\u65b0\u4e3a i = i+(i&(-i)) ,\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a\u6b62\u3002\u56e0\u4e3a\u65e0\u8bba\u66f4\u65b0\u54ea\u4e2a\u5143\u7d20\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u6240\u6709\u503c\u7684\u548c\uff0c\u6240\u4ee5\u5fc5\u987b\u66f4\u65b0\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 i&(-i) \u662f\u5f97\u5230i\u7684\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u503c\u7684\u5927\u5c0f\uff0c\u7136\u540e\u52a0\u5230i\u4e0a\uff0c\u5bf9\u6bd4\u4e0a\u9762\u7684\u8868\u683c\u3002i\u7684\u66f4\u65b0\u60c5\u51b5\u662f\uff1a 0001(1)-0001+0001(2)-0010+0010(4)-0100+0100(8)=1000 \u505c\u6b62 0010(2)-0010+0010(4)-0100+0100(8)=1000 \u505c\u6b62 0011(3)-0011+0001(4)-0100+0100(8)=1000 \u505c\u6b62 0100(4)-0100+0100(8)=1000 \u505c\u6b62 0101(5)-0101+0001(6)-0110+0010(8)=1000 \u505c\u6b62 0110(6)-0110+0010(8)=1000 \u505c\u6b62 0111(7)-0111+0001(8)=1000 \u505c\u6b62 1000(8) = 1000 \u505c\u6b62 \u6811\u72b6\u6570\u7ec4\u7684\u5b9e\u73b0\uff1a #include <iostream> #include <vector> using namespace std ; class BIT { public : vector < int > v ; int n ; BIT (){} // \u6784\u5efan\u4e2a\u5143\u7d20\u7684\u7a7a\u6811\u72b6\u6570\u7ec4 BIT ( int num ){ n = num + 1 ; // v[0]\u4e0d\u7528\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\u3002 for ( int i = 0 ; i < n ; i ++ ){ v . push_back ( 0 ); } } //\u6c42\u524di\u9879\u7684\u548c int sum ( int i ){ int s = 0 ; while ( i > 0 ){ s += v [ i ]; i -= i & ( - i ); } return s ; } //\u7b2ci \u9879\u52a0\u4e0ax void add ( int i , int x ){ while ( i <= n ){ v [ i ] += x ; i += i & ( - i ); } } //\u6839\u636e\u4f20\u5165\u7684\u6570\u7ec4c\u6784\u5efa\u5b83\u7684\u6811\u72b6\u6570\u7ec4 void create ( vector < int > & c ){ for ( int i = 0 ; i < c . size (); i ++ ){ add ( i + 1 , c [ i ]); } } }; void printV ( vector < int > a ){ for ( auto aa : a ){ cout << aa << \" \" ; } cout << endl ; } int main () { vector < int > c = { 3 , 7 , 6 , 5 , 4 , 2 , 8 , 1 }; BIT * b = new BIT ( c . size ()); b -> create ( c ); printV ( b -> v ); b -> add ( 8 , 10 ); printV ( b -> v ); b -> add ( 1 , 1 ); printV ( b -> v ); return 0 ; } \u8fd0\u884c\u7ed3\u679c\uff1a 0 3 10 6 21 4 6 8 36 0 3 10 6 21 4 6 8 46 0 4 11 6 22 4 6 8 47 \u53ef\u4ee5\u770b\u5230\uff0c\u6811\u72b6\u6570\u7ec4\u4ec5\u4ec5\u4f7f\u7528\u4f4d\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6c42\u548c\u548c\u66f4\u65b0\uff0c\u6bd4\u7ebf\u6bb5\u6811\u7684\u5f00\u9500\u8981\u5c11\u5f88\u591a\uff0c\u6240\u4ee5\uff0c\u4e00\u4e9b\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e0d\u5b9c\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002 \u53c2\u8003\u535a\u6587\uff1a http://www.cnblogs.com/wuwangchuxin0924/p/5921130.html http://www.cnblogs.com/GeniusYang/p/5756975.html","title":"2. \u66f4\u65b0\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#3","text":"LeetCode\u9898\u76ee \u96be\u5ea6 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u4e2d\u7b49 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u56f0\u96be","title":"3. \u76f8\u5173\u9898\u76ee"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/","text":"\u7ebf\u6bb5\u6811[\u533a\u95f4\u6811] \u00b6 \u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4ed6\u7684\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e86\u4e24\u4e2a\u989d\u5916\u7684\u5c5e\u6027 start \u548c end \u7528\u4e8e\u8868\u793a\u8be5\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u3002start\u548cend\u90fd\u662f\u6574\u6570\uff0c\u5e76\u6309\u7167\u5982\u4e0b\u7684\u65b9\u5f0f\u8d4b\u503c: \u6839\u8282\u70b9\u7684 start \u548c end \u7531 build \u65b9\u6cd5\u6240\u7ed9\u51fa\u3002 \u5bf9\u4e8e\u8282\u70b9 A \u7684\u5de6\u513f\u5b50\uff0c\u6709 start=A.left, end=(A.left + A.right) / 2 \u3002 \u5bf9\u4e8e\u8282\u70b9 A \u7684\u53f3\u513f\u5b50\uff0c\u6709 start=(A.left + A.right) / 2 + 1, end=A.right \u3002 \u5982\u679c start \u7b49\u4e8e end, \u90a3\u4e48\u8be5\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u518d\u6709\u5de6\u53f3\u513f\u5b50\u3002 \u5b9e\u73b0\u4e00\u4e2a build \u65b9\u6cd5\uff0c\u63a5\u53d7 start \u548c end \u4f5c\u4e3a\u53c2\u6570, \u7136\u540e\u6784\u9020\u4e00\u4e2a\u4ee3\u8868\u533a\u95f4 [start, end] \u7684\u7ebf\u6bb5\u6811\uff0c\u8fd4\u56de\u8fd9\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u3002 \u7ebf\u6bb5\u6811(\u53c8\u79f0\u533a\u95f4\u6811), \u662f\u4e00\u79cd\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u53ef\u4ee5\u652f\u6301\u8fd9\u6837\u7684\u4e00\u4e9b\u64cd\u4f5c: \u67e5\u627e\u7ed9\u5b9a\u7684\u70b9\u5305\u542b\u5728\u4e86\u54ea\u4e9b\u533a\u95f4\u5185 \u67e5\u627e\u7ed9\u5b9a\u7684\u533a\u95f4\u5305\u542b\u4e86\u54ea\u4e9b\u70b9 \u6837\u4f8b: \u6bd4\u5982\u7ed9\u5b9astart=1, end=6\uff0c\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e3a\uff1a [ 1 , 6 ] / \\ [ 1 , 3 ] [ 4 , 6 ] / \\ / \\ [ 1 , 2 ] [ 3 , 3 ] [ 4 , 5 ] [ 6 , 6 ] / \\ / \\ [ 1 , 1 ] [ 2 , 2 ] [ 4 , 4 ] [ 5 , 5 ] 1. \u7ebf\u6bb5\u6811\u7ed3\u6784\u7684\u5b9a\u4e49 \u00b6 Definition of SegmentTreeNode : class SegmentTreeNode { public : int start , end ; SegmentTreeNode * left , * right ; SegmentTreeNode ( int start , int end ) { this -> start = start , this -> end = end ; this -> left = this -> right = NULL ; } } 2. \u7ebf\u6bb5\u6811\u7684\u6784\u9020 \u00b6 class Solution { public : /** *@param start, end: Denote an segment / interval *@return: The root of Segment Tree */ SegmentTreeNode * build ( int start , int end ) { // write your code here if ( start > end ) return nullptr ; SegmentTreeNode * node = new SegmentTreeNode ( start , end ); if ( start < end ) { node -> left = build ( node -> start ,( node -> start + node -> end ) / 2 ); node -> right = build (( node -> start + node -> end ) / 2 + 1 , node -> end ); } return node ; } }; \u81ea\u5e95\u5411\u4e0a\u6784\u9020\u7ebf\u6bb5\u6811 online judge SegmentTreeNode * build ( vector < int > A ) { // write your code here if ( A . size () <= 0 ) { return nullptr ; } return build ( 0 , A . size () - 1 , A ); } SegmentTreeNode * build ( int start , int end , vector < int > & nums ) { // write your code here if ( start > end ) { return nullptr ; } SegmentTreeNode * root = new SegmentTreeNode ( start , end , 0 ); if ( start != end ) { root -> left = build ( start , ( start + end ) / 2 , nums ); root -> right = build (( start + end ) / 2 + 1 , end , nums ); root -> max = max ( root -> left -> max , root -> right -> max ); } else { root -> max = nums [ start ]; } return root ; } 3. \u7ebf\u6bb5\u6811\u7684\u67e5\u8be2 \u00b6 class Solution { public : /** *@param root, start, end: The root of segment tree and * an segment / interval *@return: The maximum number in the interval [start, end] */ int query ( SegmentTreeNode * root , int start , int end ) { // write your code here // \u533a\u95f4\u6bd4\u6839\u533a\u95f4\u8fd8\u5927\u7684\u60c5\u51b5 if ( start <= root -> start && end >= root -> end ){ return root -> max ; } //\u5982\u679c\u5de6\u8fb9\u754c\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u53c8\u8fb9\u754c \u6216\u8005 \u53f3\u8fb9\u754c\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u5de6\u8fb9\u754c\uff0c \u5219\u4e0d\u5b58\u5728\u7684\u8fd9\u6837\u7684\u533a\u57df //\u8fd4\u56de\u4e0d\u5f71\u54cd\u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u5b57 if ( start > root -> end || end < root -> start ){ return 0 ; } int ll = query ( root -> left , start , end ); int rr = query ( root -> right , start , end ); return max ( ll , rr ); } }; 4. \u7ebf\u6bb5\u6811\u7684\u66f4\u65b0 \u00b6 void modify ( Node * root , int idx ){ if ( root == NULL ) { return ; } if ( root -> start == root -> end && root -> start == idx ) { ++ ( root -> cnt ); return ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= idx ) { modify ( root -> left , idx ); } else { modify ( root -> right , idx ); } root -> cnt = root -> left -> cnt + ( root -> right ? root -> right -> cnt : 0 ); } 5. \u7ebf\u6bb5\u6811\u7684\u5e94\u7528 \u00b6 5.1 \u7edf\u8ba1\u524d\u9762\u6bd4\u81ea\u5df1\u5927\u7684\u6570\u6709\u591a\u5c11\u4e2a \u00b6 \u4f7f\u7528\u7ebf\u6bb5\u6811\u5b58\u50a8\u6bcf\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u3002 #include <bits/stdc++.h> using namespace std ; class Node { public : Node ( int _start , int _end ) : start ( _start ), end ( _end ), left ( nullptr ), right ( nullptr ), cnt ( 0 ) {} int start , end ; Node * left , * right ; int cnt ; }; Node * build ( int start , int end ) { if ( start > end ) { return NULL ; } if ( start == end ) { return new Node ( start , end ); } int mid = start + (( end - start ) >> 1 ); Node * root = new Node ( start , end ); root -> left = build ( start , mid ); root -> right = build ( mid + 1 , end ); return root ; } void modify ( Node * root , int idx ){ if ( root == NULL ) { return ; } if ( root -> start == root -> end && root -> start == idx ) { ++ ( root -> cnt ); return ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= idx ) { modify ( root -> left , idx ); } else { modify ( root -> right , idx ); } root -> cnt = root -> left -> cnt + ( root -> right ? root -> right -> cnt : 0 ); } int query ( Node * root , int start , int end ) { if ( root -> end < start || root -> start > end ) { return 0 ; } if ( root -> start >= start && root -> end <= end ) { return root -> cnt ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= end ) { return query ( root -> left , start , end ); } if ( mid < start ) { return query ( root -> right , start , end ); } int leftRes = query ( root -> left , start , mid ); int rightRes = query ( root -> right , mid + 1 , end ); return leftRes + rightRes ; } vector < int > countOfSmallerNumberII ( vector < int > & A ) { // write your code here int len = A . size (); Node * root = build ( 0 , 2 * len ); int maxV = INT32_MIN ; for ( int j = 0 ; j < len ; ++ j ) { maxV = max ( maxV , A [ j ]); } vector < int > res ; for ( int i = 0 ; i < A . size (); i ++ ) { int cnt = query ( root , A [ i ] + 1 , maxV ); res . push_back ( cnt ); modify ( root , A [ i ]); } return res ; } int main (){ vector < int > v = { 1 , 2 , 7 , 8 , 5 }; auto re = countOfSmallerNumberII ( v ); return 0 ; } 5.2 \u7edf\u8ba1\u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u6709\u591a\u5c11\u4e2a \u00b6 class Node { public : Node ( int _start , int _end ) : start ( _start ), end ( _end ), left ( nullptr ), right ( nullptr ), cnt ( 0 ) {} int start , end ; Node * left , * right ; int cnt ; }; class Solution { public : /** * @param A: An integer array * @return: Count the number of element before this element 'ai' is * smaller than it and return count number array */ vector < int > countOfSmallerNumberII ( vector < int > & A ) { // write your code here Node * root = build ( 0 , 20000 ); vector < int > res ; for ( int i = 0 ; i < A . size (); i ++ ) { int cnt = query ( root , 0 , A [ i ] - 1 ); res . push_back ( cnt ); modify ( root , A [ i ]); } return res ; } private : Node * build ( int start , int end ) { if ( start > end ) { return NULL ; } if ( start == end ) { return new Node ( start , end ); } int mid = start + (( end - start ) >> 1 ); Node * root = new Node ( start , end ); root -> left = build ( start , mid ); root -> right = build ( mid + 1 , end ); return root ; } void modify ( Node * root , int idx ){ if ( root == NULL ) { return ; } if ( root -> start == root -> end && root -> start == idx ) { ++ ( root -> cnt ); return ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= idx ) { modify ( root -> left , idx ); } else { modify ( root -> right , idx ); } root -> cnt = root -> left -> cnt + ( root -> right ? root -> right -> cnt : 0 ); } int query ( Node * root , int start , int end ) { if ( root -> end < start || root -> start > end ) { return 0 ; } if ( root -> start >= start && root -> end <= end ) { return root -> cnt ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= end ) { return query ( root -> left , start , end ); } if ( mid < start ) { return query ( root -> right , start , end ); } int leftRes = query ( root -> left , start , mid ); int rightRes = query ( root -> right , mid + 1 , end ); return leftRes + rightRes ; } }; 1. \u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u4e2d\u7b49 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u56f0\u96be 1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20 \u56f0\u96be","title":"\u7ebf\u6bb5\u6811[\u533a\u95f4\u6811]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_1","text":"\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4ed6\u7684\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e86\u4e24\u4e2a\u989d\u5916\u7684\u5c5e\u6027 start \u548c end \u7528\u4e8e\u8868\u793a\u8be5\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u3002start\u548cend\u90fd\u662f\u6574\u6570\uff0c\u5e76\u6309\u7167\u5982\u4e0b\u7684\u65b9\u5f0f\u8d4b\u503c: \u6839\u8282\u70b9\u7684 start \u548c end \u7531 build \u65b9\u6cd5\u6240\u7ed9\u51fa\u3002 \u5bf9\u4e8e\u8282\u70b9 A \u7684\u5de6\u513f\u5b50\uff0c\u6709 start=A.left, end=(A.left + A.right) / 2 \u3002 \u5bf9\u4e8e\u8282\u70b9 A \u7684\u53f3\u513f\u5b50\uff0c\u6709 start=(A.left + A.right) / 2 + 1, end=A.right \u3002 \u5982\u679c start \u7b49\u4e8e end, \u90a3\u4e48\u8be5\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u518d\u6709\u5de6\u53f3\u513f\u5b50\u3002 \u5b9e\u73b0\u4e00\u4e2a build \u65b9\u6cd5\uff0c\u63a5\u53d7 start \u548c end \u4f5c\u4e3a\u53c2\u6570, \u7136\u540e\u6784\u9020\u4e00\u4e2a\u4ee3\u8868\u533a\u95f4 [start, end] \u7684\u7ebf\u6bb5\u6811\uff0c\u8fd4\u56de\u8fd9\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u3002 \u7ebf\u6bb5\u6811(\u53c8\u79f0\u533a\u95f4\u6811), \u662f\u4e00\u79cd\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u53ef\u4ee5\u652f\u6301\u8fd9\u6837\u7684\u4e00\u4e9b\u64cd\u4f5c: \u67e5\u627e\u7ed9\u5b9a\u7684\u70b9\u5305\u542b\u5728\u4e86\u54ea\u4e9b\u533a\u95f4\u5185 \u67e5\u627e\u7ed9\u5b9a\u7684\u533a\u95f4\u5305\u542b\u4e86\u54ea\u4e9b\u70b9 \u6837\u4f8b: \u6bd4\u5982\u7ed9\u5b9astart=1, end=6\uff0c\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e3a\uff1a [ 1 , 6 ] / \\ [ 1 , 3 ] [ 4 , 6 ] / \\ / \\ [ 1 , 2 ] [ 3 , 3 ] [ 4 , 5 ] [ 6 , 6 ] / \\ / \\ [ 1 , 1 ] [ 2 , 2 ] [ 4 , 4 ] [ 5 , 5 ]","title":"\u7ebf\u6bb5\u6811[\u533a\u95f4\u6811]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#1","text":"Definition of SegmentTreeNode : class SegmentTreeNode { public : int start , end ; SegmentTreeNode * left , * right ; SegmentTreeNode ( int start , int end ) { this -> start = start , this -> end = end ; this -> left = this -> right = NULL ; } }","title":"1. \u7ebf\u6bb5\u6811\u7ed3\u6784\u7684\u5b9a\u4e49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#2","text":"class Solution { public : /** *@param start, end: Denote an segment / interval *@return: The root of Segment Tree */ SegmentTreeNode * build ( int start , int end ) { // write your code here if ( start > end ) return nullptr ; SegmentTreeNode * node = new SegmentTreeNode ( start , end ); if ( start < end ) { node -> left = build ( node -> start ,( node -> start + node -> end ) / 2 ); node -> right = build (( node -> start + node -> end ) / 2 + 1 , node -> end ); } return node ; } }; \u81ea\u5e95\u5411\u4e0a\u6784\u9020\u7ebf\u6bb5\u6811 online judge SegmentTreeNode * build ( vector < int > A ) { // write your code here if ( A . size () <= 0 ) { return nullptr ; } return build ( 0 , A . size () - 1 , A ); } SegmentTreeNode * build ( int start , int end , vector < int > & nums ) { // write your code here if ( start > end ) { return nullptr ; } SegmentTreeNode * root = new SegmentTreeNode ( start , end , 0 ); if ( start != end ) { root -> left = build ( start , ( start + end ) / 2 , nums ); root -> right = build (( start + end ) / 2 + 1 , end , nums ); root -> max = max ( root -> left -> max , root -> right -> max ); } else { root -> max = nums [ start ]; } return root ; }","title":"2. \u7ebf\u6bb5\u6811\u7684\u6784\u9020"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#3","text":"class Solution { public : /** *@param root, start, end: The root of segment tree and * an segment / interval *@return: The maximum number in the interval [start, end] */ int query ( SegmentTreeNode * root , int start , int end ) { // write your code here // \u533a\u95f4\u6bd4\u6839\u533a\u95f4\u8fd8\u5927\u7684\u60c5\u51b5 if ( start <= root -> start && end >= root -> end ){ return root -> max ; } //\u5982\u679c\u5de6\u8fb9\u754c\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u53c8\u8fb9\u754c \u6216\u8005 \u53f3\u8fb9\u754c\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u5de6\u8fb9\u754c\uff0c \u5219\u4e0d\u5b58\u5728\u7684\u8fd9\u6837\u7684\u533a\u57df //\u8fd4\u56de\u4e0d\u5f71\u54cd\u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u5b57 if ( start > root -> end || end < root -> start ){ return 0 ; } int ll = query ( root -> left , start , end ); int rr = query ( root -> right , start , end ); return max ( ll , rr ); } };","title":"3. \u7ebf\u6bb5\u6811\u7684\u67e5\u8be2"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#4","text":"void modify ( Node * root , int idx ){ if ( root == NULL ) { return ; } if ( root -> start == root -> end && root -> start == idx ) { ++ ( root -> cnt ); return ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= idx ) { modify ( root -> left , idx ); } else { modify ( root -> right , idx ); } root -> cnt = root -> left -> cnt + ( root -> right ? root -> right -> cnt : 0 ); }","title":"4. \u7ebf\u6bb5\u6811\u7684\u66f4\u65b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#5","text":"","title":"5. \u7ebf\u6bb5\u6811\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#51","text":"\u4f7f\u7528\u7ebf\u6bb5\u6811\u5b58\u50a8\u6bcf\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u3002 #include <bits/stdc++.h> using namespace std ; class Node { public : Node ( int _start , int _end ) : start ( _start ), end ( _end ), left ( nullptr ), right ( nullptr ), cnt ( 0 ) {} int start , end ; Node * left , * right ; int cnt ; }; Node * build ( int start , int end ) { if ( start > end ) { return NULL ; } if ( start == end ) { return new Node ( start , end ); } int mid = start + (( end - start ) >> 1 ); Node * root = new Node ( start , end ); root -> left = build ( start , mid ); root -> right = build ( mid + 1 , end ); return root ; } void modify ( Node * root , int idx ){ if ( root == NULL ) { return ; } if ( root -> start == root -> end && root -> start == idx ) { ++ ( root -> cnt ); return ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= idx ) { modify ( root -> left , idx ); } else { modify ( root -> right , idx ); } root -> cnt = root -> left -> cnt + ( root -> right ? root -> right -> cnt : 0 ); } int query ( Node * root , int start , int end ) { if ( root -> end < start || root -> start > end ) { return 0 ; } if ( root -> start >= start && root -> end <= end ) { return root -> cnt ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= end ) { return query ( root -> left , start , end ); } if ( mid < start ) { return query ( root -> right , start , end ); } int leftRes = query ( root -> left , start , mid ); int rightRes = query ( root -> right , mid + 1 , end ); return leftRes + rightRes ; } vector < int > countOfSmallerNumberII ( vector < int > & A ) { // write your code here int len = A . size (); Node * root = build ( 0 , 2 * len ); int maxV = INT32_MIN ; for ( int j = 0 ; j < len ; ++ j ) { maxV = max ( maxV , A [ j ]); } vector < int > res ; for ( int i = 0 ; i < A . size (); i ++ ) { int cnt = query ( root , A [ i ] + 1 , maxV ); res . push_back ( cnt ); modify ( root , A [ i ]); } return res ; } int main (){ vector < int > v = { 1 , 2 , 7 , 8 , 5 }; auto re = countOfSmallerNumberII ( v ); return 0 ; }","title":"5.1 \u7edf\u8ba1\u524d\u9762\u6bd4\u81ea\u5df1\u5927\u7684\u6570\u6709\u591a\u5c11\u4e2a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#52","text":"class Node { public : Node ( int _start , int _end ) : start ( _start ), end ( _end ), left ( nullptr ), right ( nullptr ), cnt ( 0 ) {} int start , end ; Node * left , * right ; int cnt ; }; class Solution { public : /** * @param A: An integer array * @return: Count the number of element before this element 'ai' is * smaller than it and return count number array */ vector < int > countOfSmallerNumberII ( vector < int > & A ) { // write your code here Node * root = build ( 0 , 20000 ); vector < int > res ; for ( int i = 0 ; i < A . size (); i ++ ) { int cnt = query ( root , 0 , A [ i ] - 1 ); res . push_back ( cnt ); modify ( root , A [ i ]); } return res ; } private : Node * build ( int start , int end ) { if ( start > end ) { return NULL ; } if ( start == end ) { return new Node ( start , end ); } int mid = start + (( end - start ) >> 1 ); Node * root = new Node ( start , end ); root -> left = build ( start , mid ); root -> right = build ( mid + 1 , end ); return root ; } void modify ( Node * root , int idx ){ if ( root == NULL ) { return ; } if ( root -> start == root -> end && root -> start == idx ) { ++ ( root -> cnt ); return ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= idx ) { modify ( root -> left , idx ); } else { modify ( root -> right , idx ); } root -> cnt = root -> left -> cnt + ( root -> right ? root -> right -> cnt : 0 ); } int query ( Node * root , int start , int end ) { if ( root -> end < start || root -> start > end ) { return 0 ; } if ( root -> start >= start && root -> end <= end ) { return root -> cnt ; } int mid = root -> start + (( root -> end - root -> start ) >> 1 ); if ( mid >= end ) { return query ( root -> left , start , end ); } if ( mid < start ) { return query ( root -> right , start , end ); } int leftRes = query ( root -> left , start , mid ); int rightRes = query ( root -> right , mid + 1 , end ); return leftRes + rightRes ; } };","title":"5.2 \u7edf\u8ba1\u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u6709\u591a\u5c11\u4e2a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#1_1","text":"LeetCode\u9898\u76ee \u96be\u5ea6 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u4e2d\u7b49 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u56f0\u96be 1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20 \u56f0\u96be","title":"1. \u76f8\u5173\u9898\u76ee"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/","text":"\u94fe\u8868 \u00b6 \u94fe\u8868\u662f\u4e00\u79cd\u7528\u6307\u9488\u4e32\u8054\u8d77\u6765\u7684\u987a\u5e8f\u7ed3\u6784\uff0c\u4e3b\u8981\u4f18\u70b9\u662f\u589e\u5220\u5feb\uff0c\u4e3b\u8981\u7f3a\u70b9\u662f\u65e0\u6cd5\u5411\u6570\u7ec4\u90a3\u6837\u5feb\u901f\u53d6\u51fa\u67d0\u4e2a\u5143\u7d20\u3002 \u94fe\u8868\u662f\u4e00\u79cd\u6bd4\u8f83\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u8981\u7c7b\u578b\u6709\u5355\u94fe\u8868\uff0c\u53cc\u94fe\u8868\uff0c\u5faa\u73af\u94fe\u8868\u7b49\u3002 \u94fe\u8868\u7684\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u548c\u6307\u9488\u5b9e\u73b0\u3002 1. \u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 C++11\u7684\u6807\u51c6\u4e2d\uff0c\u7ed3\u6784\u4f53\u548c\u7c7b\u5e76\u6ca1\u6709\u672c\u8d28\u7684\u4e0d\u540c\u3002\u6240\u6709\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u548c\u7c7b\u6765\u5b9a\u4e49\u8282\u70b9\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5355\u94fe\u8868\u901a\u5e38\u5305\u542b\u4e00\u4e2a val \u548c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 *next ,\u53cc\u5411\u94fe\u8868\u901a\u5e38\u5305\u542b\u4e00\u4e2a val \u548c\u4e24\u4e2a\u6307\u9488 *pre , *next ,\u5206\u522b\u6307\u5411\u524d\u9762\u7684\u8282\u70b9\u548c\u540e\u9762\u7684\u8282\u70b9\u3002 1.1 \u94fe\u8868\u8282\u70b9\u7ed3\u6784\u7684\u5b9a\u4e49 \u00b6 1.1.1 \u5355\u94fe\u8868 \u00b6 //\u5355\u94fe\u8868\u8282\u70b9\u7684\u5b9a\u4e49-\u4f7f\u7528\u7ed3\u6784\u4f53 struct Node { int value ; Node * next ; Node () : value ( 0 ), next ( nullptr ){} Node ( int v ) : value ( v ), next ( nullptr ){} }; //\u4f7f\u7528\u7c7b class ListNode { public : int val ; ListNode * next ; ListNode ( int val ) { this -> val = val ; this -> next = NULL ; } } 1.1.2 \u53cc\u5411\u94fe\u8868 \u00b6 //\u53cc\u5411\u94fe\u8868 struct BiNode { int value ; BiNode * pre ; BiNode * next ; BiNode () : value ( 0 ), pre ( nullptr ), next ( nullptr ){} BiNode ( int v ) : value ( v ), pre ( nullptr ), next ( nullptr ){} }; 1.2 \u94fe\u8868\u7684\u521b\u5efa \u00b6 1.2.1 \u5355\u94fe\u8868 \u00b6 \u9996\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\uff0c\u8fd4\u56de\u7a7a\u94fe\u8868 \u5982\u679c\u4e0d\u662f\u7a7a\uff0c\u521b\u5efa\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8282\u70b9\uff0c\u5e76\u7528\u5934\u6307\u9488\u6307\u5411\u5b83\uff0c\u65e5\u540e\u8fd4\u56de\u8fd9\u4e2a\u5934\u6307\u9488\uff1b \u7136\u540e\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u521b\u5efa\u65b0\u7684\u8282\u70b9\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u8d4b\u503c\u4e2a\u524d\u4e00\u4e2a\u8282\u70b9\u7684next\u6307\u9488\uff0c\u7136\u540e\u66f4\u65b0tmp\u6307\u5411\u5f53\u524d\u65b0\u521b\u5efa\u7684\u8282\u70b9\u3002 \u6838\u5fc3\u7684\u8bed\u53e5\uff1a Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; Node * createLinks ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } return head ; } 1.2.2 \u53cc\u94fe\u8868 \u00b6 \u53cc\u5411\u94fe\u8868\u7684\u521b\u5efa\u9700\u8981\u8fd4\u56de\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5934\u90e8\uff0c\u4fbf\u4e8e\u6b63\u5411\u904d\u5386\u94fe\u8868\uff1b\u53e6\u5916\u4e00\u4e2a\u6307\u5411\u5c3e\u90e8\uff0c\u4fbf\u4e8e\u9006\u5411\u904d\u5386\u94fe\u8868 \u9996\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\uff0c\u8fd4\u56de\u7a7a\u94fe\u8868 \u7528\u7b2c\u4e00\u4e2a\u5143\u7d20\u521b\u5efa\u8282\u70b9\uff0c\u5e76\u7528\u5934\u8282\u70b9\u6307\u5411\u5b83 \u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u6b64\u4e34\u65f6\u53d8\u91cf\u4e00\u76f4\u6307\u5411\u5f53\u524d\u521b\u5efa\u7684\u8282\u70b9 \u4ece\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u8282\u70b9\uff0c\u521b\u5efa\u7684\u8282\u70b9\u7684pre\u8bbe\u7f6e\u4e3atmp, \u7136\u540e\u628atmp\u7684next\u8d4b\u503c\u6210node,\u5373\u8ba9tmp\u6240\u6307\u5411\u7684\u8282\u70b9\u8fde\u63a5\u5230\u5f53\u524d\u521b\u5efa\u7684\u8282\u70b9\u4e0a \u66f4\u65b0tmp\u4f7f\u5b83\u6307\u5411\u5f53\u524d\u65b0\u521b\u5efa\u7684\u8282\u70b9\u3002 \u5faa\u73af\u4f53\u7ed3\u675f\u540e\uff0ctmp\u6b63\u597d\u6307\u5411\u6700\u4f1a\u4e00\u4e2a\u521b\u5efa\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u628atmp\u8d4b\u503c\u7ed9tail \u8fd4\u56dehead\u548ctail; \u5173\u952e\u8bed\u53e5\uff1a BiNode *node = new BiNode(v[i]); node->pre = tmp; tmp->next = node; tmp = tmp->next; pair < BiNode * , BiNode *> createBiNode ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); node -> pre = tmp ; tmp -> next = node ; tmp = tmp -> next ; } BiNode * tail = tmp ; return { head , tail }; } 1.2.3 \u5faa\u73af\u94fe\u8868 \u00b6 \u5faa\u73af\u94fe\u8868\u5c31\u662f\u7ed3\u5c3e\u7684\u5143\u7d20\u53c8\u6307\u5411\u4e86\u5f00\u5934\u7684\u5143\u7d20\u3002\u6240\u4ee5\u521b\u5efa\u8fc7\u7a0b\u57fa\u672c\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u6307\u793a\u5728\u7ed3\u5c3e\u7684\u5904\u7406\u7a0d\u6709\u4e0d\u540c\u3002 \u5faa\u73af\u5355\u94fe\u8868\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u6dfb\u52a0 tmp->next = head; \u5faa\u73af\u53cc\u5411\u94fe\u8868\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u6dfb\u52a0 tail->next = head; // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20 head->pre = tail; // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20 . //\u521b\u5efa\u5faa\u73af\u5355\u94fe\u8868 Node * createLinksCycle ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } tmp -> next = head ; // \u8ba9\u7ed3\u5c3e\u6307\u5411\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 return head ; } //\u521b\u5efa\u5faa\u73af\u53cc\u94fe\u8868 pair < BiNode * , BiNode *> createBiNodeCycle ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } BiNode * tail = tmp ; tail -> next = head ; // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20 head -> pre = tail ; // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20 return { head , tail }; } 1.3 \u94fe\u8868\u7684\u63d2\u5165 \u00b6 1.3.1 \u5355\u94fe\u8868 \u00b6 \u8981\u5728\u5355\u94fe\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5047\u8bbec\u6307\u5411\u4e86\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0cn\u662f\u65b0\u521b\u5efa\u7684\u8282\u70b9 \u90a3\u4e48\u63d2\u5165\u7684\u65b9\u6cd5\u662f\uff1a n -> next = c -> next ; //\u65b0\u8282\u70b9n\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u6210c\u7684\u540e\u4e00\u4e2a\u8282\u70b9 c -> next = n ; //c\u8282\u70b9\u6307\u5411\u65b0\u63d2\u5165\u7684\u8282\u70b9 \u6ce8\u610f\u5982\u679c\u63d2\u5165\u7684\u4f4d\u7f6e\u662f\u94fe\u8868\u7684\u5934\u90e8\uff0c\u9700\u8981\u5355\u72ec\u5904\u7406\u3002 n->next = head; //\u65b0\u63d2\u5165\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fde\u63a5\u5230\u5934\u8282\u70b9 head = n; //\u5934\u7ed3\u70b9\u7f16\u7a0b\u65b0\u63d2\u5165\u7684\u8282\u70b9 1.3.2 \u53cc\u94fe\u8868 \u00b6 \u53cc\u94fe\u8868\u65e2\u53ef\u4ee5\u5411\u524d\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u5411\u540e\u8bbf\u95ee\u3002\u6240\u4ee5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u6216\u8005\u8981\u63d2\u5165\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 \u5047\u8bbec\u4ee3\u8868\u8981\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff1bn\u4ee3\u8868\u65b0\u63d2\u5165\u7684\u8282\u70b9\uff0cb\u4ee3\u8868\u63d2\u5165\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u3002 \u5229\u7528c\u7684\u63d2\u5165\u65b9\u6cd5\u662f\uff1a n -> next = c -> next ; c -> next -> pre = n ; // \u8fd9\u4e24\u53e5\u5c06\u65b0\u7684\u8282\u70b9\u548c\u540e\u9762\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765 n -> pre = c ; c -> next = n ; //\u8fd9\u4e24\u53e5\u5c06c\u548cn\u8fde\u63a5\u8d77\u6765 \u5982\u679c\u8981\u5728\u5934\u8282\u70b9\u4e4b\u524d\u63d2\u5165\uff0c\u4f1a\u53d1\u73b0\u5934\u7ed3\u70b9\u4e4b\u524d\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528\u4e0a\u9762\u7684\u8bed\u53e5\uff0c\u9700\u8981\u53e6\u5916\u5904\u7406\uff1a n -> next = head ; head -> pre = n ; head = n ; \u5229\u7528b\u7684\u63d2\u5165\u65b9\u6cd5\u662f\uff1a n -> pre = b -> pre ; b -> pre -> next = n ; // \u628a\u65b0\u7684\u8282\u70b9\u548cb\u524d\u9762\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765 n -> next = b ; b -> pre = n ; // \u628a\u65b0\u7684\u8282\u70b9\u548cb\u8fde\u63a5\u8d77\u6765 \u5982\u679c\u5728\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u9762\u63d2\u5165\u8282\u70b9\uff0c\u4f1a\u53d1\u73b0\u6ca1\u6709b,\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u53e6\u5916\u5904\u7406\uff1a n -> pre = tail ; tail -> next = n ; tail = n ; 1.3.3 \u5faa\u73af\u94fe\u8868 \u00b6 \u5faa\u73af\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u6ca1\u6709\u4e86\u50cf\u4e0a\u9762\u4e0d\u5faa\u73af\u7684\u94fe\u8868\u90a3\u6837\u9700\u8981\u53e6\u5916\u5904\u7406\u5934\u90e8\u548c\u5c3e\u90e8\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u63d2\u5165\u64cd\u4f5c\u66f4\u52a0\u7b80\u5355\u3002 \u5982\u679c\u63d2\u5165\u7684\u662f\u5934\u8282\u70b9\u7684\u8bdd\uff0c\u6ce8\u610fhead\u7684\u66f4\u65b0\u60c5\u51b5\u5373\u53ef\u3002 1.4 \u94fe\u8868\u7684\u5220\u9664 \u00b6 1.4.1 \u5355\u94fe\u8868 \u00b6 \u5220\u9664\u5355\u94fe\u8868\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u8be5\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5047\u8bbe\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u662fc. \u5220\u9664\u64cd\u4f5c\uff1a c->next = c->next->next; \u5982\u679c\u5220\u9664\u7684\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u76f4\u63a5 head = head->next; \u5982\u679c\u5220\u9664\u7684\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u76f4\u63a5 c->next=nullptr . 1.4.2 \u53cc\u94fe\u8868 \u00b6 \u540c\u63d2\u5165\u7c7b\u4f3c\uff0c\u53cc\u94fe\u8868\u7684\u5220\u9664\u53ea\u9700\u8981\u77e5\u9053\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u6216\u8005\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5047\u8bbec\u662f\u524d\u4e00\u4e2a\u8282\u70b9\uff0cb\u662f\u540e\u4e00\u4e2a\u8282\u70b9\u3002 \u5220\u9664\u64cd\u4f5c1\uff1a c -> next = c -> next -> next ; c -> next -> next -> pre = c ; \u5220\u9664\u64cd\u4f5c2\uff1a b -> pre = b -> pre -> pre ; b -> pre -> pre -> next = b ; \u5220\u9664\u9996\u8282\u70b9\u548c\u5c3e\u8282\u70b9\u540c\u6837\u9700\u8981\u7279\u6b8a\u8003\u8651\uff1b \u5220\u9664\u9996\u8282\u70b9\uff1a b->pre = nullptr;head = b ; \u5220\u9664\u5c3e\u8282\u70b9\uff1a c->next=nullptr;tail=c; \u9700\u8981\u7684\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u505a\u53ea\u662f\u4ecehead\u548ctail\u5f00\u59cb\u8bbf\u95ee\u7684\u8bdd\uff0c\u518d\u4e5f\u8bbf\u95ee\u4e0d\u5230\u88ab\u5220\u9664\u7684\u8282\u70b9\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u4ece\u5220\u9664\u7684\u8282\u70b9\u8fd8\u6709\u6307\u9488\u6307\u5411\u8fd9\u4e2a\u94fe\u8868\u7684\u67d0\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u60f3\u8981\u5220\u9664\u5e72\u51c0\uff0c\u5c31\u662f\u5f7b\u5e95\u65ad\u5f00\u8fde\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u53e5\uff1a \u5220\u9664\u9996\u8282\u70b9\uff1a b->pre->next=nullptr; b->pre=nullptr;head=b; \u5220\u9664\u5c3e\u8282\u70b9\uff1a c->next->pre=nullptr;c->next=nullptr;tail=c; 1.4.3 \u5faa\u73af\u94fe\u8868 \u00b6 \u5faa\u73af\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u540c\u6837\u4e0d\u9700\u8981\u8003\u8651\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5982\u679c\u63d2\u5165\u7684\u662f\u5934\u8282\u70b9\u7684\u8bdd\uff0c\u6ce8\u610fhead\u7684\u66f4\u65b0\u60c5\u51b5\u5373\u53ef\u3002 1.5 \u94fe\u8868\u7684\u66ff\u6362 \u00b6 \u60f3\u8981\u66f4\u65b0\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u503c\uff0c\u53ea\u9700\u8981\u67e5\u627e\u5230\u8be5\u8282\u70b9c\uff0c\u7136\u540e\u6267\u884c c->val = new_value; \u5373\u53ef\u3002 1.6 \u94fe\u8868\u7684\u53cd\u5411 \u00b6 1.6.1 \u5355\u94fe\u8868 \u00b6 \u57fa\u672c\u601d\u8def\u662f\u8bbe\u7f6e\u4e09\u4e2a\u6307\u9488pre,current,next;\u5206\u522b\u4ee3\u8868\u76f8\u90bb\u7684\u4e09\u4e2a\u8282\u70b9\u3002 \u6bcf\u6b21\u5faa\u73af\u6267\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 Node * notLinks ( Node * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; Node * current = head ; Node * pre = nullptr ; Node * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } 1.6.2 \u53cc\u94fe\u8868 \u00b6 \u53cc\u5411\u94fe\u8868\u7684\u53cd\u8f6c\u4e0e\u5355\u5411\u94fe\u8868\u7684\u601d\u8def\u4e00\u81f4\uff0c\u8bbe\u7f6e\u4e09\u4e2a\u6307\u9488pre,current,next\u5206\u522b\u6307\u5411\u76f8\u90bb\u7684\u4e09\u4e2a\u8282\u70b9\uff1b \u6bcf\u6b21\u5faa\u73af\u8fd9\u6837\u64cd\u4f5c\uff1a next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 current -> pre = next ; pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 BiNode * notBiLinks ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * pre = nullptr ; BiNode * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 current -> pre = next ; pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } \u5f53\u7136\uff0c\u5728\u903b\u8f91\u4e0a\u53cc\u5411\u94fe\u8868\u662f\u6ca1\u6709\u6b63\u53cd\u7684\uff0c\u4ee5\u4e0a\u6240\u8bf4\u7684\u53cd\u5411\u662f\u5728\u76f8\u540c\u7684\u8f93\u51fa\u51fd\u6570\u4e0b\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u6b63\u597d\u76f8\u53cd\u3002 \u4e5f\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u53cd\u8f6c\u53cc\u5411\u94fe\u8868\uff0c\u53ea\u9700\u8981\u628a\u94fe\u8868\u8282\u70b9\u7684\u6307\u9488pre,next\u4ea4\u6362\u4e00\u4e0b\u5373\u53ef\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a BiNode * tmp = current -> pre ; current -> pre = current -> next ; current -> next = tmp ; // \u4ee5\u4e0a\u4e09\u884c\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c newHead = current ; //\u5b58\u50a8\u4e0b\u6765\u5f53\u524d\u8282\u70b9\uff0c\u65e5\u540e\u8fd4\u56de\u8be5\u8282\u70b9 current = current -> pre ; //\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9 BiNode * notBiLinks2 ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * newHead ; while ( current ){ BiNode * tmp = current -> pre ; current -> pre = current -> next ; current -> next = tmp ; newHead = current ; current = current -> pre ; } return newHead ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } 1.6.3 \u5faa\u73af\u94fe\u8868 \u00b6 \u5faa\u73af\u94fe\u8868\u7684\u53cd\u8f6c\u6ca1\u6709\u4ec0\u4e48\u5b9e\u9645\u7684\u610f\u4e49\uff0c\u53ea\u662f\u7528\u6765\u7ec3\u4e60\u94fe\u8868\u7684\u5904\u7406\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u548c\u4e0a\u9762\u7684\u57fa\u672c\u76f8\u540c\u3002 1.7 \u94fe\u8868\u7684\u53ef\u89c6\u5316 \u00b6 1.7.1 \u6253\u5370\u5355\u94fe\u8868 \u00b6 void printLinks ( Node * head ) { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } \u6253\u5370\u51fa\u6765\u7684\u6837\u5f0f 1->2->3->4->5->6 1.7.2 \u6253\u5370\u53cc\u5411\u94fe\u8868 \u00b6 void printBiLinks ( BiNode * head ){ if ( head == nullptr ){ cout << \"empty\" << endl ; return ;} BiNode * tmp = head ; while ( tmp -> next != nullptr ){ cout << \"[\" << tmp -> value << \"]\" << \"<->\" ; tmp = tmp -> next ; } cout << \"[\" << tmp -> value << \"]\" << endl ; cout << endl ; } \u6253\u5370\u51fa\u6765\u7684\u6837\u5f0f > [1]<->[2]<->[3]<->[4]<->[5]<->[6] 2. \u5355\u94fe\u8868\u7c7b\u7684\u5b9a\u4e49 \u00b6 class Links { public : Node * head ; // \u5934\u8282\u70b9 Links () : head ( nullptr ){} //\u521b\u5efa\u94fe\u8868 Links ( vector < int > v ) { if ( v . empty ()){ head = nullptr ; } else { Node * first = new Node ( v [ 0 ]); head = first ; Node * tmp = first ; for ( int i = 1 ; i < v . size (); ++ i ) { Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = node ; } } } //\u6253\u5370\u94fe\u8868 void printLinks () { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } //\u53cd\u8f6c\u8fd9\u4e2a\u94fe\u8868 void inverseLinks (){ Node * pre = nullptr ; Node * next = nullptr ; while ( head != nullptr ){ next = head -> next ; head -> next = pre ; pre = head ; head = next ; } head = pre ; } }; 3. \u53cc\u5411\u94fe\u8868\u7c7b\u7684\u5b9a\u4e49 \u00b6 //\u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0 class BiLinks { public : BiNode * head ; BiNode * tail ; BiLinks () : head ( nullptr ), tail ( nullptr ){} BiLinks ( vector < int > v ){ BiNode * first = new BiNode ( v [ 0 ]); head = first ; BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } tail = tmp ; } void printBiLinks (){ if ( head == nullptr || tail == nullptr ){ cout << \"empty!\" << endl ; return ;} BiNode * tmp = head ; while ( tmp -> next != nullptr ){ cout << \"[\" << tmp -> value << \"]\" << \"->\" ; tmp = tmp -> next ; } cout << \"[\" << tmp -> value << \"]\" << endl ; tmp = tail ; while ( tmp -> pre != nullptr ){ tmp = tmp -> pre ; } while ( tmp -> next != nullptr ){ cout << tmp -> value << \"<->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; cout << endl ; } void inverseBiLinks (){ BiNode * pre = nullptr ; BiNode * next = nullptr ; while ( head != nullptr ){ next = head -> next ; head -> next = pre ; head -> pre = next ; pre = head ; head = next ; } head = pre ; } }; 4. \u94fe\u8868\u64cd\u4f5c\u7684\u5b8c\u6574\u793a\u4f8b \u00b6 #include <iostream> #include <vector> using namespace std ; struct Node { int value ; Node * next ; Node () : value ( 0 ), next ( nullptr ){} Node ( int v ) : value ( v ), next ( nullptr ){} }; //\u53cc\u5411\u94fe\u8868 struct BiNode { int value ; BiNode * pre ; BiNode * next ; BiNode () : value ( 0 ), pre ( nullptr ), next ( nullptr ){} BiNode ( int v ) : value ( v ), pre ( nullptr ), next ( nullptr ){} }; Node * createLinks ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } return head ; } //\u521b\u5efa\u5faa\u73af\u5355\u94fe\u8868 Node * createLinksCycle ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } tmp -> next = head ; // \u8ba9\u7ed3\u5c3e\u6307\u5411\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 return head ; } pair < BiNode * , BiNode *> createBiNode ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } BiNode * tail = tmp ; return { head , tail }; } //\u521b\u5efa\u5faa\u73af\u53cc\u94fe\u8868 pair < BiNode * , BiNode *> createBiNodeCycle ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } BiNode * tail = tmp ; tail -> next = head ; // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20 head -> pre = tail ; // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20 return { head , tail }; } //\u53cd\u8f6c\u5355\u5411\u94fe\u8868 Node * notLinks ( Node * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; Node * current = head ; Node * pre = nullptr ; Node * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } BiNode * notBiLinks ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * pre = nullptr ; BiNode * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 current -> pre = next ; pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } BiNode * notBiLinks2 ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * newHead ; while ( current ){ BiNode * tmp = current -> pre ; current -> pre = current -> next ; current -> next = tmp ; newHead = current ; current = current -> pre ; } return newHead ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } void printLinks ( Node * head ) { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } void printBiLinks ( BiNode * head ){ if ( head == nullptr ){ cout << \"empty\" << endl ; return ;} BiNode * tmp = head ; while ( tmp -> next != nullptr ){ cout << \"[\" << tmp -> value << \"]\" << \"<->\" ; tmp = tmp -> next ; } cout << \"[\" << tmp -> value << \"]\" << endl ; cout << endl ; } class Links { public : Node * head ; // \u5934\u8282\u70b9 Links () : head ( nullptr ){} //\u521b\u5efa\u94fe\u8868 Links ( vector < int > v ) { if ( v . empty ()){ head = nullptr ; } else { Node * first = new Node ( v [ 0 ]); head = first ; Node * tmp = first ; for ( int i = 1 ; i < v . size (); ++ i ) { Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = node ; } } } //\u6253\u5370\u94fe\u8868 void printLinks () { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } //\u53cd\u8f6c\u8fd9\u4e2a\u94fe\u8868 void inverseLinks (){ Node * pre = nullptr ; Node * next = nullptr ; while ( head != nullptr ){ next = head -> next ; head -> next = pre ; pre = head ; head = next ; } head = pre ; } }; int main () { vector < int > v = { 1 , 2 , 3 , 4 , 5 , 6 }; Node * head = createLinks ( v ); // Node *CHead = createLinksCycle(v); // Node *IHead = notLinks(head); auto Binode = createBiNode ( v ); // auto *IBiHead = notBiLinks2(Binode.first); // auto BinodeC = createBiNodeCycle(v); printLinks ( head ); printBiLinks ( Binode . first ); return 0 ; } 5. \u94fe\u8868\u76f8\u5173\u7684\u4e60\u9898 \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u4e2d\u7b49 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u4e2d\u7b49 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u56f0\u96be 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u4e2d\u7b49 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u7b80\u5355 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 \u4e2d\u7b49 LintCode\u9898\u76ee \u96be\u5ea6 \u94fe\u8868 \u9898\u76ee\u5408\u96c6","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_1","text":"\u94fe\u8868\u662f\u4e00\u79cd\u7528\u6307\u9488\u4e32\u8054\u8d77\u6765\u7684\u987a\u5e8f\u7ed3\u6784\uff0c\u4e3b\u8981\u4f18\u70b9\u662f\u589e\u5220\u5feb\uff0c\u4e3b\u8981\u7f3a\u70b9\u662f\u65e0\u6cd5\u5411\u6570\u7ec4\u90a3\u6837\u5feb\u901f\u53d6\u51fa\u67d0\u4e2a\u5143\u7d20\u3002 \u94fe\u8868\u662f\u4e00\u79cd\u6bd4\u8f83\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u8981\u7c7b\u578b\u6709\u5355\u94fe\u8868\uff0c\u53cc\u94fe\u8868\uff0c\u5faa\u73af\u94fe\u8868\u7b49\u3002 \u94fe\u8868\u7684\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u548c\u6307\u9488\u5b9e\u73b0\u3002","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#1","text":"C++11\u7684\u6807\u51c6\u4e2d\uff0c\u7ed3\u6784\u4f53\u548c\u7c7b\u5e76\u6ca1\u6709\u672c\u8d28\u7684\u4e0d\u540c\u3002\u6240\u6709\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u548c\u7c7b\u6765\u5b9a\u4e49\u8282\u70b9\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5355\u94fe\u8868\u901a\u5e38\u5305\u542b\u4e00\u4e2a val \u548c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 *next ,\u53cc\u5411\u94fe\u8868\u901a\u5e38\u5305\u542b\u4e00\u4e2a val \u548c\u4e24\u4e2a\u6307\u9488 *pre , *next ,\u5206\u522b\u6307\u5411\u524d\u9762\u7684\u8282\u70b9\u548c\u540e\u9762\u7684\u8282\u70b9\u3002","title":"1. \u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#11","text":"","title":"1.1 \u94fe\u8868\u8282\u70b9\u7ed3\u6784\u7684\u5b9a\u4e49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#111","text":"//\u5355\u94fe\u8868\u8282\u70b9\u7684\u5b9a\u4e49-\u4f7f\u7528\u7ed3\u6784\u4f53 struct Node { int value ; Node * next ; Node () : value ( 0 ), next ( nullptr ){} Node ( int v ) : value ( v ), next ( nullptr ){} }; //\u4f7f\u7528\u7c7b class ListNode { public : int val ; ListNode * next ; ListNode ( int val ) { this -> val = val ; this -> next = NULL ; } }","title":"1.1.1 \u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#112","text":"//\u53cc\u5411\u94fe\u8868 struct BiNode { int value ; BiNode * pre ; BiNode * next ; BiNode () : value ( 0 ), pre ( nullptr ), next ( nullptr ){} BiNode ( int v ) : value ( v ), pre ( nullptr ), next ( nullptr ){} };","title":"1.1.2 \u53cc\u5411\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#12","text":"","title":"1.2 \u94fe\u8868\u7684\u521b\u5efa"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#121","text":"\u9996\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\uff0c\u8fd4\u56de\u7a7a\u94fe\u8868 \u5982\u679c\u4e0d\u662f\u7a7a\uff0c\u521b\u5efa\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8282\u70b9\uff0c\u5e76\u7528\u5934\u6307\u9488\u6307\u5411\u5b83\uff0c\u65e5\u540e\u8fd4\u56de\u8fd9\u4e2a\u5934\u6307\u9488\uff1b \u7136\u540e\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u521b\u5efa\u65b0\u7684\u8282\u70b9\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u8d4b\u503c\u4e2a\u524d\u4e00\u4e2a\u8282\u70b9\u7684next\u6307\u9488\uff0c\u7136\u540e\u66f4\u65b0tmp\u6307\u5411\u5f53\u524d\u65b0\u521b\u5efa\u7684\u8282\u70b9\u3002 \u6838\u5fc3\u7684\u8bed\u53e5\uff1a Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; Node * createLinks ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } return head ; }","title":"1.2.1 \u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#122","text":"\u53cc\u5411\u94fe\u8868\u7684\u521b\u5efa\u9700\u8981\u8fd4\u56de\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5934\u90e8\uff0c\u4fbf\u4e8e\u6b63\u5411\u904d\u5386\u94fe\u8868\uff1b\u53e6\u5916\u4e00\u4e2a\u6307\u5411\u5c3e\u90e8\uff0c\u4fbf\u4e8e\u9006\u5411\u904d\u5386\u94fe\u8868 \u9996\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\uff0c\u8fd4\u56de\u7a7a\u94fe\u8868 \u7528\u7b2c\u4e00\u4e2a\u5143\u7d20\u521b\u5efa\u8282\u70b9\uff0c\u5e76\u7528\u5934\u8282\u70b9\u6307\u5411\u5b83 \u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u6b64\u4e34\u65f6\u53d8\u91cf\u4e00\u76f4\u6307\u5411\u5f53\u524d\u521b\u5efa\u7684\u8282\u70b9 \u4ece\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u8282\u70b9\uff0c\u521b\u5efa\u7684\u8282\u70b9\u7684pre\u8bbe\u7f6e\u4e3atmp, \u7136\u540e\u628atmp\u7684next\u8d4b\u503c\u6210node,\u5373\u8ba9tmp\u6240\u6307\u5411\u7684\u8282\u70b9\u8fde\u63a5\u5230\u5f53\u524d\u521b\u5efa\u7684\u8282\u70b9\u4e0a \u66f4\u65b0tmp\u4f7f\u5b83\u6307\u5411\u5f53\u524d\u65b0\u521b\u5efa\u7684\u8282\u70b9\u3002 \u5faa\u73af\u4f53\u7ed3\u675f\u540e\uff0ctmp\u6b63\u597d\u6307\u5411\u6700\u4f1a\u4e00\u4e2a\u521b\u5efa\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u628atmp\u8d4b\u503c\u7ed9tail \u8fd4\u56dehead\u548ctail; \u5173\u952e\u8bed\u53e5\uff1a BiNode *node = new BiNode(v[i]); node->pre = tmp; tmp->next = node; tmp = tmp->next; pair < BiNode * , BiNode *> createBiNode ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); node -> pre = tmp ; tmp -> next = node ; tmp = tmp -> next ; } BiNode * tail = tmp ; return { head , tail }; }","title":"1.2.2 \u53cc\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#123","text":"\u5faa\u73af\u94fe\u8868\u5c31\u662f\u7ed3\u5c3e\u7684\u5143\u7d20\u53c8\u6307\u5411\u4e86\u5f00\u5934\u7684\u5143\u7d20\u3002\u6240\u4ee5\u521b\u5efa\u8fc7\u7a0b\u57fa\u672c\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u6307\u793a\u5728\u7ed3\u5c3e\u7684\u5904\u7406\u7a0d\u6709\u4e0d\u540c\u3002 \u5faa\u73af\u5355\u94fe\u8868\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u6dfb\u52a0 tmp->next = head; \u5faa\u73af\u53cc\u5411\u94fe\u8868\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u6dfb\u52a0 tail->next = head; // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20 head->pre = tail; // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20 . //\u521b\u5efa\u5faa\u73af\u5355\u94fe\u8868 Node * createLinksCycle ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } tmp -> next = head ; // \u8ba9\u7ed3\u5c3e\u6307\u5411\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 return head ; } //\u521b\u5efa\u5faa\u73af\u53cc\u94fe\u8868 pair < BiNode * , BiNode *> createBiNodeCycle ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } BiNode * tail = tmp ; tail -> next = head ; // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20 head -> pre = tail ; // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20 return { head , tail }; }","title":"1.2.3 \u5faa\u73af\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#13","text":"","title":"1.3 \u94fe\u8868\u7684\u63d2\u5165"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#131","text":"\u8981\u5728\u5355\u94fe\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5047\u8bbec\u6307\u5411\u4e86\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0cn\u662f\u65b0\u521b\u5efa\u7684\u8282\u70b9 \u90a3\u4e48\u63d2\u5165\u7684\u65b9\u6cd5\u662f\uff1a n -> next = c -> next ; //\u65b0\u8282\u70b9n\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u6210c\u7684\u540e\u4e00\u4e2a\u8282\u70b9 c -> next = n ; //c\u8282\u70b9\u6307\u5411\u65b0\u63d2\u5165\u7684\u8282\u70b9 \u6ce8\u610f\u5982\u679c\u63d2\u5165\u7684\u4f4d\u7f6e\u662f\u94fe\u8868\u7684\u5934\u90e8\uff0c\u9700\u8981\u5355\u72ec\u5904\u7406\u3002 n->next = head; //\u65b0\u63d2\u5165\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fde\u63a5\u5230\u5934\u8282\u70b9 head = n; //\u5934\u7ed3\u70b9\u7f16\u7a0b\u65b0\u63d2\u5165\u7684\u8282\u70b9","title":"1.3.1 \u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#132","text":"\u53cc\u94fe\u8868\u65e2\u53ef\u4ee5\u5411\u524d\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u5411\u540e\u8bbf\u95ee\u3002\u6240\u4ee5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u6216\u8005\u8981\u63d2\u5165\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 \u5047\u8bbec\u4ee3\u8868\u8981\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff1bn\u4ee3\u8868\u65b0\u63d2\u5165\u7684\u8282\u70b9\uff0cb\u4ee3\u8868\u63d2\u5165\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u3002 \u5229\u7528c\u7684\u63d2\u5165\u65b9\u6cd5\u662f\uff1a n -> next = c -> next ; c -> next -> pre = n ; // \u8fd9\u4e24\u53e5\u5c06\u65b0\u7684\u8282\u70b9\u548c\u540e\u9762\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765 n -> pre = c ; c -> next = n ; //\u8fd9\u4e24\u53e5\u5c06c\u548cn\u8fde\u63a5\u8d77\u6765 \u5982\u679c\u8981\u5728\u5934\u8282\u70b9\u4e4b\u524d\u63d2\u5165\uff0c\u4f1a\u53d1\u73b0\u5934\u7ed3\u70b9\u4e4b\u524d\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528\u4e0a\u9762\u7684\u8bed\u53e5\uff0c\u9700\u8981\u53e6\u5916\u5904\u7406\uff1a n -> next = head ; head -> pre = n ; head = n ; \u5229\u7528b\u7684\u63d2\u5165\u65b9\u6cd5\u662f\uff1a n -> pre = b -> pre ; b -> pre -> next = n ; // \u628a\u65b0\u7684\u8282\u70b9\u548cb\u524d\u9762\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765 n -> next = b ; b -> pre = n ; // \u628a\u65b0\u7684\u8282\u70b9\u548cb\u8fde\u63a5\u8d77\u6765 \u5982\u679c\u5728\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u9762\u63d2\u5165\u8282\u70b9\uff0c\u4f1a\u53d1\u73b0\u6ca1\u6709b,\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u53e6\u5916\u5904\u7406\uff1a n -> pre = tail ; tail -> next = n ; tail = n ;","title":"1.3.2 \u53cc\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#133","text":"\u5faa\u73af\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u6ca1\u6709\u4e86\u50cf\u4e0a\u9762\u4e0d\u5faa\u73af\u7684\u94fe\u8868\u90a3\u6837\u9700\u8981\u53e6\u5916\u5904\u7406\u5934\u90e8\u548c\u5c3e\u90e8\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u63d2\u5165\u64cd\u4f5c\u66f4\u52a0\u7b80\u5355\u3002 \u5982\u679c\u63d2\u5165\u7684\u662f\u5934\u8282\u70b9\u7684\u8bdd\uff0c\u6ce8\u610fhead\u7684\u66f4\u65b0\u60c5\u51b5\u5373\u53ef\u3002","title":"1.3.3 \u5faa\u73af\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#14","text":"","title":"1.4 \u94fe\u8868\u7684\u5220\u9664"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#141","text":"\u5220\u9664\u5355\u94fe\u8868\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u8be5\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5047\u8bbe\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u662fc. \u5220\u9664\u64cd\u4f5c\uff1a c->next = c->next->next; \u5982\u679c\u5220\u9664\u7684\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u76f4\u63a5 head = head->next; \u5982\u679c\u5220\u9664\u7684\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u76f4\u63a5 c->next=nullptr .","title":"1.4.1 \u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#142","text":"\u540c\u63d2\u5165\u7c7b\u4f3c\uff0c\u53cc\u94fe\u8868\u7684\u5220\u9664\u53ea\u9700\u8981\u77e5\u9053\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u6216\u8005\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5047\u8bbec\u662f\u524d\u4e00\u4e2a\u8282\u70b9\uff0cb\u662f\u540e\u4e00\u4e2a\u8282\u70b9\u3002 \u5220\u9664\u64cd\u4f5c1\uff1a c -> next = c -> next -> next ; c -> next -> next -> pre = c ; \u5220\u9664\u64cd\u4f5c2\uff1a b -> pre = b -> pre -> pre ; b -> pre -> pre -> next = b ; \u5220\u9664\u9996\u8282\u70b9\u548c\u5c3e\u8282\u70b9\u540c\u6837\u9700\u8981\u7279\u6b8a\u8003\u8651\uff1b \u5220\u9664\u9996\u8282\u70b9\uff1a b->pre = nullptr;head = b ; \u5220\u9664\u5c3e\u8282\u70b9\uff1a c->next=nullptr;tail=c; \u9700\u8981\u7684\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u505a\u53ea\u662f\u4ecehead\u548ctail\u5f00\u59cb\u8bbf\u95ee\u7684\u8bdd\uff0c\u518d\u4e5f\u8bbf\u95ee\u4e0d\u5230\u88ab\u5220\u9664\u7684\u8282\u70b9\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u4ece\u5220\u9664\u7684\u8282\u70b9\u8fd8\u6709\u6307\u9488\u6307\u5411\u8fd9\u4e2a\u94fe\u8868\u7684\u67d0\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u60f3\u8981\u5220\u9664\u5e72\u51c0\uff0c\u5c31\u662f\u5f7b\u5e95\u65ad\u5f00\u8fde\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u53e5\uff1a \u5220\u9664\u9996\u8282\u70b9\uff1a b->pre->next=nullptr; b->pre=nullptr;head=b; \u5220\u9664\u5c3e\u8282\u70b9\uff1a c->next->pre=nullptr;c->next=nullptr;tail=c;","title":"1.4.2 \u53cc\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#143","text":"\u5faa\u73af\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u540c\u6837\u4e0d\u9700\u8981\u8003\u8651\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5982\u679c\u63d2\u5165\u7684\u662f\u5934\u8282\u70b9\u7684\u8bdd\uff0c\u6ce8\u610fhead\u7684\u66f4\u65b0\u60c5\u51b5\u5373\u53ef\u3002","title":"1.4.3 \u5faa\u73af\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#15","text":"\u60f3\u8981\u66f4\u65b0\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u503c\uff0c\u53ea\u9700\u8981\u67e5\u627e\u5230\u8be5\u8282\u70b9c\uff0c\u7136\u540e\u6267\u884c c->val = new_value; \u5373\u53ef\u3002","title":"1.5 \u94fe\u8868\u7684\u66ff\u6362"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#16","text":"","title":"1.6 \u94fe\u8868\u7684\u53cd\u5411"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#161","text":"\u57fa\u672c\u601d\u8def\u662f\u8bbe\u7f6e\u4e09\u4e2a\u6307\u9488pre,current,next;\u5206\u522b\u4ee3\u8868\u76f8\u90bb\u7684\u4e09\u4e2a\u8282\u70b9\u3002 \u6bcf\u6b21\u5faa\u73af\u6267\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 Node * notLinks ( Node * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; Node * current = head ; Node * pre = nullptr ; Node * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 }","title":"1.6.1 \u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#162","text":"\u53cc\u5411\u94fe\u8868\u7684\u53cd\u8f6c\u4e0e\u5355\u5411\u94fe\u8868\u7684\u601d\u8def\u4e00\u81f4\uff0c\u8bbe\u7f6e\u4e09\u4e2a\u6307\u9488pre,current,next\u5206\u522b\u6307\u5411\u76f8\u90bb\u7684\u4e09\u4e2a\u8282\u70b9\uff1b \u6bcf\u6b21\u5faa\u73af\u8fd9\u6837\u64cd\u4f5c\uff1a next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 current -> pre = next ; pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 BiNode * notBiLinks ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * pre = nullptr ; BiNode * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 current -> pre = next ; pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } \u5f53\u7136\uff0c\u5728\u903b\u8f91\u4e0a\u53cc\u5411\u94fe\u8868\u662f\u6ca1\u6709\u6b63\u53cd\u7684\uff0c\u4ee5\u4e0a\u6240\u8bf4\u7684\u53cd\u5411\u662f\u5728\u76f8\u540c\u7684\u8f93\u51fa\u51fd\u6570\u4e0b\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u6b63\u597d\u76f8\u53cd\u3002 \u4e5f\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u53cd\u8f6c\u53cc\u5411\u94fe\u8868\uff0c\u53ea\u9700\u8981\u628a\u94fe\u8868\u8282\u70b9\u7684\u6307\u9488pre,next\u4ea4\u6362\u4e00\u4e0b\u5373\u53ef\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a BiNode * tmp = current -> pre ; current -> pre = current -> next ; current -> next = tmp ; // \u4ee5\u4e0a\u4e09\u884c\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c newHead = current ; //\u5b58\u50a8\u4e0b\u6765\u5f53\u524d\u8282\u70b9\uff0c\u65e5\u540e\u8fd4\u56de\u8be5\u8282\u70b9 current = current -> pre ; //\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9 BiNode * notBiLinks2 ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * newHead ; while ( current ){ BiNode * tmp = current -> pre ; current -> pre = current -> next ; current -> next = tmp ; newHead = current ; current = current -> pre ; } return newHead ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 }","title":"1.6.2 \u53cc\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#163","text":"\u5faa\u73af\u94fe\u8868\u7684\u53cd\u8f6c\u6ca1\u6709\u4ec0\u4e48\u5b9e\u9645\u7684\u610f\u4e49\uff0c\u53ea\u662f\u7528\u6765\u7ec3\u4e60\u94fe\u8868\u7684\u5904\u7406\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u548c\u4e0a\u9762\u7684\u57fa\u672c\u76f8\u540c\u3002","title":"1.6.3 \u5faa\u73af\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#17","text":"","title":"1.7 \u94fe\u8868\u7684\u53ef\u89c6\u5316"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#171","text":"void printLinks ( Node * head ) { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } \u6253\u5370\u51fa\u6765\u7684\u6837\u5f0f 1->2->3->4->5->6","title":"1.7.1 \u6253\u5370\u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#172","text":"void printBiLinks ( BiNode * head ){ if ( head == nullptr ){ cout << \"empty\" << endl ; return ;} BiNode * tmp = head ; while ( tmp -> next != nullptr ){ cout << \"[\" << tmp -> value << \"]\" << \"<->\" ; tmp = tmp -> next ; } cout << \"[\" << tmp -> value << \"]\" << endl ; cout << endl ; } \u6253\u5370\u51fa\u6765\u7684\u6837\u5f0f > [1]<->[2]<->[3]<->[4]<->[5]<->[6]","title":"1.7.2 \u6253\u5370\u53cc\u5411\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#2","text":"class Links { public : Node * head ; // \u5934\u8282\u70b9 Links () : head ( nullptr ){} //\u521b\u5efa\u94fe\u8868 Links ( vector < int > v ) { if ( v . empty ()){ head = nullptr ; } else { Node * first = new Node ( v [ 0 ]); head = first ; Node * tmp = first ; for ( int i = 1 ; i < v . size (); ++ i ) { Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = node ; } } } //\u6253\u5370\u94fe\u8868 void printLinks () { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } //\u53cd\u8f6c\u8fd9\u4e2a\u94fe\u8868 void inverseLinks (){ Node * pre = nullptr ; Node * next = nullptr ; while ( head != nullptr ){ next = head -> next ; head -> next = pre ; pre = head ; head = next ; } head = pre ; } };","title":"2. \u5355\u94fe\u8868\u7c7b\u7684\u5b9a\u4e49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#3","text":"//\u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0 class BiLinks { public : BiNode * head ; BiNode * tail ; BiLinks () : head ( nullptr ), tail ( nullptr ){} BiLinks ( vector < int > v ){ BiNode * first = new BiNode ( v [ 0 ]); head = first ; BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } tail = tmp ; } void printBiLinks (){ if ( head == nullptr || tail == nullptr ){ cout << \"empty!\" << endl ; return ;} BiNode * tmp = head ; while ( tmp -> next != nullptr ){ cout << \"[\" << tmp -> value << \"]\" << \"->\" ; tmp = tmp -> next ; } cout << \"[\" << tmp -> value << \"]\" << endl ; tmp = tail ; while ( tmp -> pre != nullptr ){ tmp = tmp -> pre ; } while ( tmp -> next != nullptr ){ cout << tmp -> value << \"<->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; cout << endl ; } void inverseBiLinks (){ BiNode * pre = nullptr ; BiNode * next = nullptr ; while ( head != nullptr ){ next = head -> next ; head -> next = pre ; head -> pre = next ; pre = head ; head = next ; } head = pre ; } };","title":"3. \u53cc\u5411\u94fe\u8868\u7c7b\u7684\u5b9a\u4e49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#4","text":"#include <iostream> #include <vector> using namespace std ; struct Node { int value ; Node * next ; Node () : value ( 0 ), next ( nullptr ){} Node ( int v ) : value ( v ), next ( nullptr ){} }; //\u53cc\u5411\u94fe\u8868 struct BiNode { int value ; BiNode * pre ; BiNode * next ; BiNode () : value ( 0 ), pre ( nullptr ), next ( nullptr ){} BiNode ( int v ) : value ( v ), pre ( nullptr ), next ( nullptr ){} }; Node * createLinks ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } return head ; } //\u521b\u5efa\u5faa\u73af\u5355\u94fe\u8868 Node * createLinksCycle ( vector < int > v ){ if ( v . empty ()) return nullptr ; Node * head = new Node ( v [ 0 ]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765 Node * tmp = head ; for ( int i = 1 ; i < v . size (); ++ i ){ Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = tmp -> next ; } tmp -> next = head ; // \u8ba9\u7ed3\u5c3e\u6307\u5411\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 return head ; } pair < BiNode * , BiNode *> createBiNode ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } BiNode * tail = tmp ; return { head , tail }; } //\u521b\u5efa\u5faa\u73af\u53cc\u94fe\u8868 pair < BiNode * , BiNode *> createBiNodeCycle ( vector < int > v ){ if ( v . empty ()) return { nullptr , nullptr }; BiNode * head = new BiNode ( v [ 0 ]); BiNode * tmp = head ; for ( int i = 1 ; i < v . size (); i ++ ){ BiNode * node = new BiNode ( v [ i ]); tmp -> next = node ; node -> pre = tmp ; tmp = tmp -> next ; } BiNode * tail = tmp ; tail -> next = head ; // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20 head -> pre = tail ; // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20 return { head , tail }; } //\u53cd\u8f6c\u5355\u5411\u94fe\u8868 Node * notLinks ( Node * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; Node * current = head ; Node * pre = nullptr ; Node * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } BiNode * notBiLinks ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * pre = nullptr ; BiNode * next = nullptr ; while ( current ){ next = current -> next ; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 current -> next = pre ; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9 current -> pre = next ; pre = current ; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 current = next ; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20 } return pre ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } BiNode * notBiLinks2 ( BiNode * head ){ if ( head == nullptr || head -> next == nullptr ) return head ; BiNode * current = head ; BiNode * newHead ; while ( current ){ BiNode * tmp = current -> pre ; current -> pre = current -> next ; current -> next = tmp ; newHead = current ; current = current -> pre ; } return newHead ; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9 } void printLinks ( Node * head ) { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } void printBiLinks ( BiNode * head ){ if ( head == nullptr ){ cout << \"empty\" << endl ; return ;} BiNode * tmp = head ; while ( tmp -> next != nullptr ){ cout << \"[\" << tmp -> value << \"]\" << \"<->\" ; tmp = tmp -> next ; } cout << \"[\" << tmp -> value << \"]\" << endl ; cout << endl ; } class Links { public : Node * head ; // \u5934\u8282\u70b9 Links () : head ( nullptr ){} //\u521b\u5efa\u94fe\u8868 Links ( vector < int > v ) { if ( v . empty ()){ head = nullptr ; } else { Node * first = new Node ( v [ 0 ]); head = first ; Node * tmp = first ; for ( int i = 1 ; i < v . size (); ++ i ) { Node * node = new Node ( v [ i ]); tmp -> next = node ; tmp = node ; } } } //\u6253\u5370\u94fe\u8868 void printLinks () { if ( head == nullptr ) { cout << \"empty\" << endl ; return ; } Node * tmp = head ; while ( tmp -> next != nullptr ) { cout << tmp -> value << \"->\" ; tmp = tmp -> next ; } cout << tmp -> value << endl ; } //\u53cd\u8f6c\u8fd9\u4e2a\u94fe\u8868 void inverseLinks (){ Node * pre = nullptr ; Node * next = nullptr ; while ( head != nullptr ){ next = head -> next ; head -> next = pre ; pre = head ; head = next ; } head = pre ; } }; int main () { vector < int > v = { 1 , 2 , 3 , 4 , 5 , 6 }; Node * head = createLinks ( v ); // Node *CHead = createLinksCycle(v); // Node *IHead = notLinks(head); auto Binode = createBiNode ( v ); // auto *IBiHead = notBiLinks2(Binode.first); // auto BinodeC = createBiNodeCycle(v); printLinks ( head ); printBiLinks ( Binode . first ); return 0 ; }","title":"4. \u94fe\u8868\u64cd\u4f5c\u7684\u5b8c\u6574\u793a\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#5","text":"LeetCode\u9898\u76ee \u96be\u5ea6 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u4e2d\u7b49 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u4e2d\u7b49 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u56f0\u96be 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u4e2d\u7b49 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u7b80\u5355 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 \u4e2d\u7b49 LintCode\u9898\u76ee \u96be\u5ea6 \u94fe\u8868 \u9898\u76ee\u5408\u96c6","title":"5. \u94fe\u8868\u76f8\u5173\u7684\u4e60\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/","text":"\u961f\u5217 \u00b6 1. \u961f\u5217\u8868\u793a \u00b6 2. \u961f\u5217\u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 621. \u4efb\u52a1\u8c03\u5ea6\u5668 \u4e2d\u7b49 767. \u91cd\u6784\u5b57\u7b26\u4e32 \u4e2d\u7b49","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_1","text":"","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#1","text":"","title":"1. \u961f\u5217\u8868\u793a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#2","text":"LeetCode\u9898\u76ee \u96be\u5ea6 621. \u4efb\u52a1\u8c03\u5ea6\u5668 \u4e2d\u7b49 767. \u91cd\u6784\u5b57\u7b26\u4e32 \u4e2d\u7b49","title":"2. \u961f\u5217\u76f8\u5173\u9898\u76ee"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/","text":"\u56fe(\u57fa\u7840\u77e5\u8bc6) \u00b6 1. \u56fe\u7684\u8868\u793a\u65b9\u6cd5 \u00b6 1.1 \u90bb\u63a5\u77e9\u9635 \u00b6 \u8bbe\u6709 N \u4e2a\u9876\u70b9\uff0cM \u6761\u8fb9\u3002 \u90bb\u63a5\u77e9\u9635\u5c31\u662f\u4e00\u4e2a N*N \u7684\u77e9\u9635\uff0cg[i][j] \u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u662f\u5426\u6709\u7ebf\u8fde\u63a5\u3002 \u90bb\u63a5\u77e9\u9635\u53ef\u4ee5\u8868\u793a\u6709\u5411\u56fe\uff0c\u65e0\u5411\u56fe\uff0c\u65e0\u5411\u56fe\u6709\u4e00\u534a\u662f\u91cd\u590d\u5143\u7d20\u3002 \u90bb\u63a5\u77e9\u9635\u7684\u7f3a\u70b9\u662f\uff1a \u5f53\u8fb9\u7684\u6570\u91cf\u8fdc\u8fdc\u5c11\u4e8e\u9876\u70b9\u7684\u65f6\u5019\uff0c\u7a7a\u95f4\u6d6a\u8d39\u5927\u3002 \u90bb\u63a5\u77e9\u9635\u7684\u4f18\u70b9\u662f\uff1a \u53ef\u4ee5\u5feb\u901f\u5224\u65ad\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u662f\u5426\u76f4\u63a5\u76f8\u8fde 1.2 \u90bb\u63a5\u8868 \u00b6 \u90bb\u63a5\u8868\u662f\u4e00\u4e2a N \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u5b58\u50a8\u4e0e\u8be5\u9876\u70b9\u76f4\u63a5\u8fde\u63a5\u7684\u9876\u70b9\u3002 \u90bb\u63a5\u8868\u7684\u4f18\u70b9\u662f\uff1a \u5f53 N \u8fdc\u5927\u4e8e M \u7684\u65f6\u5019\uff0c\u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u90bb\u63a5\u8868\u7684\u7f3a\u70b9\u662f\uff1a \u65e0\u6cd5\u76f4\u63a5\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u76f4\u63a5\u76f8\u8fde\uff0c\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\u624d\u53ef\u4ee5\u5224\u65ad\u3002 2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u00b6 # G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a # color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # V \u4e2a\u70b9\uff0c E \u6761\u8fb9 outlist = [] color [:] = 0 deque = [] s = 0 # \u5f00\u59cb\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u70b9 deque . append ( s ) while len ( s ) > 0 : current = deque . pop ( 0 ) color [ current ] = 1 outlist . append ( current ) for point , value in enumerate ( G [ current ]): if value != 0 and color [ point ] == 0 : deque . append ( point ) color [ current ] = 2 3. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u00b6 # G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a # color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # V \u4e2a\u70b9\uff0c E \u6761\u8fb9 outlist = [] color [:] = 0 for i in range ( V ): if color [ i ] == 0 : DFS ( G , i ) def DFS ( G , i ): color [ i ] = 1 outlist . append ( i ) for point , value in enumerate ( G [ i ]): if value != 0 and color [ point ] == 0 : DFS ( G , point ) color [ i ] = 2 4. \u62d3\u6251\u6392\u5e8f \u00b6 \u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u65f6\u8bbf\u95ee\u5b8c\u6bcf\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\uff0c\u9006\u5e8f\u8f93\u51fa\u5373\u53ef # G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a # color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # V \u4e2a\u70b9\uff0c E \u6761\u8fb9 def Topology ( G , i , color ): color [ i ] = 1 #outlist.append(i) for point , value in enumerate ( G [ i ]): if value != 0 and color [ point ] == 0 : Topology ( G , point , color ) color [ i ] = 2 outlist . insert ( 0 , i ) # \u8bbf\u95ee\u5b8c\u4e4b\u540e\u9006\u5e8f\u8f93\u51fa outlist = [] color = [ 0 for _ in range ( len ( G ))] for i in range ( len ( G )): if color [ i ] == 0 : Topology ( G , i , color ) 5. \u5224\u65ad\u56fe\u662f\u5426\u6709\u73af\u8def \u00b6 def dfs ( G , i , color ): \"\"\" G : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c 0 \u8868\u793a\u65e0\u8fb9 \"\"\" color [ i ] = 1 for j in range ( len ( G )): if i != j and G [ i ][ j ] != 0 : if color [ j ] == 1 : return True if color [ j ] == 0 : ans = dfs ( G , j , color ) if ans == True : return True color [ i ] = 2 return False def isCycle ( G ): \"\"\" \u5224\u65ad\u662f\u5426\u6709\u73af \"\"\" color = [ 0 ] * len ( G ) for i in range ( len ( G )): if color [ i ] == 0 : ans = dfs ( G , i , color ) if ans == True : return True return False LeetCode\u9898\u76ee \u96be\u5ea6 \u7b97\u6cd5 207. \u8bfe\u7a0b\u8868 \u4e2d\u7b49 \u68c0\u6d4b\u73af\u8def 210. \u8bfe\u7a0b\u8868 II \u4e2d\u7b49 \u62d3\u6251\u6392\u5e8f 1203. \u9879\u76ee\u7ba1\u7406 \u56f0\u96be \u62d3\u6251\u6392\u5e8f 854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32 \u56f0\u96be \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","title":"\u56fe(\u57fa\u7840\u77e5\u8bc6)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_1","text":"","title":"\u56fe(\u57fa\u7840\u77e5\u8bc6)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#1","text":"","title":"1. \u56fe\u7684\u8868\u793a\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#11","text":"\u8bbe\u6709 N \u4e2a\u9876\u70b9\uff0cM \u6761\u8fb9\u3002 \u90bb\u63a5\u77e9\u9635\u5c31\u662f\u4e00\u4e2a N*N \u7684\u77e9\u9635\uff0cg[i][j] \u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u662f\u5426\u6709\u7ebf\u8fde\u63a5\u3002 \u90bb\u63a5\u77e9\u9635\u53ef\u4ee5\u8868\u793a\u6709\u5411\u56fe\uff0c\u65e0\u5411\u56fe\uff0c\u65e0\u5411\u56fe\u6709\u4e00\u534a\u662f\u91cd\u590d\u5143\u7d20\u3002 \u90bb\u63a5\u77e9\u9635\u7684\u7f3a\u70b9\u662f\uff1a \u5f53\u8fb9\u7684\u6570\u91cf\u8fdc\u8fdc\u5c11\u4e8e\u9876\u70b9\u7684\u65f6\u5019\uff0c\u7a7a\u95f4\u6d6a\u8d39\u5927\u3002 \u90bb\u63a5\u77e9\u9635\u7684\u4f18\u70b9\u662f\uff1a \u53ef\u4ee5\u5feb\u901f\u5224\u65ad\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u662f\u5426\u76f4\u63a5\u76f8\u8fde","title":"1.1 \u90bb\u63a5\u77e9\u9635"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#12","text":"\u90bb\u63a5\u8868\u662f\u4e00\u4e2a N \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u5b58\u50a8\u4e0e\u8be5\u9876\u70b9\u76f4\u63a5\u8fde\u63a5\u7684\u9876\u70b9\u3002 \u90bb\u63a5\u8868\u7684\u4f18\u70b9\u662f\uff1a \u5f53 N \u8fdc\u5927\u4e8e M \u7684\u65f6\u5019\uff0c\u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u90bb\u63a5\u8868\u7684\u7f3a\u70b9\u662f\uff1a \u65e0\u6cd5\u76f4\u63a5\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u76f4\u63a5\u76f8\u8fde\uff0c\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\u624d\u53ef\u4ee5\u5224\u65ad\u3002","title":"1.2 \u90bb\u63a5\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#2","text":"# G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a # color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # V \u4e2a\u70b9\uff0c E \u6761\u8fb9 outlist = [] color [:] = 0 deque = [] s = 0 # \u5f00\u59cb\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u70b9 deque . append ( s ) while len ( s ) > 0 : current = deque . pop ( 0 ) color [ current ] = 1 outlist . append ( current ) for point , value in enumerate ( G [ current ]): if value != 0 and color [ point ] == 0 : deque . append ( point ) color [ current ] = 2","title":"2. \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#3","text":"# G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a # color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # V \u4e2a\u70b9\uff0c E \u6761\u8fb9 outlist = [] color [:] = 0 for i in range ( V ): if color [ i ] == 0 : DFS ( G , i ) def DFS ( G , i ): color [ i ] = 1 outlist . append ( i ) for point , value in enumerate ( G [ i ]): if value != 0 and color [ point ] == 0 : DFS ( G , point ) color [ i ] = 2","title":"3. \u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#4","text":"\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u65f6\u8bbf\u95ee\u5b8c\u6bcf\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\uff0c\u9006\u5e8f\u8f93\u51fa\u5373\u53ef # G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a # color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # V \u4e2a\u70b9\uff0c E \u6761\u8fb9 def Topology ( G , i , color ): color [ i ] = 1 #outlist.append(i) for point , value in enumerate ( G [ i ]): if value != 0 and color [ point ] == 0 : Topology ( G , point , color ) color [ i ] = 2 outlist . insert ( 0 , i ) # \u8bbf\u95ee\u5b8c\u4e4b\u540e\u9006\u5e8f\u8f93\u51fa outlist = [] color = [ 0 for _ in range ( len ( G ))] for i in range ( len ( G )): if color [ i ] == 0 : Topology ( G , i , color )","title":"4. \u62d3\u6251\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#5","text":"def dfs ( G , i , color ): \"\"\" G : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c 0 \u8868\u793a\u65e0\u8fb9 \"\"\" color [ i ] = 1 for j in range ( len ( G )): if i != j and G [ i ][ j ] != 0 : if color [ j ] == 1 : return True if color [ j ] == 0 : ans = dfs ( G , j , color ) if ans == True : return True color [ i ] = 2 return False def isCycle ( G ): \"\"\" \u5224\u65ad\u662f\u5426\u6709\u73af \"\"\" color = [ 0 ] * len ( G ) for i in range ( len ( G )): if color [ i ] == 0 : ans = dfs ( G , i , color ) if ans == True : return True return False LeetCode\u9898\u76ee \u96be\u5ea6 \u7b97\u6cd5 207. \u8bfe\u7a0b\u8868 \u4e2d\u7b49 \u68c0\u6d4b\u73af\u8def 210. \u8bfe\u7a0b\u8868 II \u4e2d\u7b49 \u62d3\u6251\u6392\u5e8f 1203. \u9879\u76ee\u7ba1\u7406 \u56f0\u96be \u62d3\u6251\u6392\u5e8f 854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32 \u56f0\u96be \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","title":"5. \u5224\u65ad\u56fe\u662f\u5426\u6709\u73af\u8def"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u751f\u6210\u6811 \uff0c\u662f\u6307\u56fe\u7684\u4e00\u4e2a\u6700\u5c0f\u8fde\u901a\u7684\u5b50\u56fe\uff0c\u8be5\u5b50\u56fe\u5c11\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u4e0d\u8fde\u901a\uff0c\u591a\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u6709\u73af\u3002 \u6700\u5c0f\u751f\u6210\u6811 \uff0c\u662f\u6307\u8fb9\u6709\u6743\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u627e\u5230\u6743\u503c\u7684\u603b\u548c\u6700\u5c0f\u7684\u90a3\u4e2a\u8fde\u901a\u5b50\u56fe\u3002 \u5982\u56fe\uff0c\u8fb9\u4e0a\u7684\u6570\u503c\u5982\u679c\u4ee3\u8868\u8ddd\u79bb\u7684\u8bdd\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u6c42\u4e00\u4e2a\u7528\u6700\u77ed\u7684\u8ddd\u79bb\u628a\u6240\u6709\u70b9\u8fde\u63a5\u8d77\u6765\u7684\u65b9\u6848\u3002 \u6211\u4eec\u901a\u8fc7\u4ed4\u7ec6\u89c2\u5bdf\u5b9e\u9a8c\u53ef\u4ee5\u5f97\u51fa\uff0c\u6700\u5c0f\u7684\u751f\u6210\u6811\u662f\u8fd9\u6837\u7684\u3002 \u4e0a\u9762\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u6211\u4eec\u4f9d\u7167\u600e\u6837\u7684\u89c4\u5219\u5f97\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u5462\uff0c\u603b\u4e0d\u80fd\u9760\u770b\u5427\uff1f \u5176\u5b9e\uff0c\u8fd9\u4e2a\u95ee\u9898\u7528\u8d2a\u5fc3\u6cd5\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 1. Kruskal\u7b97\u6cd5 \u00b6 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u65e0\u5411\u6709\u6743\u56fe G=(V,E) G=(V,E) \uff0cKruskal\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u6784\u9020\u7a7a\u96c6\u5408A\uff0c\u5e76\u5c06\u56feG\u4e2d\u6240\u6709\u70b9\u52a0\u5165\u96c6\u5408A\uff0c\u6b64\u65f6A\u4e3a\u6709|V|\u68f5\u6811\u7684\u68ee\u6797\u3002 \u5c06\u56fe G G \u4e2d\u6240\u6709\u8fb9\u6309\u7167\u6743\u91cd\u8fdb\u884c\u6392\u5e8f\uff0c\u5f62\u6210\u6709\u5e8f\u96c6\u5408 B B \u3002 \u5bf9\u4e8e\u6b65\u9aa42\u4e2d\u6392\u5e8f\u540e\u96c6\u5408B\u4e2d\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff08u\uff0cv\uff09\uff0c\u5c1d\u8bd5\u5c06\uff08u\uff0cv\uff09\u4ee5\u53ca\u70b9u\u3001v\u52a0\u5165\u5230\u96c6\u5408A\u4e2d\u3002 \u5982\u679c\u6b65\u9aa43\u4e2d\u5c1d\u8bd5\u52a0\u5165\u7684\u70b9\u548c\u8fb9\uff0c\u5bf9\u4e8e\u56feA\u800c\u8a00\uff0c\u4e0d\u5f62\u6210\u56de\u8def\uff0c\u5219\u6dfb\u52a0\u70b9u\u3001v\u53ca\u8fb9\uff08u\uff0cv\uff09\uff0c\u5426\u5219\u4e0d\u6dfb\u52a0\u3002 \u5c06\u6b65\u9aa43\u5904\u7406\u7684\u8fb9\uff08u\uff0cv\uff09\u4ece\u96c6\u5408B\u4e2d\u5220\u9664\u3002 \u5224\u65ad\u6b64\u65f6\u4f5c\u4e3a\u56fe\u7684\u96c6\u5408A\uff0c\u662f\u5426\u6ee1\u8db3\u8fb9\u7684\u6570\u91cf\u7b49\u4e8e|V|-1\uff08\u4e5f\u5373\u6ee1\u8db3\u6700\u5c0f\u751f\u6210\u6811\u7684\u8981\u6c42\uff09\uff0c\u5982\u679c\u662f\uff0c\u5219\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8f6c\u81f3\u6b65\u9aa43\u3002 \u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6309\u7167Kruskal\u7b97\u6cd5\uff0c\u8fc7\u7a0b\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 \u521d\u59cb\u5316\u7684\u65f6\u5019\uff0cA\u96c6\u5408\u5305\u542b\u6240\u6709\u7684\u9876\u70b9\uff0cB\u96c6\u5408\u5305\u542b\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u8fbe\u6392\u5e8f\u597d\u7684\u8fb9\u3002 \u7b2c\u4e00\u6b21\uff0c\u6dfb\u52a01\u21922, \u5f97\u5230 \u7b2c\u4e8c\u6b21\uff0c\u6dfb\u52a01\u21923,\u5f97\u5230 \u7b2c\u4e09\u6b21\uff0c\u6dfb\u52a04\u21926\uff0c\u5f97\u5230 \u7b2c\u56db\u6b21\uff0c\u6dfb\u52a05\u21926,\u5f97\u5230 \u7b2c\u4e94\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a02\u21923,\u4f46\u662f\u5982\u679c\u6dfb\u52a0\u4e862\u21923\u5c31\u5f62\u6210\u7684\u56de\u8def\uff0c\u6240\u4ee5\u8be5\u6b21\u4e0d\u6dfb\u52a0\uff0c\u4ece\u96c6\u5408B\u4e2d\u5220\u96642\u21923,\u7ee7\u7eed\u770b\u4e0b\u4e00\u4e2a\u3002 \u7b2c\u516d\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a04\u21925,\u4f46\u662f\u5982\u679c\u6dfb\u52a0\u4e86\uff0c\u5c31\u5f62\u6210\u4e86\u56de\u8def\uff0c\u6240\u4ee5\u4e5f\u5e94\u8be5\u8df3\u8fc7\u3002 \u7b2c\u4e03\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a03\u21924,\u5f97\u5230 \u6b64\u65f6\uff0c\u6240\u6709\u7684\u70b9\u90fd\u5df2\u7ecf\u8fde\u901a\uff0c\u6240\u4ee5\u7b97\u6cd5\u7ed3\u675f\u3002\u6700\u5c0f\u751f\u6210\u6811\u627e\u51fa\u6765\u4e86\u3002 \u5206\u6790\u6574\u4e2a\u8fc7\u7a0b\uff0c\u5224\u65ad\u8fde\u901a\u4e0e\u5426 \u548c \u5224\u65ad\u7b97\u6cd5\u662f\u5426\u7ed3\u675f \u662f\u6bcf\u4e00\u6b65\u64cd\u4f5c\u90fd\u8981\u68c0\u67e5\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u5224\u65ad\u7b97\u6cd5\u662f\u5426\u7ed3\u675f\u53ef\u4ee5\u7528A\u7684\u8fb9\u7684\u6570\u76ee\u662f\u5426\u8fbe\u5230\u4e86\u9876\u70b9\u7684\u6570\u76ee-1\uff0c \u5224\u65ad\u8054\u901a\u6027\u5c31\u8981\u7528\u5230**\u5e76\u67e5\u96c6**\u4e86\u3002\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u591a\u4e2a\u6811\u7ec4\u6210\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u67e5\u51fa\u540c\u7ec4\u4e0d\u540c\u7ec4\u7684\u95ee\u9898\u3002 \u4f7f\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u7684Kruskal\u7b97\u6cd5\u5982\u4e0b\uff1a \u628a\u8fb9\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u6bcf\u6b21\u9009\u62e9\u6700\u5c0f\u7684\u8fb9\uff0c\u5982\u679c\u6dfb\u52a0\u8be5\u8fb9\u4e0d\u4f1a\u5f62\u6210\u56de\u8def\uff0c\u5219\u6dfb\u52a0 \u5224\u65ad\u8fb9\u7684\u6570\u91cf\u662f\u5426\u5230\u8fbe\u9876\u70b9\u7684\u6570\u91cf-1\uff0c\u5982\u679c\u6ca1\u6709\u8f6c\u52302 # vector3[] \u8868\u793avector3[0] -> vector3[1] \u6709\u4e00\u6761\u6743\u91cd\u4e3a vector3[2] \u7684\u8fb9 # color[] \u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # paraSet[] \u5e76\u67e5\u96c6\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u4f1a\u5f62\u6210\u73af ansList = [] points = [] paraSet = [ i for i in range ( V )] vector3 . sort ( lambda x : x [ 2 ]) def parent ( paraSet , member ): if paraSet [ member ] = member : return member paraSet [ member ] = parent ( paraSet [ member ]) return paraSet [ member ] def merge ( paraSet , u , v ): uParent = parent ( paraSet , u ) vParent = parent ( paraSet , v ) if uParent != vParent : paraSet [ vParent ] = uParent for u , v , w in vector3 : if parent ( paraSet , u ) != parent ( paraSet , v ): ansList . append ([ u , v , w ]) merge ( paraSet , u , v ) if len ( ansList ) == V - 1 : break # \u8fb9\u6570\u7b49\u4e8e\u9876\u70b9\u6570-1\uff0c\u5f97\u5230\u7ed3\u679c 2. prime\u7b97\u6cd5 \u00b6 \u5bf9\u4e8e\u56feG=\uff08V\uff0cE\uff09\uff0cPrim\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u7ed9\u5b9a\u7a7a\u96c6\u5408A\uff0c\u4ee5\u53ca\u4efb\u4f55\u4e00\u70b9v0\u5c5e\u4e8e{V}\uff0c\u5c06v0\u52a0\u5165\u96c6\u5408A\u4e2d\uff0c\u6b64\u65f6A={v0}\u3002 \u5bf9\u4e8e\u96c6\u5408A\u4e2d\u7684\u4efb\u610f\u4e00\u70b9u\uff0c\u4ee5\u53caV-A\u4e2d\u4efb\u610f\u4e00\u70b9w\uff0c\u627e\u5230\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff08u\uff0cw\uff09\uff0c\u5e38\u8bc6\u5c06\uff08u\uff0cw\uff09\u52a0\u5165\u96c6\u5408A\u3002 \u5224\u65ad\u6b65\u9aa42\u4e2d\u7684\u8fb9\uff08u\uff0cw\uff09\u662f\u5426\u4f7f\u56feA\u5f62\u6210\u56de\u8def\uff0c\u5982\u679c\u5f62\u6210\u56de\u8def\uff0c\u5219\u4e0d\u52a0\u5165A\uff0c\u5426\u5219\u5c06\u70b9w\u548c\u8fb9\uff08u\uff0cw\uff09\u52a0\u5165A\u3002 \u5224\u65ad\u6b64\u65f6\u56feG\u4e2d\u6240\u6709\u70b9{V}\u662f\u5426\u5df2\u7ecf\u5168\u90e8\u52a0\u5165\u5230\u96c6\u5408A\u4e2d\uff0c\u5982\u679c\u662f\uff0c\u5219\u6700\u5c0f\u751f\u6210\u6811\u5df2\u7ecf\u627e\u5230\uff0c\u9000\u51fa\uff1b\u5426\u5219\uff0c\u8f6c\u6b65\u9aa42\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u7528prime\u7b97\u6cd5\u6765\u505a\u7684\u8fc7\u7a0b\u662f\uff1a \u521d\u59cb\u5316\u7684\u65f6\u5019\uff0cA\u662f\u7a7a\u7684\uff0cV\u5305\u542b\u4e86\u6240\u6709\u7684\u70b9\u3002 \u7b2c\u4e00\u6b65\uff0c\u4eceV\u4e2d\u4efb\u610f\u627e\u4e00\u4e2a\u70b9\u52a0\u5165\u96c6\u5408A\u4e2d\uff1b \u7b2c\u4e8c\u6b65\uff0c\u627e\u52304\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u662f4--6, \u7b2c\u4e09\u6b65\uff0c\u627e\u52304\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c5--6\uff0c \u7b2c\u56db\u6b65\uff0c\u627e\u52304\uff0c5\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c4--3 \u7b2c\u4e94\u6b65\uff0c\u627e\u52303\uff0c4\uff0c5\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c1--3 \u7b2c\u516d\u6b65\uff0c\u627e\u52301\uff0c3\uff0c4\uff0c5\uff0c6\u548c2\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c1--2\uff0c \u6b64\u65f6\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u52a0\u5165\u4e86\u96c6\u5408A\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u7ed3\u679c\u548c\u4e0a\u9762\u7684Kruskal\u7b97\u6cd5\u7b97\u6cd5\u662f\u4e00\u81f4\u7684\u3002\u4e00\u4e2a\u662f\u4ece\u8fb9\u6765\u8003\u8651\uff0c\u4e00\u4e2a\u662f\u4ece\u9876\u70b9\u6765\u8003\u8651\uff0c\u4e8c\u8005\u5b9e\u9645\u4e0a\u90fd\u662f\u8d2a\u5fc3\u6cd5\u7684\u601d\u8def\u3002 prime\u7b97\u6cd5\u7684\u6838\u5fc3\u662f\u627e\u5230\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5806\u5b9e\u73b0\u3002 prime\u7b97\u6cd5\u7684\u4e00\u79cd\u5b9e\u73b0\uff1a \u521d\u59cb\u5316\u7a7a\u96c6\u5408 A\uff0cB \u96c6\u5408\u5305\u542b\u6240\u6709\u7684\u70b9 \u4ece B \u4e2d\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u70b9\u79fb\u52a8\u5230 A \u4e2d \u9009\u62e9\u96c6\u5408A\u548c\u96c6\u5408B\u4e2d\u6240\u6709\u70b9\u4e4b\u95f4\u7684\u6743\u91cd\u6700\u5c0f\u7684\u90a3\u6761\u8fb9\uff0c\u5982\u679c\u4e0d\u6784\u6210\u56de\u8def\uff0c\u6dfb\u52a0\u8be5\u8fb9 \u91cd\u590d3\u76f4\u5230\u96c6\u5408B\u4e3a\u7a7a import heapq # \u4efb\u610f\u9009\u62e9\u4e00\u70b9 start # vector3[] \u8868\u793avector3[0] -> vector3[1] \u6709\u4e00\u6761\u6743\u91cd\u4e3a vector3[2] \u7684\u8fb9 # color[] \u70b9\u7684\u8bbf\u95ee\u72b6\u6001 def prime ( vector3 , start ): ansList = [] color = [ 0 ] * V B = heapq . heapify () heapq . push (( 0 , start , start )) # start \u5230 start \u8ddd\u79bb\u662f 0 while len ( B ) > 0 : w , u , v = heapq . pop () if u != v : ansList . append (( u , v , w )) color [ u ] = 1 for u , v , w in vector3 [ u ]: if color [ v ] == 0 : heapq . push (( w , u , v )) return ansList","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_1","text":"\u751f\u6210\u6811 \uff0c\u662f\u6307\u56fe\u7684\u4e00\u4e2a\u6700\u5c0f\u8fde\u901a\u7684\u5b50\u56fe\uff0c\u8be5\u5b50\u56fe\u5c11\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u4e0d\u8fde\u901a\uff0c\u591a\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u6709\u73af\u3002 \u6700\u5c0f\u751f\u6210\u6811 \uff0c\u662f\u6307\u8fb9\u6709\u6743\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u627e\u5230\u6743\u503c\u7684\u603b\u548c\u6700\u5c0f\u7684\u90a3\u4e2a\u8fde\u901a\u5b50\u56fe\u3002 \u5982\u56fe\uff0c\u8fb9\u4e0a\u7684\u6570\u503c\u5982\u679c\u4ee3\u8868\u8ddd\u79bb\u7684\u8bdd\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u6c42\u4e00\u4e2a\u7528\u6700\u77ed\u7684\u8ddd\u79bb\u628a\u6240\u6709\u70b9\u8fde\u63a5\u8d77\u6765\u7684\u65b9\u6848\u3002 \u6211\u4eec\u901a\u8fc7\u4ed4\u7ec6\u89c2\u5bdf\u5b9e\u9a8c\u53ef\u4ee5\u5f97\u51fa\uff0c\u6700\u5c0f\u7684\u751f\u6210\u6811\u662f\u8fd9\u6837\u7684\u3002 \u4e0a\u9762\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u6211\u4eec\u4f9d\u7167\u600e\u6837\u7684\u89c4\u5219\u5f97\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u5462\uff0c\u603b\u4e0d\u80fd\u9760\u770b\u5427\uff1f \u5176\u5b9e\uff0c\u8fd9\u4e2a\u95ee\u9898\u7528\u8d2a\u5fc3\u6cd5\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#1-kruskal","text":"\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u65e0\u5411\u6709\u6743\u56fe G=(V,E) G=(V,E) \uff0cKruskal\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u6784\u9020\u7a7a\u96c6\u5408A\uff0c\u5e76\u5c06\u56feG\u4e2d\u6240\u6709\u70b9\u52a0\u5165\u96c6\u5408A\uff0c\u6b64\u65f6A\u4e3a\u6709|V|\u68f5\u6811\u7684\u68ee\u6797\u3002 \u5c06\u56fe G G \u4e2d\u6240\u6709\u8fb9\u6309\u7167\u6743\u91cd\u8fdb\u884c\u6392\u5e8f\uff0c\u5f62\u6210\u6709\u5e8f\u96c6\u5408 B B \u3002 \u5bf9\u4e8e\u6b65\u9aa42\u4e2d\u6392\u5e8f\u540e\u96c6\u5408B\u4e2d\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff08u\uff0cv\uff09\uff0c\u5c1d\u8bd5\u5c06\uff08u\uff0cv\uff09\u4ee5\u53ca\u70b9u\u3001v\u52a0\u5165\u5230\u96c6\u5408A\u4e2d\u3002 \u5982\u679c\u6b65\u9aa43\u4e2d\u5c1d\u8bd5\u52a0\u5165\u7684\u70b9\u548c\u8fb9\uff0c\u5bf9\u4e8e\u56feA\u800c\u8a00\uff0c\u4e0d\u5f62\u6210\u56de\u8def\uff0c\u5219\u6dfb\u52a0\u70b9u\u3001v\u53ca\u8fb9\uff08u\uff0cv\uff09\uff0c\u5426\u5219\u4e0d\u6dfb\u52a0\u3002 \u5c06\u6b65\u9aa43\u5904\u7406\u7684\u8fb9\uff08u\uff0cv\uff09\u4ece\u96c6\u5408B\u4e2d\u5220\u9664\u3002 \u5224\u65ad\u6b64\u65f6\u4f5c\u4e3a\u56fe\u7684\u96c6\u5408A\uff0c\u662f\u5426\u6ee1\u8db3\u8fb9\u7684\u6570\u91cf\u7b49\u4e8e|V|-1\uff08\u4e5f\u5373\u6ee1\u8db3\u6700\u5c0f\u751f\u6210\u6811\u7684\u8981\u6c42\uff09\uff0c\u5982\u679c\u662f\uff0c\u5219\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8f6c\u81f3\u6b65\u9aa43\u3002 \u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6309\u7167Kruskal\u7b97\u6cd5\uff0c\u8fc7\u7a0b\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 \u521d\u59cb\u5316\u7684\u65f6\u5019\uff0cA\u96c6\u5408\u5305\u542b\u6240\u6709\u7684\u9876\u70b9\uff0cB\u96c6\u5408\u5305\u542b\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u8fbe\u6392\u5e8f\u597d\u7684\u8fb9\u3002 \u7b2c\u4e00\u6b21\uff0c\u6dfb\u52a01\u21922, \u5f97\u5230 \u7b2c\u4e8c\u6b21\uff0c\u6dfb\u52a01\u21923,\u5f97\u5230 \u7b2c\u4e09\u6b21\uff0c\u6dfb\u52a04\u21926\uff0c\u5f97\u5230 \u7b2c\u56db\u6b21\uff0c\u6dfb\u52a05\u21926,\u5f97\u5230 \u7b2c\u4e94\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a02\u21923,\u4f46\u662f\u5982\u679c\u6dfb\u52a0\u4e862\u21923\u5c31\u5f62\u6210\u7684\u56de\u8def\uff0c\u6240\u4ee5\u8be5\u6b21\u4e0d\u6dfb\u52a0\uff0c\u4ece\u96c6\u5408B\u4e2d\u5220\u96642\u21923,\u7ee7\u7eed\u770b\u4e0b\u4e00\u4e2a\u3002 \u7b2c\u516d\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a04\u21925,\u4f46\u662f\u5982\u679c\u6dfb\u52a0\u4e86\uff0c\u5c31\u5f62\u6210\u4e86\u56de\u8def\uff0c\u6240\u4ee5\u4e5f\u5e94\u8be5\u8df3\u8fc7\u3002 \u7b2c\u4e03\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a03\u21924,\u5f97\u5230 \u6b64\u65f6\uff0c\u6240\u6709\u7684\u70b9\u90fd\u5df2\u7ecf\u8fde\u901a\uff0c\u6240\u4ee5\u7b97\u6cd5\u7ed3\u675f\u3002\u6700\u5c0f\u751f\u6210\u6811\u627e\u51fa\u6765\u4e86\u3002 \u5206\u6790\u6574\u4e2a\u8fc7\u7a0b\uff0c\u5224\u65ad\u8fde\u901a\u4e0e\u5426 \u548c \u5224\u65ad\u7b97\u6cd5\u662f\u5426\u7ed3\u675f \u662f\u6bcf\u4e00\u6b65\u64cd\u4f5c\u90fd\u8981\u68c0\u67e5\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u5224\u65ad\u7b97\u6cd5\u662f\u5426\u7ed3\u675f\u53ef\u4ee5\u7528A\u7684\u8fb9\u7684\u6570\u76ee\u662f\u5426\u8fbe\u5230\u4e86\u9876\u70b9\u7684\u6570\u76ee-1\uff0c \u5224\u65ad\u8054\u901a\u6027\u5c31\u8981\u7528\u5230**\u5e76\u67e5\u96c6**\u4e86\u3002\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u591a\u4e2a\u6811\u7ec4\u6210\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u67e5\u51fa\u540c\u7ec4\u4e0d\u540c\u7ec4\u7684\u95ee\u9898\u3002 \u4f7f\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u7684Kruskal\u7b97\u6cd5\u5982\u4e0b\uff1a \u628a\u8fb9\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u6bcf\u6b21\u9009\u62e9\u6700\u5c0f\u7684\u8fb9\uff0c\u5982\u679c\u6dfb\u52a0\u8be5\u8fb9\u4e0d\u4f1a\u5f62\u6210\u56de\u8def\uff0c\u5219\u6dfb\u52a0 \u5224\u65ad\u8fb9\u7684\u6570\u91cf\u662f\u5426\u5230\u8fbe\u9876\u70b9\u7684\u6570\u91cf-1\uff0c\u5982\u679c\u6ca1\u6709\u8f6c\u52302 # vector3[] \u8868\u793avector3[0] -> vector3[1] \u6709\u4e00\u6761\u6743\u91cd\u4e3a vector3[2] \u7684\u8fb9 # color[] \u70b9\u7684\u8bbf\u95ee\u72b6\u6001 # paraSet[] \u5e76\u67e5\u96c6\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u4f1a\u5f62\u6210\u73af ansList = [] points = [] paraSet = [ i for i in range ( V )] vector3 . sort ( lambda x : x [ 2 ]) def parent ( paraSet , member ): if paraSet [ member ] = member : return member paraSet [ member ] = parent ( paraSet [ member ]) return paraSet [ member ] def merge ( paraSet , u , v ): uParent = parent ( paraSet , u ) vParent = parent ( paraSet , v ) if uParent != vParent : paraSet [ vParent ] = uParent for u , v , w in vector3 : if parent ( paraSet , u ) != parent ( paraSet , v ): ansList . append ([ u , v , w ]) merge ( paraSet , u , v ) if len ( ansList ) == V - 1 : break # \u8fb9\u6570\u7b49\u4e8e\u9876\u70b9\u6570-1\uff0c\u5f97\u5230\u7ed3\u679c","title":"1. Kruskal\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#2-prime","text":"\u5bf9\u4e8e\u56feG=\uff08V\uff0cE\uff09\uff0cPrim\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a \u7ed9\u5b9a\u7a7a\u96c6\u5408A\uff0c\u4ee5\u53ca\u4efb\u4f55\u4e00\u70b9v0\u5c5e\u4e8e{V}\uff0c\u5c06v0\u52a0\u5165\u96c6\u5408A\u4e2d\uff0c\u6b64\u65f6A={v0}\u3002 \u5bf9\u4e8e\u96c6\u5408A\u4e2d\u7684\u4efb\u610f\u4e00\u70b9u\uff0c\u4ee5\u53caV-A\u4e2d\u4efb\u610f\u4e00\u70b9w\uff0c\u627e\u5230\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff08u\uff0cw\uff09\uff0c\u5e38\u8bc6\u5c06\uff08u\uff0cw\uff09\u52a0\u5165\u96c6\u5408A\u3002 \u5224\u65ad\u6b65\u9aa42\u4e2d\u7684\u8fb9\uff08u\uff0cw\uff09\u662f\u5426\u4f7f\u56feA\u5f62\u6210\u56de\u8def\uff0c\u5982\u679c\u5f62\u6210\u56de\u8def\uff0c\u5219\u4e0d\u52a0\u5165A\uff0c\u5426\u5219\u5c06\u70b9w\u548c\u8fb9\uff08u\uff0cw\uff09\u52a0\u5165A\u3002 \u5224\u65ad\u6b64\u65f6\u56feG\u4e2d\u6240\u6709\u70b9{V}\u662f\u5426\u5df2\u7ecf\u5168\u90e8\u52a0\u5165\u5230\u96c6\u5408A\u4e2d\uff0c\u5982\u679c\u662f\uff0c\u5219\u6700\u5c0f\u751f\u6210\u6811\u5df2\u7ecf\u627e\u5230\uff0c\u9000\u51fa\uff1b\u5426\u5219\uff0c\u8f6c\u6b65\u9aa42\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u7528prime\u7b97\u6cd5\u6765\u505a\u7684\u8fc7\u7a0b\u662f\uff1a \u521d\u59cb\u5316\u7684\u65f6\u5019\uff0cA\u662f\u7a7a\u7684\uff0cV\u5305\u542b\u4e86\u6240\u6709\u7684\u70b9\u3002 \u7b2c\u4e00\u6b65\uff0c\u4eceV\u4e2d\u4efb\u610f\u627e\u4e00\u4e2a\u70b9\u52a0\u5165\u96c6\u5408A\u4e2d\uff1b \u7b2c\u4e8c\u6b65\uff0c\u627e\u52304\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u662f4--6, \u7b2c\u4e09\u6b65\uff0c\u627e\u52304\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c5--6\uff0c \u7b2c\u56db\u6b65\uff0c\u627e\u52304\uff0c5\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c4--3 \u7b2c\u4e94\u6b65\uff0c\u627e\u52303\uff0c4\uff0c5\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c1--3 \u7b2c\u516d\u6b65\uff0c\u627e\u52301\uff0c3\uff0c4\uff0c5\uff0c6\u548c2\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c1--2\uff0c \u6b64\u65f6\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u52a0\u5165\u4e86\u96c6\u5408A\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u7ed3\u679c\u548c\u4e0a\u9762\u7684Kruskal\u7b97\u6cd5\u7b97\u6cd5\u662f\u4e00\u81f4\u7684\u3002\u4e00\u4e2a\u662f\u4ece\u8fb9\u6765\u8003\u8651\uff0c\u4e00\u4e2a\u662f\u4ece\u9876\u70b9\u6765\u8003\u8651\uff0c\u4e8c\u8005\u5b9e\u9645\u4e0a\u90fd\u662f\u8d2a\u5fc3\u6cd5\u7684\u601d\u8def\u3002 prime\u7b97\u6cd5\u7684\u6838\u5fc3\u662f\u627e\u5230\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5806\u5b9e\u73b0\u3002 prime\u7b97\u6cd5\u7684\u4e00\u79cd\u5b9e\u73b0\uff1a \u521d\u59cb\u5316\u7a7a\u96c6\u5408 A\uff0cB \u96c6\u5408\u5305\u542b\u6240\u6709\u7684\u70b9 \u4ece B \u4e2d\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u70b9\u79fb\u52a8\u5230 A \u4e2d \u9009\u62e9\u96c6\u5408A\u548c\u96c6\u5408B\u4e2d\u6240\u6709\u70b9\u4e4b\u95f4\u7684\u6743\u91cd\u6700\u5c0f\u7684\u90a3\u6761\u8fb9\uff0c\u5982\u679c\u4e0d\u6784\u6210\u56de\u8def\uff0c\u6dfb\u52a0\u8be5\u8fb9 \u91cd\u590d3\u76f4\u5230\u96c6\u5408B\u4e3a\u7a7a import heapq # \u4efb\u610f\u9009\u62e9\u4e00\u70b9 start # vector3[] \u8868\u793avector3[0] -> vector3[1] \u6709\u4e00\u6761\u6743\u91cd\u4e3a vector3[2] \u7684\u8fb9 # color[] \u70b9\u7684\u8bbf\u95ee\u72b6\u6001 def prime ( vector3 , start ): ansList = [] color = [ 0 ] * V B = heapq . heapify () heapq . push (( 0 , start , start )) # start \u5230 start \u8ddd\u79bb\u662f 0 while len ( B ) > 0 : w , u , v = heapq . pop () if u != v : ansList . append (( u , v , w )) color [ u ] = 1 for u , v , w in vector3 [ u ]: if color [ v ] == 0 : heapq . push (( w , u , v )) return ansList","title":"2. prime\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/","text":"\u6700\u77ed\u8def\u5f84\u95ee\u9898 \u00b6 \u6700\u77ed\u8def\u5f84\u95ee\u9898\u662f\u56fe\u8bba\u4e2d\u7684\u4e00\u79cd\u91cd\u8981\u7684\u95ee\u9898\u3002\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u8be6\u7ec6\u63cf\u8ff0\uff0c\u53ef\u4ee5\u53c2\u8003\u4e00\u672c\u4e66\u300a\u8ff7\u832b\u7684\u65c5\u884c\u5546\u300b\uff0c\u4e66\u4e2d\u4ecb\u7ecd\u4e86\u5404\u5f0f\u5404\u6837\u7684\u8def\u5f84\u89c4\u5212\u95ee\u9898\uff0c\u8fd8\u6709\u5404\u79cd\u53ef\u80fd\u7684\u89e3\u6cd5\uff0c\u548c\u6574\u4e2a\u95ee\u9898\u7684\u53d1\u5c55\u5386\u53f2\u3002\u770b\u5b8c\u80fd\u5bf9\u8be5\u95ee\u9898\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u89e3\uff0c\u4e5f\u80fd\u591f\u660e\u767d\uff0c\u8ba1\u7b97\u673a\u7b97\u6cd5\u662f\u5982\u4f55\u5728\u5c1a\u4e0d\u76f4\u5230\u8be5\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u4e00\u6b65\u4e00\u6b65\u6269\u5c55\u89e3\u9898\u7684\u89c4\u6a21\uff0c\u4ece\u800c\u4f7f\u5f97\u73b0\u5728\u5927\u90e8\u5206\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u5728\u80fd\u591f\u63a5\u53d7\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u4ecb\u7ecd\u51e0\u4e2a\u7b80\u5355\u7684\u6c42\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\uff0c\u662f\u5728\u7b97\u6cd5\u9898\u76ee\u4e2d\u7ecf\u5e38\u51fa\u73b0\u7684\u3002 1. \u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 \u00b6 # G \u662f\u7528\u4e34\u9636\u8868\u8868\u793a\u7684\u56fe # N \u662f\u9876\u70b9\u7684\u4e2a\u6570 # road \u8bb0\u5f55\u4e00\u6761\u8def\u5f84 # roads \u8bb0\u5f55\u6700\u540e\u7684\u7ed3\u679c # color \u8bb0\u5f55\u8282\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 def dfs ( G , src , dst , color , road , roads ): color [ src ] = 1 road . append ( src ) if src == dst : roads . append ( road . copy () ) else : for u in G [ src ]: if color [ u ] == 0 : dfs ( G , u , dst , color , road , roads ) color [ src ] = 0 road . pop () return roads # \u627e\u51fa\u4e24\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u8def\u5f84\uff0c\u8f93\u51fa\u4e00\u4e2a\u6700\u77ed\u7684 2. \u5355\u6e90\u6700\u77ed\u8def\u5f84 \u00b6 \u4e0a\u9762\u6c42\u7684\u662f\u4efb\u610f\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u6c42\u67d0\u4e00\u4e2a\u70b9\u5230\u5176\u4f59\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8fd8\u6709\u6548\u7387\u66f4\u9ad8\u7684\u65b9\u6cd5\u3002 \u6c42\u4e00\u4e2a\u7279\u5b9a\u7684\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u662f\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898\u3002 2.1 dijkstra \u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\uff1a \u6bcf\u6b21\u627e\u5230\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u4e00\u4e2a\u70b9\uff0c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u9876\u70b9\u8fdb\u884c\u6269\u5c55\uff0c\u6700\u7ec8\u5f97\u5230\u6e90\u70b9\u5230\u5176\u4f59\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u662f\uff1a 1. \u521d\u59cb\u5316\uff1a\u5c06\u6240\u6709\u7684\u9876\u70b9\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5df2\u77e5\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u96c6\u5408P\u548c\u672a\u77e5\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u96c6\u5408Q\u3002\u5f00\u59cb\u7684\u65f6\u5019\uff0cP\u4e2d\u53ea\u6709\u6e90\u70b9\uff0c\u56e0\u4e3a\u5f00\u59cb\u7684\u65f6\u5019\u53ea\u80fd\u76f4\u5230\u6e90\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6700\u8fd1\uff0c\u662f0. \u5176\u4f59\u6240\u6709\u7684\u70b9\u5c5e\u4e8e\u96c6\u5408Q\u3002 \u8bbe\u7f6e\u6e90\u70b9\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0.\u8bbe\u7f6e\u6e90\u70b9\u80fd\u591f\u76f4\u63a5\u5230\u8fbe\uff08\u4e0d\u7ecf\u8fc7\u522b\u7684\u8282\u70b9\uff09\u7684\u9876\u70b9\u7684\u8ddd\u79bb\u4e3ae\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u3002\u628a\u6240\u6709\u6e90\u70b9\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u8282\u70b9\u7684\u503c\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927\u3002 \u5728\u96c6\u5408Q\u4e2d\u9009\u62e9\u4e00\u4e2a\u79bb\u6e90\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u52a0\u5165\u5230P\uff0c\u540c\u65f6\u4eceQ\u4e2d\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5047\u8bbe\u8fd9\u4e2a\u8282\u70b9\u662fu,\u8003\u5bdfu\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\uff0c\u770b\u662f\u5426\u4ece\u6e90\u70b9\u901a\u8fc7u\u5230\u8fbe\u8fd9\u4e9b\u8282\u70b9\u6bd4\u539f\u6765\u7684\u8ddd\u79bb\u8fd1\uff0c\u5982\u679c\u8fd1\uff0c\u5c31\u66f4\u65b0\u8fd9\u4e2a\u503c\u3002 \u91cd\u590d\u7b2c\u4e09\u6b65\u76f4\u5230Q\u4e3a\u7a7a\u3002 \u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\u8be5\u7b97\u6cd5\u7684\u5177\u4f53\u8fc7\u7a0b\uff1a \u521d\u59cb\u5316\uff0cP\u96c6\u5408\u4e2d\u53ea\u6709\u6e90\u70b91\uff0cQ\u96c6\u5408\u4e2d\u662f\u5269\u4e0b\u7684\u6240\u6709\u8282\u70b9\u3002distance\u6570\u636e\u521d\u59cb\u5316\u6210\u56fe\u4e2d\u7684\u6837\u5b50\u3002 \u627e\u5230\u7ed3\u5408Q\u4e2d\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f2\uff0c\u52a0\u5165\u5230P\u4e2d\uff0c2\u53ef\u4ee5\u5230\u8fbe3\u548c4.\u6b64\u65f6\u52303\u7684\u8ddd\u79bbdistance\u4e2d\u662f12\uff0c\u52304\u7684\u8ddd\u79bbdistance\u4e2d\u662f\u65e0\u7a77\u5927\uff0c\u5982\u679c\u901a\u8fc7\u8282\u70b92\u4e2d\u8f6c\uff0c\u53ef\u4ee5\u5f97\u5230\u52303\u7684\u8ddd\u79bb\u7b49\u4e8e10\uff0c\u5c0f\u4e8e\u539f\u6765\u768412\uff0c\u52304\u7684\u8ddd\u79bb\u662f4\uff0c\u5c0f\u4e8e\u539f\u6765\u7684\u65e0\u7a77\u5927\uff0c\u6240\u4ee5\u66f4\u65b0\u8fd9\u4e24\u4e2a\u8ddd\u79bb\u3002 \u4ece\u96c6\u5408Q\u4e2d\u627e\u4e00\u4e2a\u5230\u96c6\u5408P\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f4\uff0c\u628a4\u52a0\u5165P\uff0c\u540c\u65f6\u4eceQ\u4e2d\u5220\u96644\uff0c4\u80fd\u591f\u5230\u8fbe\u7684\u8282\u70b9\u662f3\uff0c5\uff0c6\uff0c\u8003\u5bdf\u901a\u8fc74\u80fd\u591f\u51cf\u5c11\u539f\u6765distance\u4e2d\u7684\u8ddd\u79bb\u3002\u4ece\u6e90\u70b9\u901a\u8fc74\u8fbe\u52303\u8ddd\u79bb\u662f8\uff0c\u6bd4\u539f\u6765\u768410\u5c0f\uff0c\u66f4\u65b0\uff1b\u4ece\u6e90\u70b9\u901a\u8fc74\u5230\u8fbe5\uff0c\u8ddd\u79bb\u662f17\uff0c\u6bd4\u539f\u6765\u7684\u65e0\u7a77\u5927\u5c0f\uff0c\u66f4\u65b0\uff1b\u4ece\u6e90\u70b9\u901a\u8fc74\u5230\u8fbe6\uff0c\u8ddd\u79bb\u662f19\uff0c\u6bd4\u539f\u6765\u7684\u65e0\u7a77\u5927\u5c0f\uff0c\u66f4\u65b0\uff1b \u4ece\u96c6\u5408Q\u4e2d\u9009\u51fa\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f3\uff0c\u628a3\u52a0\u5165\u7ed3\u5408P\uff0c\u540c\u65f6\u4ece\u96c6\u5408Q\u4e2d\u5220\u96643.\u770b\u901a\u8fc73\u80fd\u591f\u4f7f\u5f97distance\u4e2d\u7684\u5404\u4e2a\u8ddd\u79bb\u7f29\u5c0f\u30023\u53ea\u80fd\u5230\u8fbe5\uff0c\u4ece\u6e90\u70b9\u901a\u8fc73\u5230\u8fbe5\u7684\u8ddd\u79bb\u662f13\uff0c\u5c0f\u4e8e\u539f\u6765\u768417\uff0c\u66f4\u65b0\uff1b \u4ece\u96c6\u5408Q\u4e2d\u7ee7\u7eed\u9009\u62e9\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u70b9\uff0c\u662f5\uff0c\u52a0\u5165P\uff0c\u4eceQ\u4e2d\u5220\u9664\uff1b5\u53ea\u80fd\u5230\u8fbe6\uff0c\u901a\u8fc75\u5230\u8fbe6\u8ddd\u79bb\u53d8\u6210\u4e8617\uff0c\u5c0f\u4e8e\u539f\u6765\u768419\uff0c\u66f4\u65b0\uff1b \u96c6\u5408Q\u4e2d\u53ea\u5269\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u52a0\u5165P\u96c6\u5408\uff0c\u901a\u8fc7\u5b83\u4e0d\u80fd\u8fbe\u5230\u4efb\u4f55\u8282\u70b9\uff0c\u6240\u4ee5\u7b97\u6cd5\u7ed3\u675f\u3002 \u6b64\u65f6\u7684distance\u5b58\u50a8\u7684\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c\u3002 \u6ce8\u610f\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N^2)\uff0c\u5982\u679c\u4f7f\u7528\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u56fe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u662fO(M),M\u662f\u8fb9\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u7b97\u6cd5\u975e\u5e38\u9ad8\u6548\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u51b3\u5e26\u8d1f\u6743\u8fb9\u7684\u95ee\u9898\uff0c\u5982\u679c\u8981\u89e3\u7684\u95ee\u9898\u6743\u91cd\u6709\u8d1f\u503c\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e0b\u9762\u63d0\u5230\u7684\u65b9\u6cd5\u3002 \u4f7f\u7528\u4e00\u4e2adistance\u6570\u7ec4\u8868\u793a\u70b9s\u5230\u5176\u4ed6\u4e2a\u70b9\u7684\u8ddd\u79bb \u5f00\u59cb\u7684\u65f6\u5019\u521d\u59cb\u5316distance\u4e3aINF\uff0c\u7136\u540e\u628as\u76f4\u63a5\u8fde\u63a5\u7684\u70b9\u8bbe\u7f6e\u4e3a\u5176\u8fb9\u7684\u6743\u91cd \u6bcf\u6b21\u627e\u5230\u8ddd\u79bbs\u6700\u8fd1\u7684\u70b9\uff0c\u7136\u540e\u904d\u5386\u5176\u4ed6\u7684\u70b9\uff0c\u5982\u679c\u53d1\u73b0\u7ecf\u8fc7\u5176\u4ed6\u70b9\u4e2d\u8f6c\u4e4b\u540e\u8ddd\u79bb\u53ef\u4ee5\u53d8\u77ed\uff0c\u66f4\u65b0distance \u6b65\u9aa43\u6267\u884cV\u6b21 def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) # [dis, point] \u8868\u793a s->point \u6700\u77ed\u8ddd\u79bb\u662f dis distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance 2.2 Bellman-Ford \u7b97\u6cd5 \u00b6 \u8be5\u7b97\u6cd5\u6838\u5fc3\u4ee3\u7801\uff1a for ( int k = 1 ; k <= n - 1 ; k ++ ){ for ( i = 1 ; i <= m ; i ++ ){ if ( distance [[ v [ i ]]] > distance [ u [ i ]] + w [ i ] ){ distance [[ v [ i ]]] = distance [ u [ i ]] + w [ i ] } } } \u4ee3\u7801\u5f53\u4e2d\uff0cn\u662f\u8282\u70b9\u7684\u4e2a\u6570\uff0cm\u662f\u8fb9\u7684\u4e2a\u6570\uff0cdistance\u662f\u8bb0\u5f55\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\uff0cu,v,w\u662f\u4e09\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u8fb9\u7684\u4fe1\u606f\uff0c\u5bf9\u4e8e\u8fb9i\u6765\u8bf4\uff0cu[i]\u662f\u8fd9\u53d8\u7684\u8d77\u70b9\uff0cv[i]\u662f\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\uff0cw[i]\u662f\u8fd9\u6761\u8fb9\u7684\u6743\u91cd\u3002\u6240\u4ee5\uff0c if ( distance [[ v [ i ]]] > distance [ u [ i ]] + w [ i ] ){ distance [[ v [ i ]]] = distance [ u [ i ]] + w [ i ] } \u8fd9\u6bb5\u4ee3\u7801\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5982\u679c\u4ece\u6e90\u70b9\u5230\u8282\u70b9v[i]\u7684\u8ddd\u79bb \u5927\u4e8e \u7ecf\u8fc7\u8282\u70b9u[i]\u518d\u5230v[i]\u7684\u8ddd\u79bb\uff0c\u5c31\u66f4\u65b0\u6e90\u70b9\u5230\u8282\u70b9v[i]\u7684\u8ddd\u79bb\u4e3a distance[u[i]] + w[i]. \u8fd9\u91cc\u7684\u64cd\u4f5c\u548cdijstra\u7b97\u6cd5\u662f\u4e00\u6837\u7684\u542b\u4e49\u3002\u901a\u4fd7\u7684\u7406\u89e3\u5c31\u662f\uff0c\u5982\u679c\u901a\u8fc7\u7b2ci\u6761\u8fb9\u80fd\u4f7f\u8ddd\u79bb\u53d8\u77ed\uff0c\u5c31\u66f4\u65b0\u3002 \u90a3\u4e48\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u677e\u5f1b\u4e00\u8fb9\u4e4b\u540e\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u5462\u3002\u4e3a\u4ec0\u4e48\u6700\u5916\u5c42\u8fd8\u6709\u4e00\u4e2an-1\u6b21\u7684\u5faa\u73af\u5462\uff1f \u8ba9\u6211\u4eec\u901a\u8fc7\u5177\u4f53\u7684\u5b9e\u4f8b\u770b\u4e00\u4e0b\u5177\u4f53\u60c5\u51b5\u3002 \u7a7a\u5fc3\u5c0f\u5706\u5708\u4e0a\u7684\u6570\u5b57\u662f\u8fb9\u7684\u7f16\u53f7\uff0cdistance\u6570\u7ec4\u88ab\u521d\u59cb\u5316\u4e86\u3002\u6211\u4eec\u7528\u4e0a\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u4e00\u8f6e\u8fd0\u7b97\uff1aK=1\uff0c i= 1...m \u8fd9\u91ccm\u7b49\u4e8e5\uff0c\u56e0\u4e3a\u53ea\u67095\u6761\u8fb9\u3002 i = 1, u[1]=2, v[1]=3, distance[v[1]]\u65e0\u7a77\u5927\uff0cdistance[u[1]]+w[1]\u8fd8\u662f\u65e0\u7a77\u5927\uff0c\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0distance\u6570\u7ec4\u3002 i = 2, distance[v[2]]=\u65e0\u7a77\uff0c\u800cdistance[u[2]]+w[2]=-3,\u6240\u4ee5distance[v[2]]=-3 i = 3, distance[v[3]]=\u65e0\u7a77\uff0c\u800cdistance[u[3]]+w[3]=5,\u6240\u4ee5distance[3]=5, i = 4, distance[v[4]]=5\uff0c\u800cdistance[u[4]]+w[4]=\u65e0\u7a77,\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0\u3002 i = 5, distance[v[5]]=\u65e0\u7a77\uff0c\u800cdistance[u[5]]+w[5]=\u65e0\u7a77\uff0c\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0\u3002 \u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u677e\u5f1b\u4e86\u4e00\u8fb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5f97\u5230\u7b54\u6848\uff0c\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5f97\u5230\u4e86\u6e90\u70b9\u52302\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6e90\u70b9\u52303\u76ee\u524d\u8fd8\u4e0d\u662f\u6700\u77ed\u8ddd\u79bb\u3002\u6240\u4ee5\u53ef\u4ee5\u5047\u5b9a\uff0c\u6bcf\u6b21\u904d\u5386\u4e00\u8fb9\u6240\u6709\u7684\u8fb9\uff0c\u81f3\u5c11\u80fd\u591f\u786e\u5b9a\u4e00\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5\u6700\u591a\u5faa\u73af\u9876\u70b9\u7684\u4e2a\u6570\u51cf1\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u6bcf\u6b21\u904d\u5386\u4e00\u904d\u8fb9\u53ea\u80fd\u786e\u5b9a\u4e00\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5n-1\u6b21\u53ea\u662f\u4e0a\u9650\uff0c\u5982\u679c\u8d85\u8fc7\u4e86n-1\u6b21\uff0cdistance\u6570\u7ec4\u8fd8\u5728\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u5b58\u5728\u8d1f\u6743\u56de\u8def\u7684\u56fe\u662f\u6ca1\u6709\u6700\u77ed\u8def\u5f84\u7684\uff0c\u56e0\u4e3a\u6bcf\u7ed5\u4e00\u5708\u8def\u5f84\u90fd\u4f1a\u7f29\u77ed\u3002 K=2 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a k=3 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a k=4 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u6b64\u65f6\u5df2\u7ecf\u6ca1\u6709\u53d8\u5316\u4e86\uff0c\u7b97\u6cd5\u5728\u4e0e\u4e0a\u4e00\u6b21\u76f8\u6bd4\uff0cdistance\u6ca1\u6709\u53d8\u5316\u4e4b\u540e\u5176\u5b9e\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u4e86\u3002 import numpy as np def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance \u53c2\u8003\u6587\u732e \uff1a \u5e26\u6743\u6700\u77ed\u8def\uff1a http://www.renfei.org/blog/weighted-shortest-path.html 3. \u591a\u6e90\u6700\u77ed\u8def\u5f84 \u00b6 \u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u53eb\u505a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u3002 \u5982\u4e0b\u56fe\uff0c1\uff0c2\uff0c3\uff0c4\u8868\u793a4\u4e2a\u57ce\u5e02\uff0c\u7ebf\u4e0a\u7684\u6570\u5b57\u8868\u793a\u8be5\u8def\u7a0b\u7684\u8ddd\u79bb\uff0c\u6c42\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\u662f\u591a\u5c11\u3002 \u5148\u6765\u8003\u8651\u5982\u4f55\u624d\u80fd\u786e\u5b9a\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u6bd4\u5982\u6c42\u4ece\u57ce\u5e021\u5230\u57ce\u5e023\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u6216\u8005\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u65b9\u5f0f\uff0c\u4ece\u8282\u70b91\u51fa\u53d1\uff0c\u641c\u7d22\u5230\u8282\u70b93\u672a\u77e5\uff0c\u7136\u540e\u8bb0\u5f55\u6240\u6709\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u662f1\u52303\u7684\u6700\u77ed\u8def\u5f84\u3002 3.1 \u91cd\u590d\u5e73\u65b9\u6cd5\uff1a \u00b6 \u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u77e9\u9635\u7684\u5e42\u7684\u6280\u672f\u6c42\u89e3\u6700\u77ed\u8def\u5f84\u3002 # G[][] \u662f\u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe # G[i][j] \u4e0d\u8fde\u901a\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927 # G[i][i] \u8bbe\u7f6e\u62100 def extendPath ( A , B ): C = deepcopy ( A ) for i in range ( N ): for j in range ( N ): C [ i ][ j ] = 9999999 for k in range ( N ): C [ i ][ j ] = min ( C [ i ][ j ], A [ i ][ k ] + B [ k ][ j ]) return C m = 1 while m < N - 1 : G = extendPath ( G , G ) m = m * 2 3.2 Floyd-Warshall \u7b97\u6cd5\uff1a(O(N^3)) \u00b6 \u4f7f\u7528\u5bbd\u5ea6\u4f18\u5148\u6216\u8005\u6df1\u5ea6\u4f18\u5148\u7684\u65b9\u5f0f\u6c42\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8fd8\u53ef\u4ee5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u6c42\u591a\u6e90\u6700\u77ed\u8def\u95ee\u9898\u5c31\u663e\u5f97\u592a\u590d\u6742\u4e86\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f \u8bbe\u60f3\u4e00\u4e0b\uff0c\u4ecea\u5230b\u7684\u8def\u7a0b\u662fl,\u5982\u4f55\u7f29\u77ed\u8fd9\u4e2a\u8def\u7a0b\u5462\uff1f\u53ea\u80fd\u8bd5\u8bd5\u80fd\u4e0d\u80fd\u627e\u5230\u5176\u4ed6\u7684\u8def\u4ecea\u5230b\uff0c\u770b\u5176\u4ed6\u7684\u6240\u6709\u8def\u7a0b\u4e2d\u6709\u6ca1\u6709\u6bd4\u5f53\u524d\u8fd9\u6761\u8def\u77ed\u7684\u3002 \u8fd9\u5c31\u662ffloyd-Warshall\u7b97\u6cd5\u7684\u601d\u60f3\u3002 \u6211\u4eec\u628a\u4e0a\u9762\u7684\u56fe\u5b58\u50a8\u6210\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\uff1a\u79f0\u4e3ae. floyd-Warshall \u7b97\u6cd5\u53ef\u4ee5\u8868\u8ff0\u4e3a\uff1a for ( int k = 1 ; k <= n ; k ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ if ( e [ i ][ j ] > e [ i ][ k ] + e [ k ][ j ]){ e [ i ][ j ] = e [ i ][ k ] + e [ k ][ j ]; } } } } \u5177\u4f53\u5230\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5f00\u59cb\u7684\u65f6\u5019\uff0ck=1,i=1,j=1,2,3,4; \u5faa\u73af\u91cc\u9762\u6bd4\u8f83\u7684\u662f\uff1a e[1][1] > e[1][1] + e[1][1] e[1][2] > e[1][1] + e[1][2] e[1][3] > e[1][1] + e[1][3] e[1][4] > e[1][1] + e[1][4] \u7136\u540e\uff0ck=1,i=2,j=1,2,3,4; \u5faa\u73af\u91cc\u9762\u6bd4\u8f83\u7684\u662f\uff1a e[2][1] > e[2][1] + e[1][1] e[2][2] > e[2][1] + e[1][2] e[2][3] > e[2][1] + e[1][3] e[2][4] > e[2][1] + e[1][4] \u7136\u540e\uff0ck=1,i=3,j=1,2,3,4;\u5faa\u73af\u91cc\u9762\u7684\u6bd4\u8f83\u662f\uff1a e[3][1] > e[3][1] + e[1][1] e[3][2] > e[3][1] + e[1][2] e[3][3] > e[3][1] + e[1][3] e[3][4] > e[3][1] + e[1][4] \u7136\u540e\uff0ck=1,i=4,j=1,2,3,4;\u5faa\u73af\u91cc\u9762\u7684\u6bd4\u8f83\u662f\uff1a e[4][1] > e[4][1] + e[1][1] e[4][2] > e[4][1] + e[1][2] e[4][3] > e[4][1] + e[1][3] e[4][4] > e[4][1] + e[1][4] \u53ef\u4ee5\u770b\u5230\uff0c\u5f53k=1\u7684\u65f6\u5019\uff0c\u904d\u5386\u4e86\u6bcf\u4e2a\u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u8fde\u63a5\uff0c\u628a\u901a\u8fc7\u8282\u70b91\u4e2d\u8f6c\u7684\u60c5\u51b5\u5168\u90e8\u5c1d\u8bd5\u4e86\u4e00\u904d\uff0c\u770b\u6709\u6ca1\u6709\u4efb\u4f55\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u901a\u8fc7\u8282\u70b91\u4e2d\u8f6c\u4e4b\u540e\u8def\u7a0b\u4f1a\u53d8\u77ed\u3002\u5982\u679c\u4f1a\uff0c\u5c31\u628a\u8def\u7a0b\u66f4\u65b0\u6210\u8fd9\u4e2a\u66f4\u77ed\u7684\u8def\u7a0b\u3002 K=1\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a K=2\u7684\u65f6\u5019\u5c31\u597d\u7406\u89e3\u4e86\u3002\u5c31\u662f\u5c1d\u8bd5\u7ecf\u8fc7\u8282\u70b92\u8fdb\u884c\u4e2d\u8f6c\u3002 \u56e0\u4e3a\u5df2\u7ecf\u662f\u7ecf\u8fc7\u8282\u70b91\u4e2d\u8f6c\u8fc7\u540e\u7684\u6570\u636e\u4e86\u3002\u6240\u4ee5\u76f8\u5f53\u4e8e\u539f\u59cb\u6570\u636e\u7ecf\u8fc7\u8282\u70b91\u548c\u8282\u70b92\u4e2d\u8f6c\u4e4b\u540e\u83b7\u5f97\u7684\u6700\u77ed\u7684\u8ddd\u79bb\u3002 K=2\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a k=3\u7684\u65f6\u5019\u540c\u6837\u7684\u9053\u7406\uff0c\u7ecf\u8fc7\u8282\u70b93\u4e2d\u8f6c\uff0ck=4\u7684\u65f6\u5019\u7ecf\u8fc7\u8282\u70b94\u4e2d\u8f6c\u3002\u8fd9\u6837\u6700\u540e\u83b7\u5f97\u7684\u66f4\u65b0\u4e4b\u540e\u7684\u77e9\u9635e\u5c31\u5b58\u50a8\u4e86\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002 K=3\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a K=4\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a \u8fd9\u5c31\u662ffloyd-Warshall \u7b97\u6cd5\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u9010\u4e2a\u5c1d\u8bd5\u4f7f\u7528\u8282\u70b9\u4e2d\u8f6c\u662f\u5426\u53ef\u4ee5\u8f83\u5c11\u8ddd\u79bb\uff0c\u7136\u540e\u66f4\u65b0\u8ddd\u79bb\u3002 python \u5b9e\u73b0\uff1a # G[][] \u662f\u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe # G[i][j] \u4e0d\u8fde\u901a\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927 # G[i][i] \u8bbe\u7f6e\u62100 def FloydWarshall ( self , g ): \"\"\" g : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\u8868\u793a\uff0c\u81ea\u8eab\u8fde\u63a5\u75280\u8868\u793a \u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) for k in range ( n ): for i in range ( n ): for j in range ( n ): if g [ i ][ j ] > g [ i ][ k ] + g [ k ][ j ]: g [ i ][ j ] = g [ i ][ k ] + g [ k ][ j ] return g 3.3 Johnson \u7b97\u6cd5\uff1a \u00b6 Johnson\u7b97\u6cd5\u7684\u601d\u60f3\u662f\u5bf9\u6bcf\u4e2a\u70b9\uff0c \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u7136\u540e\u6c47\u603b\u7ed3\u679c\u3002 \u4f46\u662fdijkstra\u7b97\u6cd5\u4e0d\u80fd\u9002\u7528\u4e0e\u6709\u8d1f\u6743\u8fb9\u7684\u60c5\u51b5\uff0c \u6240\u4ee5\u7b2c\u4e00\u6b65\u4fbf\u662f\u901a\u8fc7\u7b49\u4ef7\u53d8\u5316\uff0c\u6d88\u706d\u8d1f\u6743\u8fb9\u3002 \u800c\u8fd9\u79cd\u7b49\u4ef7\u53d8\u5316\u7684\u65b9\u5f0f\u662f\u901a\u8fc7 bellman-ford\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002 \u6240\u4ee5 Johnson \u7b97\u6cd5\u662f dijkstra \u7b97\u6cd5\u548c bellman-ford\u7b97\u6cd5\u7684\u7ed3\u5408\uff1a \u5bf9\u4e8e\u56fe G=(V,E), \u65b0\u589e\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9s, s\u8fde\u63a5\u56fe\u4e2d\u6bcf\u4e2a\u70b9\uff0c\u65b0\u56fe\u8bb0\u4e3a G2 \u4f7f\u7528bellman-ford\u7b97\u6cd5\u8ba1\u7b97\u70b9s\u5230\u5176\u4ed6\u5404\u4e2a\u70b9\u7684\u5355\u5143\u6700\u77ed\u8def\u5f84\uff0c \u8bb0\u4e3a distanceS \u66f4\u65b0\u539f\u56fe G \u4e2d\u8fb9\u7684\u6743\u91cd\uff1aw(u,v) = (u,v) + distanceS[u] - distance[v], \u66f4\u65b0\u4e4b\u540e\u56fe\u4e2d\u6ca1\u6709\u4e86\u8d1f\u6743\u8fb9 \u5bf9\u56fe G \u4e2d\u6bcf\u4e00\u70b9\u8fd0\u884c dijkstra \u7b97\u6cd5\uff0c \u5f97\u5230\u7ed3\u679c def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) # [dis, point] \u8868\u793a s->point \u6700\u77ed\u8ddd\u79bb\u662f dis distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance def Johnson ( self , g ): \"\"\" g: \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u56fe\u4e2d\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\uff0c\u81ea\u8eab\u75280 \u8fd4\u56de\u77e9\u9635\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84 \"\"\" n = len ( g ) edges = [] for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : edges . append ( [ i , j , g [ i ][ j ]] ) for i in range ( n ): edges . append ([ n , i , 0 ]) # \u8d85\u7ea7\u6e90\u70b9\u5230\u4efb\u610f\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u90fd\u8bbe\u7f6e\u4e3a0 # \u6c42\u8d85\u7ea7\u6e90\u70b9\u5230\u5176\u4ed6\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84 distance = self . BellmanFord ( edges , n , n + 1 ) # \u7528\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5f84\u66f4\u65b0\u8fb9\u7684\u6743\u503c for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : g [ i ][ j ] = g [ i ][ j ] + distance [ i ] - distance [ j ] # \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u89e3 matrix = [] for i in range ( n ): distance = self . dijkstra ( g , i ) matrix . append ( distance ) return matrix LeetCode\u9898\u76ee \u96be\u5ea6 \u7b97\u6cd5 797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 \u4e2d\u7b49 \u4e24\u70b9\u95f4\u6240\u6709\u8def\u5f84 127. \u5355\u8bcd\u63a5\u9f99 \u4e2d\u7b49 \u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 \u4e2d\u7b49 \u5355\u6e90\u6700\u77ed\u8def\u5f84 1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02 \u4e2d\u7b49 \u591a\u6e90\u6700\u77ed\u8def\u5f84","title":"\u6700\u77ed\u8def\u5f84\u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#_1","text":"\u6700\u77ed\u8def\u5f84\u95ee\u9898\u662f\u56fe\u8bba\u4e2d\u7684\u4e00\u79cd\u91cd\u8981\u7684\u95ee\u9898\u3002\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u8be6\u7ec6\u63cf\u8ff0\uff0c\u53ef\u4ee5\u53c2\u8003\u4e00\u672c\u4e66\u300a\u8ff7\u832b\u7684\u65c5\u884c\u5546\u300b\uff0c\u4e66\u4e2d\u4ecb\u7ecd\u4e86\u5404\u5f0f\u5404\u6837\u7684\u8def\u5f84\u89c4\u5212\u95ee\u9898\uff0c\u8fd8\u6709\u5404\u79cd\u53ef\u80fd\u7684\u89e3\u6cd5\uff0c\u548c\u6574\u4e2a\u95ee\u9898\u7684\u53d1\u5c55\u5386\u53f2\u3002\u770b\u5b8c\u80fd\u5bf9\u8be5\u95ee\u9898\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u89e3\uff0c\u4e5f\u80fd\u591f\u660e\u767d\uff0c\u8ba1\u7b97\u673a\u7b97\u6cd5\u662f\u5982\u4f55\u5728\u5c1a\u4e0d\u76f4\u5230\u8be5\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u4e00\u6b65\u4e00\u6b65\u6269\u5c55\u89e3\u9898\u7684\u89c4\u6a21\uff0c\u4ece\u800c\u4f7f\u5f97\u73b0\u5728\u5927\u90e8\u5206\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u5728\u80fd\u591f\u63a5\u53d7\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u4ecb\u7ecd\u51e0\u4e2a\u7b80\u5355\u7684\u6c42\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\uff0c\u662f\u5728\u7b97\u6cd5\u9898\u76ee\u4e2d\u7ecf\u5e38\u51fa\u73b0\u7684\u3002","title":"\u6700\u77ed\u8def\u5f84\u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#1","text":"# G \u662f\u7528\u4e34\u9636\u8868\u8868\u793a\u7684\u56fe # N \u662f\u9876\u70b9\u7684\u4e2a\u6570 # road \u8bb0\u5f55\u4e00\u6761\u8def\u5f84 # roads \u8bb0\u5f55\u6700\u540e\u7684\u7ed3\u679c # color \u8bb0\u5f55\u8282\u70b9\u7684\u8bbf\u95ee\u72b6\u6001 def dfs ( G , src , dst , color , road , roads ): color [ src ] = 1 road . append ( src ) if src == dst : roads . append ( road . copy () ) else : for u in G [ src ]: if color [ u ] == 0 : dfs ( G , u , dst , color , road , roads ) color [ src ] = 0 road . pop () return roads # \u627e\u51fa\u4e24\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u8def\u5f84\uff0c\u8f93\u51fa\u4e00\u4e2a\u6700\u77ed\u7684","title":"1. \u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#2","text":"\u4e0a\u9762\u6c42\u7684\u662f\u4efb\u610f\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u6c42\u67d0\u4e00\u4e2a\u70b9\u5230\u5176\u4f59\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8fd8\u6709\u6548\u7387\u66f4\u9ad8\u7684\u65b9\u6cd5\u3002 \u6c42\u4e00\u4e2a\u7279\u5b9a\u7684\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u662f\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898\u3002","title":"2. \u5355\u6e90\u6700\u77ed\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#21-dijkstra","text":"\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\uff1a \u6bcf\u6b21\u627e\u5230\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u4e00\u4e2a\u70b9\uff0c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u9876\u70b9\u8fdb\u884c\u6269\u5c55\uff0c\u6700\u7ec8\u5f97\u5230\u6e90\u70b9\u5230\u5176\u4f59\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u662f\uff1a 1. \u521d\u59cb\u5316\uff1a\u5c06\u6240\u6709\u7684\u9876\u70b9\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5df2\u77e5\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u96c6\u5408P\u548c\u672a\u77e5\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u96c6\u5408Q\u3002\u5f00\u59cb\u7684\u65f6\u5019\uff0cP\u4e2d\u53ea\u6709\u6e90\u70b9\uff0c\u56e0\u4e3a\u5f00\u59cb\u7684\u65f6\u5019\u53ea\u80fd\u76f4\u5230\u6e90\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6700\u8fd1\uff0c\u662f0. \u5176\u4f59\u6240\u6709\u7684\u70b9\u5c5e\u4e8e\u96c6\u5408Q\u3002 \u8bbe\u7f6e\u6e90\u70b9\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0.\u8bbe\u7f6e\u6e90\u70b9\u80fd\u591f\u76f4\u63a5\u5230\u8fbe\uff08\u4e0d\u7ecf\u8fc7\u522b\u7684\u8282\u70b9\uff09\u7684\u9876\u70b9\u7684\u8ddd\u79bb\u4e3ae\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u3002\u628a\u6240\u6709\u6e90\u70b9\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u8282\u70b9\u7684\u503c\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927\u3002 \u5728\u96c6\u5408Q\u4e2d\u9009\u62e9\u4e00\u4e2a\u79bb\u6e90\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u52a0\u5165\u5230P\uff0c\u540c\u65f6\u4eceQ\u4e2d\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5047\u8bbe\u8fd9\u4e2a\u8282\u70b9\u662fu,\u8003\u5bdfu\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\uff0c\u770b\u662f\u5426\u4ece\u6e90\u70b9\u901a\u8fc7u\u5230\u8fbe\u8fd9\u4e9b\u8282\u70b9\u6bd4\u539f\u6765\u7684\u8ddd\u79bb\u8fd1\uff0c\u5982\u679c\u8fd1\uff0c\u5c31\u66f4\u65b0\u8fd9\u4e2a\u503c\u3002 \u91cd\u590d\u7b2c\u4e09\u6b65\u76f4\u5230Q\u4e3a\u7a7a\u3002 \u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\u8be5\u7b97\u6cd5\u7684\u5177\u4f53\u8fc7\u7a0b\uff1a \u521d\u59cb\u5316\uff0cP\u96c6\u5408\u4e2d\u53ea\u6709\u6e90\u70b91\uff0cQ\u96c6\u5408\u4e2d\u662f\u5269\u4e0b\u7684\u6240\u6709\u8282\u70b9\u3002distance\u6570\u636e\u521d\u59cb\u5316\u6210\u56fe\u4e2d\u7684\u6837\u5b50\u3002 \u627e\u5230\u7ed3\u5408Q\u4e2d\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f2\uff0c\u52a0\u5165\u5230P\u4e2d\uff0c2\u53ef\u4ee5\u5230\u8fbe3\u548c4.\u6b64\u65f6\u52303\u7684\u8ddd\u79bbdistance\u4e2d\u662f12\uff0c\u52304\u7684\u8ddd\u79bbdistance\u4e2d\u662f\u65e0\u7a77\u5927\uff0c\u5982\u679c\u901a\u8fc7\u8282\u70b92\u4e2d\u8f6c\uff0c\u53ef\u4ee5\u5f97\u5230\u52303\u7684\u8ddd\u79bb\u7b49\u4e8e10\uff0c\u5c0f\u4e8e\u539f\u6765\u768412\uff0c\u52304\u7684\u8ddd\u79bb\u662f4\uff0c\u5c0f\u4e8e\u539f\u6765\u7684\u65e0\u7a77\u5927\uff0c\u6240\u4ee5\u66f4\u65b0\u8fd9\u4e24\u4e2a\u8ddd\u79bb\u3002 \u4ece\u96c6\u5408Q\u4e2d\u627e\u4e00\u4e2a\u5230\u96c6\u5408P\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f4\uff0c\u628a4\u52a0\u5165P\uff0c\u540c\u65f6\u4eceQ\u4e2d\u5220\u96644\uff0c4\u80fd\u591f\u5230\u8fbe\u7684\u8282\u70b9\u662f3\uff0c5\uff0c6\uff0c\u8003\u5bdf\u901a\u8fc74\u80fd\u591f\u51cf\u5c11\u539f\u6765distance\u4e2d\u7684\u8ddd\u79bb\u3002\u4ece\u6e90\u70b9\u901a\u8fc74\u8fbe\u52303\u8ddd\u79bb\u662f8\uff0c\u6bd4\u539f\u6765\u768410\u5c0f\uff0c\u66f4\u65b0\uff1b\u4ece\u6e90\u70b9\u901a\u8fc74\u5230\u8fbe5\uff0c\u8ddd\u79bb\u662f17\uff0c\u6bd4\u539f\u6765\u7684\u65e0\u7a77\u5927\u5c0f\uff0c\u66f4\u65b0\uff1b\u4ece\u6e90\u70b9\u901a\u8fc74\u5230\u8fbe6\uff0c\u8ddd\u79bb\u662f19\uff0c\u6bd4\u539f\u6765\u7684\u65e0\u7a77\u5927\u5c0f\uff0c\u66f4\u65b0\uff1b \u4ece\u96c6\u5408Q\u4e2d\u9009\u51fa\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f3\uff0c\u628a3\u52a0\u5165\u7ed3\u5408P\uff0c\u540c\u65f6\u4ece\u96c6\u5408Q\u4e2d\u5220\u96643.\u770b\u901a\u8fc73\u80fd\u591f\u4f7f\u5f97distance\u4e2d\u7684\u5404\u4e2a\u8ddd\u79bb\u7f29\u5c0f\u30023\u53ea\u80fd\u5230\u8fbe5\uff0c\u4ece\u6e90\u70b9\u901a\u8fc73\u5230\u8fbe5\u7684\u8ddd\u79bb\u662f13\uff0c\u5c0f\u4e8e\u539f\u6765\u768417\uff0c\u66f4\u65b0\uff1b \u4ece\u96c6\u5408Q\u4e2d\u7ee7\u7eed\u9009\u62e9\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u70b9\uff0c\u662f5\uff0c\u52a0\u5165P\uff0c\u4eceQ\u4e2d\u5220\u9664\uff1b5\u53ea\u80fd\u5230\u8fbe6\uff0c\u901a\u8fc75\u5230\u8fbe6\u8ddd\u79bb\u53d8\u6210\u4e8617\uff0c\u5c0f\u4e8e\u539f\u6765\u768419\uff0c\u66f4\u65b0\uff1b \u96c6\u5408Q\u4e2d\u53ea\u5269\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u52a0\u5165P\u96c6\u5408\uff0c\u901a\u8fc7\u5b83\u4e0d\u80fd\u8fbe\u5230\u4efb\u4f55\u8282\u70b9\uff0c\u6240\u4ee5\u7b97\u6cd5\u7ed3\u675f\u3002 \u6b64\u65f6\u7684distance\u5b58\u50a8\u7684\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c\u3002 \u6ce8\u610f\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N^2)\uff0c\u5982\u679c\u4f7f\u7528\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u56fe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u662fO(M),M\u662f\u8fb9\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u7b97\u6cd5\u975e\u5e38\u9ad8\u6548\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u51b3\u5e26\u8d1f\u6743\u8fb9\u7684\u95ee\u9898\uff0c\u5982\u679c\u8981\u89e3\u7684\u95ee\u9898\u6743\u91cd\u6709\u8d1f\u503c\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e0b\u9762\u63d0\u5230\u7684\u65b9\u6cd5\u3002 \u4f7f\u7528\u4e00\u4e2adistance\u6570\u7ec4\u8868\u793a\u70b9s\u5230\u5176\u4ed6\u4e2a\u70b9\u7684\u8ddd\u79bb \u5f00\u59cb\u7684\u65f6\u5019\u521d\u59cb\u5316distance\u4e3aINF\uff0c\u7136\u540e\u628as\u76f4\u63a5\u8fde\u63a5\u7684\u70b9\u8bbe\u7f6e\u4e3a\u5176\u8fb9\u7684\u6743\u91cd \u6bcf\u6b21\u627e\u5230\u8ddd\u79bbs\u6700\u8fd1\u7684\u70b9\uff0c\u7136\u540e\u904d\u5386\u5176\u4ed6\u7684\u70b9\uff0c\u5982\u679c\u53d1\u73b0\u7ecf\u8fc7\u5176\u4ed6\u70b9\u4e2d\u8f6c\u4e4b\u540e\u8ddd\u79bb\u53ef\u4ee5\u53d8\u77ed\uff0c\u66f4\u65b0distance \u6b65\u9aa43\u6267\u884cV\u6b21 def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) # [dis, point] \u8868\u793a s->point \u6700\u77ed\u8ddd\u79bb\u662f dis distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance","title":"2.1 dijkstra \u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#22-bellman-ford","text":"\u8be5\u7b97\u6cd5\u6838\u5fc3\u4ee3\u7801\uff1a for ( int k = 1 ; k <= n - 1 ; k ++ ){ for ( i = 1 ; i <= m ; i ++ ){ if ( distance [[ v [ i ]]] > distance [ u [ i ]] + w [ i ] ){ distance [[ v [ i ]]] = distance [ u [ i ]] + w [ i ] } } } \u4ee3\u7801\u5f53\u4e2d\uff0cn\u662f\u8282\u70b9\u7684\u4e2a\u6570\uff0cm\u662f\u8fb9\u7684\u4e2a\u6570\uff0cdistance\u662f\u8bb0\u5f55\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\uff0cu,v,w\u662f\u4e09\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u8fb9\u7684\u4fe1\u606f\uff0c\u5bf9\u4e8e\u8fb9i\u6765\u8bf4\uff0cu[i]\u662f\u8fd9\u53d8\u7684\u8d77\u70b9\uff0cv[i]\u662f\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\uff0cw[i]\u662f\u8fd9\u6761\u8fb9\u7684\u6743\u91cd\u3002\u6240\u4ee5\uff0c if ( distance [[ v [ i ]]] > distance [ u [ i ]] + w [ i ] ){ distance [[ v [ i ]]] = distance [ u [ i ]] + w [ i ] } \u8fd9\u6bb5\u4ee3\u7801\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5982\u679c\u4ece\u6e90\u70b9\u5230\u8282\u70b9v[i]\u7684\u8ddd\u79bb \u5927\u4e8e \u7ecf\u8fc7\u8282\u70b9u[i]\u518d\u5230v[i]\u7684\u8ddd\u79bb\uff0c\u5c31\u66f4\u65b0\u6e90\u70b9\u5230\u8282\u70b9v[i]\u7684\u8ddd\u79bb\u4e3a distance[u[i]] + w[i]. \u8fd9\u91cc\u7684\u64cd\u4f5c\u548cdijstra\u7b97\u6cd5\u662f\u4e00\u6837\u7684\u542b\u4e49\u3002\u901a\u4fd7\u7684\u7406\u89e3\u5c31\u662f\uff0c\u5982\u679c\u901a\u8fc7\u7b2ci\u6761\u8fb9\u80fd\u4f7f\u8ddd\u79bb\u53d8\u77ed\uff0c\u5c31\u66f4\u65b0\u3002 \u90a3\u4e48\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u677e\u5f1b\u4e00\u8fb9\u4e4b\u540e\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u5462\u3002\u4e3a\u4ec0\u4e48\u6700\u5916\u5c42\u8fd8\u6709\u4e00\u4e2an-1\u6b21\u7684\u5faa\u73af\u5462\uff1f \u8ba9\u6211\u4eec\u901a\u8fc7\u5177\u4f53\u7684\u5b9e\u4f8b\u770b\u4e00\u4e0b\u5177\u4f53\u60c5\u51b5\u3002 \u7a7a\u5fc3\u5c0f\u5706\u5708\u4e0a\u7684\u6570\u5b57\u662f\u8fb9\u7684\u7f16\u53f7\uff0cdistance\u6570\u7ec4\u88ab\u521d\u59cb\u5316\u4e86\u3002\u6211\u4eec\u7528\u4e0a\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u4e00\u8f6e\u8fd0\u7b97\uff1aK=1\uff0c i= 1...m \u8fd9\u91ccm\u7b49\u4e8e5\uff0c\u56e0\u4e3a\u53ea\u67095\u6761\u8fb9\u3002 i = 1, u[1]=2, v[1]=3, distance[v[1]]\u65e0\u7a77\u5927\uff0cdistance[u[1]]+w[1]\u8fd8\u662f\u65e0\u7a77\u5927\uff0c\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0distance\u6570\u7ec4\u3002 i = 2, distance[v[2]]=\u65e0\u7a77\uff0c\u800cdistance[u[2]]+w[2]=-3,\u6240\u4ee5distance[v[2]]=-3 i = 3, distance[v[3]]=\u65e0\u7a77\uff0c\u800cdistance[u[3]]+w[3]=5,\u6240\u4ee5distance[3]=5, i = 4, distance[v[4]]=5\uff0c\u800cdistance[u[4]]+w[4]=\u65e0\u7a77,\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0\u3002 i = 5, distance[v[5]]=\u65e0\u7a77\uff0c\u800cdistance[u[5]]+w[5]=\u65e0\u7a77\uff0c\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0\u3002 \u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u677e\u5f1b\u4e86\u4e00\u8fb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5f97\u5230\u7b54\u6848\uff0c\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5f97\u5230\u4e86\u6e90\u70b9\u52302\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6e90\u70b9\u52303\u76ee\u524d\u8fd8\u4e0d\u662f\u6700\u77ed\u8ddd\u79bb\u3002\u6240\u4ee5\u53ef\u4ee5\u5047\u5b9a\uff0c\u6bcf\u6b21\u904d\u5386\u4e00\u8fb9\u6240\u6709\u7684\u8fb9\uff0c\u81f3\u5c11\u80fd\u591f\u786e\u5b9a\u4e00\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5\u6700\u591a\u5faa\u73af\u9876\u70b9\u7684\u4e2a\u6570\u51cf1\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u6bcf\u6b21\u904d\u5386\u4e00\u904d\u8fb9\u53ea\u80fd\u786e\u5b9a\u4e00\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5n-1\u6b21\u53ea\u662f\u4e0a\u9650\uff0c\u5982\u679c\u8d85\u8fc7\u4e86n-1\u6b21\uff0cdistance\u6570\u7ec4\u8fd8\u5728\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u5b58\u5728\u8d1f\u6743\u56de\u8def\u7684\u56fe\u662f\u6ca1\u6709\u6700\u77ed\u8def\u5f84\u7684\uff0c\u56e0\u4e3a\u6bcf\u7ed5\u4e00\u5708\u8def\u5f84\u90fd\u4f1a\u7f29\u77ed\u3002 K=2 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a k=3 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a k=4 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u6b64\u65f6\u5df2\u7ecf\u6ca1\u6709\u53d8\u5316\u4e86\uff0c\u7b97\u6cd5\u5728\u4e0e\u4e0a\u4e00\u6b21\u76f8\u6bd4\uff0cdistance\u6ca1\u6709\u53d8\u5316\u4e4b\u540e\u5176\u5b9e\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u4e86\u3002 import numpy as np def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance \u53c2\u8003\u6587\u732e \uff1a \u5e26\u6743\u6700\u77ed\u8def\uff1a http://www.renfei.org/blog/weighted-shortest-path.html","title":"2.2 Bellman-Ford \u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#3","text":"\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u53eb\u505a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u3002 \u5982\u4e0b\u56fe\uff0c1\uff0c2\uff0c3\uff0c4\u8868\u793a4\u4e2a\u57ce\u5e02\uff0c\u7ebf\u4e0a\u7684\u6570\u5b57\u8868\u793a\u8be5\u8def\u7a0b\u7684\u8ddd\u79bb\uff0c\u6c42\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\u662f\u591a\u5c11\u3002 \u5148\u6765\u8003\u8651\u5982\u4f55\u624d\u80fd\u786e\u5b9a\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u6bd4\u5982\u6c42\u4ece\u57ce\u5e021\u5230\u57ce\u5e023\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u6216\u8005\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u65b9\u5f0f\uff0c\u4ece\u8282\u70b91\u51fa\u53d1\uff0c\u641c\u7d22\u5230\u8282\u70b93\u672a\u77e5\uff0c\u7136\u540e\u8bb0\u5f55\u6240\u6709\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u662f1\u52303\u7684\u6700\u77ed\u8def\u5f84\u3002","title":"3. \u591a\u6e90\u6700\u77ed\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#31","text":"\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u77e9\u9635\u7684\u5e42\u7684\u6280\u672f\u6c42\u89e3\u6700\u77ed\u8def\u5f84\u3002 # G[][] \u662f\u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe # G[i][j] \u4e0d\u8fde\u901a\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927 # G[i][i] \u8bbe\u7f6e\u62100 def extendPath ( A , B ): C = deepcopy ( A ) for i in range ( N ): for j in range ( N ): C [ i ][ j ] = 9999999 for k in range ( N ): C [ i ][ j ] = min ( C [ i ][ j ], A [ i ][ k ] + B [ k ][ j ]) return C m = 1 while m < N - 1 : G = extendPath ( G , G ) m = m * 2","title":"3.1 \u91cd\u590d\u5e73\u65b9\u6cd5\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#32-floyd-warshall-on3","text":"\u4f7f\u7528\u5bbd\u5ea6\u4f18\u5148\u6216\u8005\u6df1\u5ea6\u4f18\u5148\u7684\u65b9\u5f0f\u6c42\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8fd8\u53ef\u4ee5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u6c42\u591a\u6e90\u6700\u77ed\u8def\u95ee\u9898\u5c31\u663e\u5f97\u592a\u590d\u6742\u4e86\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f \u8bbe\u60f3\u4e00\u4e0b\uff0c\u4ecea\u5230b\u7684\u8def\u7a0b\u662fl,\u5982\u4f55\u7f29\u77ed\u8fd9\u4e2a\u8def\u7a0b\u5462\uff1f\u53ea\u80fd\u8bd5\u8bd5\u80fd\u4e0d\u80fd\u627e\u5230\u5176\u4ed6\u7684\u8def\u4ecea\u5230b\uff0c\u770b\u5176\u4ed6\u7684\u6240\u6709\u8def\u7a0b\u4e2d\u6709\u6ca1\u6709\u6bd4\u5f53\u524d\u8fd9\u6761\u8def\u77ed\u7684\u3002 \u8fd9\u5c31\u662ffloyd-Warshall\u7b97\u6cd5\u7684\u601d\u60f3\u3002 \u6211\u4eec\u628a\u4e0a\u9762\u7684\u56fe\u5b58\u50a8\u6210\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\uff1a\u79f0\u4e3ae. floyd-Warshall \u7b97\u6cd5\u53ef\u4ee5\u8868\u8ff0\u4e3a\uff1a for ( int k = 1 ; k <= n ; k ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ if ( e [ i ][ j ] > e [ i ][ k ] + e [ k ][ j ]){ e [ i ][ j ] = e [ i ][ k ] + e [ k ][ j ]; } } } } \u5177\u4f53\u5230\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5f00\u59cb\u7684\u65f6\u5019\uff0ck=1,i=1,j=1,2,3,4; \u5faa\u73af\u91cc\u9762\u6bd4\u8f83\u7684\u662f\uff1a e[1][1] > e[1][1] + e[1][1] e[1][2] > e[1][1] + e[1][2] e[1][3] > e[1][1] + e[1][3] e[1][4] > e[1][1] + e[1][4] \u7136\u540e\uff0ck=1,i=2,j=1,2,3,4; \u5faa\u73af\u91cc\u9762\u6bd4\u8f83\u7684\u662f\uff1a e[2][1] > e[2][1] + e[1][1] e[2][2] > e[2][1] + e[1][2] e[2][3] > e[2][1] + e[1][3] e[2][4] > e[2][1] + e[1][4] \u7136\u540e\uff0ck=1,i=3,j=1,2,3,4;\u5faa\u73af\u91cc\u9762\u7684\u6bd4\u8f83\u662f\uff1a e[3][1] > e[3][1] + e[1][1] e[3][2] > e[3][1] + e[1][2] e[3][3] > e[3][1] + e[1][3] e[3][4] > e[3][1] + e[1][4] \u7136\u540e\uff0ck=1,i=4,j=1,2,3,4;\u5faa\u73af\u91cc\u9762\u7684\u6bd4\u8f83\u662f\uff1a e[4][1] > e[4][1] + e[1][1] e[4][2] > e[4][1] + e[1][2] e[4][3] > e[4][1] + e[1][3] e[4][4] > e[4][1] + e[1][4] \u53ef\u4ee5\u770b\u5230\uff0c\u5f53k=1\u7684\u65f6\u5019\uff0c\u904d\u5386\u4e86\u6bcf\u4e2a\u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u8fde\u63a5\uff0c\u628a\u901a\u8fc7\u8282\u70b91\u4e2d\u8f6c\u7684\u60c5\u51b5\u5168\u90e8\u5c1d\u8bd5\u4e86\u4e00\u904d\uff0c\u770b\u6709\u6ca1\u6709\u4efb\u4f55\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u901a\u8fc7\u8282\u70b91\u4e2d\u8f6c\u4e4b\u540e\u8def\u7a0b\u4f1a\u53d8\u77ed\u3002\u5982\u679c\u4f1a\uff0c\u5c31\u628a\u8def\u7a0b\u66f4\u65b0\u6210\u8fd9\u4e2a\u66f4\u77ed\u7684\u8def\u7a0b\u3002 K=1\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a K=2\u7684\u65f6\u5019\u5c31\u597d\u7406\u89e3\u4e86\u3002\u5c31\u662f\u5c1d\u8bd5\u7ecf\u8fc7\u8282\u70b92\u8fdb\u884c\u4e2d\u8f6c\u3002 \u56e0\u4e3a\u5df2\u7ecf\u662f\u7ecf\u8fc7\u8282\u70b91\u4e2d\u8f6c\u8fc7\u540e\u7684\u6570\u636e\u4e86\u3002\u6240\u4ee5\u76f8\u5f53\u4e8e\u539f\u59cb\u6570\u636e\u7ecf\u8fc7\u8282\u70b91\u548c\u8282\u70b92\u4e2d\u8f6c\u4e4b\u540e\u83b7\u5f97\u7684\u6700\u77ed\u7684\u8ddd\u79bb\u3002 K=2\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a k=3\u7684\u65f6\u5019\u540c\u6837\u7684\u9053\u7406\uff0c\u7ecf\u8fc7\u8282\u70b93\u4e2d\u8f6c\uff0ck=4\u7684\u65f6\u5019\u7ecf\u8fc7\u8282\u70b94\u4e2d\u8f6c\u3002\u8fd9\u6837\u6700\u540e\u83b7\u5f97\u7684\u66f4\u65b0\u4e4b\u540e\u7684\u77e9\u9635e\u5c31\u5b58\u50a8\u4e86\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002 K=3\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a K=4\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a \u8fd9\u5c31\u662ffloyd-Warshall \u7b97\u6cd5\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u9010\u4e2a\u5c1d\u8bd5\u4f7f\u7528\u8282\u70b9\u4e2d\u8f6c\u662f\u5426\u53ef\u4ee5\u8f83\u5c11\u8ddd\u79bb\uff0c\u7136\u540e\u66f4\u65b0\u8ddd\u79bb\u3002 python \u5b9e\u73b0\uff1a # G[][] \u662f\u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe # G[i][j] \u4e0d\u8fde\u901a\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927 # G[i][i] \u8bbe\u7f6e\u62100 def FloydWarshall ( self , g ): \"\"\" g : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\u8868\u793a\uff0c\u81ea\u8eab\u8fde\u63a5\u75280\u8868\u793a \u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) for k in range ( n ): for i in range ( n ): for j in range ( n ): if g [ i ][ j ] > g [ i ][ k ] + g [ k ][ j ]: g [ i ][ j ] = g [ i ][ k ] + g [ k ][ j ] return g","title":"3.2 Floyd-Warshall \u7b97\u6cd5\uff1a(O(N^3))"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#33-johnson","text":"Johnson\u7b97\u6cd5\u7684\u601d\u60f3\u662f\u5bf9\u6bcf\u4e2a\u70b9\uff0c \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u7136\u540e\u6c47\u603b\u7ed3\u679c\u3002 \u4f46\u662fdijkstra\u7b97\u6cd5\u4e0d\u80fd\u9002\u7528\u4e0e\u6709\u8d1f\u6743\u8fb9\u7684\u60c5\u51b5\uff0c \u6240\u4ee5\u7b2c\u4e00\u6b65\u4fbf\u662f\u901a\u8fc7\u7b49\u4ef7\u53d8\u5316\uff0c\u6d88\u706d\u8d1f\u6743\u8fb9\u3002 \u800c\u8fd9\u79cd\u7b49\u4ef7\u53d8\u5316\u7684\u65b9\u5f0f\u662f\u901a\u8fc7 bellman-ford\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002 \u6240\u4ee5 Johnson \u7b97\u6cd5\u662f dijkstra \u7b97\u6cd5\u548c bellman-ford\u7b97\u6cd5\u7684\u7ed3\u5408\uff1a \u5bf9\u4e8e\u56fe G=(V,E), \u65b0\u589e\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9s, s\u8fde\u63a5\u56fe\u4e2d\u6bcf\u4e2a\u70b9\uff0c\u65b0\u56fe\u8bb0\u4e3a G2 \u4f7f\u7528bellman-ford\u7b97\u6cd5\u8ba1\u7b97\u70b9s\u5230\u5176\u4ed6\u5404\u4e2a\u70b9\u7684\u5355\u5143\u6700\u77ed\u8def\u5f84\uff0c \u8bb0\u4e3a distanceS \u66f4\u65b0\u539f\u56fe G \u4e2d\u8fb9\u7684\u6743\u91cd\uff1aw(u,v) = (u,v) + distanceS[u] - distance[v], \u66f4\u65b0\u4e4b\u540e\u56fe\u4e2d\u6ca1\u6709\u4e86\u8d1f\u6743\u8fb9 \u5bf9\u56fe G \u4e2d\u6bcf\u4e00\u70b9\u8fd0\u884c dijkstra \u7b97\u6cd5\uff0c \u5f97\u5230\u7ed3\u679c def dijkstra ( self , g , s ): \"\"\" dijkstra \u7b97\u6cd5\u5b9e\u73b0 g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9 s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \"\"\" n = len ( g ) # \u70b9\u4e2a\u6570 # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806 q = [] for point in range ( n ): if ( g [ s ][ point ] != INF ): heapq . heappush ( q , [ g [ s ][ point ], point ]) else : heapq . heappush ( q , [ INF , point ]) # [dis, point] \u8868\u793a s->point \u6700\u77ed\u8ddd\u79bb\u662f dis distance = [ INF for _ in range ( n )] distance [ s ] = 0 while len ( q ) > 0 : dis , u = heapq . heappop ( q ) distance [ u ] = dis for i in range ( len ( q )): if q [ i ][ 0 ] > dis + g [ u ][ q [ i ][ 1 ] ]: q [ i ][ 0 ] = dis + g [ u ][ q [ i ][ 1 ] ] heapq . heapify ( q ) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806 return distance def BellmanFord ( self , edges , s , N ): \"\"\" BellmanFord \u7b97\u6cd5\u5b9e\u73b0 edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u-->v \u7684\u6743\u91cd\u4e3a w s : \u6e90\u70b9 \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570 \"\"\" distance = np . zeros ( N ) distance . fill ( INF ) distance [ s ] = 0 for _ in range ( N ): distance_tmp = np . copy ( distance ) for u , v , w in edges : if distance [ v ] > distance [ u ] + w : distance [ v ] = distance [ u ] + w if np . array_equal ( distance , distance_tmp ): break for u , v , w in edges : if distance [ v ] > distance [ u ] + w : print ( \"\u5b58\u5728\u8d1f\u6743\u56de\u8def\" ) return distance def Johnson ( self , g ): \"\"\" g: \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u56fe\u4e2d\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\uff0c\u81ea\u8eab\u75280 \u8fd4\u56de\u77e9\u9635\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84 \"\"\" n = len ( g ) edges = [] for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : edges . append ( [ i , j , g [ i ][ j ]] ) for i in range ( n ): edges . append ([ n , i , 0 ]) # \u8d85\u7ea7\u6e90\u70b9\u5230\u4efb\u610f\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u90fd\u8bbe\u7f6e\u4e3a0 # \u6c42\u8d85\u7ea7\u6e90\u70b9\u5230\u5176\u4ed6\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84 distance = self . BellmanFord ( edges , n , n + 1 ) # \u7528\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5f84\u66f4\u65b0\u8fb9\u7684\u6743\u503c for i in range ( n ): for j in range ( n ): if g [ i ][ j ] != 0 and g [ i ][ j ] != INF : g [ i ][ j ] = g [ i ][ j ] + distance [ i ] - distance [ j ] # \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u89e3 matrix = [] for i in range ( n ): distance = self . dijkstra ( g , i ) matrix . append ( distance ) return matrix LeetCode\u9898\u76ee \u96be\u5ea6 \u7b97\u6cd5 797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 \u4e2d\u7b49 \u4e24\u70b9\u95f4\u6240\u6709\u8def\u5f84 127. \u5355\u8bcd\u63a5\u9f99 \u4e2d\u7b49 \u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 \u4e2d\u7b49 \u5355\u6e90\u6700\u77ed\u8def\u5f84 1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02 \u4e2d\u7b49 \u591a\u6e90\u6700\u77ed\u8def\u5f84","title":"3.3 Johnson \u7b97\u6cd5\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/","text":"\u7f51\u7edc\u6d41 \u00b6 \u6709\u4e00\u4e2a\u81ea\u6765\u6c34\u7ba1\u9053\u8fd0\u8f93\u7cfb\u7edf\uff0c\u8d77\u70b9\u662fs\uff0c\u7ec8\u70b9\u662ft\uff0c\u9014\u4e2d\u7ecf\u8fc7\u7684\u7ba1\u9053\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u7684\u5bb9\u91cf\u3002\u6c42\u4eces\u5230t\u7684\u6700\u5927\u6c34\u6d41\u91cf\u662f\u591a\u5c11\uff1f \u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u662f\u7f51\u7edc\u7684\u53e6\u4e00\u4e2a\u57fa\u672c\u95ee\u9898\u3002\u8bb8\u591a\u7cfb\u7edf\u5305\u542b\u4e86\u6d41\u91cf\u95ee\u9898\u3002\u4f8b\u5982\u4ea4\u901a\u7cfb\u7edf\u6709\u8f66\u6d41\u91cf\uff0c\u91d1\u878d\u7cfb\u7edf\u6709\u73b0\u91d1\u6d41\uff0c\u63a7\u5236\u7cfb\u7edf\u6709\u4fe1\u606f\u6d41\u7b49\u3002\u8bb8\u591a\u6d41\u95ee\u9898\u4e3b\u8981\u662f\u786e\u5b9a\u8fd9\u7c7b\u7cfb\u7edf\u7f51\u7edc\u6240\u80fd\u627f\u53d7\u7684\u6700\u5927\u6d41\u91cf\u4ee5\u53ca\u5982\u4f55\u8fbe\u5230\u8fd9\u4e2a\u6700\u5927\u6d41\u91cf\u3002 \u5148\u4ecb\u7ecd\u6700\u5927\u6d41\u95ee\u9898\u989d\u4e00\u822c\u6a21\u578b\u3002 \u5982\u56fe\uff0c\u8981\u6c42\u4eces\u5230t\u7684\u6700\u5927\u6d41\u662f\u591a\u5c11\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u770b\u51fa\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\u662f4\uff0cs\u21921 == 2 \u5e76\u4e14 s\u21922 = 2. \u7ebf\u6bb5\u4e0a\u7684\u6570\u636e\u8868\u793a\u7ebf\u6bb5\u4e0a\u7684\u6700\u5927\u5bb9\u91cf\uff0cs\u8868\u793a\u8d77\u70b9\uff0c\u672f\u8bed\u53eb\u505a\u6e90\u70b9(source),t\u662f\u7ec8\u70b9\uff0c\u672f\u8bed\u53eb\u505a\u6c47\u70b9(sink),\u8fb9\u7684\u5bb9\u91cf\u8bb0\u4f5c c c ,\u5b9e\u9645\u8fb9\u4e0a\u6d41\u8fc7\u7684\u5177\u4f53\u7684\u503c\u8bb0\u4f5c f f . \u6700\u5927\u6d41\u95ee\u9898\u5c31\u662f\u6700\u5927\u5316\u4eces\u51fa\u53d1\u7684\u6d41\u91cf\u3002 \u6d41\u7f51\u7edc\u7684\u503c \u6709\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u63d0\u5230\u6d41\u7f51\u7edc\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u65f6\u5019\u662f\u6307\u6240\u6709\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u6d41\u4e4b\u548c\u3002 1. Ford-Fulkerson \u00b6 \u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u6bd4\u8f83\u5e38\u89c1\u7684\u662fFord-Fulkerson\u89e3\u6cd5\u3002\u8be5\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u4e09\u79cd\u91cd\u8981\u601d\u60f3\uff1a\u6b8b\u7559\u7f51\u7edc\uff0c\u589e\u5e7f\u8def\u5f84\u548c\u5272\u3002 1.1 \u589e\u5e7f\u8def\u5f84 \u00b6 \u589e\u5e7f\u8def\u5f84\u53ef\u4ee5\u770b\u505a\u662f\u4ece\u6e90\u70b9s\u5230\u6c47\u70b9t\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6cbf\u8be5\u8def\u5f84\u53ef\u4ee5\u538b\u5165\u66f4\u591a\u7684\u6d41\uff0c\u4ece\u800c\u589e\u52a0\u6d41\u7684\u503c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u4e0b\uff0c\u5982\u56fe\u6240\u793a\uff0c\u6bcf\u6761\u7ea2\u7ebf\u5c31\u4ee3\u8868\u4e86\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u5f53\u524ds\u5230t\u7684\u6d41\u91cf\u4e3a3\u3002 \u5f53\u7136\u8fd9\u5e76\u4e0d\u662f\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u6839\u636e\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u7684\u7b97\u6cd5\u6211\u4eec\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u6700\u7ec8\u7684\u6700\u5927\u6d41\u7f51\u7edc\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6700\u5927\u6d41\u4e3a4\u3002 1.2 \u6b8b\u7559\u7f51\u7edc(Residual Graph) \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u6d41\uff0c\u9664\u4e86\u8fd9\u4e2a\u6d41\u4e4b\u5916\uff0c\u7f51\u7edc\u4e0a\u8fd8\u80fd\u5bb9\u7eb3\u7684\u6d41\u53eb\u505a\u8fd9\u4e2a\u6d41\u5bf9\u5e94\u7684\u6b8b\u7559\u7f51\u7edc\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u6b8b\u7559\u7f51\u7edc\u7406\u89e3\u4e3a\u6574\u4e2a\u7f51\u7edc\u51cf\u53bb\u5f53\u524d\u7684\u6d41\u7f51\u7edc\u3002 \u6b8b\u7559\u7f51\u7edc\u7684\u5177\u4f53\u8ba1\u7b97\u65b9\u6cd5\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6d41\u7f51\u7edcG\u548c\u4e00\u4e2a\u6d41\uff0c\u6d41\u7684\u6b8b\u7559\u7f51 G_f G_f \u62e5\u6709\u4e0e\u539f\u7f51\u76f8\u540c\u7684\u9876\u70b9\u3002\u539f\u6d41\u7f51\u7edc\u4e2d\u6bcf\u6761\u8fb9\u5c06\u5bf9\u5e94\u6b8b\u7559\u7f51\u4e2d\u4e00\u6761\u6216\u8005\u4e24\u6761\u8fb9\uff0c\u5bf9\u4e8e\u539f\u6d41\u7f51\u7edc\u4e2d\u7684\u4efb\u610f\u8fb9(u, v)\uff0c\u6d41\u91cf\u4e3af(u, v)\uff0c\u5bb9\u91cf\u4e3ac(u, v)\uff1a - \u5982\u679cf(u, v) > 0\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3af(u, v)\u7684\u8fb9(v, u); - \u5982\u679cf(u, v) < c(u, v)\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3ac(u, v) - f(u, v)\u7684\u8fb9(u, v)\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6d41\u90fd\u4e3a0\uff0c\u6b64\u65f6\u6ee1\u8db3\u7b2c\u4e8c\u6761\uff0cf(u,v) = 0 < c(u,v).\u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e0e\u539f\u6765\u7684\u7f51\u7edc\u76f8\u540c\u3002 \u5728\u5f53\u524d\u7684\u6b8b\u7559\u7f51\u7edc\uff08\u4e0e\u539f\u7f51\u7edc\u76f8\u540c\uff09\u968f\u610f\u786e\u5b9a\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u5047\u8bbe\u662f 0-->1-->3-->5 \uff0c\u8be5\u8def\u5f84\u7684\u6700\u5927\u6d41\u91cf\u662f2. f(0,1)>0, \u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e00\u6761\u8fb9(1,0) = 2, f(0,1) = c(0,1), \u6240\u4ee5\u6ca1\u6709\u4ece0\u52301\u7684\u8fb9\u3002 c(1,3)>f(1,3)>0, \u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e24\u6761\u8fb9,(1,3)=3-2=1, (3,1)=f(1,3)=2. c(3,5) = f(3,5)>0, \u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e00\u6761\u8fb9\uff0c(5,2) = 2. \u6574\u4e2a\u6b8b\u7559\u7f51\u7edc\u7684\u53d8\u5316\u5982\u6709\u56fe\u6240\u793a\u3002 \u518d\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u8fd9\u6b21\u6211\u4eec\u627e 0-->2-->4-->5 ,\u6700\u5927\u6d41\u91cf\u662f1. \u6309\u7167\u6b8b\u7559\u7f51\u7edc\u7684\u89c4\u5219\uff0c\u8ba1\u7b97\u4e4b\u540e\u7684\u6b8b\u7559\u7f51\u7edc\u5982\u53f3\u56fe\u6240\u793a\u3002 \u7ee7\u7eed\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u53ef\u4ee5\u5bfb\u627e\u5230\u4e00\u6761 0-->2-->3-->1-->4-->5 \u7684\u8def\u5f84\uff0c\u6ce8\u610f 3-->1 \u5c31\u662f\u539f\u6765\u7684 1-->3 \u51cf\u53bb1\uff0c\u6700\u5927\u7684\u6d41\u91cf\u662f1. \u6839\u636e\u4e0a\u9762\u7684\u89c4\u5219\u8c03\u6574\u6b8b\u7559\u7f51\u7edc\uff0c\u5982\u53f3\u56fe\u6240\u793a\u3002 \u6b64\u65f6\uff0c\u6b8b\u7559\u7f51\u7edc\u4e2d\u518d\u4e5f\u627e\u4e0d\u5230\u4efb\u4f55\u4e00\u6761\u4ece0\u52305\u7684\u589e\u5e7f\u8def\u5f84\uff0c\u6240\u4ee5\u8fc7\u7a0b\u7ed3\u675f\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u5927\u6d41\u3002\u4e0a\u56fe\u5de6\u8fb9\u6240\u793a\u7684\u5c31\u662f\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u548c\u6211\u4eec\u6700\u521d\u7684\u76f4\u89c2\u5370\u8c61\u662f\u4e00\u6837\u7684\u3002 1.3 \u5272 \u00b6 \u8bbe\u6574\u4e2a\u56fe\u7684\u9876\u70b9\u96c6\u5408\u662fV\u3002\u6240\u8c13\u56fe\u7684\u5272\uff0c\u6307\u7684\u662f\u8fb9\u7684\u96c6\u5408\uff0c\u6307\u7684\u662f\u5bf9\u4e8e\u67d0\u4e2a\u9876\u70b9\u96c6\u5408 S \\subseteq V S \\subseteq V ,\u4eceS\u51fa\u53d1\u6307\u5411S\u5916\u90e8\u7684\u90a3\u4e9b\u8fb9\u7684\u96c6\u5408\uff0c\u8bb0\u4e3a\u5272(S,V\\S). \u6240\u4ee5\u5272\u662f\u6307\u4e00\u4e9b\u8fb9\u7684\u96c6\u5408\u3002 \u8fd9\u4e9b\u8fb9\u4e0a\u7684\u5bb9\u91cf\u4e4b\u548c\u88ab\u79f0\u4e3a\u5272\u7684\u5bb9\u91cf\u3002 \u6700\u5c0f\u5272\u95ee\u9898 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f51\u7edc\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u4eces\u5230t\u7684\u8def\u5f84\uff0c\u9700\u8981\u5220\u53bb\u7684\u8fb9\u7684\u603b\u5bb9\u91cf\u6700\u5c0f\u662f\u591a\u5c11\u3002\u5176\u4e2d s \\in S s \\in S \u4e14 t \\in {V/S} t \\in {V/S} . \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406 \u4e00\u4e2a\u7f51\u4e2d\u6240\u6709\u6d41\u4e2d\u7684\u6700\u5927\u503c\u7b49\u4e8e\u6240\u6709\u5272\u4e2d\u7684\u6700\u5c0f\u5bb9\u91cf\u3002 \u5176\u5b9e\u8fd9\u4e2a\u5b9a\u7406\u5f88\u5bb9\u6613\u4ece\u9053\u7406\u4e0a\u60f3\u660e\u767d\uff0c\u4e00\u65e6\u8d85\u51fa\u6700\u5c0f\u5272\uff0c\u4fbf\u603b\u6709\u8fb9\u8d85\u51fa\u4e86\u8fb9\u7684\u5bb9\u91cf\uff0c\u4e5f\u5c31\u4e0d\u5b58\u5728\u53ef\u884c\u7684\u6d41\u4e86\u3002 \u7528\u4e0a\u9762\u7528\u8fc7\u7684\u56fe\u6765\u8bf4\u660e\u4e00\u4e0b\u5272\u7684\u76f8\u5173\u6982\u5ff5\uff1a \u5982\u56fe\uff0c\u6d41\u7f51\u7edc\u7684\u4e00\u4e2a\u5272\u4e3as:{0,1,2},t:{3,4,5}, \u901a\u8fc7\u5272\u7684\u6d41\u91cf\u5b9a\u4e49\u4e3a\u4eces\u5230t\u7684\u6240\u6709\u6d41\u91cf\u4e4b\u548c(\u4ecet\u5230s\u7684\u6d41\u91cf\u8bb0\u4f5c\u8d1f\u503c)\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5272\u7684\u6d41\u91cf\u662f\uff1a2+1=3 \u5272\u7684\u5bb9\u91cf\u8bb0\u4f5c\u6240\u6709\u4eces\u5230t\u7684\u8fb9\u7684\u5bb9\u91cf\u4e4b\u548c\uff0c\u6240\u4ee5\u662f3+1+1+1 = 6. \u4ece\u4e0a\u9762\u7684\u5b9a\u4e49\u53ef\u4ee5\u7b80\u5355\u7684\u5f97\u5230\u4e00\u70b9\uff0c\u4efb\u4f55\u4e00\u4e2a\u5272\u7684\u6d41\u91cf\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u5272\u7684\u5bb9\u91cf\u3002 \u5c06\u4e0a\u9762\u7684\u5272\u7684\u56fe\u5f62\u589e\u52a0\u4e00\u4e2a\u865a\u62df\u7684\u8282\u70b9s'\uff0c\u7ed8\u5236\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\uff1af1\u662f\u6d41\u5165S\u7684\u6d41\u91cf\uff0cf2\u662f\u4eceS\u5230T\u7684\u6d41\u91cf\uff0cf3\u662f\u4eceT\u5230S\u7684\u6d41\u91cf\u3002\u4e00\u4e2a\u8282\u70b9\u7684\u6d41\u5165\u6d41\u91cf\u7b49\u4e8e\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u6240\u4ee5\u6709f2 = f1 + f3. \u4ece\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u6e05\u6670\u7684\u770b\u51fa\uff0c\u6d41\u7f51\u7edc\u7684\u503c\u7b49\u4e8ef1, \u800c\u5272\u7684\u6d41\u91cf\u7b49\u4e8ef2-f3. \u6240\u4ee5\u6709\u6d41\u7f51\u7edc\u7684\u503c\u7b49\u4e8e\u5272\u7684\u6d41\u91cf\u503c\u3002 \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u5b9a\u7406\u7684\u8bc1\u660e\uff1a http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html 1.4 Ford-Fulkerson\u7b97\u6cd5\u7684\u5b9e\u73b0 \u00b6 \u4e0a\u9762\u4ecb\u7ecd\u6b8b\u7559\u7f51\u7edc\u7684\u65f6\u5019\u5df2\u7ecf\u5c06\u7684\u5f88\u6e05\u695a\u4e86\uff0cFord-Fulkerson\u7b97\u6cd5\u5c31\u662f\u4e0d\u65ad\u66f4\u65b0\u6b8b\u7559\u7f51\u7edc\uff0c\u4ece\u4e2d\u627e\u51fa\u53ef\u884c\u7684\u6d41\uff0c\u76f4\u5230\u65e0\u6cd5\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u51fa\u53ef\u884c\u7684\u6d41\u4e3a\u6b62\u3002 \u6240\u4ee5\uff0c\u7b80\u5355\u7684\u7b97\u6cd5\u6b65\u9aa4\u53ef\u4ee5\u8868\u8ff0\u4e3a\uff1a \u521d\u59cb\u5316\u6d41flow = 0; while(condition){ flow += path-flow } \u6b64\u5904\u7684condition\u4e3a \u5b58\u5728\u4eces\u5230t\u7684\u589e\u5e7f\u8def\u5f84\uff0cpath-flow\u4e3a\u8be5\u589e\u5e7f\u8def\u5f84\u7684\u503c\u3002 \u8f93\u51faflow. \u53ef\u4ee5\u770b\u51fa\uff0c\u7b97\u6cd5\u7684\u4e3b\u8981\u90e8\u5206\u5728\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u4e0a\u9762\u3002 \u53c2\u8003\u6587\u7ae0\uff1a http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/ \u7a0b\u5e8f\u4ee5\u8fd9\u4e2a\u5b9e\u4f8b\u4f5c\u4e3a\u8f93\u5165\uff1a // C++ program for implementation of Ford Fulkerson algorithm #include <iostream> #include <limits.h> #include <string.h> #include <queue> using namespace std ; // Number of vertices in given graph #define V 6 /* Returns true if there is a path from source 's' to sink 't' in residual graph. Also fills parent[] to store the path */ // \u4f7f\u7528\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u641c\u7d22\u6b8b\u7559\u7f51\u7edc\u4e4b\u4e2d\u662f\u5426\u6709\u589e\u5e7f\u8def\u5f84 bool bfs ( int rGraph [ V ][ V ], int s , int t , int parent []) { // Create a visited array and mark all vertices as not visited bool visited [ V ]; memset ( visited , 0 , sizeof ( visited )); // Create a queue, enqueue source vertex and mark source vertex // as visited queue < int > q ; q . push ( s ); visited [ s ] = true ; parent [ s ] = - 1 ; // Standard BFS Loop \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22 while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int v = 0 ; v < V ; v ++ ) { if ( visited [ v ] == false && rGraph [ u ][ v ] > 0 ) { q . push ( v ); parent [ v ] = u ; visited [ v ] = true ; } } } // If we reached sink in BFS starting from source, then return // true, else false return ( visited [ t ] == true ); } // Returns the maximum flow from s to t in the given graph int fordFulkerson ( int graph [ V ][ V ], int s , int t ) { int u , v ; // Create a residual graph and fill the residual graph with // given capacities in the original graph as residual capacities // in residual graph int rGraph [ V ][ V ]; // Residual graph where rGraph[i][j] indicates // residual capacity of edge from i to j (if there // is an edge. If rGraph[i][j] is 0, then there is not) // \u521d\u59cb\u5316\u6b8b\u7559\u7f51\u7edc\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6b8b\u7559\u7f51\u7edc\u548c\u521d\u59cb\u7f51\u7edc\u4e00\u81f4\uff0c\u89c1\u4e0a\u9762\u7684\u8bb2\u89e3 for ( u = 0 ; u < V ; u ++ ) for ( v = 0 ; v < V ; v ++ ) rGraph [ u ][ v ] = graph [ u ][ v ]; int parent [ V ]; // This array is filled by BFS and to store path int max_flow = 0 ; // There is no flow initially // Augment the flow while tere is path from source to sink //bfs(rGraph, s, t, parent) \u5b9e\u73b0\u4e86\u5224\u65ad\u6b8b\u7559\u7f51\u7edc\u4e2d\u662f\u5426\u5b58\u5728\u589e\u5e7f\u8def\u5f84 while ( bfs ( rGraph , s , t , parent )) { // Find minimum residual capacity of the edges along the // path filled by BFS. Or we can say find the maximum flow // through the path found. int path_flow = INT_MAX ; //\u627e\u5230path_flow\u7684\u503c\uff0cpath_flow\u7684\u503c\u7b49\u4e8e\u589e\u5e7f\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u8fb9\u7684\u5bb9\u91cf\u3002 for ( v = t ; v != s ; v = parent [ v ]) { u = parent [ v ]; path_flow = min ( path_flow , rGraph [ u ][ v ]); } // update residual capacities of the edges and reverse edges // along the path //\u66f4\u65b0\u6b8b\u7559\u7f51\u7edc for ( v = t ; v != s ; v = parent [ v ]) { u = parent [ v ]; rGraph [ u ][ v ] -= path_flow ; rGraph [ v ][ u ] += path_flow ; } // Add path flow to overall flow max_flow += path_flow ; } // Return the overall flow return max_flow ; } // Driver program to test above functions int main () { // Let us create a graph shown in the above example int graph [ V ][ V ] = { { 0 , 16 , 13 , 0 , 0 , 0 }, { 0 , 0 , 10 , 12 , 0 , 0 }, { 0 , 4 , 0 , 0 , 14 , 0 }, { 0 , 0 , 9 , 0 , 0 , 20 }, { 0 , 0 , 0 , 7 , 0 , 4 }, { 0 , 0 , 0 , 0 , 0 , 0 } }; cout << \"The maximum possible flow is \" << fordFulkerson ( graph , 0 , 5 ); return 0 ; } \u4ee5\u4e0a\u4ee3\u7801\u641c\u7d22\u589e\u5e7f\u8def\u5f84\u4f7f\u7528\u7684BFS\uff0c\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u4f7f\u7528DFS\uff0cPFS\u7b49\u65b9\u6cd5\uff0c\u53c2\u8003\u6587\u7ae0\uff1a http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html \u53c2\u8003\u6587\u732e http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html http://www.acmerblog.com/ford-fulkerson-6135.html http://blog.csdn.net/smartxxyx/article/details/9293805 http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/ 2. Dinic\u7b97\u6cd5 \u00b6 Dinic\u662f\u4e00\u79cd\u6bd4Ford-Fulkerson\u6548\u7387\u66f4\u9ad8\u7684\u7b97\u6cd5\uff0c\u5f53\u6570\u636e\u8f83\u5927\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528Dinic\u7b97\u6cd5\u3002 2.1 \u9876\u70b9\u7684\u5c42\u6b21 \u00b6 \u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\uff0c\u628a\u9876\u70b9\u8ddd\u79bb\u6e90\u70b9\u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u8282\u70b9\u7684\u5c42\u6b21\uff0c\u6e90\u70b9\u7684\u5c42\u6b21\u4e3a0\uff0c\u548c\u6e90\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u8282\u70b9\u7684\u5c42\u6b21\u662f1. \u5206\u5c42 \uff1a \u5c06\u6b8b\u7559\u7f51\u7edc\u4e2d\u6240\u6709\u8282\u70b9\u7684\u5c42\u6b21\u6807\u8bb0\u51fa\u6765\u7684\u8fc7\u7a0b\u3002\uff08\u6ce8\u610f\u4e0d\u662f\u6240\u6709\u7684\u7f51\u7edc\u90fd\u53ef\u4ee5\u5206\u5c42\uff09 \u5c42\u6b21\u7f51\u7edc \uff1a\u5bf9\u6b8b\u7559\u7f51\u7edc\u8fdb\u884c\u5206\u5c42\u540e\uff0c\u5220\u53bb\u6bd4\u6c47\u70b9Vt\u5c42\u6b21\u66f4\u9ad8\u7684\u9876\u70b9\u548c\u4e0e\u6c47\u70b9Vt\u540c\u5c42\u7684\u9876\u70b9(\u4fdd\u7559Vt)\uff0c\u5e76\u5220\u53bb\u8fd9\u4e9b\u9876\u70b9\u76f8\u5173\u8054\u7684\u5f27\uff0c\u518d\u5220\u53bb\u4ece\u67d0\u5c42\u9876\u70b9\u6307\u5411\u540c\u5c42\u9876\u70b9\u548c\u4f4e\u5c42\u9876\u70b9\u7684\u5f27\uff0c\u6240\u5269\u4f59\u7684\u5404\u6761\u5f27\u7684\u5bb9\u91cf\u4e0e\u6b8b\u7559\u7f51\u7edc\u4e2d\u7684\u5bb9\u91cf\u76f8\u540c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7f51\u7edc\u5c31\u662f\u6b8b\u7559\u7f51\u7edc\u7684\u5b50\u7f51\u7edc\uff0c\u79f0\u4e3a\u5c42\u6b21\u7f51\u7edc\uff0c\u8bb0\u4e3aG''(V'',E'')\u3002 \u6839\u636e\u5c42\u6b21\u7f51\u7edc\u5b9a\u4e49\uff0c\u5c42\u6b21\u7f51\u7edc\u4e2d\u4efb\u610f\u7684\u4e00\u6761\u5f27 \uff0c\u6709\u6ee1\u8db3level(u)+1 == level(v)\uff0c\u8fd9\u6761\u5f27\u4e5f\u53eb\u5141\u8bb8\u5f27\u3002\u76f4\u89c2\u7684\u8bf4\uff0c\u5c42\u6b21\u7f51\u7edc\u662f\u5efa\u7acb\u5728\u6b8b\u7559\u7f51\u7edc\u57fa\u7840\u4e4b\u4e0a\u7684\u4e00\u5f20\u201c\u6700\u77ed\u8def\u5f84\u56fe\u201d\u3002\u4ece\u6e90\u70b9\u5f00\u59cb\uff0c\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u6cbf\u7740\u8fb9\u4e0d\u7ba1\u600e\u4e48\u8d70\uff0c\u5230\u8fbe\u4e00\u4e2a\u7ec8\u70b9\u4e4b\u540e\uff0c\u7ecf\u8fc7\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u7ec8\u70b9\u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u3002 2.2 Dinic\u7b97\u6cd5\u7684\u601d\u60f3 \u00b6 Dinic\u7b97\u6cd5\u7684\u601d\u60f3\u4e5f\u662f\u5206\u9636\u6bb5\u5730\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u589e\u5e7f\u3002\u5b83\u4e0e\u6700\u77ed\u589e\u5e7f\u8def\u7b97\u6cd5\u4e0d\u540c\u4e4b\u5904\u662f\uff1a\u6700\u77ed\u589e\u5e7f\u8def\u6bcf\u4e2a\u9636\u6bb5\u6267\u884c\u5b8c\u4e00\u6b21BFS\u589e\u5e7f\u540e\uff0c\u8981\u91cd\u65b0\u542f\u52a8BFS\u4ece\u6e90\u70b9Vs\u5f00\u59cb\u5bfb\u627e\u53e6\u4e00\u6761\u589e\u5e7f\u8def;\u800c\u5728Dinic\u7b97\u6cd5\u4e2d\uff0c\u53ea\u9700\u4e00\u6b21DFS\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u591a\u6b21\u589e\u5e7f\uff0c\u8fd9\u662fDinic\u7b97\u6cd5\u7684\u5de7\u5999\u4e4b\u5904\u3002Dinic\u7b97\u6cd5\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b: \uff081\uff09\u521d\u59cb\u5316\u5bb9\u91cf\u7f51\u7edc\u548c\u7f51\u7edc\u6d41\u3002 \uff082\uff09\u6784\u9020\u6b8b\u7559\u7f51\u7edc\u548c\u5c42\u6b21\u7f51\u7edc\uff0c\u82e5\u6c47\u70b9\u4e0d\u518d\u5c42\u6b21\u7f51\u7edc\u4e2d\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\u3002 \uff083\uff09\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u7528\u4e00\u6b21DFS\u8fc7\u7a0b\u8fdb\u884c\u589e\u5e7f\uff0cDFS\u6267\u884c\u5b8c\u6bd5\uff0c\u8be5\u9636\u6bb5\u7684\u589e\u5e7f\u4e5f\u6267\u884c\u5b8c\u6bd5\u3002 \uff084\uff09\u8f6c\u6b65\u9aa4\uff082\uff09\u3002 \u5728Dinic\u7684\u7b97\u6cd5\u6b65\u9aa4\u4e2d\uff0c\u53ea\u6709\u7b2c\uff083\uff09\u6b65\u4e0e\u6700\u77ed\u589e\u5e7f\u8def\u76f8\u540c\u3002\u5728\u4e0b\u9762\u5b9e\u4f8b\u4e2d\uff0c\u5c06\u4f1a\u53d1\u73b0DFS\u8fc7\u7a0b\u5c06\u4f1a\u4f7f\u7b97\u6cd5\u7684\u6548\u7387\u6709\u975e\u5e38\u5927\u7684\u63d0\u9ad8\u3002 DFS\u589e\u5e7f\u8fc7\u7a0b\u793a\u610f\uff1a 2.3 Dinic\u7b97\u6cd5\u5b9e\u73b0 \u00b6 #include <iostream> #include <cstdlib> #include <cstdio> #include <cstring> #include <string> #include <algorithm> #include <queue> using namespace std ; const int MAXN = 210 ; const int MAXM = 210 * 210 ; const int INF = 0x3f3f3f3f ; struct Edge { int v , f ; int next ; } edge [ MAXM ]; int n , m ; int cnt ; int first [ MAXN ], level [ MAXN ]; int q [ MAXN ]; void init () { cnt = 0 ; memset ( first , - 1 , sizeof ( first )); } void read_graph ( int u , int v , int f ) { edge [ cnt ]. v = v , edge [ cnt ]. f = f ; edge [ cnt ]. next = first [ u ], first [ u ] = cnt ++ ; edge [ cnt ]. v = u , edge [ cnt ]. f = 0 ; //\u589e\u52a0\u4e00\u6761\u53cd\u5411\u5f27\uff0c\u5bb9\u91cf\u4e3a0 edge [ cnt ]. next = first [ v ], first [ v ] = cnt ++ ; } int bfs ( int s , int t ) //\u6784\u5efa\u5c42\u6b21\u7f51\u7edc { memset ( level , 0 , sizeof ( level )); level [ s ] = 1 ; int front = 0 , rear = 1 ; q [ front ] = s ; while ( front < rear ) { int x = q [ front ++ ]; if ( x == t ) return 1 ; for ( int e = first [ x ]; e != - 1 ; e = edge [ e ]. next ) { int v = edge [ e ]. v , f = edge [ e ]. f ; if ( ! level [ v ] && f ) { level [ v ] = level [ x ] + 1 ; q [ rear ++ ] = v ; } } } return 0 ; } int dfs ( int u , int maxf , int t ) { if ( u == t ) return maxf ; int ret = 0 ; for ( int e = first [ u ]; e != - 1 ; e = edge [ e ]. next ) { int v = edge [ e ]. v , f = edge [ e ]. f ; if ( level [ u ] + 1 == level [ v ] && f ) { int Min = min ( maxf - ret , f ); f = dfs ( v , Min , t ); edge [ e ]. f -= f ; edge [ e ^ 1 ]. f += f ; ret += f ; if ( ret == maxf ) return ret ; } } return ret ; } int Dinic ( int s , int t ) //Dinic { int ans = 0 ; while ( bfs ( s , t )) ans += dfs ( s , INF , t ); return ans ; } \u53c2\u8003\u6587\u732e https://comzyh.com/blog/archives/568/ http://blog.csdn.net/wall_f/article/details/8207595 http://www.cnblogs.com/y-clever/p/6308820.html http://blog.csdn.net/u012914220/article/details/23865829 http://blog.csdn.net/pi9nc/article/details/23339111 http://www.nocow.cn/index.php/Dinic#.E7.AE.97.E6.B3.95.E6.B5.81.E7.A8.8B 2017ISAP \u7b97\u6cd5 \uff1a http://www.renfei.org/blog/isap.html 3. \u4e8c\u5206\u56fe \u00b6 \u7ed9\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u7740\u8272\uff0c\u76f8\u90bb\u7684\u9876\u70b9\u7740\u4e0d\u540c\u989c\u8272\uff0c\u9700\u8981\u7684\u6700\u5c11\u7684\u989c\u8272\u6570\uff0c\u53eb\u505a\u6700\u5c0f\u7740\u8272\u6570\u3002 \u6700\u5c0f\u7740\u8272\u6570\u662f2\u7684\u56fe\u53eb\u505a\u4e8c\u5206\u56fe\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u56fe\u4e2d\u70b9\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u7ec4\uff0c\u5e76\u4e14\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u8de8\u8d8a\u7ec4\u7684\u8fb9\u754c\uff0c\u5219\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u51c6\u786e\u5730\u8bf4\uff1a\u628a\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u96c6 U \u548cV \uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u8fde\u63a5U\u3001V\u4e2d\u7684\u9876\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\uff0c\u5219\u6b64\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u7b49\u4ef7\u5b9a\u4e49\u662f\uff1a\u4e0d\u542b\u6709\u300c\u542b\u5947\u6570\u6761\u8fb9\u7684\u73af\u300d\u7684\u56fe\u3002\u56fe 1 \u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e3a\u4e86\u6e05\u6670\uff0c\u6211\u4eec\u4ee5\u540e\u90fd\u628a\u5b83\u753b\u6210\u56fe 2 \u7684\u5f62\u5f0f\u3002 \u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0c\u53ea\u9700\u8981\u4ece\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u904d\u5386\u8fd9\u4e2a\u56fe\uff0c\u7ed9\u5f53\u524d\u8282\u70b9\u548c\u76f8\u90bb\u8282\u70b9\u7136\u4e0d\u540c\u7684\u8272\uff0c\u7136\u540e\u5224\u65ad\u6709\u6ca1\u6709\u76f8\u90bb\u7684\u8282\u70b9\u540c\u8272\u5373\u53ef\u3002 3.1 \u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u548c\u5b8c\u7f8e\u5339\u914d \u00b6 http://www.renfei.org/blog/bipartite-matching.html \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u3002\u56fe 4 \u662f\u4e00\u4e2a\u6700\u5927\u5339\u914d\uff0c\u5b83\u5305\u542b 4 \u6761\u5339\u914d\u8fb9\u3002 \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u67d0\u4e2a\u5339\u914d\u4e2d\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\u56fe 4 \u662f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\u663e\u7136\uff0c\u5b8c\u7f8e\u5339\u914d\u4e00\u5b9a\u662f\u6700\u5927\u5339\u914d\uff08\u5b8c\u7f8e\u5339\u914d\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u5df2\u7ecf\u5339\u914d\uff0c\u6dfb\u52a0\u4e00\u6761\u65b0\u7684\u5339\u914d\u8fb9\u4e00\u5b9a\u4f1a\u4e0e\u5df2\u6709\u7684\u5339\u914d\u8fb9\u51b2\u7a81\uff09\u3002\u4f46\u5e76\u975e\u6bcf\u4e2a\u56fe\u90fd\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff1a\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5982\u679c\u5728\u67d0\u4e00\u5bf9\u7537\u5b69\u548c\u5973\u5b69\u4e4b\u95f4\u5b58\u5728\u76f8\u8fde\u7684\u8fb9\uff0c\u5c31\u610f\u5473\u7740\u4ed6\u4eec\u5f7c\u6b64\u559c\u6b22\u3002\u662f\u5426\u53ef\u80fd\u8ba9\u6240\u6709\u7537\u5b69\u548c\u5973\u5b69\u4e24\u4e24\u914d\u5bf9\uff0c\u4f7f\u5f97\u6bcf\u5bf9\u513f\u90fd\u4e92\u76f8\u559c\u6b22\u5462\uff1f\u56fe\u8bba\u4e2d\uff0c\u8fd9\u5c31\u662f\u5b8c\u7f8e\u5339\u914d\u95ee\u9898\u3002\u5982\u679c\u6362\u4e00\u4e2a\u8bf4\u6cd5\uff1a\u6700\u591a\u6709\u591a\u5c11\u4e92\u76f8\u559c\u6b22\u7684\u7537\u5b69/\u5973\u5b69\u53ef\u4ee5\u914d\u5bf9\u513f\uff1f\u8fd9\u5c31\u662f\u6700\u5927\u5339\u914d\u95ee\u9898\u3002 \u57fa\u672c\u6982\u5ff5\u8bb2\u5b8c\u4e86\u3002\u6c42\u89e3\u6700\u5927\u5339\u914d\u95ee\u9898\u7684\u4e00\u4e2a\u7b97\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4e0b\u9762\u8bb2\u7684\u6982\u5ff5\u90fd\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u670d\u52a1\u3002 \u4ea4\u66ff\u8def \uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def \uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002\u4f8b\u5982\uff0c\u56fe 5 \u4e2d\u7684\u4e00\u6761\u589e\u5e7f\u8def\u5982\u56fe 6 \u6240\u793a\uff08\u56fe\u4e2d\u7684\u5339\u914d\u70b9\u5747\u7528\u7ea2\u8272\u6807\u51fa\uff09\uff1a \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\uff08\u8fd9\u662f\u589e\u5e7f\u8def\u5b9a\u7406\uff09\u3002\u5308\u7259\u5229\u7b97\u6cd5\u6b63\u662f\u8fd9\u4e48\u505a\u7684\u3002\u5728\u7ed9\u51fa\u5308\u7259\u5229\u7b97\u6cd5 DFS \u548c BFS \u7248\u672c\u7684\u4ee3\u7801\u4e4b\u524d\uff0c\u5148\u8bb2\u4e00\u4e0b\u5308\u7259\u5229\u6811\u3002 **\u5308\u7259\u5229\u6811**\u4e00\u822c\u7531 BFS \u6784\u9020\uff08\u7c7b\u4f3c\u4e8e BFS \u6811\uff09\u3002\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\u8fd0\u884c BFS\uff08\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5fc5\u987b\u8d70\u4ea4\u66ff\u8def\uff09\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62\u3002\u4f8b\u5982\uff0c\u7531\u56fe 7\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u56fe 8 \u7684\u4e00\u68f5 BFS \u6811\uff1a","title":"\u7f51\u7edc\u6d41"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#_1","text":"\u6709\u4e00\u4e2a\u81ea\u6765\u6c34\u7ba1\u9053\u8fd0\u8f93\u7cfb\u7edf\uff0c\u8d77\u70b9\u662fs\uff0c\u7ec8\u70b9\u662ft\uff0c\u9014\u4e2d\u7ecf\u8fc7\u7684\u7ba1\u9053\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u7684\u5bb9\u91cf\u3002\u6c42\u4eces\u5230t\u7684\u6700\u5927\u6c34\u6d41\u91cf\u662f\u591a\u5c11\uff1f \u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u662f\u7f51\u7edc\u7684\u53e6\u4e00\u4e2a\u57fa\u672c\u95ee\u9898\u3002\u8bb8\u591a\u7cfb\u7edf\u5305\u542b\u4e86\u6d41\u91cf\u95ee\u9898\u3002\u4f8b\u5982\u4ea4\u901a\u7cfb\u7edf\u6709\u8f66\u6d41\u91cf\uff0c\u91d1\u878d\u7cfb\u7edf\u6709\u73b0\u91d1\u6d41\uff0c\u63a7\u5236\u7cfb\u7edf\u6709\u4fe1\u606f\u6d41\u7b49\u3002\u8bb8\u591a\u6d41\u95ee\u9898\u4e3b\u8981\u662f\u786e\u5b9a\u8fd9\u7c7b\u7cfb\u7edf\u7f51\u7edc\u6240\u80fd\u627f\u53d7\u7684\u6700\u5927\u6d41\u91cf\u4ee5\u53ca\u5982\u4f55\u8fbe\u5230\u8fd9\u4e2a\u6700\u5927\u6d41\u91cf\u3002 \u5148\u4ecb\u7ecd\u6700\u5927\u6d41\u95ee\u9898\u989d\u4e00\u822c\u6a21\u578b\u3002 \u5982\u56fe\uff0c\u8981\u6c42\u4eces\u5230t\u7684\u6700\u5927\u6d41\u662f\u591a\u5c11\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u770b\u51fa\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\u662f4\uff0cs\u21921 == 2 \u5e76\u4e14 s\u21922 = 2. \u7ebf\u6bb5\u4e0a\u7684\u6570\u636e\u8868\u793a\u7ebf\u6bb5\u4e0a\u7684\u6700\u5927\u5bb9\u91cf\uff0cs\u8868\u793a\u8d77\u70b9\uff0c\u672f\u8bed\u53eb\u505a\u6e90\u70b9(source),t\u662f\u7ec8\u70b9\uff0c\u672f\u8bed\u53eb\u505a\u6c47\u70b9(sink),\u8fb9\u7684\u5bb9\u91cf\u8bb0\u4f5c c c ,\u5b9e\u9645\u8fb9\u4e0a\u6d41\u8fc7\u7684\u5177\u4f53\u7684\u503c\u8bb0\u4f5c f f . \u6700\u5927\u6d41\u95ee\u9898\u5c31\u662f\u6700\u5927\u5316\u4eces\u51fa\u53d1\u7684\u6d41\u91cf\u3002 \u6d41\u7f51\u7edc\u7684\u503c \u6709\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u63d0\u5230\u6d41\u7f51\u7edc\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u65f6\u5019\u662f\u6307\u6240\u6709\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u6d41\u4e4b\u548c\u3002","title":"\u7f51\u7edc\u6d41"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#1-ford-fulkerson","text":"\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u6bd4\u8f83\u5e38\u89c1\u7684\u662fFord-Fulkerson\u89e3\u6cd5\u3002\u8be5\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u4e09\u79cd\u91cd\u8981\u601d\u60f3\uff1a\u6b8b\u7559\u7f51\u7edc\uff0c\u589e\u5e7f\u8def\u5f84\u548c\u5272\u3002","title":"1. Ford-Fulkerson"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#11","text":"\u589e\u5e7f\u8def\u5f84\u53ef\u4ee5\u770b\u505a\u662f\u4ece\u6e90\u70b9s\u5230\u6c47\u70b9t\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6cbf\u8be5\u8def\u5f84\u53ef\u4ee5\u538b\u5165\u66f4\u591a\u7684\u6d41\uff0c\u4ece\u800c\u589e\u52a0\u6d41\u7684\u503c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u4e0b\uff0c\u5982\u56fe\u6240\u793a\uff0c\u6bcf\u6761\u7ea2\u7ebf\u5c31\u4ee3\u8868\u4e86\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u5f53\u524ds\u5230t\u7684\u6d41\u91cf\u4e3a3\u3002 \u5f53\u7136\u8fd9\u5e76\u4e0d\u662f\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u6839\u636e\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u7684\u7b97\u6cd5\u6211\u4eec\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u6700\u7ec8\u7684\u6700\u5927\u6d41\u7f51\u7edc\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6700\u5927\u6d41\u4e3a4\u3002","title":"1.1 \u589e\u5e7f\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#12-residual-graph","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u6d41\uff0c\u9664\u4e86\u8fd9\u4e2a\u6d41\u4e4b\u5916\uff0c\u7f51\u7edc\u4e0a\u8fd8\u80fd\u5bb9\u7eb3\u7684\u6d41\u53eb\u505a\u8fd9\u4e2a\u6d41\u5bf9\u5e94\u7684\u6b8b\u7559\u7f51\u7edc\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u6b8b\u7559\u7f51\u7edc\u7406\u89e3\u4e3a\u6574\u4e2a\u7f51\u7edc\u51cf\u53bb\u5f53\u524d\u7684\u6d41\u7f51\u7edc\u3002 \u6b8b\u7559\u7f51\u7edc\u7684\u5177\u4f53\u8ba1\u7b97\u65b9\u6cd5\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6d41\u7f51\u7edcG\u548c\u4e00\u4e2a\u6d41\uff0c\u6d41\u7684\u6b8b\u7559\u7f51 G_f G_f \u62e5\u6709\u4e0e\u539f\u7f51\u76f8\u540c\u7684\u9876\u70b9\u3002\u539f\u6d41\u7f51\u7edc\u4e2d\u6bcf\u6761\u8fb9\u5c06\u5bf9\u5e94\u6b8b\u7559\u7f51\u4e2d\u4e00\u6761\u6216\u8005\u4e24\u6761\u8fb9\uff0c\u5bf9\u4e8e\u539f\u6d41\u7f51\u7edc\u4e2d\u7684\u4efb\u610f\u8fb9(u, v)\uff0c\u6d41\u91cf\u4e3af(u, v)\uff0c\u5bb9\u91cf\u4e3ac(u, v)\uff1a - \u5982\u679cf(u, v) > 0\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3af(u, v)\u7684\u8fb9(v, u); - \u5982\u679cf(u, v) < c(u, v)\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3ac(u, v) - f(u, v)\u7684\u8fb9(u, v)\u3002 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6d41\u90fd\u4e3a0\uff0c\u6b64\u65f6\u6ee1\u8db3\u7b2c\u4e8c\u6761\uff0cf(u,v) = 0 < c(u,v).\u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e0e\u539f\u6765\u7684\u7f51\u7edc\u76f8\u540c\u3002 \u5728\u5f53\u524d\u7684\u6b8b\u7559\u7f51\u7edc\uff08\u4e0e\u539f\u7f51\u7edc\u76f8\u540c\uff09\u968f\u610f\u786e\u5b9a\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u5047\u8bbe\u662f 0-->1-->3-->5 \uff0c\u8be5\u8def\u5f84\u7684\u6700\u5927\u6d41\u91cf\u662f2. f(0,1)>0, \u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e00\u6761\u8fb9(1,0) = 2, f(0,1) = c(0,1), \u6240\u4ee5\u6ca1\u6709\u4ece0\u52301\u7684\u8fb9\u3002 c(1,3)>f(1,3)>0, \u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e24\u6761\u8fb9,(1,3)=3-2=1, (3,1)=f(1,3)=2. c(3,5) = f(3,5)>0, \u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e00\u6761\u8fb9\uff0c(5,2) = 2. \u6574\u4e2a\u6b8b\u7559\u7f51\u7edc\u7684\u53d8\u5316\u5982\u6709\u56fe\u6240\u793a\u3002 \u518d\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u8fd9\u6b21\u6211\u4eec\u627e 0-->2-->4-->5 ,\u6700\u5927\u6d41\u91cf\u662f1. \u6309\u7167\u6b8b\u7559\u7f51\u7edc\u7684\u89c4\u5219\uff0c\u8ba1\u7b97\u4e4b\u540e\u7684\u6b8b\u7559\u7f51\u7edc\u5982\u53f3\u56fe\u6240\u793a\u3002 \u7ee7\u7eed\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u53ef\u4ee5\u5bfb\u627e\u5230\u4e00\u6761 0-->2-->3-->1-->4-->5 \u7684\u8def\u5f84\uff0c\u6ce8\u610f 3-->1 \u5c31\u662f\u539f\u6765\u7684 1-->3 \u51cf\u53bb1\uff0c\u6700\u5927\u7684\u6d41\u91cf\u662f1. \u6839\u636e\u4e0a\u9762\u7684\u89c4\u5219\u8c03\u6574\u6b8b\u7559\u7f51\u7edc\uff0c\u5982\u53f3\u56fe\u6240\u793a\u3002 \u6b64\u65f6\uff0c\u6b8b\u7559\u7f51\u7edc\u4e2d\u518d\u4e5f\u627e\u4e0d\u5230\u4efb\u4f55\u4e00\u6761\u4ece0\u52305\u7684\u589e\u5e7f\u8def\u5f84\uff0c\u6240\u4ee5\u8fc7\u7a0b\u7ed3\u675f\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u5927\u6d41\u3002\u4e0a\u56fe\u5de6\u8fb9\u6240\u793a\u7684\u5c31\u662f\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u548c\u6211\u4eec\u6700\u521d\u7684\u76f4\u89c2\u5370\u8c61\u662f\u4e00\u6837\u7684\u3002","title":"1.2 \u6b8b\u7559\u7f51\u7edc(Residual Graph)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#13","text":"\u8bbe\u6574\u4e2a\u56fe\u7684\u9876\u70b9\u96c6\u5408\u662fV\u3002\u6240\u8c13\u56fe\u7684\u5272\uff0c\u6307\u7684\u662f\u8fb9\u7684\u96c6\u5408\uff0c\u6307\u7684\u662f\u5bf9\u4e8e\u67d0\u4e2a\u9876\u70b9\u96c6\u5408 S \\subseteq V S \\subseteq V ,\u4eceS\u51fa\u53d1\u6307\u5411S\u5916\u90e8\u7684\u90a3\u4e9b\u8fb9\u7684\u96c6\u5408\uff0c\u8bb0\u4e3a\u5272(S,V\\S). \u6240\u4ee5\u5272\u662f\u6307\u4e00\u4e9b\u8fb9\u7684\u96c6\u5408\u3002 \u8fd9\u4e9b\u8fb9\u4e0a\u7684\u5bb9\u91cf\u4e4b\u548c\u88ab\u79f0\u4e3a\u5272\u7684\u5bb9\u91cf\u3002 \u6700\u5c0f\u5272\u95ee\u9898 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f51\u7edc\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u4eces\u5230t\u7684\u8def\u5f84\uff0c\u9700\u8981\u5220\u53bb\u7684\u8fb9\u7684\u603b\u5bb9\u91cf\u6700\u5c0f\u662f\u591a\u5c11\u3002\u5176\u4e2d s \\in S s \\in S \u4e14 t \\in {V/S} t \\in {V/S} . \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406 \u4e00\u4e2a\u7f51\u4e2d\u6240\u6709\u6d41\u4e2d\u7684\u6700\u5927\u503c\u7b49\u4e8e\u6240\u6709\u5272\u4e2d\u7684\u6700\u5c0f\u5bb9\u91cf\u3002 \u5176\u5b9e\u8fd9\u4e2a\u5b9a\u7406\u5f88\u5bb9\u6613\u4ece\u9053\u7406\u4e0a\u60f3\u660e\u767d\uff0c\u4e00\u65e6\u8d85\u51fa\u6700\u5c0f\u5272\uff0c\u4fbf\u603b\u6709\u8fb9\u8d85\u51fa\u4e86\u8fb9\u7684\u5bb9\u91cf\uff0c\u4e5f\u5c31\u4e0d\u5b58\u5728\u53ef\u884c\u7684\u6d41\u4e86\u3002 \u7528\u4e0a\u9762\u7528\u8fc7\u7684\u56fe\u6765\u8bf4\u660e\u4e00\u4e0b\u5272\u7684\u76f8\u5173\u6982\u5ff5\uff1a \u5982\u56fe\uff0c\u6d41\u7f51\u7edc\u7684\u4e00\u4e2a\u5272\u4e3as:{0,1,2},t:{3,4,5}, \u901a\u8fc7\u5272\u7684\u6d41\u91cf\u5b9a\u4e49\u4e3a\u4eces\u5230t\u7684\u6240\u6709\u6d41\u91cf\u4e4b\u548c(\u4ecet\u5230s\u7684\u6d41\u91cf\u8bb0\u4f5c\u8d1f\u503c)\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5272\u7684\u6d41\u91cf\u662f\uff1a2+1=3 \u5272\u7684\u5bb9\u91cf\u8bb0\u4f5c\u6240\u6709\u4eces\u5230t\u7684\u8fb9\u7684\u5bb9\u91cf\u4e4b\u548c\uff0c\u6240\u4ee5\u662f3+1+1+1 = 6. \u4ece\u4e0a\u9762\u7684\u5b9a\u4e49\u53ef\u4ee5\u7b80\u5355\u7684\u5f97\u5230\u4e00\u70b9\uff0c\u4efb\u4f55\u4e00\u4e2a\u5272\u7684\u6d41\u91cf\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u5272\u7684\u5bb9\u91cf\u3002 \u5c06\u4e0a\u9762\u7684\u5272\u7684\u56fe\u5f62\u589e\u52a0\u4e00\u4e2a\u865a\u62df\u7684\u8282\u70b9s'\uff0c\u7ed8\u5236\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\uff1af1\u662f\u6d41\u5165S\u7684\u6d41\u91cf\uff0cf2\u662f\u4eceS\u5230T\u7684\u6d41\u91cf\uff0cf3\u662f\u4eceT\u5230S\u7684\u6d41\u91cf\u3002\u4e00\u4e2a\u8282\u70b9\u7684\u6d41\u5165\u6d41\u91cf\u7b49\u4e8e\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u6240\u4ee5\u6709f2 = f1 + f3. \u4ece\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u6e05\u6670\u7684\u770b\u51fa\uff0c\u6d41\u7f51\u7edc\u7684\u503c\u7b49\u4e8ef1, \u800c\u5272\u7684\u6d41\u91cf\u7b49\u4e8ef2-f3. \u6240\u4ee5\u6709\u6d41\u7f51\u7edc\u7684\u503c\u7b49\u4e8e\u5272\u7684\u6d41\u91cf\u503c\u3002 \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u5b9a\u7406\u7684\u8bc1\u660e\uff1a http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html","title":"1.3 \u5272"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#14-ford-fulkerson","text":"\u4e0a\u9762\u4ecb\u7ecd\u6b8b\u7559\u7f51\u7edc\u7684\u65f6\u5019\u5df2\u7ecf\u5c06\u7684\u5f88\u6e05\u695a\u4e86\uff0cFord-Fulkerson\u7b97\u6cd5\u5c31\u662f\u4e0d\u65ad\u66f4\u65b0\u6b8b\u7559\u7f51\u7edc\uff0c\u4ece\u4e2d\u627e\u51fa\u53ef\u884c\u7684\u6d41\uff0c\u76f4\u5230\u65e0\u6cd5\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u51fa\u53ef\u884c\u7684\u6d41\u4e3a\u6b62\u3002 \u6240\u4ee5\uff0c\u7b80\u5355\u7684\u7b97\u6cd5\u6b65\u9aa4\u53ef\u4ee5\u8868\u8ff0\u4e3a\uff1a \u521d\u59cb\u5316\u6d41flow = 0; while(condition){ flow += path-flow } \u6b64\u5904\u7684condition\u4e3a \u5b58\u5728\u4eces\u5230t\u7684\u589e\u5e7f\u8def\u5f84\uff0cpath-flow\u4e3a\u8be5\u589e\u5e7f\u8def\u5f84\u7684\u503c\u3002 \u8f93\u51faflow. \u53ef\u4ee5\u770b\u51fa\uff0c\u7b97\u6cd5\u7684\u4e3b\u8981\u90e8\u5206\u5728\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u4e0a\u9762\u3002 \u53c2\u8003\u6587\u7ae0\uff1a http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/ \u7a0b\u5e8f\u4ee5\u8fd9\u4e2a\u5b9e\u4f8b\u4f5c\u4e3a\u8f93\u5165\uff1a // C++ program for implementation of Ford Fulkerson algorithm #include <iostream> #include <limits.h> #include <string.h> #include <queue> using namespace std ; // Number of vertices in given graph #define V 6 /* Returns true if there is a path from source 's' to sink 't' in residual graph. Also fills parent[] to store the path */ // \u4f7f\u7528\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u641c\u7d22\u6b8b\u7559\u7f51\u7edc\u4e4b\u4e2d\u662f\u5426\u6709\u589e\u5e7f\u8def\u5f84 bool bfs ( int rGraph [ V ][ V ], int s , int t , int parent []) { // Create a visited array and mark all vertices as not visited bool visited [ V ]; memset ( visited , 0 , sizeof ( visited )); // Create a queue, enqueue source vertex and mark source vertex // as visited queue < int > q ; q . push ( s ); visited [ s ] = true ; parent [ s ] = - 1 ; // Standard BFS Loop \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22 while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int v = 0 ; v < V ; v ++ ) { if ( visited [ v ] == false && rGraph [ u ][ v ] > 0 ) { q . push ( v ); parent [ v ] = u ; visited [ v ] = true ; } } } // If we reached sink in BFS starting from source, then return // true, else false return ( visited [ t ] == true ); } // Returns the maximum flow from s to t in the given graph int fordFulkerson ( int graph [ V ][ V ], int s , int t ) { int u , v ; // Create a residual graph and fill the residual graph with // given capacities in the original graph as residual capacities // in residual graph int rGraph [ V ][ V ]; // Residual graph where rGraph[i][j] indicates // residual capacity of edge from i to j (if there // is an edge. If rGraph[i][j] is 0, then there is not) // \u521d\u59cb\u5316\u6b8b\u7559\u7f51\u7edc\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6b8b\u7559\u7f51\u7edc\u548c\u521d\u59cb\u7f51\u7edc\u4e00\u81f4\uff0c\u89c1\u4e0a\u9762\u7684\u8bb2\u89e3 for ( u = 0 ; u < V ; u ++ ) for ( v = 0 ; v < V ; v ++ ) rGraph [ u ][ v ] = graph [ u ][ v ]; int parent [ V ]; // This array is filled by BFS and to store path int max_flow = 0 ; // There is no flow initially // Augment the flow while tere is path from source to sink //bfs(rGraph, s, t, parent) \u5b9e\u73b0\u4e86\u5224\u65ad\u6b8b\u7559\u7f51\u7edc\u4e2d\u662f\u5426\u5b58\u5728\u589e\u5e7f\u8def\u5f84 while ( bfs ( rGraph , s , t , parent )) { // Find minimum residual capacity of the edges along the // path filled by BFS. Or we can say find the maximum flow // through the path found. int path_flow = INT_MAX ; //\u627e\u5230path_flow\u7684\u503c\uff0cpath_flow\u7684\u503c\u7b49\u4e8e\u589e\u5e7f\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u8fb9\u7684\u5bb9\u91cf\u3002 for ( v = t ; v != s ; v = parent [ v ]) { u = parent [ v ]; path_flow = min ( path_flow , rGraph [ u ][ v ]); } // update residual capacities of the edges and reverse edges // along the path //\u66f4\u65b0\u6b8b\u7559\u7f51\u7edc for ( v = t ; v != s ; v = parent [ v ]) { u = parent [ v ]; rGraph [ u ][ v ] -= path_flow ; rGraph [ v ][ u ] += path_flow ; } // Add path flow to overall flow max_flow += path_flow ; } // Return the overall flow return max_flow ; } // Driver program to test above functions int main () { // Let us create a graph shown in the above example int graph [ V ][ V ] = { { 0 , 16 , 13 , 0 , 0 , 0 }, { 0 , 0 , 10 , 12 , 0 , 0 }, { 0 , 4 , 0 , 0 , 14 , 0 }, { 0 , 0 , 9 , 0 , 0 , 20 }, { 0 , 0 , 0 , 7 , 0 , 4 }, { 0 , 0 , 0 , 0 , 0 , 0 } }; cout << \"The maximum possible flow is \" << fordFulkerson ( graph , 0 , 5 ); return 0 ; } \u4ee5\u4e0a\u4ee3\u7801\u641c\u7d22\u589e\u5e7f\u8def\u5f84\u4f7f\u7528\u7684BFS\uff0c\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u4f7f\u7528DFS\uff0cPFS\u7b49\u65b9\u6cd5\uff0c\u53c2\u8003\u6587\u7ae0\uff1a http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html \u53c2\u8003\u6587\u732e http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html http://www.acmerblog.com/ford-fulkerson-6135.html http://blog.csdn.net/smartxxyx/article/details/9293805 http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/","title":"1.4 Ford-Fulkerson\u7b97\u6cd5\u7684\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#2-dinic","text":"Dinic\u662f\u4e00\u79cd\u6bd4Ford-Fulkerson\u6548\u7387\u66f4\u9ad8\u7684\u7b97\u6cd5\uff0c\u5f53\u6570\u636e\u8f83\u5927\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528Dinic\u7b97\u6cd5\u3002","title":"2. Dinic\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#21","text":"\u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\uff0c\u628a\u9876\u70b9\u8ddd\u79bb\u6e90\u70b9\u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u8282\u70b9\u7684\u5c42\u6b21\uff0c\u6e90\u70b9\u7684\u5c42\u6b21\u4e3a0\uff0c\u548c\u6e90\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u8282\u70b9\u7684\u5c42\u6b21\u662f1. \u5206\u5c42 \uff1a \u5c06\u6b8b\u7559\u7f51\u7edc\u4e2d\u6240\u6709\u8282\u70b9\u7684\u5c42\u6b21\u6807\u8bb0\u51fa\u6765\u7684\u8fc7\u7a0b\u3002\uff08\u6ce8\u610f\u4e0d\u662f\u6240\u6709\u7684\u7f51\u7edc\u90fd\u53ef\u4ee5\u5206\u5c42\uff09 \u5c42\u6b21\u7f51\u7edc \uff1a\u5bf9\u6b8b\u7559\u7f51\u7edc\u8fdb\u884c\u5206\u5c42\u540e\uff0c\u5220\u53bb\u6bd4\u6c47\u70b9Vt\u5c42\u6b21\u66f4\u9ad8\u7684\u9876\u70b9\u548c\u4e0e\u6c47\u70b9Vt\u540c\u5c42\u7684\u9876\u70b9(\u4fdd\u7559Vt)\uff0c\u5e76\u5220\u53bb\u8fd9\u4e9b\u9876\u70b9\u76f8\u5173\u8054\u7684\u5f27\uff0c\u518d\u5220\u53bb\u4ece\u67d0\u5c42\u9876\u70b9\u6307\u5411\u540c\u5c42\u9876\u70b9\u548c\u4f4e\u5c42\u9876\u70b9\u7684\u5f27\uff0c\u6240\u5269\u4f59\u7684\u5404\u6761\u5f27\u7684\u5bb9\u91cf\u4e0e\u6b8b\u7559\u7f51\u7edc\u4e2d\u7684\u5bb9\u91cf\u76f8\u540c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7f51\u7edc\u5c31\u662f\u6b8b\u7559\u7f51\u7edc\u7684\u5b50\u7f51\u7edc\uff0c\u79f0\u4e3a\u5c42\u6b21\u7f51\u7edc\uff0c\u8bb0\u4e3aG''(V'',E'')\u3002 \u6839\u636e\u5c42\u6b21\u7f51\u7edc\u5b9a\u4e49\uff0c\u5c42\u6b21\u7f51\u7edc\u4e2d\u4efb\u610f\u7684\u4e00\u6761\u5f27 \uff0c\u6709\u6ee1\u8db3level(u)+1 == level(v)\uff0c\u8fd9\u6761\u5f27\u4e5f\u53eb\u5141\u8bb8\u5f27\u3002\u76f4\u89c2\u7684\u8bf4\uff0c\u5c42\u6b21\u7f51\u7edc\u662f\u5efa\u7acb\u5728\u6b8b\u7559\u7f51\u7edc\u57fa\u7840\u4e4b\u4e0a\u7684\u4e00\u5f20\u201c\u6700\u77ed\u8def\u5f84\u56fe\u201d\u3002\u4ece\u6e90\u70b9\u5f00\u59cb\uff0c\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u6cbf\u7740\u8fb9\u4e0d\u7ba1\u600e\u4e48\u8d70\uff0c\u5230\u8fbe\u4e00\u4e2a\u7ec8\u70b9\u4e4b\u540e\uff0c\u7ecf\u8fc7\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u7ec8\u70b9\u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u3002","title":"2.1 \u9876\u70b9\u7684\u5c42\u6b21"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#22-dinic","text":"Dinic\u7b97\u6cd5\u7684\u601d\u60f3\u4e5f\u662f\u5206\u9636\u6bb5\u5730\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u589e\u5e7f\u3002\u5b83\u4e0e\u6700\u77ed\u589e\u5e7f\u8def\u7b97\u6cd5\u4e0d\u540c\u4e4b\u5904\u662f\uff1a\u6700\u77ed\u589e\u5e7f\u8def\u6bcf\u4e2a\u9636\u6bb5\u6267\u884c\u5b8c\u4e00\u6b21BFS\u589e\u5e7f\u540e\uff0c\u8981\u91cd\u65b0\u542f\u52a8BFS\u4ece\u6e90\u70b9Vs\u5f00\u59cb\u5bfb\u627e\u53e6\u4e00\u6761\u589e\u5e7f\u8def;\u800c\u5728Dinic\u7b97\u6cd5\u4e2d\uff0c\u53ea\u9700\u4e00\u6b21DFS\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u591a\u6b21\u589e\u5e7f\uff0c\u8fd9\u662fDinic\u7b97\u6cd5\u7684\u5de7\u5999\u4e4b\u5904\u3002Dinic\u7b97\u6cd5\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b: \uff081\uff09\u521d\u59cb\u5316\u5bb9\u91cf\u7f51\u7edc\u548c\u7f51\u7edc\u6d41\u3002 \uff082\uff09\u6784\u9020\u6b8b\u7559\u7f51\u7edc\u548c\u5c42\u6b21\u7f51\u7edc\uff0c\u82e5\u6c47\u70b9\u4e0d\u518d\u5c42\u6b21\u7f51\u7edc\u4e2d\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\u3002 \uff083\uff09\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u7528\u4e00\u6b21DFS\u8fc7\u7a0b\u8fdb\u884c\u589e\u5e7f\uff0cDFS\u6267\u884c\u5b8c\u6bd5\uff0c\u8be5\u9636\u6bb5\u7684\u589e\u5e7f\u4e5f\u6267\u884c\u5b8c\u6bd5\u3002 \uff084\uff09\u8f6c\u6b65\u9aa4\uff082\uff09\u3002 \u5728Dinic\u7684\u7b97\u6cd5\u6b65\u9aa4\u4e2d\uff0c\u53ea\u6709\u7b2c\uff083\uff09\u6b65\u4e0e\u6700\u77ed\u589e\u5e7f\u8def\u76f8\u540c\u3002\u5728\u4e0b\u9762\u5b9e\u4f8b\u4e2d\uff0c\u5c06\u4f1a\u53d1\u73b0DFS\u8fc7\u7a0b\u5c06\u4f1a\u4f7f\u7b97\u6cd5\u7684\u6548\u7387\u6709\u975e\u5e38\u5927\u7684\u63d0\u9ad8\u3002 DFS\u589e\u5e7f\u8fc7\u7a0b\u793a\u610f\uff1a","title":"2.2 Dinic\u7b97\u6cd5\u7684\u601d\u60f3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#23-dinic","text":"#include <iostream> #include <cstdlib> #include <cstdio> #include <cstring> #include <string> #include <algorithm> #include <queue> using namespace std ; const int MAXN = 210 ; const int MAXM = 210 * 210 ; const int INF = 0x3f3f3f3f ; struct Edge { int v , f ; int next ; } edge [ MAXM ]; int n , m ; int cnt ; int first [ MAXN ], level [ MAXN ]; int q [ MAXN ]; void init () { cnt = 0 ; memset ( first , - 1 , sizeof ( first )); } void read_graph ( int u , int v , int f ) { edge [ cnt ]. v = v , edge [ cnt ]. f = f ; edge [ cnt ]. next = first [ u ], first [ u ] = cnt ++ ; edge [ cnt ]. v = u , edge [ cnt ]. f = 0 ; //\u589e\u52a0\u4e00\u6761\u53cd\u5411\u5f27\uff0c\u5bb9\u91cf\u4e3a0 edge [ cnt ]. next = first [ v ], first [ v ] = cnt ++ ; } int bfs ( int s , int t ) //\u6784\u5efa\u5c42\u6b21\u7f51\u7edc { memset ( level , 0 , sizeof ( level )); level [ s ] = 1 ; int front = 0 , rear = 1 ; q [ front ] = s ; while ( front < rear ) { int x = q [ front ++ ]; if ( x == t ) return 1 ; for ( int e = first [ x ]; e != - 1 ; e = edge [ e ]. next ) { int v = edge [ e ]. v , f = edge [ e ]. f ; if ( ! level [ v ] && f ) { level [ v ] = level [ x ] + 1 ; q [ rear ++ ] = v ; } } } return 0 ; } int dfs ( int u , int maxf , int t ) { if ( u == t ) return maxf ; int ret = 0 ; for ( int e = first [ u ]; e != - 1 ; e = edge [ e ]. next ) { int v = edge [ e ]. v , f = edge [ e ]. f ; if ( level [ u ] + 1 == level [ v ] && f ) { int Min = min ( maxf - ret , f ); f = dfs ( v , Min , t ); edge [ e ]. f -= f ; edge [ e ^ 1 ]. f += f ; ret += f ; if ( ret == maxf ) return ret ; } } return ret ; } int Dinic ( int s , int t ) //Dinic { int ans = 0 ; while ( bfs ( s , t )) ans += dfs ( s , INF , t ); return ans ; } \u53c2\u8003\u6587\u732e https://comzyh.com/blog/archives/568/ http://blog.csdn.net/wall_f/article/details/8207595 http://www.cnblogs.com/y-clever/p/6308820.html http://blog.csdn.net/u012914220/article/details/23865829 http://blog.csdn.net/pi9nc/article/details/23339111 http://www.nocow.cn/index.php/Dinic#.E7.AE.97.E6.B3.95.E6.B5.81.E7.A8.8B 2017ISAP \u7b97\u6cd5 \uff1a http://www.renfei.org/blog/isap.html","title":"2.3 Dinic\u7b97\u6cd5\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#3","text":"\u7ed9\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u7740\u8272\uff0c\u76f8\u90bb\u7684\u9876\u70b9\u7740\u4e0d\u540c\u989c\u8272\uff0c\u9700\u8981\u7684\u6700\u5c11\u7684\u989c\u8272\u6570\uff0c\u53eb\u505a\u6700\u5c0f\u7740\u8272\u6570\u3002 \u6700\u5c0f\u7740\u8272\u6570\u662f2\u7684\u56fe\u53eb\u505a\u4e8c\u5206\u56fe\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u56fe\u4e2d\u70b9\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u7ec4\uff0c\u5e76\u4e14\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u8de8\u8d8a\u7ec4\u7684\u8fb9\u754c\uff0c\u5219\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u51c6\u786e\u5730\u8bf4\uff1a\u628a\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u96c6 U \u548cV \uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u8fde\u63a5U\u3001V\u4e2d\u7684\u9876\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\uff0c\u5219\u6b64\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u7b49\u4ef7\u5b9a\u4e49\u662f\uff1a\u4e0d\u542b\u6709\u300c\u542b\u5947\u6570\u6761\u8fb9\u7684\u73af\u300d\u7684\u56fe\u3002\u56fe 1 \u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e3a\u4e86\u6e05\u6670\uff0c\u6211\u4eec\u4ee5\u540e\u90fd\u628a\u5b83\u753b\u6210\u56fe 2 \u7684\u5f62\u5f0f\u3002 \u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0c\u53ea\u9700\u8981\u4ece\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u904d\u5386\u8fd9\u4e2a\u56fe\uff0c\u7ed9\u5f53\u524d\u8282\u70b9\u548c\u76f8\u90bb\u8282\u70b9\u7136\u4e0d\u540c\u7684\u8272\uff0c\u7136\u540e\u5224\u65ad\u6709\u6ca1\u6709\u76f8\u90bb\u7684\u8282\u70b9\u540c\u8272\u5373\u53ef\u3002","title":"3. \u4e8c\u5206\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#31","text":"http://www.renfei.org/blog/bipartite-matching.html \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u3002\u56fe 4 \u662f\u4e00\u4e2a\u6700\u5927\u5339\u914d\uff0c\u5b83\u5305\u542b 4 \u6761\u5339\u914d\u8fb9\u3002 \u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u67d0\u4e2a\u5339\u914d\u4e2d\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\u56fe 4 \u662f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\u663e\u7136\uff0c\u5b8c\u7f8e\u5339\u914d\u4e00\u5b9a\u662f\u6700\u5927\u5339\u914d\uff08\u5b8c\u7f8e\u5339\u914d\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u5df2\u7ecf\u5339\u914d\uff0c\u6dfb\u52a0\u4e00\u6761\u65b0\u7684\u5339\u914d\u8fb9\u4e00\u5b9a\u4f1a\u4e0e\u5df2\u6709\u7684\u5339\u914d\u8fb9\u51b2\u7a81\uff09\u3002\u4f46\u5e76\u975e\u6bcf\u4e2a\u56fe\u90fd\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff1a\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5982\u679c\u5728\u67d0\u4e00\u5bf9\u7537\u5b69\u548c\u5973\u5b69\u4e4b\u95f4\u5b58\u5728\u76f8\u8fde\u7684\u8fb9\uff0c\u5c31\u610f\u5473\u7740\u4ed6\u4eec\u5f7c\u6b64\u559c\u6b22\u3002\u662f\u5426\u53ef\u80fd\u8ba9\u6240\u6709\u7537\u5b69\u548c\u5973\u5b69\u4e24\u4e24\u914d\u5bf9\uff0c\u4f7f\u5f97\u6bcf\u5bf9\u513f\u90fd\u4e92\u76f8\u559c\u6b22\u5462\uff1f\u56fe\u8bba\u4e2d\uff0c\u8fd9\u5c31\u662f\u5b8c\u7f8e\u5339\u914d\u95ee\u9898\u3002\u5982\u679c\u6362\u4e00\u4e2a\u8bf4\u6cd5\uff1a\u6700\u591a\u6709\u591a\u5c11\u4e92\u76f8\u559c\u6b22\u7684\u7537\u5b69/\u5973\u5b69\u53ef\u4ee5\u914d\u5bf9\u513f\uff1f\u8fd9\u5c31\u662f\u6700\u5927\u5339\u914d\u95ee\u9898\u3002 \u57fa\u672c\u6982\u5ff5\u8bb2\u5b8c\u4e86\u3002\u6c42\u89e3\u6700\u5927\u5339\u914d\u95ee\u9898\u7684\u4e00\u4e2a\u7b97\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4e0b\u9762\u8bb2\u7684\u6982\u5ff5\u90fd\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u670d\u52a1\u3002 \u4ea4\u66ff\u8def \uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def \uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002\u4f8b\u5982\uff0c\u56fe 5 \u4e2d\u7684\u4e00\u6761\u589e\u5e7f\u8def\u5982\u56fe 6 \u6240\u793a\uff08\u56fe\u4e2d\u7684\u5339\u914d\u70b9\u5747\u7528\u7ea2\u8272\u6807\u51fa\uff09\uff1a \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\uff08\u8fd9\u662f\u589e\u5e7f\u8def\u5b9a\u7406\uff09\u3002\u5308\u7259\u5229\u7b97\u6cd5\u6b63\u662f\u8fd9\u4e48\u505a\u7684\u3002\u5728\u7ed9\u51fa\u5308\u7259\u5229\u7b97\u6cd5 DFS \u548c BFS \u7248\u672c\u7684\u4ee3\u7801\u4e4b\u524d\uff0c\u5148\u8bb2\u4e00\u4e0b\u5308\u7259\u5229\u6811\u3002 **\u5308\u7259\u5229\u6811**\u4e00\u822c\u7531 BFS \u6784\u9020\uff08\u7c7b\u4f3c\u4e8e BFS \u6811\uff09\u3002\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\u8fd0\u884c BFS\uff08\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5fc5\u987b\u8d70\u4ea4\u66ff\u8def\uff09\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62\u3002\u4f8b\u5982\uff0c\u7531\u56fe 7\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u56fe 8 \u7684\u4e00\u68f5 BFS \u6811\uff1a","title":"3.1 \u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u548c\u5b8c\u7f8e\u5339\u914d"},{"location":"%E7%AE%97%E6%B3%95/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/","text":"\u5728\u4e00\u4e2aN*N\u7684\u68cb\u76d8\u4e0a\u653e\u7f6eN\u4e2a\u7687\u540e\uff0c\u8981\u6c42\u4efb\u610f\u4e24\u4e2a\u7687\u540e\u4e0d\u80fd\u5728\u540c\u4e00\u884c\u3001\u540c\u4e00\u5217\u548c\u540c\u4e00\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u653e\u7f6e\u7684\u65b9\u6cd5\u3002 \u8be5\u95ee\u9898\u7684\u57fa\u672c\u601d\u8def\u662f\u641c\u7d22\u6240\u6709\u7684\u72b6\u6001\u3002\u5148\u5728\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u653e\u7f6e\u7687\u540e\uff0c\u7136\u540e\u5728\u7b2c\u4e8c\u884c\u627e\u4e00\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e\uff0c\u63a5\u7740\u5728\u7b2c\u4e09\u884c\u627e\u4e00\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e\uff0c\u4e00\u65e6\u8fbe\u5230\u6700\u540e\u4e00\u884c\uff0c\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u89e3\uff0c\u5982\u679c\u5230\u67d0\u4e00\u884c\u7684\u65f6\u5019\u6ca1\u6709\u89e3\u4e86\uff0c\u5c31\u56de\u6eaf\u5230\u4e0a\u4e00\u884c\uff0c\u79fb\u52a8\u521a\u624d\u653e\u7f6e\u7684\u7687\u540e\u5230\u4e0b\u4e00\u4e2a\u53ef\u884c\u7684\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22\u3002 #include <iostream> #include <vector> #include <string> #include <map> #include <set> #include <algorithm> #include <cmath> #include <sstream> #include <iomanip> #include <deque> #include <stack> using namespace std ; /** * \u5224\u65ad\u5728\u68cb\u76d8\u7684row,col\u4f4d\u7f6e\u662f\u5426\u53ef\u4ee5\u653e\u7f6e\u7687\u540e * @param C c[i]=j \u8868\u793a\u7b2ci\u884c\u7b2cj\u5217\u6709\u7687\u540e * @param row * @param col * @return */ bool isValid ( const vector < int > & C , int & row , int & col ){ for ( int i = 0 ; i < row ; ++ i ) { // \u5728col\u5217\u5df2\u7ecf\u6709\u7687\u540e if ( C [ i ] == col ) return false ; // \u5bf9\u89d2\u7ebf\u4e0a\u7684\u7687\u540e\u884c\u5750\u6807\u76f8\u51cf\u603b\u662f\u7b49\u4e8e\u5217\u5750\u6807 if ( abs ( i - row ) == abs ( C [ i ] - col )) return false ; } return true ; } /** * * @param C * @param row */ void dfs ( vector < int > & C , int row , int & sum ){ const int N = C . size (); if ( row == N ){ sum ++ ; return ; } //\u6d4b\u8bd5\u6bcf\u4e00\u5217 for ( int j = 0 ; j < N ; ++ j ) { if ( isValid ( C , row , j )){ C [ row ] = j ; //(row,j) \u653e\u7f6e\u4e00\u4e2a\u7687\u540e dfs ( C , row + 1 , sum ); } else { continue ; // \u4e0d\u884c\u5c31\u5c1d\u8bd5\u4e0b\u4e00\u4e2a\u4f4d\u7f6e } } } //N\u7687\u540e\u95ee\u9898 int totalNQueens ( int n ) { vector < int > C ( n , - 1 ); int sum = 0 ; dfs ( C , 0 , sum ); return sum ; } int main (){ cout << totalNQueens ( 4 ) << endl ; return 0 ; } \u7531\u4e8e\u653e\u7f6e\u548c\u4e0d\u653e\u7f6e\u7687\u540e\u53ea\u9700\u8981\u4e00\u4e2a\u6807\u8bc6\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4f4d\u6765\u6807\u8bb0\uff0c\u8fd9\u6837\u53ef\u4ee5\u5927\u5927\u8282\u7701\u7a7a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4f4d\u8fd0\u7b97\u6765\u52a0\u901f\u7b97\u6cd5\u3002","title":"N\u7687\u540e\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95/","text":"\u5206\u6cbb\u6cd5 \u00b6 1. \u76f8\u5173\u9898\u76ee \u00b6 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 74. \u641c\u7d22\u4e8c\u4f4d\u77e9\u9635 1011. \u5728D\u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b","title":"\u5206\u6cbb\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95/#_1","text":"","title":"\u5206\u6cbb\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95/#1","text":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 74. \u641c\u7d22\u4e8c\u4f4d\u77e9\u9635 1011. \u5728D\u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b","title":"1. \u76f8\u5173\u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"\u52a8\u6001\u89c4\u5212 \u00b6 \u80fd\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u7684\u95ee\u9898\u5e94\u8be5\u6ee1\u8db32\u4e2a\u6761\u4ef6\uff1a 1. \u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u6784\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3 2. \u53cd\u590d\u6c42\u89e3\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u751f\u6210\u5168\u65b0\u7684\u5b50\u95ee\u9898\u3002 \u52a8\u6001\u89c4\u5212\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u91cd\u53e0\u7684\uff0c \u5206\u6cbb\u6cd5\u89e3\u51b3\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u5168\u65b0\u7684\u3002 1. \u6574\u6570\u5212\u5206\u95ee\u9898 \u00b6 \u4e00\u4e2a\u6574\u6570\u5212\u5206\u6210\u82e5\u5e72\u6574\u6570\u7684\u548c\uff0c\u8ba1\u7b97\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u5212\u5206\u65b9\u5f0f\u3002 \u4f8b\u59824 = 1 + 1 + 1 + 1 = 2 + 1 + 1 = 2 + 2 = 3 + 1 = 4 dp[i][j] \u8868\u793a\u6574\u6570 i \u7684 j \u5212\u5206\u7684\u65b9\u6cd5\u6570\uff0c i \u7684 j\u5212\u5206\u7684\u542b\u4e49\u662f\u628a i \u5212\u5206\u6210\u6700\u5927\u4e0d\u8d85\u8fc7 j\u7684\u6574\u6570\u7684\u548c\u6709\u591a\u5c11\u79cd\u5212\u5206\u65b9\u6cd5\u3002 \u5982\u679c j >= i, dp[i][j] = dp[i][i], \u56e0\u4e3a\u4e0d\u53ef\u80fd\u6709\u8d85\u8fc7\u672c\u8eab\u7684\u5212\u5206\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u5141\u8bb8\u6709\u8d1f\u6570\u3002 \u5982\u679c j < i, dp[i][j] = dp[i][j-1] + dp[i - j][j], i \u7684 j \u5212\u5206\u662f\u4e24\u79cd\u60c5\u51b5\u7684\u548c\uff1a\u4e0d\u4f7f\u7528j\u672c\u8eab(dp[i][j-1]) + \u4f7f\u7528\u4e00\u4e2aj(dp[i-j][j]) int division ( int n ) { int ** dp = create_matrix ( n + 1 , n + 1 ); fill ( dp , n + 1 , n + 1 , 1 ); for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 2 ; j <= n ; j ++ ) { if ( j > i ) { dp [ i ][ j ] = dp [ i ][ i ]; } else { dp [ i ][ j ] = dp [ i ][ j - 1 ] + dp [ i - j ][ j ] } } } int ans = dp [ n ][ n ]; free_matrix ( dp ); return ans ; } 2. \u80cc\u5305\u95ee\u9898 \u00b6 \u80cc\u5305\u95ee\u9898\u662f\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\u7684\u6700\u4f18\u5316\u95ee\u9898\uff0c\u5373\u5728\u67d0\u4e2a\u6307\u6807\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u53e6\u5916\u4e00\u4e2a\u6307\u6807\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u3002 2.1 0 - 1 \u80cc\u5305 \u00b6 2.1.1 \u4f7f\u7528\u7a77\u7aed\u641c\u7d22 \u00b6 #include <iostream> #include <vector> #include <algorithm> using namespace std ; /** * 0--1 \u80cc\u5305\u95ee\u9898 * \u4ece\u7b2cstart\u4e2a\u7269\u4f53\u5f00\u59cb\uff0c\u603b\u91cd\u91cf\u4e3aweight\u7684\u80cc\u5305\uff0c\u8fd4\u56de\u6700\u5927\u7684\u4ef7\u503c * @return */ int rec ( int start , int weight , vector < int > w , vector < int > v , vector < int > & ob ){ cout << \"rec(\" << start << \",\" << weight << \")\" << endl ; int result = 0 ; // \u7269\u4f53\u7684\u6700\u5927\u4e2a\u6570\u662fw.size()-1,\u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\uff0c\u8fd4\u56de0\uff0c\u542b\u4e49\u662f\u4ece\u7b2cn\u4e2a //\u7269\u4f53\u5f00\u59cb\uff0c\u5f97\u5230\u7684\u4ef7\u503c\u662f0\uff0c\u56e0\u4e3a\u4e0d\u80fd\u653e\u5165\u8fdb\u53bb if ( start == w . size ()) { return result ;} //\u5982\u679c\u5f53\u524d\u7269\u4f53\u7684\u91cd\u91cf\u5df2\u7ecf\u5927\u4e8e\u603b\u91cd\u91cf\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u80fd\u653e\u5165\u80cc\u5305\uff0c //\u4e00\u65e6\u653e\u5165\u91cd\u91cf\u5c31\u8d85\u8fc7\u4e86 if ( w [ start ] > weight ){ result = rec ( start + 1 , weight , w , v , ob ); } //\u5982\u679c\u5f53\u524d\u7269\u4f53\u7684\u91cd\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u91cd\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\uff0c //\u5c1d\u8bd5\u653e\u5165\u548c\u4e0d\u653e\u5165\u4e24\u79cd\u60c5\u51b5\uff0c\u9009\u62e9\u8f83\u5927\u7684\u90a3\u4e2a\uff1b // if(w[start] <= weight){ // result = max(rec(start+1,weight,w,v),rec(start+1,weight-w[start],w,v)+v[start]); // } // \u8bb0\u5f55\u7269\u54c1\u662f\u5426\u653e\u5165\u4e86\u80cc\u5305 if ( w [ start ] <= weight ){ int noput = rec ( start + 1 , weight , w , v , ob ); int putted = rec ( start + 1 , weight - w [ start ], w , v , ob ) + v [ start ]; if ( putted > noput ){ result = putted ; cout << \"===\" << \"rec(\" << start << \",\" << weight << \")\" << \"===\" << endl ; ob . push_back ( start ); } else { result = noput ; } } return result ; } void print ( vector < int > v ){ for ( auto a : v ){ cout << a << \" \" ; } cout << endl ; } int main () { vector < int > w = { 2 , 1 , 3 , 2 }; vector < int > v = { 3 , 2 , 4 , 2 }; int weight = 5 ; vector < int > ob ; cout << rec ( 0 , weight , w , v , ob ) << endl ; print ( ob ); return 0 ; } 2.1.2 \u4f7f\u7528\u52a8\u6001\u89c4\u5212 \u00b6 \u52a8\u6001\u89c4\u5212\u7684\u9012\u63a8\u516c\u5f0f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4ece\u4e0a\u9762\u7684\u7a77\u7aed\u641c\u7d22\u4e2d\u5f97\u5230\u3002 rec(i,j) \u8868\u793a\u4ece\u7b2ci\u4e2a\u7269\u4f53\u5f00\u59cb\uff0c\u5728\u4e0d\u8d85\u8fc7j\u7684\u91cd\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u7684\u4ef7\u503c\u662f\u591a\u5c11 \u8bbe\u7f6edp[i][j] = rec(i,j); \u5219\u53ef\u4ee5\u77e5\u9053dp[n][j] = 0; \u56e0\u4e3a\u6700\u591a\u53ea\u6709n-1\u4e2a\u7269\u4f53\uff1b dp[i][j] = dp[i+1][j] \u5f53\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u5927\u4e8ej\u7684\u65f6\u5019\uff1b dp[i][i] = max( dp[i+1][j] , dp[i+1][j-w[i]]+v[i] ) \u5f53\u7b2ci\u4e2a\u7269\u4f53\u80fd\u591f\u88c5\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u5206\u522b\u5c1d\u8bd5\u88c5\u5165\u548c\u4e0d\u88c5\u5165\uff0c\u53d6\u6700\u5927\u503c\u3002 /** * \u80cc\u5305\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u89e3\u6cd5 * @param w * @param v * @param weight * @return */ int dp ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); for ( int i = n ; i >= 0 ; i -- ){ for ( int j = 0 ; j < weight + 1 ; j ++ ){ if ( w [ i ] > j ){ dp [ i ][ j ] = dp [ i + 1 ][ j ]; } else { dp [ i ][ j ] = max ( dp [ i + 1 ][ j ], dp [ i + 1 ][ j - w [ i ]] + v [ i ]); } } } print2 ( dp ); return dp [ 0 ][ weight ]; } 2.1.3 \u4f7f\u7528\u72b6\u6001\u8f6c\u79fb\u7684\u89c2\u70b9 \u00b6 /** * \u4ece\u72b6\u6001\u8f6c\u79fb\u7684\u89c2\u70b9\u6765\u770b * dp[i][j] \u8868\u793a\u6311\u9009\u51fa\u4ece0\u5230i\u7269\u4f53\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u72b6\u6001\u3002dp[0][j]\u8868\u793a\u9009\u62e90\u4e2a\u7269\u54c1\u65f6\u7684\u91cd\u5927\u4ef7\u503c * dp[1][j] \u8868\u793a\u9009\u62e9\u7269\u4f531\u65f6\u5019\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u6700\u5927\u7684\u4ef7\u503c * \u6240\u4ee5\u6709dp[0][j] = 0; * dp[i][j] = dp[i-1][j] \u5f53i-1\u7269\u4f53\u4e0d\u80fd\u653e\u5165\u80cc\u5305\u65f6 * dp[i][j] = dp[i-1][j-w[i]] + v[i] \u5f53i-1\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\u7684\u65f6\u5019 * dp[0][j] * @param w * @param v * @param weight * @return */ int dp2 ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < weight + 1 ; j ++ ){ if ( w [ i ] > j ){ dp [ i + 1 ][ j ] = dp [ i ][ j ]; } else { dp [ i + 1 ][ j ] = max ( dp [ i ][ j ], dp [ i ][ j - w [ i ]] + v [ i ]); } } } print2 ( dp ); return dp [ n ][ weight ]; } 2.2 \u5b8c\u5168\u80cc\u5305 \u00b6 \u5b8c\u5168\u80cc\u5305\u95ee\u9898\u53ef\u4ee5\u8fd9\u6837\u5efa\u7acb\u9012\u63a8\u5173\u7cfb\uff1b dp[i][j] \u8868\u793a\u524di-1\u4e2a\u7269\u4f53\u653e\u5165\u80cc\u5305\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u4ef7\u503c\u3002i=0\u65f6\u8868\u793a\u6ca1\u6709\u7269\u4f53\u3002 w[i] \u548c v[i] \u8868\u793a\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u3002\u6ce8\u610f\u8fd9\u91ccdp\u4e2d\u7684i\u548cw,v\u4e2d\u7684i\u76f8\u5dee1.\u4e5f\u5c31\u662fdp[i+1]\u5bf9\u5e94\u7684\u7269\u4f53\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u5206\u522b\u662fw[i],v[i]; dp [ i + 1 ][ j ] := dp [ i ][ j ] \u7b2c i\u4e2a\u7269\u4f53\u4e0d\u653e\u5165\u80cc\u5305 : = dp [ i ][ j - 1 * w [ i ]] + v [ i ] \u7b2c i\u4e2a\u7269\u4f53\u653e\u51651\u6b21\u7684\u65f6\u5019 : = dp [ i ][ j - 2 * w [ i ]] + 2 * v [ i ] \u7b2c i\u4e2a\u7269\u4f53\u653e\u51652\u6b21\u7684\u65f6\u5019 ... \u4e0a\u9762\u7684\u9012\u63a8\u5173\u7cfb\u867d\u7136\u5bb9\u6613\u7406\u89e3\uff0c\u5374\u5b58\u5728\u8fd9\u5faa\u73af\uff0c\u6709\u91cd\u590d\u8ba1\u7b97\u7684\u5730\u65b9\u3002\u9012\u63a8\u5173\u7cfb\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\uff1a dp[i+1][j] = dp[i][j] ; \u7b2ci\u4e2a\u7269\u4f53\u65e0\u6cd5\u653e\u5165\u80cc\u5305\u7684\u60c5\u51b5 dp[i+1][j] = d[i+1][j-w[i]] + v[i] ; \u5982\u679c\u7b2ci\u4e2a\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\uff0c\u90a3\u4e48\u6700\u5927\u4ef7\u503c\u7b49\u4e8e \u5728dp[i+1][j-w[i]]\u7684\u57fa\u7840\u4e0a\u518d\u653e\u5165\u4e00\u4e2ai\u7269\u54c1\uff0c\u8fd9\u65f6\u7684\u4ef7\u503c\u662fdp[i+1][j-w[i]] + v[i]; \u6240\u4ee5\u6700\u540e\u7684\u9012\u63a8\u5173\u7cfb\u53ef\u4ee5\u5199\u6210\uff1a dp[0][j] = 0; dp[i+1][j] = max(dp[i][j],dp[i+1][j-w[i]] + v[i]) /** * \u5b8c\u5168\u80cc\u5305\u95ee\u9898 * @param w * @param v * @param weight * @return */ int dp3 ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j <= weight ; j ++ ){ if ( j < w [ i ]){ dp [ i + 1 ][ j ] = dp [ i ][ j ]; } else { dp [ i + 1 ][ j ] = max ( dp [ i ][ j ], dp [ i + 1 ][ j - w [ i ]] + v [ i ]); } } } print2 ( dp ); return dp [ n ][ weight ]; } \u4ee5\u4e0a\u80cc\u5305\u7684\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u53ef\u4ee5\u4f18\u5316\u5230O\uff08nW\uff09\u4e5f\u5c31\u662f\u7269\u54c1\u6570\u91cf * \u80cc\u5305\u5bb9\u91cf\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u4f18\u5316\u5230O\uff08n\uff09. \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8db3\u591f\u4e86\u3002\u4f46\u662f\u9488\u5bf9\u4e0b\u9762\u8fd9\u9053\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e0d\u591f\u7528\u4e86\uff0c\u9700\u8981\u53e6\u5916\u5bfb\u627e\u89e3\u9898\u7684\u65b9\u6cd5\u3002 \u6709n\u4e2a\u91cd\u91cf\u548c\u4ef7\u503c\u5206\u522b\u4e3aw[i],v[i]\u7684\u7269\u54c1\uff0c\u88c5\u5165\u5bb9\u91cf\u4e3aW\u7684\u80cc\u5305\uff0c\u6c42\u6700\u5927\u4ef7\u503c\u3002 \u9650\u5236\u6761\u4ef6\uff1a n : 1--100 ; w[i] : 1--10000000 ; v[i] : 1--100; W : 1--1000000000 \u539f\u6765\u80cc\u5305\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(nW),\u4f46\u662f\u672c\u9898'\u6545\u610f'\u628aW\u8bbe\u7f6e\u7684\u5f88\u5927\uff0c\u4f7f\u5f97\u4e0d\u80fd\u4f7f\u7528\u539f\u6765\u7684\u65b9\u6cd5\u6c42\u89e3\u3002 \u4ed4\u7ec6\u5206\u6790\u6570\u636e\u7684\u53d6\u503c\u8303\u56f4\u53d1\u73b0\uff0cv[i]\u7684\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u6362\u601d\u8def\uff0c\u6c42\u89e3\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7W\u7684\u60c5\u51b5\u4e0b\u4ef7\u503c\u7684\u6700\u5927\u503c\uff0c \u5c31\u662f\u6c42\u89e3\u76f8\u540c\u4ef7\u503c\u4e0b\u7684\u603b\u91cd\u91cf\u7684\u6700\u5c0f\u503c\u3002 dp[i][j] \u8868\u793a\u524di-1\u4e2a\u7269\u4f53\u5728\u4ef7\u503c\u4e0d\u8d85\u8fc7j\u7684\u65f6\u5019\u7684\u603b\u91cd\u91cf\u7684\u6700\u5c0f\u503c\u3002 dp[0][j] = INF; \u628a\u4e0d\u5b58\u5728\u6700\u5c0f\u503c\u7684\u60c5\u51b5\u8bbe\u7f6e\u4e3a\u6700\u5927\u503c\uff0c\u8fd9\u6837\u662f\u65b9\u4fbf\u7528min(); dp[0][0] = 0 ; dp[i+1][j] = min(dp[i][j],dp[i][j-v[i]]+w[i]) /** * 0-1\u80cc\u5305\u7684\u53d8\u79cd * @return */ int dp4 ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); dp [ 0 ][ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j <= weight ; j ++ ){ if ( j < v [ i ]){ dp [ i + 1 ][ j ] = dp [ i ][ j ]; } else { dp [ i + 1 ][ j ] = min ( dp [ i ][ j ], dp [ i + 1 ][ j - v [ i ]] + w [ i ]); } } } print2 ( dp ); return dp [ n ][ weight ]; } 2.3 \u591a\u91cd\u80cc\u5305 \u00b6 # \u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u4f7f\u7528ci\u6b21 def package_ci ( n , c , w , v ): N = n + 1 C = c + 1 dp = [ [ 0 ] * N for i in range ( C )] for i in range ( 1 , N ): for j in range ( 1 , C ): if j < w [ i ]: dp [ i ][ j ] = dp [ i - 1 ][ j ] else : for k in range ( 1 , j / w [ i ]): dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i - 1 ][ j - k * w [ i ] + k * v [ i ]]) return dp [ n ][ n ] 3. \u4e8c\u7ef4\u80cc\u5305\u95ee\u9898 \u00b6 \u4e00\u822c\u7684\u80cc\u5305\u95ee\u9898\u53ea\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u4f7f\u7528\u4e8c\u7ef4\u8868\u683c\u53ef\u4ee5\u5b8c\u6210\u3002 \u5982\u679c\u6709\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u5c31\u5fc5\u987b\u4f7f\u7528\u4e09\u7ef4\u7684\u8868\u683c\u624d\u80fd\u5b8c\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u6837\u7684\u95ee\u9898\u53eb\u505a\u4e8c\u7ef4\u80cc\u5305\u3002 4. \u5355\u8bcd\u5207\u5206 \u00b6 \u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32s\u548c\u4e00\u4e2a\u8bcd\u5178\uff0c\u5224\u65ad\u5b57\u7b26\u4e32s\u662f\u5426\u53ef\u4ee5\u88ab\u7a7a\u683c\u5207\u5206\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u51fa\u73b0\u5728\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u6837\u4f8b \u7ed9\u51fa s = \"lintcode\" dict = [\"lint\",\"code\"] \u8fd4\u56de true \u56e0\u4e3a\"lintcode\"\u53ef\u4ee5\u88ab\u7a7a\u683c\u5207\u5206\u6210\"lint code\" \u5355\u8bcd\u5207\u5206 \u601d\u8def\u4e00\uff1a\u5f00\u4e00\u4e2a dp[n+1] \u8868\u793a\u524di\u4e2a\u5b57\u6bcd\u80fd\u5426\u7528\u7a7a\u683c\u5206\u5272\u5f00(\u6309\u7167\u5b57\u5178\u91cc\u9762\u7ed9\u51fa\u7684\u5355\u8bcd)\u3002 dp[0]=true \u8868\u793a\u7a7a\u5b57\u7b26\u4e32\u80fd\u591f\u5206\u5272\u5f00\uff0c dp[1]=true \u5f53 s[0] \u5728\u5b57\u5178\u4e2d\u5b58\u5728\u65f6\u3002\u5bf9\u4e8e dp[j] \u6765\u8bf4\uff0c\u9010\u4e2a\u5411\u524d\u641c\u7d22\uff0c\u770b\u662f\u5426\u6709 s[i,j] \u5b58\u5728\u4e0edict\u4e2d\u7684\u540c\u65f6 dp[i-1] \u4e3a\u771f\u3002\u5982\u679c\u6709\uff0c dp[j]=true ,\u5982\u679c\u641c\u7d22\u5230\u5934\u8fd8\u6ca1\u6709\uff0c dp[j]=false .\u8fd9\u79cd\u65b9\u6cd5\u6700\u5bb9\u6613\u60f3\u5230\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u3002(\u4e0d\u80fd\u901a\u8fc7 lintcode \u7684\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b) //[\u5355\u8bcd\u5207\u5206](http://lintcode.com/zh-cn/problem/word-break/) bool wordBreak ( string s , unordered_set < string > & dict ) { // write your code here if ( s . empty ()) return false ; vector < bool > dp ( s . size () + 1 , false ); dp [ 0 ] = true ; for ( int i = 1 ; i <= s . size (); ++ i ) { if ( dict . find ( s . substr ( i - 1 , 1 )) != dict . end () && dp [ i - 1 ]){ dp [ i ] = true ; } int clen = 2 ; for ( int j = i - 1 ; j >= 1 ; -- j ) { string ss = s . substr ( j - 1 , clen ); if ( dict . find ( ss ) != dict . end () && dp [ j - 1 ]){ dp [ i ] = true ; break ; } clen ++ ; } } return dp [ s . size ()]; } \u601d\u8def\u4e8c\uff1a\u4e0a\u9762\u7684\u7b97\u6cd5\u6bcf\u6b21\u90fd\u4f1a\u56de\u6eaf\u5230\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u5178\u7684\u6700\u5927\u7684\u5b57\u7b26\u7684\u957f\u5ea6\u8fdc\u8fdc\u5c0f\u4e8e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6(\u5f88\u5e38\u89c1\u7684\u60c5\u51b5)\uff0c\u4f1a\u9020\u6210\u5927\u91cf\u7684\u6d6a\u8d39\uff0c\u6240\u4ee5\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\uff0c\u6bcf\u6b21\u53ea\u56de\u6eaf\u5230\u5b57\u5178\u4e2d\u6700\u5927\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5904\uff0c\u8fd9\u6837\u5c31\u80fd\u901a\u8fc7 lintcode \u7684\u5927\u89c4\u6a21\u7684\u6570\u636e\u4e86\u3002 getMaxLen \u7528\u6765\u83b7\u53d6\u5b57\u5178\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u5f53dict\u4e2d\u6700\u5927\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5f88\u957f\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u964d\u4f4e\u3002 int getMaxLen ( unordered_set < string > & dict ){ int maxlen = 0 ; for ( auto a : dict ){ maxlen = max ( maxlen ,( int ) a . size ()); } return maxlen ; } //[\u5355\u8bcd\u5207\u5206](http://lintcode.com/zh-cn/problem/word-break/) bool wordBreak ( string s , unordered_set < string > & dict ) { // write your code here if ( s . empty () && dict . empty ()) return true ; if ( s . empty ()) return false ; vector < bool > dp ( s . size () + 1 , false ); int maxlen = getMaxLen ( dict ); dp [ 0 ] = true ; for ( int i = 1 ; i <= s . size (); ++ i ) { if ( dict . find ( s . substr ( i - 1 , 1 )) != dict . end () && dp [ i - 1 ]){ dp [ i ] = true ; } int clen = 2 ; int end = max ( 1 , i - 1 - maxlen ); for ( int j = i - 1 ; j >= end ; -- j ) { string ss = s . substr ( j - 1 , clen ); if ( dict . find ( ss ) != dict . end () && dp [ j - 1 ]){ dp [ i ] = true ; break ; } clen ++ ; } } return dp [ s . size ()]; } 5. \u6362\u94b1\u7684\u65b9\u6cd5\u6570 \u00b6 \u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\u3002 dp[i][j] \u8868\u793a\u7528\u524d i \u79cd\u9762\u503c\u7684\u94b1\u7ec4\u6210 j \u603b\u5171\u6709\u591a\u5c11\u4e2d\u65b9\u6848\u3002\u8bbe\u94b1\u5e01\u7684\u9762\u503c\u4e00\u5171\u6709N\u4e2d\uff0c\u7ec4\u6210\u7684\u9762\u503c\u4e3aM\uff0c\u5219\u9700\u8981 N*(M+1) \u7684\u6570\u7ec4\u3002\u7b2c\u4e00\u884c\u8868\u793a\u4f7f\u7528\u7b2c\u4e00\u79cd\u9762\u503c\u7684\u8d27\u5e01\u7ec4\u6210\u76ee\u6807\u503c\u7684\u65b9\u6cd5\u6570\u91cf\uff0c\u5f53 j \u80fd\u591f\u88ab\u6574\u9664\u65f6\uff0c\u65b9\u6cd5\u6570\u91cf\u4e3a1\uff0c\u5426\u5219\u4e3a0. \u7b2c\u4e00\u5217\u8868\u793a\u7ec4\u6210\u76ee\u6807\u503c 0 \u6709\u591a\u5c11\u79cd\u60c5\u51b5\uff0c\u65e0\u8bba\u6709\u51e0\u79cd\u9762\u503c\u7684\u8d27\u5e01\uff0c\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u4e00\u4e2a\u90fd\u4e0d\u7528\u3002 \u9012\u63a8\u516c\u5f0f\uff1a dp[i][j] = dp[i-1][j] if j < v[i] , (\u5f53\u9762\u503c\u4e3a v[i] \u7684\u8d27\u5e01\u6bd4\u76ee\u6807\u503c\u8fd8\u8981\u5927\u7684\u65f6\u5019\uff0c\u80af\u5b9a\u4e00\u5f20 v[i] \u90fd\u4e0d\u80fd\u4f7f\u7528\uff0c\u8fd9\u4e2a\u65f6\u5019\u65b9\u6cd5\u6570\u91cf\u7b49\u4e8e dp[-1][j] ). dp[i][j] = dp[i-1][j] + dp[i][j-v[i]] if j >= v[i] , (\u5982\u679c\u76ee\u6807\u503c\u6bd4\u9762\u503c\u4e3a v[i] \u7684\u94b1\u5927\uff0c\u5219\u610f\u5473\u7740\u53ef\u4ee5\u4f7f\u7528 v[i] \u82e5\u5e72\u6b21\uff0c\u4e00\u76f4\u5230\u8d85\u8fc7\u76ee\u6807\u503c\uff1b \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ec4\u6210\u76ee\u6807\u503c\u7684\u603b\u65b9\u6cd5\u6570\u91cf\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u7684\u548c\uff1a \u4e0d\u4f7f\u7528\u7b2ci\u4e2d\u8d27\u5e01\u7ec4\u6210j, \u65b9\u6cd5\u6570\u91cf\u662f dp[i-1][j] ; \u4f7f\u7528\u7b2c i \u79cd\u8d27\u5e01\u7ec4\u6210j\u7684\u6570\u91cf\uff0c dp[i][j-v[i]] , \u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a \u9996\u5148\u4f7f\u7528\u4e00\u5f20 v[i] ,\u7136\u540e\u7528\u524d i \u4e2d\u8d27\u5e01\u7ec4\u6210\u5269\u4e0b\u7684 j-v[i] \u76ee\u6807\u503c\uff0c\u8fd9\u4e2a\u503c\u4e4b\u524d\u8ba1\u7b97\u8fc7\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u6765\uff0c\u5c31\u662f dp[i][j-v[i]] ; #include <iostream> #include <vector> using namespace std ; int getNum ( vector < int > v , int aim ){ vector < vector < int > > dp ( v . size (), vector < int > ( aim + 1 )); //\u521d\u59cb\u5316\u7b2c\u4e00\u5217 for ( int i = 0 ; i < v . size (); ++ i ){ dp [ i ][ 0 ] = 1 ; } //\u521d\u59cb\u5316\u7b2c\u4e00\u884c for ( int j = 1 ; j <= aim ; j ++ ){ dp [ 0 ][ j ] = j % v [ 0 ] == 0 ? 1 : 0 ; } for ( int i = 1 ; i < v . size (); ++ i ){ for ( int j = 1 ; j <= aim ; ++ j ){ dp [ i ][ j ] = j - v [ i ] >= 0 ? dp [ i - 1 ][ j ] + dp [ i ][ j - v [ i ]] : dp [ i - 1 ][ j ]; } } //\u6253\u5370\u52a8\u6001\u89c4\u5212\u8868\u683c for ( int i = 0 ; i < dp . size (); ++ i ){ for ( int j = 0 ; j < dp [ 0 ]. size (); ++ j ){ cout << dp [ i ][ j ] << \" \\t \" ; } cout << endl ; } return dp [ v . size () - 1 ][ aim ]; } int main () { vector < int > v = { 5 , 2 , 3 , 7 }; int aim = 7 ; std :: cout << getNum ( v , aim ) << std :: endl ; return 0 ; } 6. \u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u4e2d\u7b49 516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 \u4e2d\u7b49 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 \u4e2d\u7b49","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_1","text":"\u80fd\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u7684\u95ee\u9898\u5e94\u8be5\u6ee1\u8db32\u4e2a\u6761\u4ef6\uff1a 1. \u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u6784\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3 2. \u53cd\u590d\u6c42\u89e3\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u751f\u6210\u5168\u65b0\u7684\u5b50\u95ee\u9898\u3002 \u52a8\u6001\u89c4\u5212\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u91cd\u53e0\u7684\uff0c \u5206\u6cbb\u6cd5\u89e3\u51b3\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u5168\u65b0\u7684\u3002","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1","text":"\u4e00\u4e2a\u6574\u6570\u5212\u5206\u6210\u82e5\u5e72\u6574\u6570\u7684\u548c\uff0c\u8ba1\u7b97\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u5212\u5206\u65b9\u5f0f\u3002 \u4f8b\u59824 = 1 + 1 + 1 + 1 = 2 + 1 + 1 = 2 + 2 = 3 + 1 = 4 dp[i][j] \u8868\u793a\u6574\u6570 i \u7684 j \u5212\u5206\u7684\u65b9\u6cd5\u6570\uff0c i \u7684 j\u5212\u5206\u7684\u542b\u4e49\u662f\u628a i \u5212\u5206\u6210\u6700\u5927\u4e0d\u8d85\u8fc7 j\u7684\u6574\u6570\u7684\u548c\u6709\u591a\u5c11\u79cd\u5212\u5206\u65b9\u6cd5\u3002 \u5982\u679c j >= i, dp[i][j] = dp[i][i], \u56e0\u4e3a\u4e0d\u53ef\u80fd\u6709\u8d85\u8fc7\u672c\u8eab\u7684\u5212\u5206\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u5141\u8bb8\u6709\u8d1f\u6570\u3002 \u5982\u679c j < i, dp[i][j] = dp[i][j-1] + dp[i - j][j], i \u7684 j \u5212\u5206\u662f\u4e24\u79cd\u60c5\u51b5\u7684\u548c\uff1a\u4e0d\u4f7f\u7528j\u672c\u8eab(dp[i][j-1]) + \u4f7f\u7528\u4e00\u4e2aj(dp[i-j][j]) int division ( int n ) { int ** dp = create_matrix ( n + 1 , n + 1 ); fill ( dp , n + 1 , n + 1 , 1 ); for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 2 ; j <= n ; j ++ ) { if ( j > i ) { dp [ i ][ j ] = dp [ i ][ i ]; } else { dp [ i ][ j ] = dp [ i ][ j - 1 ] + dp [ i - j ][ j ] } } } int ans = dp [ n ][ n ]; free_matrix ( dp ); return ans ; }","title":"1. \u6574\u6570\u5212\u5206\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2","text":"\u80cc\u5305\u95ee\u9898\u662f\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\u7684\u6700\u4f18\u5316\u95ee\u9898\uff0c\u5373\u5728\u67d0\u4e2a\u6307\u6807\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u53e6\u5916\u4e00\u4e2a\u6307\u6807\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u3002","title":"2. \u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#21-0-1","text":"","title":"2.1 0 - 1 \u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#211","text":"#include <iostream> #include <vector> #include <algorithm> using namespace std ; /** * 0--1 \u80cc\u5305\u95ee\u9898 * \u4ece\u7b2cstart\u4e2a\u7269\u4f53\u5f00\u59cb\uff0c\u603b\u91cd\u91cf\u4e3aweight\u7684\u80cc\u5305\uff0c\u8fd4\u56de\u6700\u5927\u7684\u4ef7\u503c * @return */ int rec ( int start , int weight , vector < int > w , vector < int > v , vector < int > & ob ){ cout << \"rec(\" << start << \",\" << weight << \")\" << endl ; int result = 0 ; // \u7269\u4f53\u7684\u6700\u5927\u4e2a\u6570\u662fw.size()-1,\u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\uff0c\u8fd4\u56de0\uff0c\u542b\u4e49\u662f\u4ece\u7b2cn\u4e2a //\u7269\u4f53\u5f00\u59cb\uff0c\u5f97\u5230\u7684\u4ef7\u503c\u662f0\uff0c\u56e0\u4e3a\u4e0d\u80fd\u653e\u5165\u8fdb\u53bb if ( start == w . size ()) { return result ;} //\u5982\u679c\u5f53\u524d\u7269\u4f53\u7684\u91cd\u91cf\u5df2\u7ecf\u5927\u4e8e\u603b\u91cd\u91cf\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u80fd\u653e\u5165\u80cc\u5305\uff0c //\u4e00\u65e6\u653e\u5165\u91cd\u91cf\u5c31\u8d85\u8fc7\u4e86 if ( w [ start ] > weight ){ result = rec ( start + 1 , weight , w , v , ob ); } //\u5982\u679c\u5f53\u524d\u7269\u4f53\u7684\u91cd\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u91cd\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\uff0c //\u5c1d\u8bd5\u653e\u5165\u548c\u4e0d\u653e\u5165\u4e24\u79cd\u60c5\u51b5\uff0c\u9009\u62e9\u8f83\u5927\u7684\u90a3\u4e2a\uff1b // if(w[start] <= weight){ // result = max(rec(start+1,weight,w,v),rec(start+1,weight-w[start],w,v)+v[start]); // } // \u8bb0\u5f55\u7269\u54c1\u662f\u5426\u653e\u5165\u4e86\u80cc\u5305 if ( w [ start ] <= weight ){ int noput = rec ( start + 1 , weight , w , v , ob ); int putted = rec ( start + 1 , weight - w [ start ], w , v , ob ) + v [ start ]; if ( putted > noput ){ result = putted ; cout << \"===\" << \"rec(\" << start << \",\" << weight << \")\" << \"===\" << endl ; ob . push_back ( start ); } else { result = noput ; } } return result ; } void print ( vector < int > v ){ for ( auto a : v ){ cout << a << \" \" ; } cout << endl ; } int main () { vector < int > w = { 2 , 1 , 3 , 2 }; vector < int > v = { 3 , 2 , 4 , 2 }; int weight = 5 ; vector < int > ob ; cout << rec ( 0 , weight , w , v , ob ) << endl ; print ( ob ); return 0 ; }","title":"2.1.1 \u4f7f\u7528\u7a77\u7aed\u641c\u7d22"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#212","text":"\u52a8\u6001\u89c4\u5212\u7684\u9012\u63a8\u516c\u5f0f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4ece\u4e0a\u9762\u7684\u7a77\u7aed\u641c\u7d22\u4e2d\u5f97\u5230\u3002 rec(i,j) \u8868\u793a\u4ece\u7b2ci\u4e2a\u7269\u4f53\u5f00\u59cb\uff0c\u5728\u4e0d\u8d85\u8fc7j\u7684\u91cd\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u7684\u4ef7\u503c\u662f\u591a\u5c11 \u8bbe\u7f6edp[i][j] = rec(i,j); \u5219\u53ef\u4ee5\u77e5\u9053dp[n][j] = 0; \u56e0\u4e3a\u6700\u591a\u53ea\u6709n-1\u4e2a\u7269\u4f53\uff1b dp[i][j] = dp[i+1][j] \u5f53\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u5927\u4e8ej\u7684\u65f6\u5019\uff1b dp[i][i] = max( dp[i+1][j] , dp[i+1][j-w[i]]+v[i] ) \u5f53\u7b2ci\u4e2a\u7269\u4f53\u80fd\u591f\u88c5\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u5206\u522b\u5c1d\u8bd5\u88c5\u5165\u548c\u4e0d\u88c5\u5165\uff0c\u53d6\u6700\u5927\u503c\u3002 /** * \u80cc\u5305\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u89e3\u6cd5 * @param w * @param v * @param weight * @return */ int dp ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); for ( int i = n ; i >= 0 ; i -- ){ for ( int j = 0 ; j < weight + 1 ; j ++ ){ if ( w [ i ] > j ){ dp [ i ][ j ] = dp [ i + 1 ][ j ]; } else { dp [ i ][ j ] = max ( dp [ i + 1 ][ j ], dp [ i + 1 ][ j - w [ i ]] + v [ i ]); } } } print2 ( dp ); return dp [ 0 ][ weight ]; }","title":"2.1.2 \u4f7f\u7528\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#213","text":"/** * \u4ece\u72b6\u6001\u8f6c\u79fb\u7684\u89c2\u70b9\u6765\u770b * dp[i][j] \u8868\u793a\u6311\u9009\u51fa\u4ece0\u5230i\u7269\u4f53\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u72b6\u6001\u3002dp[0][j]\u8868\u793a\u9009\u62e90\u4e2a\u7269\u54c1\u65f6\u7684\u91cd\u5927\u4ef7\u503c * dp[1][j] \u8868\u793a\u9009\u62e9\u7269\u4f531\u65f6\u5019\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u6700\u5927\u7684\u4ef7\u503c * \u6240\u4ee5\u6709dp[0][j] = 0; * dp[i][j] = dp[i-1][j] \u5f53i-1\u7269\u4f53\u4e0d\u80fd\u653e\u5165\u80cc\u5305\u65f6 * dp[i][j] = dp[i-1][j-w[i]] + v[i] \u5f53i-1\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\u7684\u65f6\u5019 * dp[0][j] * @param w * @param v * @param weight * @return */ int dp2 ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < weight + 1 ; j ++ ){ if ( w [ i ] > j ){ dp [ i + 1 ][ j ] = dp [ i ][ j ]; } else { dp [ i + 1 ][ j ] = max ( dp [ i ][ j ], dp [ i ][ j - w [ i ]] + v [ i ]); } } } print2 ( dp ); return dp [ n ][ weight ]; }","title":"2.1.3 \u4f7f\u7528\u72b6\u6001\u8f6c\u79fb\u7684\u89c2\u70b9"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#22","text":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u53ef\u4ee5\u8fd9\u6837\u5efa\u7acb\u9012\u63a8\u5173\u7cfb\uff1b dp[i][j] \u8868\u793a\u524di-1\u4e2a\u7269\u4f53\u653e\u5165\u80cc\u5305\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u4ef7\u503c\u3002i=0\u65f6\u8868\u793a\u6ca1\u6709\u7269\u4f53\u3002 w[i] \u548c v[i] \u8868\u793a\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u3002\u6ce8\u610f\u8fd9\u91ccdp\u4e2d\u7684i\u548cw,v\u4e2d\u7684i\u76f8\u5dee1.\u4e5f\u5c31\u662fdp[i+1]\u5bf9\u5e94\u7684\u7269\u4f53\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u5206\u522b\u662fw[i],v[i]; dp [ i + 1 ][ j ] := dp [ i ][ j ] \u7b2c i\u4e2a\u7269\u4f53\u4e0d\u653e\u5165\u80cc\u5305 : = dp [ i ][ j - 1 * w [ i ]] + v [ i ] \u7b2c i\u4e2a\u7269\u4f53\u653e\u51651\u6b21\u7684\u65f6\u5019 : = dp [ i ][ j - 2 * w [ i ]] + 2 * v [ i ] \u7b2c i\u4e2a\u7269\u4f53\u653e\u51652\u6b21\u7684\u65f6\u5019 ... \u4e0a\u9762\u7684\u9012\u63a8\u5173\u7cfb\u867d\u7136\u5bb9\u6613\u7406\u89e3\uff0c\u5374\u5b58\u5728\u8fd9\u5faa\u73af\uff0c\u6709\u91cd\u590d\u8ba1\u7b97\u7684\u5730\u65b9\u3002\u9012\u63a8\u5173\u7cfb\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\uff1a dp[i+1][j] = dp[i][j] ; \u7b2ci\u4e2a\u7269\u4f53\u65e0\u6cd5\u653e\u5165\u80cc\u5305\u7684\u60c5\u51b5 dp[i+1][j] = d[i+1][j-w[i]] + v[i] ; \u5982\u679c\u7b2ci\u4e2a\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\uff0c\u90a3\u4e48\u6700\u5927\u4ef7\u503c\u7b49\u4e8e \u5728dp[i+1][j-w[i]]\u7684\u57fa\u7840\u4e0a\u518d\u653e\u5165\u4e00\u4e2ai\u7269\u54c1\uff0c\u8fd9\u65f6\u7684\u4ef7\u503c\u662fdp[i+1][j-w[i]] + v[i]; \u6240\u4ee5\u6700\u540e\u7684\u9012\u63a8\u5173\u7cfb\u53ef\u4ee5\u5199\u6210\uff1a dp[0][j] = 0; dp[i+1][j] = max(dp[i][j],dp[i+1][j-w[i]] + v[i]) /** * \u5b8c\u5168\u80cc\u5305\u95ee\u9898 * @param w * @param v * @param weight * @return */ int dp3 ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j <= weight ; j ++ ){ if ( j < w [ i ]){ dp [ i + 1 ][ j ] = dp [ i ][ j ]; } else { dp [ i + 1 ][ j ] = max ( dp [ i ][ j ], dp [ i + 1 ][ j - w [ i ]] + v [ i ]); } } } print2 ( dp ); return dp [ n ][ weight ]; } \u4ee5\u4e0a\u80cc\u5305\u7684\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u53ef\u4ee5\u4f18\u5316\u5230O\uff08nW\uff09\u4e5f\u5c31\u662f\u7269\u54c1\u6570\u91cf * \u80cc\u5305\u5bb9\u91cf\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u4f18\u5316\u5230O\uff08n\uff09. \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8db3\u591f\u4e86\u3002\u4f46\u662f\u9488\u5bf9\u4e0b\u9762\u8fd9\u9053\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e0d\u591f\u7528\u4e86\uff0c\u9700\u8981\u53e6\u5916\u5bfb\u627e\u89e3\u9898\u7684\u65b9\u6cd5\u3002 \u6709n\u4e2a\u91cd\u91cf\u548c\u4ef7\u503c\u5206\u522b\u4e3aw[i],v[i]\u7684\u7269\u54c1\uff0c\u88c5\u5165\u5bb9\u91cf\u4e3aW\u7684\u80cc\u5305\uff0c\u6c42\u6700\u5927\u4ef7\u503c\u3002 \u9650\u5236\u6761\u4ef6\uff1a n : 1--100 ; w[i] : 1--10000000 ; v[i] : 1--100; W : 1--1000000000 \u539f\u6765\u80cc\u5305\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(nW),\u4f46\u662f\u672c\u9898'\u6545\u610f'\u628aW\u8bbe\u7f6e\u7684\u5f88\u5927\uff0c\u4f7f\u5f97\u4e0d\u80fd\u4f7f\u7528\u539f\u6765\u7684\u65b9\u6cd5\u6c42\u89e3\u3002 \u4ed4\u7ec6\u5206\u6790\u6570\u636e\u7684\u53d6\u503c\u8303\u56f4\u53d1\u73b0\uff0cv[i]\u7684\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u6362\u601d\u8def\uff0c\u6c42\u89e3\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7W\u7684\u60c5\u51b5\u4e0b\u4ef7\u503c\u7684\u6700\u5927\u503c\uff0c \u5c31\u662f\u6c42\u89e3\u76f8\u540c\u4ef7\u503c\u4e0b\u7684\u603b\u91cd\u91cf\u7684\u6700\u5c0f\u503c\u3002 dp[i][j] \u8868\u793a\u524di-1\u4e2a\u7269\u4f53\u5728\u4ef7\u503c\u4e0d\u8d85\u8fc7j\u7684\u65f6\u5019\u7684\u603b\u91cd\u91cf\u7684\u6700\u5c0f\u503c\u3002 dp[0][j] = INF; \u628a\u4e0d\u5b58\u5728\u6700\u5c0f\u503c\u7684\u60c5\u51b5\u8bbe\u7f6e\u4e3a\u6700\u5927\u503c\uff0c\u8fd9\u6837\u662f\u65b9\u4fbf\u7528min(); dp[0][0] = 0 ; dp[i+1][j] = min(dp[i][j],dp[i][j-v[i]]+w[i]) /** * 0-1\u80cc\u5305\u7684\u53d8\u79cd * @return */ int dp4 ( vector < int > w , vector < int > v , int weight ){ int n = w . size (); vector < vector < int >> dp ( n + 1 , vector < int > ( weight + 1 )); dp [ 0 ][ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j <= weight ; j ++ ){ if ( j < v [ i ]){ dp [ i + 1 ][ j ] = dp [ i ][ j ]; } else { dp [ i + 1 ][ j ] = min ( dp [ i ][ j ], dp [ i + 1 ][ j - v [ i ]] + w [ i ]); } } } print2 ( dp ); return dp [ n ][ weight ]; }","title":"2.2 \u5b8c\u5168\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#23","text":"# \u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u4f7f\u7528ci\u6b21 def package_ci ( n , c , w , v ): N = n + 1 C = c + 1 dp = [ [ 0 ] * N for i in range ( C )] for i in range ( 1 , N ): for j in range ( 1 , C ): if j < w [ i ]: dp [ i ][ j ] = dp [ i - 1 ][ j ] else : for k in range ( 1 , j / w [ i ]): dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i - 1 ][ j - k * w [ i ] + k * v [ i ]]) return dp [ n ][ n ]","title":"2.3 \u591a\u91cd\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#3","text":"\u4e00\u822c\u7684\u80cc\u5305\u95ee\u9898\u53ea\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u4f7f\u7528\u4e8c\u7ef4\u8868\u683c\u53ef\u4ee5\u5b8c\u6210\u3002 \u5982\u679c\u6709\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u5c31\u5fc5\u987b\u4f7f\u7528\u4e09\u7ef4\u7684\u8868\u683c\u624d\u80fd\u5b8c\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u6837\u7684\u95ee\u9898\u53eb\u505a\u4e8c\u7ef4\u80cc\u5305\u3002","title":"3. \u4e8c\u7ef4\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#4","text":"\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32s\u548c\u4e00\u4e2a\u8bcd\u5178\uff0c\u5224\u65ad\u5b57\u7b26\u4e32s\u662f\u5426\u53ef\u4ee5\u88ab\u7a7a\u683c\u5207\u5206\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u51fa\u73b0\u5728\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u6837\u4f8b \u7ed9\u51fa s = \"lintcode\" dict = [\"lint\",\"code\"] \u8fd4\u56de true \u56e0\u4e3a\"lintcode\"\u53ef\u4ee5\u88ab\u7a7a\u683c\u5207\u5206\u6210\"lint code\" \u5355\u8bcd\u5207\u5206 \u601d\u8def\u4e00\uff1a\u5f00\u4e00\u4e2a dp[n+1] \u8868\u793a\u524di\u4e2a\u5b57\u6bcd\u80fd\u5426\u7528\u7a7a\u683c\u5206\u5272\u5f00(\u6309\u7167\u5b57\u5178\u91cc\u9762\u7ed9\u51fa\u7684\u5355\u8bcd)\u3002 dp[0]=true \u8868\u793a\u7a7a\u5b57\u7b26\u4e32\u80fd\u591f\u5206\u5272\u5f00\uff0c dp[1]=true \u5f53 s[0] \u5728\u5b57\u5178\u4e2d\u5b58\u5728\u65f6\u3002\u5bf9\u4e8e dp[j] \u6765\u8bf4\uff0c\u9010\u4e2a\u5411\u524d\u641c\u7d22\uff0c\u770b\u662f\u5426\u6709 s[i,j] \u5b58\u5728\u4e0edict\u4e2d\u7684\u540c\u65f6 dp[i-1] \u4e3a\u771f\u3002\u5982\u679c\u6709\uff0c dp[j]=true ,\u5982\u679c\u641c\u7d22\u5230\u5934\u8fd8\u6ca1\u6709\uff0c dp[j]=false .\u8fd9\u79cd\u65b9\u6cd5\u6700\u5bb9\u6613\u60f3\u5230\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u3002(\u4e0d\u80fd\u901a\u8fc7 lintcode \u7684\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b) //[\u5355\u8bcd\u5207\u5206](http://lintcode.com/zh-cn/problem/word-break/) bool wordBreak ( string s , unordered_set < string > & dict ) { // write your code here if ( s . empty ()) return false ; vector < bool > dp ( s . size () + 1 , false ); dp [ 0 ] = true ; for ( int i = 1 ; i <= s . size (); ++ i ) { if ( dict . find ( s . substr ( i - 1 , 1 )) != dict . end () && dp [ i - 1 ]){ dp [ i ] = true ; } int clen = 2 ; for ( int j = i - 1 ; j >= 1 ; -- j ) { string ss = s . substr ( j - 1 , clen ); if ( dict . find ( ss ) != dict . end () && dp [ j - 1 ]){ dp [ i ] = true ; break ; } clen ++ ; } } return dp [ s . size ()]; } \u601d\u8def\u4e8c\uff1a\u4e0a\u9762\u7684\u7b97\u6cd5\u6bcf\u6b21\u90fd\u4f1a\u56de\u6eaf\u5230\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u5178\u7684\u6700\u5927\u7684\u5b57\u7b26\u7684\u957f\u5ea6\u8fdc\u8fdc\u5c0f\u4e8e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6(\u5f88\u5e38\u89c1\u7684\u60c5\u51b5)\uff0c\u4f1a\u9020\u6210\u5927\u91cf\u7684\u6d6a\u8d39\uff0c\u6240\u4ee5\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\uff0c\u6bcf\u6b21\u53ea\u56de\u6eaf\u5230\u5b57\u5178\u4e2d\u6700\u5927\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5904\uff0c\u8fd9\u6837\u5c31\u80fd\u901a\u8fc7 lintcode \u7684\u5927\u89c4\u6a21\u7684\u6570\u636e\u4e86\u3002 getMaxLen \u7528\u6765\u83b7\u53d6\u5b57\u5178\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u5f53dict\u4e2d\u6700\u5927\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5f88\u957f\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u964d\u4f4e\u3002 int getMaxLen ( unordered_set < string > & dict ){ int maxlen = 0 ; for ( auto a : dict ){ maxlen = max ( maxlen ,( int ) a . size ()); } return maxlen ; } //[\u5355\u8bcd\u5207\u5206](http://lintcode.com/zh-cn/problem/word-break/) bool wordBreak ( string s , unordered_set < string > & dict ) { // write your code here if ( s . empty () && dict . empty ()) return true ; if ( s . empty ()) return false ; vector < bool > dp ( s . size () + 1 , false ); int maxlen = getMaxLen ( dict ); dp [ 0 ] = true ; for ( int i = 1 ; i <= s . size (); ++ i ) { if ( dict . find ( s . substr ( i - 1 , 1 )) != dict . end () && dp [ i - 1 ]){ dp [ i ] = true ; } int clen = 2 ; int end = max ( 1 , i - 1 - maxlen ); for ( int j = i - 1 ; j >= end ; -- j ) { string ss = s . substr ( j - 1 , clen ); if ( dict . find ( ss ) != dict . end () && dp [ j - 1 ]){ dp [ i ] = true ; break ; } clen ++ ; } } return dp [ s . size ()]; }","title":"4. \u5355\u8bcd\u5207\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#5","text":"\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\u3002 dp[i][j] \u8868\u793a\u7528\u524d i \u79cd\u9762\u503c\u7684\u94b1\u7ec4\u6210 j \u603b\u5171\u6709\u591a\u5c11\u4e2d\u65b9\u6848\u3002\u8bbe\u94b1\u5e01\u7684\u9762\u503c\u4e00\u5171\u6709N\u4e2d\uff0c\u7ec4\u6210\u7684\u9762\u503c\u4e3aM\uff0c\u5219\u9700\u8981 N*(M+1) \u7684\u6570\u7ec4\u3002\u7b2c\u4e00\u884c\u8868\u793a\u4f7f\u7528\u7b2c\u4e00\u79cd\u9762\u503c\u7684\u8d27\u5e01\u7ec4\u6210\u76ee\u6807\u503c\u7684\u65b9\u6cd5\u6570\u91cf\uff0c\u5f53 j \u80fd\u591f\u88ab\u6574\u9664\u65f6\uff0c\u65b9\u6cd5\u6570\u91cf\u4e3a1\uff0c\u5426\u5219\u4e3a0. \u7b2c\u4e00\u5217\u8868\u793a\u7ec4\u6210\u76ee\u6807\u503c 0 \u6709\u591a\u5c11\u79cd\u60c5\u51b5\uff0c\u65e0\u8bba\u6709\u51e0\u79cd\u9762\u503c\u7684\u8d27\u5e01\uff0c\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u4e00\u4e2a\u90fd\u4e0d\u7528\u3002 \u9012\u63a8\u516c\u5f0f\uff1a dp[i][j] = dp[i-1][j] if j < v[i] , (\u5f53\u9762\u503c\u4e3a v[i] \u7684\u8d27\u5e01\u6bd4\u76ee\u6807\u503c\u8fd8\u8981\u5927\u7684\u65f6\u5019\uff0c\u80af\u5b9a\u4e00\u5f20 v[i] \u90fd\u4e0d\u80fd\u4f7f\u7528\uff0c\u8fd9\u4e2a\u65f6\u5019\u65b9\u6cd5\u6570\u91cf\u7b49\u4e8e dp[-1][j] ). dp[i][j] = dp[i-1][j] + dp[i][j-v[i]] if j >= v[i] , (\u5982\u679c\u76ee\u6807\u503c\u6bd4\u9762\u503c\u4e3a v[i] \u7684\u94b1\u5927\uff0c\u5219\u610f\u5473\u7740\u53ef\u4ee5\u4f7f\u7528 v[i] \u82e5\u5e72\u6b21\uff0c\u4e00\u76f4\u5230\u8d85\u8fc7\u76ee\u6807\u503c\uff1b \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ec4\u6210\u76ee\u6807\u503c\u7684\u603b\u65b9\u6cd5\u6570\u91cf\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u7684\u548c\uff1a \u4e0d\u4f7f\u7528\u7b2ci\u4e2d\u8d27\u5e01\u7ec4\u6210j, \u65b9\u6cd5\u6570\u91cf\u662f dp[i-1][j] ; \u4f7f\u7528\u7b2c i \u79cd\u8d27\u5e01\u7ec4\u6210j\u7684\u6570\u91cf\uff0c dp[i][j-v[i]] , \u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a \u9996\u5148\u4f7f\u7528\u4e00\u5f20 v[i] ,\u7136\u540e\u7528\u524d i \u4e2d\u8d27\u5e01\u7ec4\u6210\u5269\u4e0b\u7684 j-v[i] \u76ee\u6807\u503c\uff0c\u8fd9\u4e2a\u503c\u4e4b\u524d\u8ba1\u7b97\u8fc7\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u6765\uff0c\u5c31\u662f dp[i][j-v[i]] ; #include <iostream> #include <vector> using namespace std ; int getNum ( vector < int > v , int aim ){ vector < vector < int > > dp ( v . size (), vector < int > ( aim + 1 )); //\u521d\u59cb\u5316\u7b2c\u4e00\u5217 for ( int i = 0 ; i < v . size (); ++ i ){ dp [ i ][ 0 ] = 1 ; } //\u521d\u59cb\u5316\u7b2c\u4e00\u884c for ( int j = 1 ; j <= aim ; j ++ ){ dp [ 0 ][ j ] = j % v [ 0 ] == 0 ? 1 : 0 ; } for ( int i = 1 ; i < v . size (); ++ i ){ for ( int j = 1 ; j <= aim ; ++ j ){ dp [ i ][ j ] = j - v [ i ] >= 0 ? dp [ i - 1 ][ j ] + dp [ i ][ j - v [ i ]] : dp [ i - 1 ][ j ]; } } //\u6253\u5370\u52a8\u6001\u89c4\u5212\u8868\u683c for ( int i = 0 ; i < dp . size (); ++ i ){ for ( int j = 0 ; j < dp [ 0 ]. size (); ++ j ){ cout << dp [ i ][ j ] << \" \\t \" ; } cout << endl ; } return dp [ v . size () - 1 ][ aim ]; } int main () { vector < int > v = { 5 , 2 , 3 , 7 }; int aim = 7 ; std :: cout << getNum ( v , aim ) << std :: endl ; return 0 ; }","title":"5. \u6362\u94b1\u7684\u65b9\u6cd5\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#6","text":"LeetCode\u9898\u76ee \u96be\u5ea6 1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u4e2d\u7b49 516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 \u4e2d\u7b49 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 \u4e2d\u7b49","title":"6. \u76f8\u5173\u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%9A%E5%BC%88%E8%AE%BA/","text":"","title":"\u535a\u5f08\u8bba"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9B%E7%AD%89%E5%88%86%E6%95%B0%E7%BB%84/","text":"\u9898\u76ee \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6574\u578b\u6570\u7ec4A\uff0c \u6570\u7ec4\u91cc\u6240\u6709\u7684\u6570\u90fd\u662f\u6b63\u6574\u6570\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u6ee1\u8db30<=X <= Y <N\u7684\u6574\u6570\uff0c A[X], A[X+1] \u2026 A[Y]\u6784\u6210A\u7684\u4e00\u4e2a\u5207\u7247\uff0c\u8bb0\u4f5c(X, Y). \u7528\u4e09\u4e2a\u4e0b\u6807 m1, m2, m3\u4e0b\u6807\u6ee1\u8db3\u6761\u4ef60 < m1, m1 + 1 < m2, m2 +1 < m3 < N \u2013 1\u3002 \u53ef\u4ee5\u628a\u8fd9\u4e2a\u6574\u578b\u6570\u7ec4\u5206\u6210(0, m1-1), (m1+1, m2-1), (m2+1, m3-1), (m3+1, N-1) \u56db\u4e2a\u5207\u7247\u3002 \u5982\u679c\u8fd9\u56db\u4e2a\u5207\u7247\u7684\u6574\u6570\u6c42\u548c\u76f8\u7b49\uff0c\u79f0\u4f5c\u201c\u56db\u7b49\u5206\u201d\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6574\u578b\u6570\u7ec4\u662f\u5426\u53ef\u4ee5\u56db\u7b49\u5206 \u8981\u6c42\uff1a \u51fd\u6570\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u4f7f\u7528\u7684\u989d\u5916\u5b58\u50a8\u7a7a\u95f4\uff08\u9664\u4e86\u8f93\u5165\u7684\u6570\u7ec4\u4e4b\u5916\uff09\u6700\u591a\u4e3aO(N)\u3002 \u601d\u8def\uff1a\u5982\u679c\u4e0d\u53bb\u6389\u4e2d\u95f4\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5224\u65ad\u4e00\u4e2a\u6570\u7ec4\u662f\u5426\u80fd\u591f\u56db\u7b49\u5206\uff0c\u53ea\u9700\u8981\u770b\u6570\u7ec4\u7684\u548c\u88ab4\u6574\u9664\u7684\u60c5\u51b5\u4e0b\u80fd\u5426\u4f9d\u6b21\u52a0\u548c\u6210sum/4\u5c31\u53ef\u4ee5\u4e86\uff0c\u4ee3\u7801\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a bool judge ( vector < int > v ){ int sum = 0 ; for ( auto vv : v ){ sum += vv ; } if ( sum % 4 != 0 ){ return false ;} int partSum = sum / 4 ; sum = 0 ; int count = 0 ; for ( int i = 0 ; i < v . size (); i ++ ){ sum += v [ i ]; if ( sum == partSum ){ count ++ ; sum = 0 ; } if ( sum > partSum ){ return false ; } } if ( count == 4 ){ return true ; } else { return false ; } } \u4f46\u662f\u672c\u9898\u8981\u590d\u6742\u7684\u591a\uff0c\u9700\u8981\u786e\u5b9a\u4e09\u4e2a\u5206\u5272\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u6570\u7ec4\u7684\u548c\u4e5f\u4e0d\u518d\u4e00\u5b9a\u662f4\u7684\u500d\u6570\u3002\u672c\u9898\u53ef\u4ee5\u4ece\u4e24\u8fb9\u5165\u624b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u7ec4\u53ef\u4ee5\u56db\u7b49\u5206\uff0c\u5219\u4e24\u8fb9\u4e00\u5b9a\u53ef\u4ee5\u6709\u8fde\u7eed\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u7684\u548c\u662f\u76f8\u7b49\u7684\uff0c\u5373a[0]+a[1]+...a[low] = a[N-1]+a[N-2]+a[high]. \u627e\u5230\u7b2c\u4e00\u4e2a\u8fd9\u6837\u7684\u5206\u5272\uff0c\u786e\u5b9alow,\u548chigh, \u7136\u540e\u5728low,high\u7684\u57fa\u7840\u4e0a\uff0c\u641c\u7d22\u662f\u5426\u6709\u4e00\u4e2a\u4ecb\u4e8elow\u548chigh\u4e2d\u95f4\u7684\u5143\u7d20m\u53ef\u4ee5\u88ab\u5269\u4e0b\u7684\u6570\u7ec4\u5206\u6210\u548c\u76f8\u7b49\u7684\u4e24\u90e8\u5206\uff0c\u5e76\u4e14\u548c==\u7b2c\u4e00\u90e8\u5206\u548c\u7b2c\u56db\u90e8\u5206\u3002\u5982\u679c\u5b58\u5728\uff0c\u5c31\u5b8c\u6210\u4e86\u6570\u7ec4\u7684\u56db\u7b49\u5206\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5c31\u9012\u589elow, \u627e\u5230\u7b2c\u4e8c\u4e2alow,high\u7684\u503c\uff0c\u7ee7\u7eed\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\u3002 \u5728\u4e2d\u95f4\u9636\u6bb5\u67e5\u627e\u7684\u65f6\u5019\uff0cm\u7684\u4f4d\u7f6e\u53ef\u4ee5\u5b9a\u5728low,high\u7684\u4e2d\u95f4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u5f0f\u5feb\u901f\u5b9a\u4f4d\u3002\u56e0\u4e3a\u5de6\u53f3\u548c\u76f8\u7b49\u7684\u60c5\u51b5\u4e0d\u4f1a\u7279\u522b\u591a\uff0c\u6240\u4ee5\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\u3002 \u67e5\u627e\u4e00\u4e2a\u6570\u7ec4\u4e24\u7aef\u8fde\u7eed\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u6240\u6709\u60c5\u51b5\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a /* * \u627e\u5230\u6570\u7ec4\u4e24\u4fa7\u548c\u76f8\u7b49\u7684\u8fde\u7eed\u5e8f\u5217 */ vector < int > bothSidesSum ( vector < int > v ){ vector < int > re ; if ( v . size () < 2 ) return re ; int left = 0 ; int right = v . size () - 1 ; int leftSum = v [ left ++ ]; int rightSum = v [ right -- ]; while ( left <= right ){ if ( leftSum < rightSum ){ leftSum += v [ left ++ ]; } else if ( leftSum > rightSum ){ rightSum += v [ right -- ]; } else { re . push_back ( leftSum ); leftSum += v [ left ++ ]; } } return re ; } \u73b0\u5728\u5047\u8bbe\u786e\u5b9a\u4e86\u67d0\u4e00\u6b21\u7684low,high\u7684\u503c\u3002\u5373\u4ece\u6700\u5de6\u4fa7\u5f00\u59cb\u5230low-1\u7684\u548c\u7b49\u4e8e\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb\u5230high+1\u7684\u503c\u3002\u73b0\u5728\u770b\u5982\u4f55\u641c\u7d22m\u5e94\u8be5\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u4ee5m\u4e3a\u5206\u5272\u7684\u4e24\u6bb5\u548c\u662f\u76f8\u7b49\u7684\u3002 /** * \u627e\u5230\u548c\u76f8\u7b49\u7684\u5206\u754c\u70b9\uff0c\u6ca1\u6709\u8fd4\u56de0\uff0c\u6709\u7684\u8bdd\u8fd4\u56de\u548c\u7684\u503c */ int findMiddle ( vector < int > sums , int low , int high ){ int left = low + 1 ; int right = high - 1 ; while ( left <= right ){ int middle = ( left + right ) / 2 ; int leftSum = sums [ middle - 1 ] - sums [ low ]; int rightSum = sums [ high - 1 ] - sums [ middle ]; if ( leftSum < rightSum ){ left = middle + 1 ; } else if ( leftSum > rightSum ){ right = middle - 1 ; } else { return leftSum ; } } return 0 ; } \u628a\u4e0a\u9762\u7684\u4e24\u4e2a\u64cd\u4f5c\u7ed3\u5408\u8d77\u6765\u641c\u7d22\uff0c\u5c31\u662f\u672c\u9898\u7684\u89e3\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u662f\u5916\u5c42\u9996\u5148\u641c\u7d22low,high,\u4e00\u65e6\u641c\u7d22\u5230low,high\uff0c\u5c31\u8c03\u7528findMiddle\u65b9\u6cd5\u770b\u662f\u5426\u80fd\u591f\u627e\u5230\u5206\u754c\u3002\u5982\u679c\u80fd\u591f\u627e\u5230\u5206\u754c\uff0c\u8fd8\u8981\u770b\u5176sum\u662f\u5426\u7b49\u4e8e\u7b2c\u4e00\u4e2asum\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u89e3\u5c31\u627e\u5230\u4e86\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u9012\u589elow,\u7ee7\u7eed\u4e0b\u4e00\u6b21\u641c\u7d22\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u5982\u4e0b\uff1a bool solve ( vector < int > v ){ if ( v . size () < 7 ) return false ; auto sums = sumArray ( v ); int left = 0 ; int right = v . size () - 1 ; int leftSum = v [ left ++ ]; int rightSum = v [ right -- ]; while ( left <= right ){ if ( leftSum < rightSum ){ leftSum += v [ left ++ ]; } else if ( leftSum > rightSum ){ rightSum += v [ right -- ]; } else { auto secondSum = findMiddle ( sums , left , right ); if ( leftSum == secondSum ){ return true ; } else { leftSum += v [ left ++ ]; } } } return false ; }","title":"\u56db\u7b49\u5206\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87/","text":"\u56de\u6587\u7b97\u6cd5\u548c\u9898\u76ee \u00b6 1. Manacher\u7b97\u6cd5 \u00b6 Manacher \u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u627e\u5230\u6700\u957f\u56de\u6587\u4e32\u7684\u7b97\u6cd5\uff0c\u5b83\u5145\u5206\u5229\u7528\u4e86\u5df2\u7ecf\u627e\u5230\u7684\u56de\u6587\u7684\u5bf9\u79f0\u6027\uff0c\u5c3d\u91cf\u51cf\u5c11\u5b57\u7b26\u4e32\u6bd4\u8f83\u7684\u6b21\u6570\u3002 \u8bbe lps[i] \u8868\u793a\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u56de\u6587\u534a\u5f84\u3002\u4f8b\u5982\u5bf9\u4e8e abcba , lps[0] = 1, lps[1] = 1, lps[2] = 3. \u8bbe id \u8868\u793a\u4e00\u4e2a\u5df2\u7ecf\u53d1\u73b0\u7684\u56de\u6587\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff0c lid , rid \u5206\u522b\u662f\u5176\u5de6\u53f3\u8fb9\u754c\uff0c lps[id] = rid - id + 1 = id - lid + 1 . i > id, i > id , lps[i] \u8868\u793a\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u534a\u5f84\uff0c\u8fd9\u4e2a\u534a\u5f84\u53ef\u4ee5\u6839\u636elps[id]\u5de6\u4fa7\u7684\u6570\u636e\u5f97\u5230\uff0c\u56e0\u4e3a\u5de6\u53f3\u4e24\u4fa7\u662f\u5bf9\u79f0\u7684\u3002 \u5982\u679c i < rid, \u5982\u679clps[i'] <= rid - i, \u5219 lps[i] = lps[i'], \u5982\u679clps[i'] > rid - i, \u5219 lps[i] = rid - i. def manacher ( s , DEBUG = True , RETURNSTR = True ): \"\"\" manacher \u7b97\u6cd5\u5b9e\u73b0 \"\"\" # \u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u63d2\u5165\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5b57\u7b26 '#' s = '#' + \"\" . join ([ c + '#' for c in s ]) s = '^' + s + '$' # \u9996\u5c3e\u9644\u52a0\u4e0d\u540c\u5b57\u7b26\u907f\u514d\u8fb9\u754c\u5224\u65ad n = len ( s ) lps = [ 1 ] * n lid , mid , rid = 0 , 0 , 0 i = 1 # s[0] \u662f '^'\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97 center = 0 # \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u7528\u6765\u751f\u6210\u56de\u6587 ans = 0 # \u6700\u957f\u56de\u6587\u7684\u957f\u5ea6 while i < n - 1 : if i < rid : # i' = 2 * mid - i \u662f i \u5173\u4e8e mid \u7684\u5bf9\u79f0\u70b9 lps [ i ] = min ( lps [ 2 * mid - i ], rid - i ) # lps[i] \u521d\u59cb\u5316\u4e3a1\uff0c\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u90fd\u662f\u534a\u5f84\u4e3a1\u7684\u56de\u6587 # \u4ee5 i \u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62 # \u56e0\u4e3a\u9996\u5c3e\u65b0\u589e\u4e86\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u5230\u8fb9\u754c\u4e00\u5b9a\u4f1a\u505c\u6b62 while s [ i - lps [ i ]] == s [ i + lps [ i ]]: lps [ i ] += 1 # \u901a\u8fc7\u4e0a\u9762\u7684\u5faa\u73af\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u51fa lps[i] # \u5982\u679c i + lps[i] > rid, \u8bf4\u660e\u7ecf\u8fc7\u6269\u5c55\u8fb9\u754c\u5df2\u7ecf\u8d85\u8fc7 rid # \u66f4\u65b0 mid \u4e3a i, \u56e0\u4e3a lps[i] \u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230 # \u66f4\u65b0 rid \u4e3a mid + lps[mid] if rid < i + lps [ i ]: mid = i rid = mid + lps [ mid ] # \u6253\u5370\u51fa\u6bcf\u6b21\u5904\u7406\u5b8c\u6210\u7684\u72b6\u6001 if DEBUG : print ( \"=========i: {0} ============\" . format ( i )) print ( \"mid: {0} , lid: {1} , rid: {2} , i': {3} , i: {4} \" . format ( mid , lid , rid , 2 * mid - i , i )) print ( s ) label = [ \" \" ] * n label [ mid ] = 'M' label [ lid ] = 'L' label [ rid ] = 'R' label [ 2 * mid - i ] = 'j' label [ i ] = 'i' print ( \"\" . join ( label )) if RETURNSTR : if ans < lps [ i ] - 1 : ans = lps [ i ] - 1 center = i # \u5982\u679c i + lps[i] < rid, \u8bf4\u660e i \u7684\u8fb9\u754c\u8fd8\u6ca1\u6709\u8d8a\u8fc7 mid \u7684\u8fb9\u754c # \u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97 i + 1, \u4f9d\u65e7\u5229\u7528 mid \u7684\u5806\u79f0\u4fe1\u606f i += 1 if not RETURNSTR : ans = max ( lps ) - 1 return ans string = s [ center - ans : center + ans ] string = string . replace ( \"#\" , \"\" ) return string s = \"acabcbabc\" ans = manacher ( s ) 2. \u56de\u6587\u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u4e2d\u7b49 9. \u56de\u6587\u6570 \u7b80\u5355","title":"\u56de\u6587\u7b97\u6cd5\u548c\u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87/#_1","text":"","title":"\u56de\u6587\u7b97\u6cd5\u548c\u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87/#1-manacher","text":"Manacher \u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u627e\u5230\u6700\u957f\u56de\u6587\u4e32\u7684\u7b97\u6cd5\uff0c\u5b83\u5145\u5206\u5229\u7528\u4e86\u5df2\u7ecf\u627e\u5230\u7684\u56de\u6587\u7684\u5bf9\u79f0\u6027\uff0c\u5c3d\u91cf\u51cf\u5c11\u5b57\u7b26\u4e32\u6bd4\u8f83\u7684\u6b21\u6570\u3002 \u8bbe lps[i] \u8868\u793a\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u56de\u6587\u534a\u5f84\u3002\u4f8b\u5982\u5bf9\u4e8e abcba , lps[0] = 1, lps[1] = 1, lps[2] = 3. \u8bbe id \u8868\u793a\u4e00\u4e2a\u5df2\u7ecf\u53d1\u73b0\u7684\u56de\u6587\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff0c lid , rid \u5206\u522b\u662f\u5176\u5de6\u53f3\u8fb9\u754c\uff0c lps[id] = rid - id + 1 = id - lid + 1 . i > id, i > id , lps[i] \u8868\u793a\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u534a\u5f84\uff0c\u8fd9\u4e2a\u534a\u5f84\u53ef\u4ee5\u6839\u636elps[id]\u5de6\u4fa7\u7684\u6570\u636e\u5f97\u5230\uff0c\u56e0\u4e3a\u5de6\u53f3\u4e24\u4fa7\u662f\u5bf9\u79f0\u7684\u3002 \u5982\u679c i < rid, \u5982\u679clps[i'] <= rid - i, \u5219 lps[i] = lps[i'], \u5982\u679clps[i'] > rid - i, \u5219 lps[i] = rid - i. def manacher ( s , DEBUG = True , RETURNSTR = True ): \"\"\" manacher \u7b97\u6cd5\u5b9e\u73b0 \"\"\" # \u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u63d2\u5165\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5b57\u7b26 '#' s = '#' + \"\" . join ([ c + '#' for c in s ]) s = '^' + s + '$' # \u9996\u5c3e\u9644\u52a0\u4e0d\u540c\u5b57\u7b26\u907f\u514d\u8fb9\u754c\u5224\u65ad n = len ( s ) lps = [ 1 ] * n lid , mid , rid = 0 , 0 , 0 i = 1 # s[0] \u662f '^'\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97 center = 0 # \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u7528\u6765\u751f\u6210\u56de\u6587 ans = 0 # \u6700\u957f\u56de\u6587\u7684\u957f\u5ea6 while i < n - 1 : if i < rid : # i' = 2 * mid - i \u662f i \u5173\u4e8e mid \u7684\u5bf9\u79f0\u70b9 lps [ i ] = min ( lps [ 2 * mid - i ], rid - i ) # lps[i] \u521d\u59cb\u5316\u4e3a1\uff0c\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u90fd\u662f\u534a\u5f84\u4e3a1\u7684\u56de\u6587 # \u4ee5 i \u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62 # \u56e0\u4e3a\u9996\u5c3e\u65b0\u589e\u4e86\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u5230\u8fb9\u754c\u4e00\u5b9a\u4f1a\u505c\u6b62 while s [ i - lps [ i ]] == s [ i + lps [ i ]]: lps [ i ] += 1 # \u901a\u8fc7\u4e0a\u9762\u7684\u5faa\u73af\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u51fa lps[i] # \u5982\u679c i + lps[i] > rid, \u8bf4\u660e\u7ecf\u8fc7\u6269\u5c55\u8fb9\u754c\u5df2\u7ecf\u8d85\u8fc7 rid # \u66f4\u65b0 mid \u4e3a i, \u56e0\u4e3a lps[i] \u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230 # \u66f4\u65b0 rid \u4e3a mid + lps[mid] if rid < i + lps [ i ]: mid = i rid = mid + lps [ mid ] # \u6253\u5370\u51fa\u6bcf\u6b21\u5904\u7406\u5b8c\u6210\u7684\u72b6\u6001 if DEBUG : print ( \"=========i: {0} ============\" . format ( i )) print ( \"mid: {0} , lid: {1} , rid: {2} , i': {3} , i: {4} \" . format ( mid , lid , rid , 2 * mid - i , i )) print ( s ) label = [ \" \" ] * n label [ mid ] = 'M' label [ lid ] = 'L' label [ rid ] = 'R' label [ 2 * mid - i ] = 'j' label [ i ] = 'i' print ( \"\" . join ( label )) if RETURNSTR : if ans < lps [ i ] - 1 : ans = lps [ i ] - 1 center = i # \u5982\u679c i + lps[i] < rid, \u8bf4\u660e i \u7684\u8fb9\u754c\u8fd8\u6ca1\u6709\u8d8a\u8fc7 mid \u7684\u8fb9\u754c # \u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97 i + 1, \u4f9d\u65e7\u5229\u7528 mid \u7684\u5806\u79f0\u4fe1\u606f i += 1 if not RETURNSTR : ans = max ( lps ) - 1 return ans string = s [ center - ans : center + ans ] string = string . replace ( \"#\" , \"\" ) return string s = \"acabcbabc\" ans = manacher ( s )","title":"1. Manacher\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87/#2","text":"LeetCode\u9898\u76ee \u96be\u5ea6 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u4e2d\u7b49 9. \u56de\u6587\u6570 \u7b80\u5355","title":"2. \u56de\u6587\u76f8\u5173\u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/","text":"\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u6d89\u53ca\u5927\u91cf\u6570\u636e\u7684\u4e00\u4e9b\u7b97\u6cd5\u8bbe\u8ba1\u95ee\u9898\u3002 Bloom filter\uff08\u5e03\u9686\u8fc7\u6ee4\u5668\uff09 \u00b6 \u5b81\u53ef\u9519\u6740\u4e09\u5343\uff0c\u7edd\u4e0d\u653e\u8fc7\u4e00\u4e2a(\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u80af\u5b9a\u4e0d\u4f1a\u8bef\u5224\uff0c\u4f46\u662f\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u5374\u6709\u53ef\u80fd\u8bef\u4ee5\u4e3a\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408) \u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4e00\u79cd\u7528\u6765\u5904\u7406\u5927\u6570\u636e\u7684\u67e5\u8be2\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u7cbe\u786e\u7684\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\u3002\u8fd9\u91cc\u7684\u7cbe\u786e\u662f\u53ea\u53ef\u4ee5\u5728\u4e00\u5b9a\u7684\u7cbe\u5ea6\u8303\u56f4\u5185\u3002\u4f8b\u5982\u53ef\u4ee5\u4ee5 99.99% \u7684\u6982\u7387\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u5c5e\u4e8e\u8fd8\u662f\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u3002 \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u4f18\u52bf\uff1a - \u4f7f\u7528\u5f88\u5c11\u7684\u7a7a\u95f4\u5c31\u53ef\u4ee5\u628a\u7cbe\u786e\u5ea6\u505a\u7684\u5f88\u9ad8\u3002 - \u4e0d\u9700\u8981\u5b58\u50a8\u5143\u7d20\u672c\u8eab\uff0c\u5728\u67d0\u4e9b\u5bf9\u4fdd\u5bc6\u8981\u6c42\u975e\u5e38\u4e25\u683c\u7684\u573a\u5408\u6709\u4f18\u52bf - \u4e0d\u9700\u8981\u987e\u5fcc\u5355\u4e2a\u5143\u7d20\u53d6\u503c\u8303\u56f4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u5b83\u4e0e\u6700\u7ec8\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u5927\u5c0f\u6ca1\u6709\u5173\u7cfb \uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5355\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5fc5\u987b\u5728\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u8868\u793a\u7684\u8303\u56f4\u5185\uff09 \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u7f3a\u70b9\uff1a - \u7cbe\u786e\u5ea6\u6c38\u8fdc\u4e0d\u53ef\u80fd\u8fbe\u52301 - \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u67d0\u4e2a\u5143\u7d20\u975e\u5e38\u56f0\u96be \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u539f\u7406\u662f\uff0c\u5f53\u4e00\u4e2a\u5143\u7d20\u88ab\u52a0\u5165\u96c6\u5408\u65f6\uff0c\u901a\u8fc7K\u4e2a \u6563\u5217\u51fd\u6570 \u5c06\u8fd9\u4e2a\u5143\u7d20\u6620\u5c04\u6210\u4e00\u4e2a\u4f4d\u6570\u7ec4\u4e2d\u7684K\u4e2a\u70b9\uff0c\u628a\u5b83\u4eec\u7f6e\u4e3a1\u3002\u68c0\u7d22\u65f6\uff0c\u6211\u4eec\u53ea\u8981\u770b\u770b\u8fd9\u4e9b\u70b9\u662f\u4e0d\u662f\u90fd\u662f1\u5c31\uff08\u5927\u7ea6\uff09\u77e5\u9053\u96c6\u5408\u4e2d\u6709\u6ca1\u6709\u5b83\u4e86\uff1a\u5982\u679c\u8fd9\u4e9b\u70b9\u6709\u4efb\u4f55\u4e00\u4e2a0\uff0c\u5219\u88ab\u68c0\u5143\u7d20\u4e00\u5b9a\u4e0d\u5728\uff1b\u5982\u679c\u90fd\u662f1\uff0c\u5219\u88ab\u68c0\u5143\u7d20\u5f88\u53ef\u80fd\u5728\u3002\u8fd9\u5c31\u662f\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u57fa\u672c\u601d\u60f3\u3002 1. \u6563\u5217\u51fd\u6570 \u00b6 \u5728\u751f\u6210\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\u9047\u5230\u7684\u5bf9\u8c61\uff0c\u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u65f6\u5019\u662f\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u9519\u7684\u3002\u53ea\u6709\u751f\u6210\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\u6ca1\u6709\u7528\u5230\u7684\u5143\u7d20\uff0c\u624d\u53ef\u80fd\u51fa\u9519\u3002 \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u8bbe\u8ba1\u9700\u8981\u8003\u8651\u4e24\u4e2a\u56e0\u7d20\uff0c\u8981\u8868\u793a\u7684\u6570\u636e\u91cfn\u548c\u5141\u8bb8\u7684\u8bef\u5dee\u8303\u56f4p,\u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\uff1an=1000000000, p=0.01\u3002\u5df2\u77e5\u6570\u636e\u91cf\u548c\u8bef\u5dee\u8303\u56f4\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u516c\u5f0f\u6c42\u89e3\u9700\u8981\u5e03\u9686\u6570\u7ec4\u7684\u4f4d\u6570\u548c\u9700\u8981\u4f7f\u7528\u7684\u6563\u5217\u51fd\u6570\u7684\u4e2a\u6570\u3002 \u5e03\u9686\u6570\u7ec4\u7684\u4f4d\u6570m: m = -(n*lnp)/(ln2)^2 \u6563\u5217\u51fd\u6570\u7684\u4e2a\u6570k: k = ln2 * (m/n) = 0.7 * m/n; \u516c\u5f0f\u7684\u5177\u4f53\u63a8\u5bfc\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u53c2\u8003\u4f8b\u9898\uff1a 1. \u5927\u6587\u4ef6\u7684\u5904\u7406 \u00b6 \u628a\u4e00\u4e2a\u5927\u7684\u96c6\u5408\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5206\u914d\u5230\u591a\u53f0\u673a\u5668\u4e2d\uff0c\u6216\u8005\u5206\u914d\u5230\u591a\u4e2a\u6587\u4ef6\u91cc\uff0c\u8fd9\u79cd\u6280\u5de7\u662f\u5904\u7406\u9762\u8bd5\u9898\u4e2d\u6d89\u53ca\u5230\u5927\u6570\u636e\u7684\u65f6\u5019\u7684\u6700\u5e38\u7528\u7684\u6280\u5de7\u3002 1.1 \u53ea\u75282GB\u5185\u5b58\u572820\u4ebf\u4e2a\u6570\u4e2d\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57 \u00b6 \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u672c\u9898\u7684\u96be\u70b9\u662f\u76f4\u63a5\u4f7f\u7528\u54c8\u5e0c\u8868\u7684\u8bdd\uff0c\u5185\u5b58\u662f\u653e\u4e0d\u4e0b\u7684\u3002 \u5177\u4f53\u505a\u6cd5\u662f\uff1a \u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u5c06\u539f\u6765\u5305\u542b20\u4ebf\u4e2a\u6574\u6570\u7684\u6587\u4ef6\u5206\u5272\u621016\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4f7f\u5f97\u4e00\u6837\u7684\u6570\u5b57\u5728\u76f8\u540c\u7684\u6587\u4ef6\u4e2d\uff0c\u6587\u4ef6\u5927\u5c0f\u5c3d\u53ef\u80fd\u5747\u5300\u3002 \u5206\u522b\u7edf\u8ba116\u4e2a\u5c0f\u6587\u4ef6\u7684\u6574\u6570\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u5f97\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002 \u8fd9\u5176\u5b9e\u5c31\u662f\u5206\u6cbb\u601d\u60f3\u7684\u5e94\u7528\u3002 \u5173\u952e\u662f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u54c8\u5e0c\u51fd\u6570\u5206\u5272\u6587\u4ef6\uff0c\u600e\u6837\u7684\u5408\u5e76\u7ed3\u679c\u7b56\u7565\u53ef\u4ee5\u4fdd\u8bc1\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\u672c\u9898\u6700\u7b80\u5355\u7684\u54c8\u5e0c\u7b56\u7565\u53ef\u4ee5\u662f\u76f4\u63a5\u7528\u539f\u6765\u7684\u6574\u6570\u5f53\u4f5c\u54c8\u5e0c\u503c\uff0c\u5bf916\u53d6\u4f59\u3002\u4f59\u6570\u4e3a0\u7684\u8f93\u51fa\u5230\u7b2c\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f59\u6570\u4e3a1\u7684\u8f93\u51fa\u5230\u7b2c\u4e8c\u4e2a\u6587\u4ef6\uff0c\u8fd8\u8981\u6ce8\u610f\u7edf\u8ba1\u6587\u4ef6\u4e2d\u6574\u6570\u7684\u6570\u91cf\uff0c\u5f53\u8d85\u8fc71.25\u4ebf\u7684\u65f6\u5019\u5c31\u8f6c\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u4fdd\u5b58\u6570\u636e\uff0c\u4fdd\u8bc116\u4e2a\u6587\u4ef6\u5927\u5c0f\u7684\u5747\u8861\u3002\u5408\u5e76\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u5224\u65ad\u5176\u4ed6\u5c0f\u6587\u4ef6\u4e2d\u6709\u6ca1\u6709\u5305\u542b\u8fd9\u4e2a\u6570\u5b57\uff0c\u6709\u7684\u8bdd\uff0c\u52a0\u4e0a\uff0c\u8f93\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002 1.2 40\u4ebf\u4e2a\u975e\u8d1f\u6574\u6570\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57 \u00b6 32\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u53ef\u4ee5\u8868\u793a\u5927\u7ea642\u4ebf\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e8640\u4ebf\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5373\u4f7f\u8fd940\u4ebf\u4e2a\u6570\u5b57\u90fd\u4e0d\u76f8\u540c\uff0c\u4e5f\u5b58\u5728\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\uff0c\u627e\u51fa\u8fd9\u4e9b\u6570\u5b57\u3002 \u601d\u8def\uff1a\u627e\u51fa\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u6211\u4eec\u5c31\u5f97\u6709\u65b9\u6cd5\u8bb0\u5f55\u6240\u6709\u5df2\u7ecf\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u53ea\u6709\u8bb0\u4f4f\u4e86\u54ea\u4e9b\u6570\u5b57\u51fa\u73b0\u8fc7\uff0c\u624d\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u6570\u5b57\u6ca1\u6709\u51fa\u73b0\u8fc7\u3002\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u662f\u975e\u5e38\u8d39\u5185\u5b58\u7684\u3002\u5982\u4f55\u8bb0\u5f5540\u4ebf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u5462\uff1f \u4f7f\u7528\u4e00\u4e2a40\u4ebf\u957f\u5ea6\u7684\u6570\u7ec4\u663e\u7136\u662f\u4e0d\u80fd\u6ee1\u8db3\u5185\u5b58\u8981\u6c42\u7684\u3002 \u73b0\u5728\u8003\u8651\u5982\u679c\u53ea\u7528\u4e00\u4e2a\u6bd4\u7279\u4f4d\u8868\u793a\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u7ecf\u8fc7\u8ba1\u7b97\uff0c\u53ea\u9700\u8981500M\u7684\u5185\u5b58\u57fa\u672c\u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u65b9\u6cd5\u662f\uff1a\u5f00\u8f9f\u4e00\u4e2aINT32_MAX*2\u7684\u4f4d\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u60c5\u51b5\u3002\u904d\u5386\u5b8c\u4e00\u904d\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u7136\u540e\u518d\u904d\u5386\u4e00\u904d\uff0c\u9047\u52300\u5c31\u8f93\u51fa\u3002 \u73b0\u5728\u8003\u8651\u5982\u4f55\u4f7f\u7528\u66f4\u5c0f\u7684\u5185\u5b58\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f8b\u598210M\u5185\u5b58\uff0c\u53ea\u627e\u51fa\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u89e3\u51b3\u7684\u601d\u8def\u662f\u5206\u5272\u5904\u7406\uff0c\u4f8b\u5982\u5206\u5272\u621064\u4e2a\u5b50\u6bb5\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u7edf\u8ba1\u843d\u5728\u6bcf\u4e2a\u533a\u95f4\u7684\u4e0a\u7684\u6570\u5b57\u7684\u6570\u91cf\uff0c\u5fc5\u5b9a\u6709\u4e00\u4e2a\u533a\u95f4\u662f\u4e0d\u6ee1\u7684\uff0c\u627e\u51fa\u8fd9\u4e2a\u533a\u95f4\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c\u53ea\u5904\u7406\u843d\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0a\u7684\u6570\u5b57\uff0c\u5728\u5bf9\u5e94\u7684\u4f4d\u4e0a\u6807\u8bb01\u8868\u793a\u51fa\u73b0\u8fc7\u3002\u7b2c\u4e09\u6b21\u904d\u5386\uff0c\u9047\u5230\u662f0\u7684\u5c31\u8f93\u51fa\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 1.3 \u00b6 2. \u4e00\u81f4\u6027\u54c8\u5e0c\u7b97\u6cd5 \u00b6","title":"\u7b97\u6cd5\u4e13\u9898_\u5927\u6570\u636e\u548c\u7a7a\u95f4\u9650\u5236"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#bloom-filter","text":"\u5b81\u53ef\u9519\u6740\u4e09\u5343\uff0c\u7edd\u4e0d\u653e\u8fc7\u4e00\u4e2a(\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u80af\u5b9a\u4e0d\u4f1a\u8bef\u5224\uff0c\u4f46\u662f\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u5374\u6709\u53ef\u80fd\u8bef\u4ee5\u4e3a\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408) \u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4e00\u79cd\u7528\u6765\u5904\u7406\u5927\u6570\u636e\u7684\u67e5\u8be2\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u7cbe\u786e\u7684\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\u3002\u8fd9\u91cc\u7684\u7cbe\u786e\u662f\u53ea\u53ef\u4ee5\u5728\u4e00\u5b9a\u7684\u7cbe\u5ea6\u8303\u56f4\u5185\u3002\u4f8b\u5982\u53ef\u4ee5\u4ee5 99.99% \u7684\u6982\u7387\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u5c5e\u4e8e\u8fd8\u662f\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u3002 \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u4f18\u52bf\uff1a - \u4f7f\u7528\u5f88\u5c11\u7684\u7a7a\u95f4\u5c31\u53ef\u4ee5\u628a\u7cbe\u786e\u5ea6\u505a\u7684\u5f88\u9ad8\u3002 - \u4e0d\u9700\u8981\u5b58\u50a8\u5143\u7d20\u672c\u8eab\uff0c\u5728\u67d0\u4e9b\u5bf9\u4fdd\u5bc6\u8981\u6c42\u975e\u5e38\u4e25\u683c\u7684\u573a\u5408\u6709\u4f18\u52bf - \u4e0d\u9700\u8981\u987e\u5fcc\u5355\u4e2a\u5143\u7d20\u53d6\u503c\u8303\u56f4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u5b83\u4e0e\u6700\u7ec8\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u5927\u5c0f\u6ca1\u6709\u5173\u7cfb \uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5355\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5fc5\u987b\u5728\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u8868\u793a\u7684\u8303\u56f4\u5185\uff09 \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u7f3a\u70b9\uff1a - \u7cbe\u786e\u5ea6\u6c38\u8fdc\u4e0d\u53ef\u80fd\u8fbe\u52301 - \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u67d0\u4e2a\u5143\u7d20\u975e\u5e38\u56f0\u96be \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u539f\u7406\u662f\uff0c\u5f53\u4e00\u4e2a\u5143\u7d20\u88ab\u52a0\u5165\u96c6\u5408\u65f6\uff0c\u901a\u8fc7K\u4e2a \u6563\u5217\u51fd\u6570 \u5c06\u8fd9\u4e2a\u5143\u7d20\u6620\u5c04\u6210\u4e00\u4e2a\u4f4d\u6570\u7ec4\u4e2d\u7684K\u4e2a\u70b9\uff0c\u628a\u5b83\u4eec\u7f6e\u4e3a1\u3002\u68c0\u7d22\u65f6\uff0c\u6211\u4eec\u53ea\u8981\u770b\u770b\u8fd9\u4e9b\u70b9\u662f\u4e0d\u662f\u90fd\u662f1\u5c31\uff08\u5927\u7ea6\uff09\u77e5\u9053\u96c6\u5408\u4e2d\u6709\u6ca1\u6709\u5b83\u4e86\uff1a\u5982\u679c\u8fd9\u4e9b\u70b9\u6709\u4efb\u4f55\u4e00\u4e2a0\uff0c\u5219\u88ab\u68c0\u5143\u7d20\u4e00\u5b9a\u4e0d\u5728\uff1b\u5982\u679c\u90fd\u662f1\uff0c\u5219\u88ab\u68c0\u5143\u7d20\u5f88\u53ef\u80fd\u5728\u3002\u8fd9\u5c31\u662f\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u57fa\u672c\u601d\u60f3\u3002","title":"Bloom filter\uff08\u5e03\u9686\u8fc7\u6ee4\u5668\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#1","text":"\u5728\u751f\u6210\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\u9047\u5230\u7684\u5bf9\u8c61\uff0c\u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u65f6\u5019\u662f\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u9519\u7684\u3002\u53ea\u6709\u751f\u6210\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\u6ca1\u6709\u7528\u5230\u7684\u5143\u7d20\uff0c\u624d\u53ef\u80fd\u51fa\u9519\u3002 \u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u8bbe\u8ba1\u9700\u8981\u8003\u8651\u4e24\u4e2a\u56e0\u7d20\uff0c\u8981\u8868\u793a\u7684\u6570\u636e\u91cfn\u548c\u5141\u8bb8\u7684\u8bef\u5dee\u8303\u56f4p,\u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\uff1an=1000000000, p=0.01\u3002\u5df2\u77e5\u6570\u636e\u91cf\u548c\u8bef\u5dee\u8303\u56f4\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u516c\u5f0f\u6c42\u89e3\u9700\u8981\u5e03\u9686\u6570\u7ec4\u7684\u4f4d\u6570\u548c\u9700\u8981\u4f7f\u7528\u7684\u6563\u5217\u51fd\u6570\u7684\u4e2a\u6570\u3002 \u5e03\u9686\u6570\u7ec4\u7684\u4f4d\u6570m: m = -(n*lnp)/(ln2)^2 \u6563\u5217\u51fd\u6570\u7684\u4e2a\u6570k: k = ln2 * (m/n) = 0.7 * m/n; \u516c\u5f0f\u7684\u5177\u4f53\u63a8\u5bfc\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u53c2\u8003\u4f8b\u9898\uff1a","title":"1. \u6563\u5217\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#1_1","text":"\u628a\u4e00\u4e2a\u5927\u7684\u96c6\u5408\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5206\u914d\u5230\u591a\u53f0\u673a\u5668\u4e2d\uff0c\u6216\u8005\u5206\u914d\u5230\u591a\u4e2a\u6587\u4ef6\u91cc\uff0c\u8fd9\u79cd\u6280\u5de7\u662f\u5904\u7406\u9762\u8bd5\u9898\u4e2d\u6d89\u53ca\u5230\u5927\u6570\u636e\u7684\u65f6\u5019\u7684\u6700\u5e38\u7528\u7684\u6280\u5de7\u3002","title":"1. \u5927\u6587\u4ef6\u7684\u5904\u7406"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#11-2gb20","text":"\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u672c\u9898\u7684\u96be\u70b9\u662f\u76f4\u63a5\u4f7f\u7528\u54c8\u5e0c\u8868\u7684\u8bdd\uff0c\u5185\u5b58\u662f\u653e\u4e0d\u4e0b\u7684\u3002 \u5177\u4f53\u505a\u6cd5\u662f\uff1a \u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u5c06\u539f\u6765\u5305\u542b20\u4ebf\u4e2a\u6574\u6570\u7684\u6587\u4ef6\u5206\u5272\u621016\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4f7f\u5f97\u4e00\u6837\u7684\u6570\u5b57\u5728\u76f8\u540c\u7684\u6587\u4ef6\u4e2d\uff0c\u6587\u4ef6\u5927\u5c0f\u5c3d\u53ef\u80fd\u5747\u5300\u3002 \u5206\u522b\u7edf\u8ba116\u4e2a\u5c0f\u6587\u4ef6\u7684\u6574\u6570\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u5f97\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002 \u8fd9\u5176\u5b9e\u5c31\u662f\u5206\u6cbb\u601d\u60f3\u7684\u5e94\u7528\u3002 \u5173\u952e\u662f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u54c8\u5e0c\u51fd\u6570\u5206\u5272\u6587\u4ef6\uff0c\u600e\u6837\u7684\u5408\u5e76\u7ed3\u679c\u7b56\u7565\u53ef\u4ee5\u4fdd\u8bc1\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\u672c\u9898\u6700\u7b80\u5355\u7684\u54c8\u5e0c\u7b56\u7565\u53ef\u4ee5\u662f\u76f4\u63a5\u7528\u539f\u6765\u7684\u6574\u6570\u5f53\u4f5c\u54c8\u5e0c\u503c\uff0c\u5bf916\u53d6\u4f59\u3002\u4f59\u6570\u4e3a0\u7684\u8f93\u51fa\u5230\u7b2c\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f59\u6570\u4e3a1\u7684\u8f93\u51fa\u5230\u7b2c\u4e8c\u4e2a\u6587\u4ef6\uff0c\u8fd8\u8981\u6ce8\u610f\u7edf\u8ba1\u6587\u4ef6\u4e2d\u6574\u6570\u7684\u6570\u91cf\uff0c\u5f53\u8d85\u8fc71.25\u4ebf\u7684\u65f6\u5019\u5c31\u8f6c\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u4fdd\u5b58\u6570\u636e\uff0c\u4fdd\u8bc116\u4e2a\u6587\u4ef6\u5927\u5c0f\u7684\u5747\u8861\u3002\u5408\u5e76\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u5224\u65ad\u5176\u4ed6\u5c0f\u6587\u4ef6\u4e2d\u6709\u6ca1\u6709\u5305\u542b\u8fd9\u4e2a\u6570\u5b57\uff0c\u6709\u7684\u8bdd\uff0c\u52a0\u4e0a\uff0c\u8f93\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002","title":"1.1 \u53ea\u75282GB\u5185\u5b58\u572820\u4ebf\u4e2a\u6570\u4e2d\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#12-40","text":"32\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u53ef\u4ee5\u8868\u793a\u5927\u7ea642\u4ebf\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e8640\u4ebf\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5373\u4f7f\u8fd940\u4ebf\u4e2a\u6570\u5b57\u90fd\u4e0d\u76f8\u540c\uff0c\u4e5f\u5b58\u5728\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\uff0c\u627e\u51fa\u8fd9\u4e9b\u6570\u5b57\u3002 \u601d\u8def\uff1a\u627e\u51fa\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u6211\u4eec\u5c31\u5f97\u6709\u65b9\u6cd5\u8bb0\u5f55\u6240\u6709\u5df2\u7ecf\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u53ea\u6709\u8bb0\u4f4f\u4e86\u54ea\u4e9b\u6570\u5b57\u51fa\u73b0\u8fc7\uff0c\u624d\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u6570\u5b57\u6ca1\u6709\u51fa\u73b0\u8fc7\u3002\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u662f\u975e\u5e38\u8d39\u5185\u5b58\u7684\u3002\u5982\u4f55\u8bb0\u5f5540\u4ebf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u5462\uff1f \u4f7f\u7528\u4e00\u4e2a40\u4ebf\u957f\u5ea6\u7684\u6570\u7ec4\u663e\u7136\u662f\u4e0d\u80fd\u6ee1\u8db3\u5185\u5b58\u8981\u6c42\u7684\u3002 \u73b0\u5728\u8003\u8651\u5982\u679c\u53ea\u7528\u4e00\u4e2a\u6bd4\u7279\u4f4d\u8868\u793a\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u7ecf\u8fc7\u8ba1\u7b97\uff0c\u53ea\u9700\u8981500M\u7684\u5185\u5b58\u57fa\u672c\u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u65b9\u6cd5\u662f\uff1a\u5f00\u8f9f\u4e00\u4e2aINT32_MAX*2\u7684\u4f4d\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u60c5\u51b5\u3002\u904d\u5386\u5b8c\u4e00\u904d\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u7136\u540e\u518d\u904d\u5386\u4e00\u904d\uff0c\u9047\u52300\u5c31\u8f93\u51fa\u3002 \u73b0\u5728\u8003\u8651\u5982\u4f55\u4f7f\u7528\u66f4\u5c0f\u7684\u5185\u5b58\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f8b\u598210M\u5185\u5b58\uff0c\u53ea\u627e\u51fa\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u89e3\u51b3\u7684\u601d\u8def\u662f\u5206\u5272\u5904\u7406\uff0c\u4f8b\u5982\u5206\u5272\u621064\u4e2a\u5b50\u6bb5\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u7edf\u8ba1\u843d\u5728\u6bcf\u4e2a\u533a\u95f4\u7684\u4e0a\u7684\u6570\u5b57\u7684\u6570\u91cf\uff0c\u5fc5\u5b9a\u6709\u4e00\u4e2a\u533a\u95f4\u662f\u4e0d\u6ee1\u7684\uff0c\u627e\u51fa\u8fd9\u4e2a\u533a\u95f4\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c\u53ea\u5904\u7406\u843d\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0a\u7684\u6570\u5b57\uff0c\u5728\u5bf9\u5e94\u7684\u4f4d\u4e0a\u6807\u8bb01\u8868\u793a\u51fa\u73b0\u8fc7\u3002\u7b2c\u4e09\u6b21\u904d\u5386\uff0c\u9047\u5230\u662f0\u7684\u5c31\u8f93\u51fa\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002","title":"1.2 40\u4ebf\u4e2a\u975e\u8d1f\u6574\u6570\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#13","text":"","title":"1.3"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#2","text":"","title":"2. \u4e00\u81f4\u6027\u54c8\u5e0c\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB/","text":"\u5faa\u73af\u53f3\u79fb \u00b6 \u5982\u679c\u5b9e\u9645\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u79fb\u52a8\uff0c\u505a\u4e86\u592a\u591a\u65e0\u7528\u7684\u5de5\u4f5c\u3002 // \u6c42a, b\u7684\u6700\u5927\u516c\u7ea6\u6570 int gcd ( int a , int b ){ if ( a < b ) return gcd ( b , a ); if ( b == 0 ) return a ; while ( b > 0 ) { int tmp = a % b ; a = b ; b = tmp ; } return a ; } void shitf ( int * array , int n , int k ) { int i , j , curr , tmp ; int g = gcd ( n , k ); k = k % n ; if ( k == 0 ) return ; for ( i = 0 ; i < g ; i ++ ) { j = i ; cur = array [ j ]; do { tmp = array [ ( j + k ) % n ]; array [( j + k ) % n ] = cur ; cur = tmp ; j = ( j + k ) % k ; } while ( j != i ); } return ; }","title":"\u5faa\u73af\u53f3\u79fb"},{"location":"%E7%AE%97%E6%B3%95/%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB/#_1","text":"\u5982\u679c\u5b9e\u9645\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u79fb\u52a8\uff0c\u505a\u4e86\u592a\u591a\u65e0\u7528\u7684\u5de5\u4f5c\u3002 // \u6c42a, b\u7684\u6700\u5927\u516c\u7ea6\u6570 int gcd ( int a , int b ){ if ( a < b ) return gcd ( b , a ); if ( b == 0 ) return a ; while ( b > 0 ) { int tmp = a % b ; a = b ; b = tmp ; } return a ; } void shitf ( int * array , int n , int k ) { int i , j , curr , tmp ; int g = gcd ( n , k ); k = k % n ; if ( k == 0 ) return ; for ( i = 0 ; i < g ; i ++ ) { j = i ; cur = array [ j ]; do { tmp = array [ ( j + k ) % n ]; array [( j + k ) % n ] = cur ; cur = tmp ; j = ( j + k ) % k ; } while ( j != i ); } return ; }","title":"\u5faa\u73af\u53f3\u79fb"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/","text":"\u6392\u5217\u7ec4\u5408 \u00b6 \u6392\u5217\u7ec4\u5408\u7684\u95ee\u9898\u4e5f\u662f\u5e38\u5e38\u51fa\u73b0\u5728\u7b97\u6cd5\u9898\u4e2d\u3002\u4e00\u79cd\u7c7b\u578b\u662f\u7eaf\u6570\u5b66\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528\u6392\u5217\u7ec4\u5408\u7684\u6570\u5b66\u77e5\u8bc6\u6c42\u89e3\u3002\u4e00\u79cd\u662f\u9700\u8981\u679a\u4e3e\u51fa\u6240\u6709\u7684\u72b6\u6001\uff0c\u7ecf\u8fc7\u9002\u5f53\u7684\u526a\u679d\u548c\u8fc7\u7a0b\u7684\u4f18\u5316\u624d\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002 \u6392\u5217\u7ec4\u5408\u76f8\u5173\u7684\u8bd5\u9898\u4e2d\u5e38\u89c1\u7684\u64cd\u4f5c\u5c31\u662f\u679a\u4e3e\u5404\u79cd\u60c5\u51b5\u3002\u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u7684\u65b9\u6cd5\u3002 1. \u751f\u6210n!\u79cd\u4e0d\u540c\u7684\u6392\u5217 \u00b6 n\u4e2a\u5143\u7d20\u7684\u5168\u6392\u5217\u4e00\u5171\u6709n!\u79cd\u3002\u5982\u4f55\u6309\u7167\u987a\u5e8f\u751f\u6210\u8fd9n!\u79cd\u6392\u5217\u5462\uff1fC++\u4e2d\u63d0\u4f9b\u4e86next_permutation\u8fd9\u4e00\u51fd\u6570\u3002 next_permutation\u80fd\u591f\u6309\u7167\u987a\u5e8f\u4ea7\u751f\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u4f8b\u5982 vector<int> v = {1,2,3} , \u628av\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012, next_permutation(v.begin(),v.end()) \u8fd4\u56de\u7684\u662ftrue, v\u53d8\u6210\u4e861,2,3\u7684\u4e0b\u4e00\u4e2a\u5e8f\u52171,3,2;\u5982\u679c\u5c063,2,1\u4f20\u5165\uff0c\u8fd4\u56de\u7684\u5c06\u662ffalse,\u56e0\u4e3a\u6ca1\u6709\u4e86\u4e0b\u4e00\u4e2a\u5e8f\u5217\u3002 \u4ea7\u751f\u5168\u6392\u5217\u7684\u65b9\u6cd5\uff1a #include <algorithm> #include <vector> vector < vector < int >> per ( int n ){ vector < int > v ; for ( int i = 0 ; i < n ; i ++ ){ v . push_back ( i + 1 ); } vector < vector < int >> re ; re . push_back ( v ); while ( next_permutation ( v . begin (), v . end ())){ re . push_back ( v ); } return re ; } def next_permutation ( arr ): for i in reversed ( range ( 1 , len ( arr ))): if arr [ i ] > arr [ i - 1 ]: low = i - 1 break else : return None for i in reversed ( range ( low + 1 , len ( arr ))): if arr [ i ] > arr [ low ]: high = i break arr [ low ], arr [ high ] = arr [ high ], arr [ low ] tmp = arr [ low + 1 :] tmp . reverse () arr = arr [ 0 : low + 1 ] + tmp return arr def permutation ( arr ): print ( arr ) arr = next_permutation ( arr ) while arr : print ( arr ) arr = next_permutation ( arr ) return arr 2. \u751f\u6210 n! / m!(n-m)! \u00b6 def next_combination ( n ): x = n & ( - n ) t = x + n ans = t | (( n ^ t ) / x ) >> 2 return ans def convert ( n , m ): ans = [ False for _ in range ( n )] for i in reversed ( range ( n )): if m & 1 : ans [ i ] = True m = m >> 1 return ans def combination ( arr , m ): start = 2 ** m - 1 n = len ( arr ) indices = convert ( n , start ) arr = np . array ( arr ) print ( arr [ indices ]) while True : start = next_combination ( start ) if start > 2 ** n - 1 : break indices = convert ( n , start ) print ( arr [ indices ]) 3. \u96c6\u5408\u7684\u6574\u6570\u8868\u793a \u00b6 \u5982\u679c\u4e00\u4e2a\u96c6\u5408\u6709n\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5b50\u96c6\u67092 n\u4e2a\uff08\u5305\u62ec\u7a7a\u96c6\u548c\u81ea\u8eab\uff09\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u5bf9\u6240\u6709\u7684\u81ea\u5df1\u5bf9\u5e94\u4e00\u4e2a\u6574\u6570\uff0c\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u6309\u7167\u987a\u5e8f\u4ece1\u52302 n\u8868\u793a\u5b83\u3002 \u4f8b\u5982\uff1aa = {1,2,3} a\u7684\u6240\u6709\u7684\u5b50\u96c6\u6709\uff1a {};{1},{2},{3};{1,2},{1,3},{2,3};{1,2,3}; 0 1 2 3 4 5 6 7 \u5982\u679c\u50cf\u4e0a\u9762\u90a3\u6837\u7f16\u7801\uff0c\u96c6\u5408\u95f4\u7684\u64cd\u4f5c\u89c4\u5f8b\u4e0d\u597d\u627e\u3002\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u7f16\u7801\u6bcf\u4e2a\u5b50\u96c6\uff0c\u76ee\u7684\u662f\u4f7f\u5f97\u96c6\u5408\u95f4\u7684\u64cd\u4f5c\u6709\u89c4\u5f8b\u800c\u5bb9\u6613\u5b9e\u73b0\u3002 \u6211\u4eec\u628a\u6240\u6709\u5b50\u96c6\u90fd\u7528B\u586b\u5145\u6210\u548c\u539f\u6765\u7684\u96c6\u5408\u4e00\u6837\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4fdd\u6301\u539f\u6765\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u7136\u540e\u7528\u4e8c\u8fdb\u5236\u4f4d1\u8868\u793a\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u75280\u8868\u793aB\uff0c\u5982\u4e0b\u6807\u6240\u793a\uff1a {B,B,B} {B,B,1} {B,2,B} {B,2,1} {3,B,B} {3,B,1} {3,2,B} {3,2,1} 000 001 010 011 100 101 110 111 0 1 2 3 4 5 6 7 \u96c6\u5408 {0,1,...,n-1} \u7684\u5b50\u96c6\u4e3aS\uff0cS\u7684\u6574\u6570\u7f16\u7801\u5b9a\u4e49\u4e3a\uff1a f(S) = 2^i (i\u5c5e\u4e8e\u5b50\u96c6S) \u7279\u522b\u5b9a\u4e49\uff1a\u7a7a\u96c6\u75280\u8868\u793a\u3002 \u6240\u4ee5\u6709\u5982\u4e0b\u7684\u5bf9\u5e94\uff1a {} : 0 {1} : 2^(1-1) = 1 {2} : 2^(2-1) = 2 {3} : 2^(3-1) = 4 {1,2} :2 (1-1)+2 (2-1) = 3 {1,3} :2 (1-1)+2 (3-1) = 5 {2,3} :2 (2-1)+2 (3-1) = 6 {1,2,3}:2 (1-1)+2 (2-1)+2 (3-1)=2 3-1=7 \u50cf\u8fd9\u6837\u8868\u793a\u540e\uff0c\u4e00\u4e9b\u96c6\u5408\u7684\u8fd0\u7b97\u53ef\u4ee5\u8868\u793a\u6210: \u7a7a\u96c6\uff1a 0 \u81ea\u8eab\uff1a 2^n-1 (1<<n)-1 \u53ea\u542b\u6709\u7b2ci\u4e2a\u5143\u7d20\u7684\u96c6\u5408\uff1a 2^i (1<<i) \u5224\u65ad\u7b2ci\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u96c6\u5408S\uff1a if(S>>i&1) \u5982\u679c\u7b2ci\u4e2a\u5143\u7d20\u5c5e\u4e8e\u96c6\u5408S,\u6839\u636e\u4e0a\u9762\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u8be5\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7b2ci\u4e3a\u5fc5\u5b9a\u662f1\uff0c\u6240\u4ee5\u53f3\u79fbi\u4f4d\u4e4b\u540e\u672b\u5c3e\u5fc5\u5b9a\u4e3a1. \u5411\u96c6\u5408\u4e2d\u52a0\u5165\u7b2ci\u4e2a\u5143\u7d20: S|(1<<i) \u5c31\u662f\u628a\u7b2ci\u4f4d\u7f6e1 \u4ece\u96c6\u5408\u4e2d\u53bb\u9664\u7b2ci\u4e2a\u5143\u7d20: S&~(1<<i) \u5c31\u662f\u628a\u7b2ci\u4f4d\u7f6e0 \u96c6\u5408S\u548cT\u7684\u5e76\u96c6\uff1a S|T \u96c6\u5408S\u548cT\u7684\u4ea4\u96c6\uff1a S&T 3.1 \u679a\u4e3e\u6240\u6709\u7684\u5b50\u96c6\u7684\u65b9\u6cd5 \u00b6 for ( int i = 0 ; i < 2 ^ n ; i ++ ){ cout << i << endl ; //\u5bf9\u5b50\u96c6\u7684\u5904\u7406 } def subset ( arr ): arr = np . array ( arr ) n = len ( arr ) for i in range ( 2 ** n ): indices = convert ( n , i ) print ( arr [ indices ]) # \u751f\u6210\u5927\u5c0f\u4e3a m \u7684\u5b50\u96c6 def subsetm ( arr , m ): combination ( arr , m ) 3.2 \u7ed9\u51fa\u4e00\u4e2a\u5b50\u96c6\u679a\u4e3e\u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u7684\u65b9\u6cd5 \u00b6 \u5047\u8bbe\u7ed9\u51fa\u7684\u5b50\u96c6\u7684\u4e8c\u8fdb\u5236\u7801\u662f\uff1a 00101100 \uff08\u539f\u6765\u96c6\u5408\u5171\u516b\u4e2a\u5143\u7d20\uff09\uff0c\u8981\u679a\u4e3e\u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\uff0c\u4f9d\u7136\u7528\u516b\u4f4d\u4e8c\u8fdb\u5236\u7801\u8868\u793a\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6bcf\u6b21\u4ece\u8be5\u6570\u5b57\u4e2d\u53bb\u6389\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d1\uff0c\u800c\u5ffd\u7565\u6389\u4e8c\u8fdb\u5236\u4f4d0.\u6070\u5de7\uff0c\u4ee5\u524d\u8bb2\u4f4d\u8fd0\u7b97\u7684\u65f6\u5019\u8bb2\u8fc7\uff0c n&(n-1) \u7684\u6548\u679c\u5c31\u662f\u53bb\u9664n\u7684\u6700\u672b\u4f4d\u76841. int sub = sup ; do { cout << sub << endl ; //sub\u5c31\u662f\u6240\u6709\u7684\u5b50\u96c6 sub = ( sub - 1 ) & sub ; } while ( sub != sup ) // -1&sup = sup 3.3 \u679a\u4e3e\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\u7684\u529e\u6cd5 \u00b6 \u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\uff0c\u5c31\u662f\u4e8c\u8fdb\u5236\u4f4d\u4e2d\u6240\u67091\u7684\u4f4d\u6570\u52a0\u8d77\u6765\u7684\u548c\u4e3ak\u7684\u6570\u5b57\u3002\u679a\u4e3e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7801\u4e4b\u540e\u76841\u7684\u4e2a\u6570\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u7801\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u4e2d\uff0c\u4e0b\u9762\u662f\u5176\u4e2d\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 int comb = ( 1 << k ) - 1 ; while ( comb < ( 1 << k )){ cout << comb ; // \u5bf9\u96c6\u5408\u7684\u5904\u7406 int x = comb & - comb ; int y = comb + x ; comb = (( comb &~ y ) / ( x >> 1 )) | y ; } \u53e6\u5916\u4e00\u79cd\u5b9e\u73b0\uff1a \u5148\u6765\u5206\u6790\u5982\u4f55\u4ece\u5f97\u5230\u4e00\u4e2a\u6570\u5b57n\u7684\u4e0b\u4e00\u4e2a\u4e0en\u4e8c\u8fdb\u52361\u4e2a\u6570\u76f8\u540c\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0cn=001001110; \u5219\u4e0b\u4e00\u4e2a\u6570\u5b57\u4e3an2=00101011; \u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u64cd\u4f5c\u89c4\u5219\u5e94\u8be5\u662f\uff1a\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a1\u7684\u4f4d\u7f6e\u3002\u628a\u4e0e\u8fd9\u4e2a1\u76f8\u90bb\u7684\u6240\u67091\u4f5c\u4e3a\u4e00\u7ec4\uff0c\u8fd9\u7ec4\u7684\u6700\u9ad8\u4f4d1\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u539f\u6765\u7684\u4f4d\u7f6e\u4e0a\u88650\uff0c\u5269\u4e0b\u76841\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002 \u4f7f\u7528\u4f4d\u64cd\u4f5c\u5b8c\u6210\u4e0a\u8ff0\u7684\u6b65\u9aa4\u9700\u8981\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u4f4d\u64cd\u4f5c\u5b8c\u6210\u4ee5\u4e0b\u7684\u529f\u80fd\uff1a \u627e\u5230\u6700\u4f4e\u4f4d\u76841\u7684\u4f4d\u7f6e\uff1a x = n&(-n) \u4e0e\u6700\u4f4e\u4f4d1\u76f8\u90bb\u7684\u4e00\u7ec41\u4e2d\u6700\u9ad8\u4f4d\u76841\u5de6\u79fb\u4e00\u4f4d\uff0c\u5176\u4f59\u7684\u4f4d\u7f6e\u7f6e0\uff1a t = x+n , \u5c06\u6700\u4f4e\u7684\u4e00\u7ec41\u53f3\u79fb\u5230\u6700\u53f3\u8fb9\uff1a (n^t)/(n&(-n))) . \u5177\u4f53\u7684\u8fc7\u7a0b\u63cf\u8ff0\u5982\u4e0b\uff1a x = n&(-n) ,\u83b7\u5f97n\u7684\u6700\u540e\u4e00\u4e2a1. t = x + n , n\u4e2d\u8fde\u7eed1\u7684\u6700\u5de6\u8fb9\u76841\u5de6\u79fb\u4e00\u4f4d\uff0c\u5176\u4f59\u4f4d\u7f6e0. n^t , n\u4e2d\u8fde\u7eed1\u7684\u6700\u5de6\u8fb9\u76840\u7f6e1. (n^t)/x) , \u5c06\u8fde\u7eed\u76841\u79fb\u52a8\u5230\u6700\u53f3\u4fa7\u3002 ((n^t)/x)>>2 , \u53bb\u6389\u591a\u4f59\u7684\u4e24\u4e2a1. ans = t | ((N^t)/x)>>2; , \u62fc\u63a5\u4e24\u90e8\u5206\uff0c\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c\u3002 // \u6c42\u5927\u4e8eN\u7684\u4e0b\u4e00\u4e2a\u4e0eN\u6709\u76f8\u540c\u4e2a\u65701\uff08\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u7684\u6570\u5b57 int NextN ( int N ) { int x = N & ( - N ); int t = N + x ; int ans = t | (( N ^ t ) / x ) >> 2 ; return ans ; } 3.4 \u4f4d\u64cd\u4f5c\u679a\u4e3e\u6240\u6709\u7ec4\u5408\u60c5\u51b5 \u00b6 int NextN ( int N ) { int x = N & ( - N ); int t = N + x ; int ans = t | (( N ^ t ) / x ) >> 2 ; return ans ; } vector < vector < int >> Cnk ( vector < int > & v , int n , int k ){ // \u8f93\u51fa\u6240\u6709\u7684\u7ec4\u5408\u60c5\u51b5Cnk vector < vector < int >> re ; int tmp = ( 1 << k ) - 1 ; while ( tmp < pow ( 2.0 , n ) - 1 ){ int tt = tmp ; vector < int > vtmp ; int i = 0 ; while ( tt && i < n ){ if ( tt & 1 ){ vtmp . push_back ( v [ i ]); } i ++ ; tt = tt >> 1 ; } re . push_back ( vtmp ); tmp = NextN ( tmp ); } return re ; } \u53bb\u9664\u91cd\u590d\u5143\u7d20\u7684cnk,\u4f8b\u5982 1\uff0c2\uff0c2\uff0c3\uff0c3\uff0c3\uff0c4 #include <iostream> #include <vector> #include <stack> #include <cmath> #include <map> #include <sstream> using namespace std ; int NextN ( int N ) { int x = N & ( - N ); int t = N + x ; int ans = t | (( N ^ t ) / x ) >> 2 ; return ans ; } string int2String ( int n ) { ostringstream stream ; stream << n ; //n\u4e3aint\u7c7b\u578b return stream . str (); } string toString ( vector < int > & v ){ string re ; for ( auto s : v ){ re += int2String ( s ); } return re ; } map < string , vector < int >> Cnk ( vector < int > & v , int n , int k ){ // \u8f93\u51fa\u6240\u6709\u7684\u7ec4\u5408\u60c5\u51b5Cnk map < string , vector < int >> re ; int tmp = ( 1 << k ) - 1 ; while ( tmp < pow ( 2.0 , n ) - 1 ){ int tt = tmp ; vector < int > vtmp ; int i = 0 ; while ( tt && i < n ){ if ( tt & 1 ){ vtmp . push_back ( v [ i ]); } i ++ ; tt = tt >> 1 ; } string key = toString ( vtmp ); re [ key ] = vtmp ; tmp = NextN ( tmp ); } return re ; }","title":"\u6392\u5217\u7ec4\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#_1","text":"\u6392\u5217\u7ec4\u5408\u7684\u95ee\u9898\u4e5f\u662f\u5e38\u5e38\u51fa\u73b0\u5728\u7b97\u6cd5\u9898\u4e2d\u3002\u4e00\u79cd\u7c7b\u578b\u662f\u7eaf\u6570\u5b66\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528\u6392\u5217\u7ec4\u5408\u7684\u6570\u5b66\u77e5\u8bc6\u6c42\u89e3\u3002\u4e00\u79cd\u662f\u9700\u8981\u679a\u4e3e\u51fa\u6240\u6709\u7684\u72b6\u6001\uff0c\u7ecf\u8fc7\u9002\u5f53\u7684\u526a\u679d\u548c\u8fc7\u7a0b\u7684\u4f18\u5316\u624d\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002 \u6392\u5217\u7ec4\u5408\u76f8\u5173\u7684\u8bd5\u9898\u4e2d\u5e38\u89c1\u7684\u64cd\u4f5c\u5c31\u662f\u679a\u4e3e\u5404\u79cd\u60c5\u51b5\u3002\u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u7684\u65b9\u6cd5\u3002","title":"\u6392\u5217\u7ec4\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#1-n","text":"n\u4e2a\u5143\u7d20\u7684\u5168\u6392\u5217\u4e00\u5171\u6709n!\u79cd\u3002\u5982\u4f55\u6309\u7167\u987a\u5e8f\u751f\u6210\u8fd9n!\u79cd\u6392\u5217\u5462\uff1fC++\u4e2d\u63d0\u4f9b\u4e86next_permutation\u8fd9\u4e00\u51fd\u6570\u3002 next_permutation\u80fd\u591f\u6309\u7167\u987a\u5e8f\u4ea7\u751f\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u4f8b\u5982 vector<int> v = {1,2,3} , \u628av\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012, next_permutation(v.begin(),v.end()) \u8fd4\u56de\u7684\u662ftrue, v\u53d8\u6210\u4e861,2,3\u7684\u4e0b\u4e00\u4e2a\u5e8f\u52171,3,2;\u5982\u679c\u5c063,2,1\u4f20\u5165\uff0c\u8fd4\u56de\u7684\u5c06\u662ffalse,\u56e0\u4e3a\u6ca1\u6709\u4e86\u4e0b\u4e00\u4e2a\u5e8f\u5217\u3002 \u4ea7\u751f\u5168\u6392\u5217\u7684\u65b9\u6cd5\uff1a #include <algorithm> #include <vector> vector < vector < int >> per ( int n ){ vector < int > v ; for ( int i = 0 ; i < n ; i ++ ){ v . push_back ( i + 1 ); } vector < vector < int >> re ; re . push_back ( v ); while ( next_permutation ( v . begin (), v . end ())){ re . push_back ( v ); } return re ; } def next_permutation ( arr ): for i in reversed ( range ( 1 , len ( arr ))): if arr [ i ] > arr [ i - 1 ]: low = i - 1 break else : return None for i in reversed ( range ( low + 1 , len ( arr ))): if arr [ i ] > arr [ low ]: high = i break arr [ low ], arr [ high ] = arr [ high ], arr [ low ] tmp = arr [ low + 1 :] tmp . reverse () arr = arr [ 0 : low + 1 ] + tmp return arr def permutation ( arr ): print ( arr ) arr = next_permutation ( arr ) while arr : print ( arr ) arr = next_permutation ( arr ) return arr","title":"1. \u751f\u6210n!\u79cd\u4e0d\u540c\u7684\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#2-n-mn-m","text":"def next_combination ( n ): x = n & ( - n ) t = x + n ans = t | (( n ^ t ) / x ) >> 2 return ans def convert ( n , m ): ans = [ False for _ in range ( n )] for i in reversed ( range ( n )): if m & 1 : ans [ i ] = True m = m >> 1 return ans def combination ( arr , m ): start = 2 ** m - 1 n = len ( arr ) indices = convert ( n , start ) arr = np . array ( arr ) print ( arr [ indices ]) while True : start = next_combination ( start ) if start > 2 ** n - 1 : break indices = convert ( n , start ) print ( arr [ indices ])","title":"2. \u751f\u6210 n! / m!(n-m)!"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#3","text":"\u5982\u679c\u4e00\u4e2a\u96c6\u5408\u6709n\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5b50\u96c6\u67092 n\u4e2a\uff08\u5305\u62ec\u7a7a\u96c6\u548c\u81ea\u8eab\uff09\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u5bf9\u6240\u6709\u7684\u81ea\u5df1\u5bf9\u5e94\u4e00\u4e2a\u6574\u6570\uff0c\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u6309\u7167\u987a\u5e8f\u4ece1\u52302 n\u8868\u793a\u5b83\u3002 \u4f8b\u5982\uff1aa = {1,2,3} a\u7684\u6240\u6709\u7684\u5b50\u96c6\u6709\uff1a {};{1},{2},{3};{1,2},{1,3},{2,3};{1,2,3}; 0 1 2 3 4 5 6 7 \u5982\u679c\u50cf\u4e0a\u9762\u90a3\u6837\u7f16\u7801\uff0c\u96c6\u5408\u95f4\u7684\u64cd\u4f5c\u89c4\u5f8b\u4e0d\u597d\u627e\u3002\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u7f16\u7801\u6bcf\u4e2a\u5b50\u96c6\uff0c\u76ee\u7684\u662f\u4f7f\u5f97\u96c6\u5408\u95f4\u7684\u64cd\u4f5c\u6709\u89c4\u5f8b\u800c\u5bb9\u6613\u5b9e\u73b0\u3002 \u6211\u4eec\u628a\u6240\u6709\u5b50\u96c6\u90fd\u7528B\u586b\u5145\u6210\u548c\u539f\u6765\u7684\u96c6\u5408\u4e00\u6837\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4fdd\u6301\u539f\u6765\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u7136\u540e\u7528\u4e8c\u8fdb\u5236\u4f4d1\u8868\u793a\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u75280\u8868\u793aB\uff0c\u5982\u4e0b\u6807\u6240\u793a\uff1a {B,B,B} {B,B,1} {B,2,B} {B,2,1} {3,B,B} {3,B,1} {3,2,B} {3,2,1} 000 001 010 011 100 101 110 111 0 1 2 3 4 5 6 7 \u96c6\u5408 {0,1,...,n-1} \u7684\u5b50\u96c6\u4e3aS\uff0cS\u7684\u6574\u6570\u7f16\u7801\u5b9a\u4e49\u4e3a\uff1a f(S) = 2^i (i\u5c5e\u4e8e\u5b50\u96c6S) \u7279\u522b\u5b9a\u4e49\uff1a\u7a7a\u96c6\u75280\u8868\u793a\u3002 \u6240\u4ee5\u6709\u5982\u4e0b\u7684\u5bf9\u5e94\uff1a {} : 0 {1} : 2^(1-1) = 1 {2} : 2^(2-1) = 2 {3} : 2^(3-1) = 4 {1,2} :2 (1-1)+2 (2-1) = 3 {1,3} :2 (1-1)+2 (3-1) = 5 {2,3} :2 (2-1)+2 (3-1) = 6 {1,2,3}:2 (1-1)+2 (2-1)+2 (3-1)=2 3-1=7 \u50cf\u8fd9\u6837\u8868\u793a\u540e\uff0c\u4e00\u4e9b\u96c6\u5408\u7684\u8fd0\u7b97\u53ef\u4ee5\u8868\u793a\u6210: \u7a7a\u96c6\uff1a 0 \u81ea\u8eab\uff1a 2^n-1 (1<<n)-1 \u53ea\u542b\u6709\u7b2ci\u4e2a\u5143\u7d20\u7684\u96c6\u5408\uff1a 2^i (1<<i) \u5224\u65ad\u7b2ci\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u96c6\u5408S\uff1a if(S>>i&1) \u5982\u679c\u7b2ci\u4e2a\u5143\u7d20\u5c5e\u4e8e\u96c6\u5408S,\u6839\u636e\u4e0a\u9762\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u8be5\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7b2ci\u4e3a\u5fc5\u5b9a\u662f1\uff0c\u6240\u4ee5\u53f3\u79fbi\u4f4d\u4e4b\u540e\u672b\u5c3e\u5fc5\u5b9a\u4e3a1. \u5411\u96c6\u5408\u4e2d\u52a0\u5165\u7b2ci\u4e2a\u5143\u7d20: S|(1<<i) \u5c31\u662f\u628a\u7b2ci\u4f4d\u7f6e1 \u4ece\u96c6\u5408\u4e2d\u53bb\u9664\u7b2ci\u4e2a\u5143\u7d20: S&~(1<<i) \u5c31\u662f\u628a\u7b2ci\u4f4d\u7f6e0 \u96c6\u5408S\u548cT\u7684\u5e76\u96c6\uff1a S|T \u96c6\u5408S\u548cT\u7684\u4ea4\u96c6\uff1a S&T","title":"3. \u96c6\u5408\u7684\u6574\u6570\u8868\u793a"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#31","text":"for ( int i = 0 ; i < 2 ^ n ; i ++ ){ cout << i << endl ; //\u5bf9\u5b50\u96c6\u7684\u5904\u7406 } def subset ( arr ): arr = np . array ( arr ) n = len ( arr ) for i in range ( 2 ** n ): indices = convert ( n , i ) print ( arr [ indices ]) # \u751f\u6210\u5927\u5c0f\u4e3a m \u7684\u5b50\u96c6 def subsetm ( arr , m ): combination ( arr , m )","title":"3.1 \u679a\u4e3e\u6240\u6709\u7684\u5b50\u96c6\u7684\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#32","text":"\u5047\u8bbe\u7ed9\u51fa\u7684\u5b50\u96c6\u7684\u4e8c\u8fdb\u5236\u7801\u662f\uff1a 00101100 \uff08\u539f\u6765\u96c6\u5408\u5171\u516b\u4e2a\u5143\u7d20\uff09\uff0c\u8981\u679a\u4e3e\u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\uff0c\u4f9d\u7136\u7528\u516b\u4f4d\u4e8c\u8fdb\u5236\u7801\u8868\u793a\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6bcf\u6b21\u4ece\u8be5\u6570\u5b57\u4e2d\u53bb\u6389\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d1\uff0c\u800c\u5ffd\u7565\u6389\u4e8c\u8fdb\u5236\u4f4d0.\u6070\u5de7\uff0c\u4ee5\u524d\u8bb2\u4f4d\u8fd0\u7b97\u7684\u65f6\u5019\u8bb2\u8fc7\uff0c n&(n-1) \u7684\u6548\u679c\u5c31\u662f\u53bb\u9664n\u7684\u6700\u672b\u4f4d\u76841. int sub = sup ; do { cout << sub << endl ; //sub\u5c31\u662f\u6240\u6709\u7684\u5b50\u96c6 sub = ( sub - 1 ) & sub ; } while ( sub != sup ) // -1&sup = sup","title":"3.2 \u7ed9\u51fa\u4e00\u4e2a\u5b50\u96c6\u679a\u4e3e\u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u7684\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#33-k","text":"\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\uff0c\u5c31\u662f\u4e8c\u8fdb\u5236\u4f4d\u4e2d\u6240\u67091\u7684\u4f4d\u6570\u52a0\u8d77\u6765\u7684\u548c\u4e3ak\u7684\u6570\u5b57\u3002\u679a\u4e3e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7801\u4e4b\u540e\u76841\u7684\u4e2a\u6570\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u7801\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u4e2d\uff0c\u4e0b\u9762\u662f\u5176\u4e2d\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 int comb = ( 1 << k ) - 1 ; while ( comb < ( 1 << k )){ cout << comb ; // \u5bf9\u96c6\u5408\u7684\u5904\u7406 int x = comb & - comb ; int y = comb + x ; comb = (( comb &~ y ) / ( x >> 1 )) | y ; } \u53e6\u5916\u4e00\u79cd\u5b9e\u73b0\uff1a \u5148\u6765\u5206\u6790\u5982\u4f55\u4ece\u5f97\u5230\u4e00\u4e2a\u6570\u5b57n\u7684\u4e0b\u4e00\u4e2a\u4e0en\u4e8c\u8fdb\u52361\u4e2a\u6570\u76f8\u540c\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0cn=001001110; \u5219\u4e0b\u4e00\u4e2a\u6570\u5b57\u4e3an2=00101011; \u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u64cd\u4f5c\u89c4\u5219\u5e94\u8be5\u662f\uff1a\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a1\u7684\u4f4d\u7f6e\u3002\u628a\u4e0e\u8fd9\u4e2a1\u76f8\u90bb\u7684\u6240\u67091\u4f5c\u4e3a\u4e00\u7ec4\uff0c\u8fd9\u7ec4\u7684\u6700\u9ad8\u4f4d1\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u539f\u6765\u7684\u4f4d\u7f6e\u4e0a\u88650\uff0c\u5269\u4e0b\u76841\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002 \u4f7f\u7528\u4f4d\u64cd\u4f5c\u5b8c\u6210\u4e0a\u8ff0\u7684\u6b65\u9aa4\u9700\u8981\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u4f4d\u64cd\u4f5c\u5b8c\u6210\u4ee5\u4e0b\u7684\u529f\u80fd\uff1a \u627e\u5230\u6700\u4f4e\u4f4d\u76841\u7684\u4f4d\u7f6e\uff1a x = n&(-n) \u4e0e\u6700\u4f4e\u4f4d1\u76f8\u90bb\u7684\u4e00\u7ec41\u4e2d\u6700\u9ad8\u4f4d\u76841\u5de6\u79fb\u4e00\u4f4d\uff0c\u5176\u4f59\u7684\u4f4d\u7f6e\u7f6e0\uff1a t = x+n , \u5c06\u6700\u4f4e\u7684\u4e00\u7ec41\u53f3\u79fb\u5230\u6700\u53f3\u8fb9\uff1a (n^t)/(n&(-n))) . \u5177\u4f53\u7684\u8fc7\u7a0b\u63cf\u8ff0\u5982\u4e0b\uff1a x = n&(-n) ,\u83b7\u5f97n\u7684\u6700\u540e\u4e00\u4e2a1. t = x + n , n\u4e2d\u8fde\u7eed1\u7684\u6700\u5de6\u8fb9\u76841\u5de6\u79fb\u4e00\u4f4d\uff0c\u5176\u4f59\u4f4d\u7f6e0. n^t , n\u4e2d\u8fde\u7eed1\u7684\u6700\u5de6\u8fb9\u76840\u7f6e1. (n^t)/x) , \u5c06\u8fde\u7eed\u76841\u79fb\u52a8\u5230\u6700\u53f3\u4fa7\u3002 ((n^t)/x)>>2 , \u53bb\u6389\u591a\u4f59\u7684\u4e24\u4e2a1. ans = t | ((N^t)/x)>>2; , \u62fc\u63a5\u4e24\u90e8\u5206\uff0c\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c\u3002 // \u6c42\u5927\u4e8eN\u7684\u4e0b\u4e00\u4e2a\u4e0eN\u6709\u76f8\u540c\u4e2a\u65701\uff08\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u7684\u6570\u5b57 int NextN ( int N ) { int x = N & ( - N ); int t = N + x ; int ans = t | (( N ^ t ) / x ) >> 2 ; return ans ; }","title":"3.3 \u679a\u4e3e\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\u7684\u529e\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#34","text":"int NextN ( int N ) { int x = N & ( - N ); int t = N + x ; int ans = t | (( N ^ t ) / x ) >> 2 ; return ans ; } vector < vector < int >> Cnk ( vector < int > & v , int n , int k ){ // \u8f93\u51fa\u6240\u6709\u7684\u7ec4\u5408\u60c5\u51b5Cnk vector < vector < int >> re ; int tmp = ( 1 << k ) - 1 ; while ( tmp < pow ( 2.0 , n ) - 1 ){ int tt = tmp ; vector < int > vtmp ; int i = 0 ; while ( tt && i < n ){ if ( tt & 1 ){ vtmp . push_back ( v [ i ]); } i ++ ; tt = tt >> 1 ; } re . push_back ( vtmp ); tmp = NextN ( tmp ); } return re ; } \u53bb\u9664\u91cd\u590d\u5143\u7d20\u7684cnk,\u4f8b\u5982 1\uff0c2\uff0c2\uff0c3\uff0c3\uff0c3\uff0c4 #include <iostream> #include <vector> #include <stack> #include <cmath> #include <map> #include <sstream> using namespace std ; int NextN ( int N ) { int x = N & ( - N ); int t = N + x ; int ans = t | (( N ^ t ) / x ) >> 2 ; return ans ; } string int2String ( int n ) { ostringstream stream ; stream << n ; //n\u4e3aint\u7c7b\u578b return stream . str (); } string toString ( vector < int > & v ){ string re ; for ( auto s : v ){ re += int2String ( s ); } return re ; } map < string , vector < int >> Cnk ( vector < int > & v , int n , int k ){ // \u8f93\u51fa\u6240\u6709\u7684\u7ec4\u5408\u60c5\u51b5Cnk map < string , vector < int >> re ; int tmp = ( 1 << k ) - 1 ; while ( tmp < pow ( 2.0 , n ) - 1 ){ int tt = tmp ; vector < int > vtmp ; int i = 0 ; while ( tt && i < n ){ if ( tt & 1 ){ vtmp . push_back ( v [ i ]); } i ++ ; tt = tt >> 1 ; } string key = toString ( vtmp ); re [ key ] = vtmp ; tmp = NextN ( tmp ); } return re ; }","title":"3.4 \u4f4d\u64cd\u4f5c\u679a\u4e3e\u6240\u6709\u7ec4\u5408\u60c5\u51b5"},{"location":"%E7%AE%97%E6%B3%95/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/","text":"\u6469\u5c14\u6295\u7968\u6cd5 \u00b6 \u5982\u4f55\u627e\u51fa\u4e00\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6700\u591a\u7684\u6570\u5b57\u5462\uff1f \u6734\u7d20\u7684\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8ba1\u6570\uff0c\u7136\u540e\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u6837\u9700\u8981O(n)\u7684\u989d\u5916\u7a7a\u95f4\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u6469\u5c14\u6295\u7968\u6cd5\u5c31\u662f\u4f7f\u7528O(1)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0cO(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u7b97\u6cd5\u3002 \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u00bd\u7684\u6570\u5b57\uff0c \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u2153\u7684\u6570\u5b57\uff0c \u8fd9\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u6469\u5c14\u6295\u7968\u6cd5\u89e3\u51b3\u3002 1. \u7b97\u6cd5\u5b9e\u73b0 \u00b6 \u8bbe\u6570\u7ec4\u5143\u7d20\u6709 n \u4e2a\uff0c 0 < m < n, \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n / m \u7684\u6240\u6709\u6570\u5b57\u3002 \u6700\u574f\u7684\u60c5\u51b5\uff0c \u6709 m - 1 \u4e2a\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n / m \u6b21\uff0c \u6240\u4ee5\u9700\u8981\u7a7a\u95f4 O(m - 1). elements[m-1] \u8868\u793a\u5f53\u524d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 m - 1 \u4e2a\u5143\u7d20\uff0c count[m-1] \u8868\u793a\u5176\u51fa\u73b0\u6b21\u6570 \u7b2c\u4e00\u904d\u904d\u5386\u6570\u7ec4\uff0c \u5982\u679c nums[i] in elements, \u5219\u5bf9\u5e94\u7684count+1; \u5426\u5219\u5982\u679ccount\u4e2d\u5b58\u57280\uff0c\u5f53\u524d\u5143\u7d20\u4f5c\u4e3a\u65b0\u7684\u5143\u7d20\u8d4b\u503c\u7ed90\u5bf9\u5e94\u7684elements; \u5982\u679c\u90fd\u4e0d\u4e3a0\uff0c coount \u4e2d\u6bcf\u4e2a\u90fd-1\uff0c \u8868\u793a\u6d88\u8017\u4e00\u6b21\u3002 \u7b2c\u4e8c\u6b21\u904d\u5386\uff0c \u7edf\u8ba1 elements \u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n/m \u7684\u5143\u7d20\uff0c \u8f93\u51fa\u7ed3\u679c def major ( nums : List [ int ], m : int ) -> List [ int ]: n = len ( nums ) T = n // m elements = [ 0 for _ in range ( m - 1 )] counts = [ 0 for _ in range ( m - 1 )] for num in nums : flag = True for i in range ( m - 1 ): if num == elements [ i ]: counts [ i ] += 1 Flag = False break # \u5982\u679c\u4e0d\u5728elemnts\u4e2d if flag : for i in range ( m - 1 ): if counts [ i ] == 0 : elements [ i ] = num counts [ i ] = 1 flag = False break # \u5982\u679ccounts\u90fd\u4e0d\u4e3a0 if flag : for i in range ( m - 1 ): counts [ i ] -= 1 counts = [ 0 for _ in range ( m - 1 )] for num in nums : for i in range ( m - 1 ): if num == elements [ i ]: counts [ i ] += 1 ans = [] for i in range ( m - 1 ): if counts [ i ] > T : if elements [ i ] not in ans : ans . append ( elements [ i ]) return ans 2. \u76f8\u5173\u9898\u76ee \u00b6 leetcode \u96be\u5ea6 169. \u591a\u6570\u5143\u7d20 \u7b80\u5355 229. \u6c42\u4f17\u6570 II \u4e2d\u7b49","title":"\u6469\u5c14\u6295\u7968\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/#_1","text":"\u5982\u4f55\u627e\u51fa\u4e00\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6700\u591a\u7684\u6570\u5b57\u5462\uff1f \u6734\u7d20\u7684\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8ba1\u6570\uff0c\u7136\u540e\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u6837\u9700\u8981O(n)\u7684\u989d\u5916\u7a7a\u95f4\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u6469\u5c14\u6295\u7968\u6cd5\u5c31\u662f\u4f7f\u7528O(1)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0cO(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u7b97\u6cd5\u3002 \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u00bd\u7684\u6570\u5b57\uff0c \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u2153\u7684\u6570\u5b57\uff0c \u8fd9\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u6469\u5c14\u6295\u7968\u6cd5\u89e3\u51b3\u3002","title":"\u6469\u5c14\u6295\u7968\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/#1","text":"\u8bbe\u6570\u7ec4\u5143\u7d20\u6709 n \u4e2a\uff0c 0 < m < n, \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n / m \u7684\u6240\u6709\u6570\u5b57\u3002 \u6700\u574f\u7684\u60c5\u51b5\uff0c \u6709 m - 1 \u4e2a\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n / m \u6b21\uff0c \u6240\u4ee5\u9700\u8981\u7a7a\u95f4 O(m - 1). elements[m-1] \u8868\u793a\u5f53\u524d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 m - 1 \u4e2a\u5143\u7d20\uff0c count[m-1] \u8868\u793a\u5176\u51fa\u73b0\u6b21\u6570 \u7b2c\u4e00\u904d\u904d\u5386\u6570\u7ec4\uff0c \u5982\u679c nums[i] in elements, \u5219\u5bf9\u5e94\u7684count+1; \u5426\u5219\u5982\u679ccount\u4e2d\u5b58\u57280\uff0c\u5f53\u524d\u5143\u7d20\u4f5c\u4e3a\u65b0\u7684\u5143\u7d20\u8d4b\u503c\u7ed90\u5bf9\u5e94\u7684elements; \u5982\u679c\u90fd\u4e0d\u4e3a0\uff0c coount \u4e2d\u6bcf\u4e2a\u90fd-1\uff0c \u8868\u793a\u6d88\u8017\u4e00\u6b21\u3002 \u7b2c\u4e8c\u6b21\u904d\u5386\uff0c \u7edf\u8ba1 elements \u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n/m \u7684\u5143\u7d20\uff0c \u8f93\u51fa\u7ed3\u679c def major ( nums : List [ int ], m : int ) -> List [ int ]: n = len ( nums ) T = n // m elements = [ 0 for _ in range ( m - 1 )] counts = [ 0 for _ in range ( m - 1 )] for num in nums : flag = True for i in range ( m - 1 ): if num == elements [ i ]: counts [ i ] += 1 Flag = False break # \u5982\u679c\u4e0d\u5728elemnts\u4e2d if flag : for i in range ( m - 1 ): if counts [ i ] == 0 : elements [ i ] = num counts [ i ] = 1 flag = False break # \u5982\u679ccounts\u90fd\u4e0d\u4e3a0 if flag : for i in range ( m - 1 ): counts [ i ] -= 1 counts = [ 0 for _ in range ( m - 1 )] for num in nums : for i in range ( m - 1 ): if num == elements [ i ]: counts [ i ] += 1 ans = [] for i in range ( m - 1 ): if counts [ i ] > T : if elements [ i ] not in ans : ans . append ( elements [ i ]) return ans","title":"1. \u7b97\u6cd5\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/#2","text":"leetcode \u96be\u5ea6 169. \u591a\u6570\u5143\u7d20 \u7b80\u5355 229. \u6c42\u4f17\u6570 II \u4e2d\u7b49","title":"2. \u76f8\u5173\u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/","text":"\u6a21\u8fd0\u7b97\u662f\u6307\u5bf9\u4e00\u4e2a\u6570\u6c42\u4f59\u6570\u7684\u8fc7\u7a0b\u3002\u6d89\u53ca\u5230\u6bd4\u8f83\u5927\u7684\u6570\u5b57\u65f6\uff0c\u901a\u5e38\u4f1a\u6d89\u53ca\u5230\u53d6\u6a21\u8fd0\u7b97\u3002\u4e86\u89e3\u4e00\u4e9b\u6a21\u8fd0\u7b97\u7684\u6027\u8d28\u662f\u6709\u597d\u5904\u7684\u3002\u6211\u4eec\u628aa \u548c b \u9664\u4ee5 m \u4e4b\u540e\u6240\u5f97\u5230\u7684\u4f59\u6570\u76f8\u7b49\u8bb0\u4f5c a \\equiv b(mod \\space m) a \\equiv b(mod \\space m) . \u57fa\u672c\u7684\u6a21\u8fd0\u7b97\u5b9a\u5f8b \u00b6 \u5982\u679c a \\equiv b(mod \\space m) a \\equiv b(mod \\space m) \u4e14 c \\equiv d(mod \\space m) c \\equiv d(mod \\space m) , \u90a3\u4e48\u6709 - {a+b} \\equiv {c+d} {(mod \\space m)} {a+b} \\equiv {c+d} {(mod \\space m)} - {a-b} \\equiv {c-d} {(mod \\space m)} {a-b} \\equiv {c-d} {(mod \\space m)} - {a \\times b} \\equiv {c \\times d} {(mod \\space m)} {a \\times b} \\equiv {c \\times d} {(mod \\space m)} a \\equiv b(mod \\space m) a \\equiv b(mod \\space m) \u8bf4\u660e a = km + b a = km + b , \u53e6\u5916\uff1a - (a+b) \\% c = (a\\%c+b\\%c)\\%c (a+b) \\% c = (a\\%c+b\\%c)\\%c - (a-b) \\% c = (a\\%c-b\\%c)\\%c (a-b) \\% c = (a\\%c-b\\%c)\\%c - (a \\times b) \\% c = (a\\%c \\times b\\%c)\\%c (a \\times b) \\% c = (a\\%c \\times b\\%c)\\%c - a^b\\space\\%c = (a\\%c)^b \\space \\% c a^b\\space\\%c = (a\\%c)^b \\space \\% c \u6700\u540e\u4e00\u6761\u89c4\u5219\u5728\u6c42\u5927\u6570\u7684\u5e42\u7684\u6a21\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff1a 62^{65} \\% 133 = 62 \\times 62^{64} \\% 133 = 62 \\times (62^2)^{32} \\% 133 = 62 \\times 3844^{32} \\% 133 = 62 \\times (3844 \\% 133)^{32} \\% 133 = 62 \\times 120^{32} \\% 133 = 62 \\times 36^{16} \\% 133 = 62 \\times 99^8 \\% 133 = 62 \\times 92^4 \\% 133 = 62 \\times 85^2 \\% 133 = 62 \\times 43 \\% 133 = 2666 \\% 133 = 6 62^{65} \\% 133 = 62 \\times 62^{64} \\% 133 = 62 \\times (62^2)^{32} \\% 133 = 62 \\times 3844^{32} \\% 133 = 62 \\times (3844 \\% 133)^{32} \\% 133 = 62 \\times 120^{32} \\% 133 = 62 \\times 36^{16} \\% 133 = 62 \\times 99^8 \\% 133 = 62 \\times 92^4 \\% 133 = 62 \\times 85^2 \\% 133 = 62 \\times 43 \\% 133 = 2666 \\% 133 = 6 1. \u9006\u5143 \u00b6 \u8003\u8651\u5982\u4f55\u6c42\u89e3 ax \\equiv b(mod \\space m) ax \\equiv b(mod \\space m) .\u4e2d\u7684 x x ,\u5982\u679c\u662f\u7b49\u5f0f\uff0c ax=b ax=b ,\u90a3\u4e48\u6c42\u89e3 x x ,\u975e\u5e38\u5bb9\u6613\uff0c x = a^{-1}*b x = a^{-1}*b ,\u5982\u679ca\u662f\u5b9e\u6570\uff0c\u90a3\u4e48 a^{-1} = \\dfrac 1 a a^{-1} = \\dfrac 1 a . \u6240\u4ee5\uff0c\u6c42\u89e3x\u7684\u5173\u952e\u662f\u6c42\u51fa\u5728\u53d6\u6a21\u8fd0\u7b97\u610f\u4e49\u4e0b\u7684a\u7684\u5012\u6570\uff0c\u8fd9\u91cc\u79f0\u4f5c**\u9006\u5143**\u3002 \u5047\u8bbea\u7684\u9006\u5143\u662fx\uff0c\u90a3\u4e48\u6709 ax \\equiv 1(mod \\space m) ax \\equiv 1(mod \\space m) , \u5c31\u662f ax=km+1 ax=km+1 ,\u8f6c\u6362\u4e00\u4e0b\u5c31\u662f\u6c42\u4f7f\u5f97 ax-km=1 ax-km=1 \u6210\u7acb\u7684 x x ,\u5176\u4e2da\uff0cm\u662f\u4e00\u4e2a\u5df2\u77e5\u6570\uff0ck\u662f\u6b63\u6574\u6570\u3002 \u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u66f4\u4e00\u822c\u7684\u95ee\u9898\u7684\u89e3\u6cd5\u3002a,b,x,y,\u90fd\u662f\u6574\u6570\uff0ca,b,\u5df2\u77e5\uff0c\u6c42 ax+by=1 ax+by=1 \u6210\u7acb\u7684x,y. int extgcd ( int a , int b , int & x , int & y ){ int d = a ; if ( b != 0 ){ d = extgcd ( b , a % b , y , x ); y = y - ( a / b ) * x ; } else { x = 1 ; y = 0 ; } return d ; } int main () { int a = 4 , b = 11 ; int x , y ; cout << extgcd ( a , b , x , y ) << endl ; cout << x << endl ; cout << y << endl ; return 0 ; } \u8fd9\u6837\u5229\u7528\u8f97\u8f6c\u76f8\u9664\u6cd5\u7684\u6269\u5c55\uff0c\u53ef\u4ee5\u89e3\u6790\u7684\u6c42\u89e3\u51fax\u548cy,\u6bd4\u5148\u786e\u5b9a\u4e00\u4e2a\u6570\u5b57\u518d\u53bb\u6c42\u89e3\u53e6\u5916\u4e00\u4e2a\u6570\u5b57\u8981\u597d\u3002 \u4e0b\u9762\u6765\u770b\u6c42\u89e3\u9006\u5143\u7684\u65b9\u6cd5\uff1a int mod_inverse ( int a , int m ){ int x , y ; extgcd ( a , m , x , y ); return ( m + x % m ) % m ; } int main () { cout << mod_inverse ( 3 , 20 ) << endl ; return 0 ; } \u4e0a\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u6c42\u89e3\u5f97\u51fa\u4e86 3(mod \\space 20) 3(mod \\space 20) \u7684\u9006\u5143\uff0c \u662f7. \u4ee5\u4e0a\u662f\u5229\u7528\u6269\u5c55\u7684\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u89e3\u9006\u5143\u7684\u8fc7\u7a0b\u3002 \u6c42\u9006\u5143\u8fd8\u6709\u5176\u4ed6\u7684\u65b9\u6cd5\u3002 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u5982\u679c p p \u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6574\u6570 x x ,\u90fd\u6709 x^p \\equiv x(mod \\space p) x^p \\equiv x(mod \\space p) , \u968f\u4fbf\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c 2^3 (mod\\space3) \\equiv 2 2^3 (mod\\space3) \\equiv 2 , 8^5 (mod\\space5) \\equiv 8 8^5 (mod\\space5) \\equiv 8 \u5982\u679cx\u65e0\u6cd5\u88abp\u6574\u9664\uff0c\u8fd8\u6709\u4e00\u4e2a\u89c4\u5f8b\u6210\u7acb\uff0c x^{p-1} \\equiv 1(mod\\space p) x^{p-1} \\equiv 1(mod\\space p) ,\u5229\u7528\u8fd9\u6761\u6027\u8d28\uff0c\u4e5f\u53ef\u4ee5\u6c42\u4e00\u4e2a\u6570\u7684\u9006\u5143\u3002\u7b49\u5f0f\u4e24\u8fb9\u90fd\u4e58\u4ee5 x^{-1} x^{-1} ,\u5f97\u5230 x^{-1} = x^{p-2}(mod \\space p) x^{-1} = x^{p-2}(mod \\space p) , \u6240\u4ee5\u5728p\u662f\u7d20\u6570\u7684\u65f6\u5019\uff08\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u5982\u6b64\uff09\uff0c\u4e00\u4e2a\u6570\u7684\u9006\u5143\uff0c\u5c31\u7b49\u4e8e\u8fd9\u4e2a\u6570\u7684p-2\u6b21\u65b9(mod p), \u6240\u4ee5\uff0c\u4f7f\u7528\u5feb\u901f\u5e42\u8fd0\u7b97\u5c31\u80fd\u6c42\u51fa\u9006\u5143\u3002 \u5728p\u4e0d\u662f\u7d20\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u4e5f\u6709\u7c7b\u4f3c\u7684\u5b9a\u7406\u53ef\u4ee5\u4f7f\u7528\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u505a\u8ba8\u8bba\u4e86\u3002\u56e0\u4e3a\u7a0b\u5e8f\u8bbe\u8ba1\u9898\u4e00\u822c\u60c5\u51b5\u4e0b\u7ed9\u51fa\u7684\u90fd\u4f1a\u662f\u7d20\u6570\u3002 2. a\u7684b\u6b21\u65b9\u6a21m \u00b6 long long Montgomery ( long long a , long long b , long long m ) { long long r = 1 ; a %= m ; while ( b > 1 ) { if (( b & 1 ) != 0 ) r = ( r * a ) % m ; a = ( a * a ) % m ; b /= 2 ; } return ( r * a ) % m ; } 3. n!(mod p) \u548c\u6392\u5217\u7ec4\u5408\u6570\u6a21P \u00b6 \u5148\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u6c4210\uff01mod 4; 10! = 10x9x8x7x6x5x4x3x2x1 mod 4 = 2 x 1 x (2x4) x 3 x 2 x 1 x (1x4) x 3 x 2 x 1 mod p = 2x1x(3x2x1)x2 x (2x4)x(1x4) = 2x6x2 x (2x4)x(1x4) = 6x4x2x4x1x4 = 0 \u901a\u8fc7\u4e0a\u9762\u7684\u8ba1\u7b97\u8fc7\u7a0b\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9en!\u91cc\u9762\u7684\u6240\u6709\u6570\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u80fd\u591f\u88abp\u6574\u9664\u7684\uff0c\u8fd9\u7c7b\u8981\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u53e6\u5916\u4e00\u7c7b\u662f\u4e0d\u80fd\u88abp\u6574\u9664\u7684\uff0c\u8fd9\u7c7bmod p\u4e4b\u540e\u5c31\u4f1a\u5448\u73b0\u51fa\u5468\u671f\u6027\uff0c\u6700\u7ec8\u5f62\u6210 a^b a^b \u8fd9\u79cd\u5f62\u5f0f\u3002 \u4e0b\u9762\u5177\u4f53\u770b\u4e00\u4e0bn! mod p\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a int mod_fact ( int n , int p , int & e ){ //e \u7684\u542b\u4e49\u662fn!\u80fd\u591f\u8fed\u4ee3\u6574\u9664p\u7684\u6b21\u6570\u3002 vector < int > fact ( p , 0 ); vector < int > nfact ( p , 1 ); //\u8ba1\u7b97i\u7684\u9636\u4e58 for ( int i = 1 ; i < p ; i ++ ){ nfact [ i ] *= nfact [ i - 1 ] * i ; } for ( int i = 1 ; i < p ; i ++ ){ fact [ i ] = nfact [ i ] % p ; } e = 0 ; if ( n == 0 ) return 1 ; int res = mod_fact ( n / p , p , e ); e += n / p ; if ( n / p % 2 != 0 ){ return res * ( p - fact [ n % p ]) % p ; } return res * ( fact [ n % p ]) % p ; } int main () { int e ; cout << mod_fact ( 5 , 7 , e ) << endl ; cout << e << endl ; return 0 ; } \u77e5\u9053\u4e86\u5982\u4f55\u8ba1\u7b97\u9636\u4e58\u7684\u6a21\uff0c\u8ba1\u7b97\u6392\u5217\u548c\u7ec4\u5408\u7ed3\u679c\u7684\u6a21\u4e5f\u5c31\u4e0d\u6210\u95ee\u9898\u4e86\u3002 \u6c42 C^k_n = \\dfrac{n!}{k!(n-k)!} (mod\\space p) C^k_n = \\dfrac{n!}{k!(n-k)!} (mod\\space p) int mod_comb ( int n , int k , int p ){ if ( n < 0 || k < 0 || n < k ) return 0 ; int e1 , e2 , e3 ; int a1 = mod_fact ( n , p , e1 ); int a2 = mod_fact ( k , p , e2 ); int a3 = mod_fact ( n - k , p , e3 ); if ( e1 > e2 + e3 ) return 0 ; return a1 * mod_inverse ( a2 * a3 % p , p ) % p ; }","title":"\u7b97\u6cd5\u4e13\u9898_\u6a21\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#_1","text":"\u5982\u679c a \\equiv b(mod \\space m) a \\equiv b(mod \\space m) \u4e14 c \\equiv d(mod \\space m) c \\equiv d(mod \\space m) , \u90a3\u4e48\u6709 - {a+b} \\equiv {c+d} {(mod \\space m)} {a+b} \\equiv {c+d} {(mod \\space m)} - {a-b} \\equiv {c-d} {(mod \\space m)} {a-b} \\equiv {c-d} {(mod \\space m)} - {a \\times b} \\equiv {c \\times d} {(mod \\space m)} {a \\times b} \\equiv {c \\times d} {(mod \\space m)} a \\equiv b(mod \\space m) a \\equiv b(mod \\space m) \u8bf4\u660e a = km + b a = km + b , \u53e6\u5916\uff1a - (a+b) \\% c = (a\\%c+b\\%c)\\%c (a+b) \\% c = (a\\%c+b\\%c)\\%c - (a-b) \\% c = (a\\%c-b\\%c)\\%c (a-b) \\% c = (a\\%c-b\\%c)\\%c - (a \\times b) \\% c = (a\\%c \\times b\\%c)\\%c (a \\times b) \\% c = (a\\%c \\times b\\%c)\\%c - a^b\\space\\%c = (a\\%c)^b \\space \\% c a^b\\space\\%c = (a\\%c)^b \\space \\% c \u6700\u540e\u4e00\u6761\u89c4\u5219\u5728\u6c42\u5927\u6570\u7684\u5e42\u7684\u6a21\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff1a 62^{65} \\% 133 = 62 \\times 62^{64} \\% 133 = 62 \\times (62^2)^{32} \\% 133 = 62 \\times 3844^{32} \\% 133 = 62 \\times (3844 \\% 133)^{32} \\% 133 = 62 \\times 120^{32} \\% 133 = 62 \\times 36^{16} \\% 133 = 62 \\times 99^8 \\% 133 = 62 \\times 92^4 \\% 133 = 62 \\times 85^2 \\% 133 = 62 \\times 43 \\% 133 = 2666 \\% 133 = 6 62^{65} \\% 133 = 62 \\times 62^{64} \\% 133 = 62 \\times (62^2)^{32} \\% 133 = 62 \\times 3844^{32} \\% 133 = 62 \\times (3844 \\% 133)^{32} \\% 133 = 62 \\times 120^{32} \\% 133 = 62 \\times 36^{16} \\% 133 = 62 \\times 99^8 \\% 133 = 62 \\times 92^4 \\% 133 = 62 \\times 85^2 \\% 133 = 62 \\times 43 \\% 133 = 2666 \\% 133 = 6","title":"\u57fa\u672c\u7684\u6a21\u8fd0\u7b97\u5b9a\u5f8b"},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#1","text":"\u8003\u8651\u5982\u4f55\u6c42\u89e3 ax \\equiv b(mod \\space m) ax \\equiv b(mod \\space m) .\u4e2d\u7684 x x ,\u5982\u679c\u662f\u7b49\u5f0f\uff0c ax=b ax=b ,\u90a3\u4e48\u6c42\u89e3 x x ,\u975e\u5e38\u5bb9\u6613\uff0c x = a^{-1}*b x = a^{-1}*b ,\u5982\u679ca\u662f\u5b9e\u6570\uff0c\u90a3\u4e48 a^{-1} = \\dfrac 1 a a^{-1} = \\dfrac 1 a . \u6240\u4ee5\uff0c\u6c42\u89e3x\u7684\u5173\u952e\u662f\u6c42\u51fa\u5728\u53d6\u6a21\u8fd0\u7b97\u610f\u4e49\u4e0b\u7684a\u7684\u5012\u6570\uff0c\u8fd9\u91cc\u79f0\u4f5c**\u9006\u5143**\u3002 \u5047\u8bbea\u7684\u9006\u5143\u662fx\uff0c\u90a3\u4e48\u6709 ax \\equiv 1(mod \\space m) ax \\equiv 1(mod \\space m) , \u5c31\u662f ax=km+1 ax=km+1 ,\u8f6c\u6362\u4e00\u4e0b\u5c31\u662f\u6c42\u4f7f\u5f97 ax-km=1 ax-km=1 \u6210\u7acb\u7684 x x ,\u5176\u4e2da\uff0cm\u662f\u4e00\u4e2a\u5df2\u77e5\u6570\uff0ck\u662f\u6b63\u6574\u6570\u3002 \u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u66f4\u4e00\u822c\u7684\u95ee\u9898\u7684\u89e3\u6cd5\u3002a,b,x,y,\u90fd\u662f\u6574\u6570\uff0ca,b,\u5df2\u77e5\uff0c\u6c42 ax+by=1 ax+by=1 \u6210\u7acb\u7684x,y. int extgcd ( int a , int b , int & x , int & y ){ int d = a ; if ( b != 0 ){ d = extgcd ( b , a % b , y , x ); y = y - ( a / b ) * x ; } else { x = 1 ; y = 0 ; } return d ; } int main () { int a = 4 , b = 11 ; int x , y ; cout << extgcd ( a , b , x , y ) << endl ; cout << x << endl ; cout << y << endl ; return 0 ; } \u8fd9\u6837\u5229\u7528\u8f97\u8f6c\u76f8\u9664\u6cd5\u7684\u6269\u5c55\uff0c\u53ef\u4ee5\u89e3\u6790\u7684\u6c42\u89e3\u51fax\u548cy,\u6bd4\u5148\u786e\u5b9a\u4e00\u4e2a\u6570\u5b57\u518d\u53bb\u6c42\u89e3\u53e6\u5916\u4e00\u4e2a\u6570\u5b57\u8981\u597d\u3002 \u4e0b\u9762\u6765\u770b\u6c42\u89e3\u9006\u5143\u7684\u65b9\u6cd5\uff1a int mod_inverse ( int a , int m ){ int x , y ; extgcd ( a , m , x , y ); return ( m + x % m ) % m ; } int main () { cout << mod_inverse ( 3 , 20 ) << endl ; return 0 ; } \u4e0a\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u6c42\u89e3\u5f97\u51fa\u4e86 3(mod \\space 20) 3(mod \\space 20) \u7684\u9006\u5143\uff0c \u662f7. \u4ee5\u4e0a\u662f\u5229\u7528\u6269\u5c55\u7684\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u89e3\u9006\u5143\u7684\u8fc7\u7a0b\u3002 \u6c42\u9006\u5143\u8fd8\u6709\u5176\u4ed6\u7684\u65b9\u6cd5\u3002 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u5982\u679c p p \u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6574\u6570 x x ,\u90fd\u6709 x^p \\equiv x(mod \\space p) x^p \\equiv x(mod \\space p) , \u968f\u4fbf\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c 2^3 (mod\\space3) \\equiv 2 2^3 (mod\\space3) \\equiv 2 , 8^5 (mod\\space5) \\equiv 8 8^5 (mod\\space5) \\equiv 8 \u5982\u679cx\u65e0\u6cd5\u88abp\u6574\u9664\uff0c\u8fd8\u6709\u4e00\u4e2a\u89c4\u5f8b\u6210\u7acb\uff0c x^{p-1} \\equiv 1(mod\\space p) x^{p-1} \\equiv 1(mod\\space p) ,\u5229\u7528\u8fd9\u6761\u6027\u8d28\uff0c\u4e5f\u53ef\u4ee5\u6c42\u4e00\u4e2a\u6570\u7684\u9006\u5143\u3002\u7b49\u5f0f\u4e24\u8fb9\u90fd\u4e58\u4ee5 x^{-1} x^{-1} ,\u5f97\u5230 x^{-1} = x^{p-2}(mod \\space p) x^{-1} = x^{p-2}(mod \\space p) , \u6240\u4ee5\u5728p\u662f\u7d20\u6570\u7684\u65f6\u5019\uff08\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u5982\u6b64\uff09\uff0c\u4e00\u4e2a\u6570\u7684\u9006\u5143\uff0c\u5c31\u7b49\u4e8e\u8fd9\u4e2a\u6570\u7684p-2\u6b21\u65b9(mod p), \u6240\u4ee5\uff0c\u4f7f\u7528\u5feb\u901f\u5e42\u8fd0\u7b97\u5c31\u80fd\u6c42\u51fa\u9006\u5143\u3002 \u5728p\u4e0d\u662f\u7d20\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u4e5f\u6709\u7c7b\u4f3c\u7684\u5b9a\u7406\u53ef\u4ee5\u4f7f\u7528\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u505a\u8ba8\u8bba\u4e86\u3002\u56e0\u4e3a\u7a0b\u5e8f\u8bbe\u8ba1\u9898\u4e00\u822c\u60c5\u51b5\u4e0b\u7ed9\u51fa\u7684\u90fd\u4f1a\u662f\u7d20\u6570\u3002","title":"1. \u9006\u5143"},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#2-abm","text":"long long Montgomery ( long long a , long long b , long long m ) { long long r = 1 ; a %= m ; while ( b > 1 ) { if (( b & 1 ) != 0 ) r = ( r * a ) % m ; a = ( a * a ) % m ; b /= 2 ; } return ( r * a ) % m ; }","title":"2. a\u7684b\u6b21\u65b9\u6a21m"},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#3-nmod-p-p","text":"\u5148\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u6c4210\uff01mod 4; 10! = 10x9x8x7x6x5x4x3x2x1 mod 4 = 2 x 1 x (2x4) x 3 x 2 x 1 x (1x4) x 3 x 2 x 1 mod p = 2x1x(3x2x1)x2 x (2x4)x(1x4) = 2x6x2 x (2x4)x(1x4) = 6x4x2x4x1x4 = 0 \u901a\u8fc7\u4e0a\u9762\u7684\u8ba1\u7b97\u8fc7\u7a0b\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9en!\u91cc\u9762\u7684\u6240\u6709\u6570\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u80fd\u591f\u88abp\u6574\u9664\u7684\uff0c\u8fd9\u7c7b\u8981\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u53e6\u5916\u4e00\u7c7b\u662f\u4e0d\u80fd\u88abp\u6574\u9664\u7684\uff0c\u8fd9\u7c7bmod p\u4e4b\u540e\u5c31\u4f1a\u5448\u73b0\u51fa\u5468\u671f\u6027\uff0c\u6700\u7ec8\u5f62\u6210 a^b a^b \u8fd9\u79cd\u5f62\u5f0f\u3002 \u4e0b\u9762\u5177\u4f53\u770b\u4e00\u4e0bn! mod p\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a int mod_fact ( int n , int p , int & e ){ //e \u7684\u542b\u4e49\u662fn!\u80fd\u591f\u8fed\u4ee3\u6574\u9664p\u7684\u6b21\u6570\u3002 vector < int > fact ( p , 0 ); vector < int > nfact ( p , 1 ); //\u8ba1\u7b97i\u7684\u9636\u4e58 for ( int i = 1 ; i < p ; i ++ ){ nfact [ i ] *= nfact [ i - 1 ] * i ; } for ( int i = 1 ; i < p ; i ++ ){ fact [ i ] = nfact [ i ] % p ; } e = 0 ; if ( n == 0 ) return 1 ; int res = mod_fact ( n / p , p , e ); e += n / p ; if ( n / p % 2 != 0 ){ return res * ( p - fact [ n % p ]) % p ; } return res * ( fact [ n % p ]) % p ; } int main () { int e ; cout << mod_fact ( 5 , 7 , e ) << endl ; cout << e << endl ; return 0 ; } \u77e5\u9053\u4e86\u5982\u4f55\u8ba1\u7b97\u9636\u4e58\u7684\u6a21\uff0c\u8ba1\u7b97\u6392\u5217\u548c\u7ec4\u5408\u7ed3\u679c\u7684\u6a21\u4e5f\u5c31\u4e0d\u6210\u95ee\u9898\u4e86\u3002 \u6c42 C^k_n = \\dfrac{n!}{k!(n-k)!} (mod\\space p) C^k_n = \\dfrac{n!}{k!(n-k)!} (mod\\space p) int mod_comb ( int n , int k , int p ){ if ( n < 0 || k < 0 || n < k ) return 0 ; int e1 , e2 , e3 ; int a1 = mod_fact ( n , p , e1 ); int a2 = mod_fact ( k , p , e2 ); int a3 = mod_fact ( n - k , p , e3 ); if ( e1 > e2 + e3 ) return 0 ; return a1 * mod_inverse ( a2 * a3 % p , p ) % p ; }","title":"3. n!(mod p) \u548c\u6392\u5217\u7ec4\u5408\u6570\u6a21P"},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/","text":"\u53ea\u6709\u4e24\u4e2a\u56e0\u5b50\u7684\u6570\u53eb\u505a\u7d20\u6570\uff0c\u4e5f\u53eb\u8d28\u6570\u3002\u4f8b\u59822\uff0c3\uff0c5\uff0c7\uff0c11....\u7d20\u6570\u7ecf\u5e38\u7528\u5728\u5bc6\u7801\u5b66\u4e2d\uff0c\u6240\u4ee5\u6d89\u53ca\u7d20\u6570\u7684\u8fd0\u7b97\u4e5f\u662f\u4f1a\u7ecf\u5e38\u9047\u5230\u7684\u3002 \u7d20\u6027\u6d4b\u8bd5 \u00b6 1. \u6d4b\u8bd5\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570 \u00b6 \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570\uff0c\u6211\u4eec\u5c31\u8981\u627e\u5230\u5b83\u6240\u6709\u7684\u56e0\u5b50\uff0c\u770b\u662f\u4e0d\u662f\u53ea\u67091\u548c\u5b83\u672c\u8eab\u3002\u5177\u4f53\u601d\u8def\u662f\u4ece2\u5f00\u59cb\uff0c\u4e00\u76f4\u5230 \\sqrt n \\sqrt n , \u5982\u679c\u90fd\u4e0d\u80fd\u6574\u9664n\uff0c\u90a3\u4e48n\u5c31\u662f\u7d20\u6570\u3002 bool isPrime ( int n ){ for ( int i = 2 ; i <= sqrt ( n ); i ++ ){ if ( n % i == 0 ){ return false ; } } return true ; } 2. \u627e\u51fan\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570 \u00b6 \u5982\u679c\u662f\u627e\u51fa\u5f88\u591a\u7d20\u6570\uff0c\u5982\u679c\u4ece1\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u505a\u7d20\u6027\u6d4b\u8bd5\uff0c\u90a3\u4e48\u5f00\u9500\u5c31\u592a\u9ad8\u4e86\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u90fd\u4e0d\u662f\u7d20\u6570\u3002 \u6211\u4eec\u76f4\u52302\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u6240\u67092\u7684\u500d\u6570\uff0c4\uff0c6\uff0c8\u5c31\u90fd\u4e0d\u662f\u7d20\u6570\uff0c\u56e0\u4e3a\u5176\u81f3\u5c11\u542b\u6709\u4e00\u4e2a\u56e0\u5b502. \u540c\u7406\uff0c3\u7684\u6240\u6709\u500d\u6570\u4e5f\u4e0d\u662f\u7d20\u6570\u3002 \u540c\u7406\uff0c5\u7684\u6240\u6709\u500d\u6570\u4e5f\u4e0d\u662f\u7d20\u6570\u3002 \u8fd9\u6837\u8003\u8651\uff0c\u6bcf\u5f53\u6211\u4eec\u786e\u5b9a\u4e00\u4e2a\u7d20\u6570\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e00\u5927\u6279\u6570\u4e0d\u662f\u7d20\u6570\uff0c\u8fd9\u4e9b\u80af\u5b9a\u4e0d\u662f\u7d20\u6570\u7684\u6570\u5c31\u4e0d\u7528\u518d\u505a\u7d20\u6027\u6d4b\u8bd5\u4e86\u3002 \u4ee5\u8fd9\u6837\u7684\u601d\u8def\u6c42n\u4ee5\u5185\u7684\u7d20\u6570\u7684\u65b9\u6cd5\u53eb\u505a**\u57c3\u6c0f\u7b5b\u6cd5**\u3002 // n \u4ee5\u5185\u7684\u7d20\u6570 int sieve ( int n , vector < int > & prime ){ int p = 0 ; // is_prime[0] \u8868\u793a\u6570\u5b570 \u662f\u4e0d\u662f\u7d20\u6570 // is_print[1] \u8868\u793a\u6570\u5b571\u662f\u4e0d\u662f\u7d20\u6570 // is_print[n] \u8868\u793a\u6570\u5b57n\u662f\u4e0d\u662f\u7d20\u6570 vector < bool > is_prime ( n + 1 , true ); is_prime [ 0 ] = false ; //0 \u4e0d\u662f\u7d20\u6570\uff0c is_prime [ 1 ] = false ; //1 \u4e0d\u662f\u7d20\u6570 for ( int i = 2 ; i <= n ; i ++ ){ // \u521d\u59cb\u7684\u65f6\u5019\uff0c2\u662f\u7d20\u6570\uff0cis_prime[1]\u5bf9\u5e942 if ( is_prime [ i ]){ prime . push_back ( i ); p ++ ; for ( int j = i * 2 ; j <= n ; j += i ){ is_prime [ j ] = false ; } } } return p ; } 3. \u627e\u51fa\u533a\u95f4[a,b)\u5185\u7684\u6240\u6709\u7d20\u6570 \u00b6 \u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u53ef\u4ee5\u627e\u51fab\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570\uff0c\u7136\u540e\u53ea\u53d6\u5927\u4e8ea\u7684\u90e8\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u7b97\u6cd5\u7684\u601d\u60f3\uff0c\u5728\u533a\u95f4[a,b)\u5185\u4f7f\u7528\u57c3\u6c0f\u7b5b\u6cd5\u3002 \u6211\u4eec\u51c6\u5907\u4e24\u4e2a\u533a\u95f4[2, \\sqrt b \\sqrt b ) \u548c [a,b), \u7136\u540e\u5728\u533a\u95f4[2, \\sqrt b \\sqrt b )\u7528\u57c3\u6c0f\u7b5b\u6cd5\u9009\u62e9\u7d20\u6570\uff0c\u540c\u65f6\u5728[a,b)\u5220\u9664\u76f8\u5e94\u7684\u500d\u6570\uff0c\u6700\u540e\u5f97\u5230\u7684\u5c31\u662f[a,b)\u533a\u95f4\u5185\u7684\u7d20\u6570\u3002 int segment_sieve ( int a , int b , vector < int > & prime ){ vector < bool > is_prime ; //is_prime \u6307\u793a0...sqrt(b)\u5185\u662f\u5426\u662f\u7d20\u6570 for ( int i = 0 ; i * i < b ; i ++ ){ is_prime . push_back ( true ); } // //is_prime_ab \u6307\u793a[a,b])\u5185\u662f\u5426\u662f\u7d20\u6570 vector < bool > is_prime_ab ( b - a , true ); int p = 0 ; for ( int i = 2 ; i * i < b ; i ++ ){ if ( is_prime [ i ]){ p ++ ; for ( int j = 2 * i ; j * j < b ; j += i ){ is_prime [ j ] = false ; } for ( int j = max ( 2 ,( a + i - 1 ) / i ) * i ; j < b ; j += i ){ is_prime_ab [ j - a ] = false ; } } } return p ; }","title":"\u7b97\u6cd5\u4e13\u9898_\u7d20\u6570\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#_1","text":"","title":"\u7d20\u6027\u6d4b\u8bd5"},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#1","text":"\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570\uff0c\u6211\u4eec\u5c31\u8981\u627e\u5230\u5b83\u6240\u6709\u7684\u56e0\u5b50\uff0c\u770b\u662f\u4e0d\u662f\u53ea\u67091\u548c\u5b83\u672c\u8eab\u3002\u5177\u4f53\u601d\u8def\u662f\u4ece2\u5f00\u59cb\uff0c\u4e00\u76f4\u5230 \\sqrt n \\sqrt n , \u5982\u679c\u90fd\u4e0d\u80fd\u6574\u9664n\uff0c\u90a3\u4e48n\u5c31\u662f\u7d20\u6570\u3002 bool isPrime ( int n ){ for ( int i = 2 ; i <= sqrt ( n ); i ++ ){ if ( n % i == 0 ){ return false ; } } return true ; }","title":"1. \u6d4b\u8bd5\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#2-n","text":"\u5982\u679c\u662f\u627e\u51fa\u5f88\u591a\u7d20\u6570\uff0c\u5982\u679c\u4ece1\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u505a\u7d20\u6027\u6d4b\u8bd5\uff0c\u90a3\u4e48\u5f00\u9500\u5c31\u592a\u9ad8\u4e86\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u90fd\u4e0d\u662f\u7d20\u6570\u3002 \u6211\u4eec\u76f4\u52302\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u6240\u67092\u7684\u500d\u6570\uff0c4\uff0c6\uff0c8\u5c31\u90fd\u4e0d\u662f\u7d20\u6570\uff0c\u56e0\u4e3a\u5176\u81f3\u5c11\u542b\u6709\u4e00\u4e2a\u56e0\u5b502. \u540c\u7406\uff0c3\u7684\u6240\u6709\u500d\u6570\u4e5f\u4e0d\u662f\u7d20\u6570\u3002 \u540c\u7406\uff0c5\u7684\u6240\u6709\u500d\u6570\u4e5f\u4e0d\u662f\u7d20\u6570\u3002 \u8fd9\u6837\u8003\u8651\uff0c\u6bcf\u5f53\u6211\u4eec\u786e\u5b9a\u4e00\u4e2a\u7d20\u6570\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e00\u5927\u6279\u6570\u4e0d\u662f\u7d20\u6570\uff0c\u8fd9\u4e9b\u80af\u5b9a\u4e0d\u662f\u7d20\u6570\u7684\u6570\u5c31\u4e0d\u7528\u518d\u505a\u7d20\u6027\u6d4b\u8bd5\u4e86\u3002 \u4ee5\u8fd9\u6837\u7684\u601d\u8def\u6c42n\u4ee5\u5185\u7684\u7d20\u6570\u7684\u65b9\u6cd5\u53eb\u505a**\u57c3\u6c0f\u7b5b\u6cd5**\u3002 // n \u4ee5\u5185\u7684\u7d20\u6570 int sieve ( int n , vector < int > & prime ){ int p = 0 ; // is_prime[0] \u8868\u793a\u6570\u5b570 \u662f\u4e0d\u662f\u7d20\u6570 // is_print[1] \u8868\u793a\u6570\u5b571\u662f\u4e0d\u662f\u7d20\u6570 // is_print[n] \u8868\u793a\u6570\u5b57n\u662f\u4e0d\u662f\u7d20\u6570 vector < bool > is_prime ( n + 1 , true ); is_prime [ 0 ] = false ; //0 \u4e0d\u662f\u7d20\u6570\uff0c is_prime [ 1 ] = false ; //1 \u4e0d\u662f\u7d20\u6570 for ( int i = 2 ; i <= n ; i ++ ){ // \u521d\u59cb\u7684\u65f6\u5019\uff0c2\u662f\u7d20\u6570\uff0cis_prime[1]\u5bf9\u5e942 if ( is_prime [ i ]){ prime . push_back ( i ); p ++ ; for ( int j = i * 2 ; j <= n ; j += i ){ is_prime [ j ] = false ; } } } return p ; }","title":"2. \u627e\u51fan\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#3-ab","text":"\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u53ef\u4ee5\u627e\u51fab\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570\uff0c\u7136\u540e\u53ea\u53d6\u5927\u4e8ea\u7684\u90e8\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u7b97\u6cd5\u7684\u601d\u60f3\uff0c\u5728\u533a\u95f4[a,b)\u5185\u4f7f\u7528\u57c3\u6c0f\u7b5b\u6cd5\u3002 \u6211\u4eec\u51c6\u5907\u4e24\u4e2a\u533a\u95f4[2, \\sqrt b \\sqrt b ) \u548c [a,b), \u7136\u540e\u5728\u533a\u95f4[2, \\sqrt b \\sqrt b )\u7528\u57c3\u6c0f\u7b5b\u6cd5\u9009\u62e9\u7d20\u6570\uff0c\u540c\u65f6\u5728[a,b)\u5220\u9664\u76f8\u5e94\u7684\u500d\u6570\uff0c\u6700\u540e\u5f97\u5230\u7684\u5c31\u662f[a,b)\u533a\u95f4\u5185\u7684\u7d20\u6570\u3002 int segment_sieve ( int a , int b , vector < int > & prime ){ vector < bool > is_prime ; //is_prime \u6307\u793a0...sqrt(b)\u5185\u662f\u5426\u662f\u7d20\u6570 for ( int i = 0 ; i * i < b ; i ++ ){ is_prime . push_back ( true ); } // //is_prime_ab \u6307\u793a[a,b])\u5185\u662f\u5426\u662f\u7d20\u6570 vector < bool > is_prime_ab ( b - a , true ); int p = 0 ; for ( int i = 2 ; i * i < b ; i ++ ){ if ( is_prime [ i ]){ p ++ ; for ( int j = 2 * i ; j * j < b ; j += i ){ is_prime [ j ] = false ; } for ( int j = max ( 2 ,( a + i - 1 ) / i ) * i ; j < b ; j += i ){ is_prime_ab [ j - a ] = false ; } } } return p ; }","title":"3. \u627e\u51fa\u533a\u95f4[a,b)\u5185\u7684\u6240\u6709\u7d20\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/","text":"\u77e9\u9635\u7684\u5404\u79cd\u904d\u5386\u65b9\u6cd5\u3002 \u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u4e3b\u5bf9\u89d2\u7ebf) \u00b6 //\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u4e3b\u5bf9\u89d2\u7ebf) vector < vector < int >> printMatrix ( vector < vector < int >> v ){ vector < vector < int >> re ; int m = v . size (); if ( m == 0 ) return re ; if ( m == 1 ){ return v ;} int n = v [ 0 ]. size (); if ( n == 1 ) return v ; int count = m + n - 1 ; int row = 0 ; int col = n - 1 ; vector < int > tmp ; tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); int i = row + 1 ; int j = col - 1 ; while ( true ){ int i1 = row ; int j1 = j ; tmp . clear (); while ( i1 <= i && j1 <= col ){ tmp . push_back ( v [ i1 ][ j1 ]); i1 ++ ; j1 ++ ; } re . push_back ( tmp ); if ( i == m - 1 ){ col -- ; } else { i ++ ; } if ( j == 0 ){ row ++ ; } else { j -- ; } if ( i == m - 1 && j == 0 && col == 0 && row == m - 1 ){ tmp . clear (); tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); break ; } } return re ; } 1. \u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u526f\u5bf9\u89d2\u7ebf) \u00b6 //\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u526f\u5bf9\u89d2\u7ebf) vector < vector < int >> printMatrix ( vector < vector < int >> v ){ vector < vector < int >> re ; int m = v . size (); if ( m == 0 ) return re ; if ( m == 1 ){ return v ;} int n = v [ 0 ]. size (); if ( n == 1 ) return v ; int count = m + n - 1 ; int row = 0 ; int col = 0 ; vector < int > tmp ; tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); int i = row + 1 ; int j = col + 1 ; while ( true ){ int i1 = row ; int j1 = j ; tmp . clear (); while ( i1 <= i && j1 >= col ){ tmp . push_back ( v [ i1 ][ j1 ]); i1 ++ ; j1 -- ; } re . push_back ( tmp ); if ( i == m - 1 ){ col ++ ; } else { i ++ ; } if ( j == n - 1 ){ row ++ ; } else { j ++ ; } if ( i == m - 1 && j == n - 1 && col == n - 1 && row == m - 1 ){ tmp . clear (); tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); break ; } } return re ; }","title":"\u77e9\u9635\u7684\u904d\u5386"},{"location":"%E7%AE%97%E6%B3%95/%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/#_1","text":"//\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u4e3b\u5bf9\u89d2\u7ebf) vector < vector < int >> printMatrix ( vector < vector < int >> v ){ vector < vector < int >> re ; int m = v . size (); if ( m == 0 ) return re ; if ( m == 1 ){ return v ;} int n = v [ 0 ]. size (); if ( n == 1 ) return v ; int count = m + n - 1 ; int row = 0 ; int col = n - 1 ; vector < int > tmp ; tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); int i = row + 1 ; int j = col - 1 ; while ( true ){ int i1 = row ; int j1 = j ; tmp . clear (); while ( i1 <= i && j1 <= col ){ tmp . push_back ( v [ i1 ][ j1 ]); i1 ++ ; j1 ++ ; } re . push_back ( tmp ); if ( i == m - 1 ){ col -- ; } else { i ++ ; } if ( j == 0 ){ row ++ ; } else { j -- ; } if ( i == m - 1 && j == 0 && col == 0 && row == m - 1 ){ tmp . clear (); tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); break ; } } return re ; }","title":"\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u4e3b\u5bf9\u89d2\u7ebf)"},{"location":"%E7%AE%97%E6%B3%95/%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/#1","text":"//\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u526f\u5bf9\u89d2\u7ebf) vector < vector < int >> printMatrix ( vector < vector < int >> v ){ vector < vector < int >> re ; int m = v . size (); if ( m == 0 ) return re ; if ( m == 1 ){ return v ;} int n = v [ 0 ]. size (); if ( n == 1 ) return v ; int count = m + n - 1 ; int row = 0 ; int col = 0 ; vector < int > tmp ; tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); int i = row + 1 ; int j = col + 1 ; while ( true ){ int i1 = row ; int j1 = j ; tmp . clear (); while ( i1 <= i && j1 >= col ){ tmp . push_back ( v [ i1 ][ j1 ]); i1 ++ ; j1 -- ; } re . push_back ( tmp ); if ( i == m - 1 ){ col ++ ; } else { i ++ ; } if ( j == n - 1 ){ row ++ ; } else { j ++ ; } if ( i == m - 1 && j == n - 1 && col == n - 1 && row == m - 1 ){ tmp . clear (); tmp . push_back ( v [ row ][ col ]); re . push_back ( tmp ); break ; } } return re ; }","title":"1. \u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u526f\u5bf9\u89d2\u7ebf)"},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","text":"\u7b97\u6cd5\u9898\u76ee\u5f53\u4e2d\u7ecf\u5e38\u6d89\u53ca\u5230\u4e00\u4e9b\u51e0\u4f55\u9898\u76ee\u3002\u8fd9\u7c7b\u9898\u76ee\u5982\u679c\u4e0d\u4e8b\u5148\u4e86\u89e3\u4e00\u4e9b\u77e5\u8bc6\uff0c\u5f80\u5f80\u611f\u89c9\u5f88\u96be\u6709\u601d\u8def\u3002\u672c\u6587\u603b\u7ed3\u7b97\u6cd5\u4e2d\u5e38\u89c1\u95ee\u9898\u6d89\u53ca\u5230\u7684\u4e3b\u8981\u77e5\u8bc6\u3002 \u7ebf\u6bb5 \u00b6 \u70b9\u7684\u51f8\u7ec4\u5408 \u70b9 p_1=(x_1,y_1) p_1=(x_1,y_1) \u548c p_2=(x_2,y_2) p_2=(x_2,y_2) \u7684\u51f8\u7ec4\u5408\u5b9a\u4e49\u4e3a\uff1a \u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u4efb\u610f\u70b9 p_3 p_3 x_3 = \\alpha x_1 + (1-\\alpha) x_2 x_3 = \\alpha x_1 + (1-\\alpha) x_2 y_3 = \\alpha y_1 + (1-\\alpha) y_2 y_3 = \\alpha y_1 + (1-\\alpha) y_2 \u5176\u4e2d\uff0c 0 <= \\alpha <= 1 0 <= \\alpha <= 1 \u542b\u4e49\uff0c p_3 p_3 \u4f4d\u4e8e\u70b9 p_1 p_1 \u548c p_2 p_2 \u7ec4\u6210\u7684\u7ebf\u6bb5\u5185\uff0c\u5305\u542b\u8fd9\u4e24\u4e2a\u7aef\u70b9\u3002 \u6211\u4eec\u7528 p_1 p_2 p_1 p_2 \u8868\u793a\u7ebf\u6bb5\uff0c\u7528 p_1 \\longrightarrow p_2 p_1 \\longrightarrow p_2 \u8868\u793a\u5411\u91cf\u6216\u8005\u53eb\u505a\u6709\u5411\u7ebf\u6bb5\u3002 \u6211\u4eec\u5148\u6765\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a 1. \u6709\u5411\u7ebf\u6bb5\u7684\u65cb\u8f6c \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u6709\u5411\u7ebf\u6bb5 p_0 \\longrightarrow p_1 p_0 \\longrightarrow p_1 \u548c p_0 \\longrightarrow p_2 p_0 \\longrightarrow p_2 \uff0c\u5224\u65ad p_0 \\longrightarrow p_1 p_0 \\longrightarrow p_1 \u662f\u5426\u5728 p_0 \\longrightarrow p_2 p_0 \\longrightarrow p_2 \u7684\u987a\u65f6\u9488\u65b9\u5411\uff1f \u53c9\u79ef \u5148\u6765\u4e86\u89e3\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e24\u4e2a\u70b9\u7684\u53c9\u79ef\u5c31\u662f\u4e24\u4e2a\u70b9\u7684\u884c\u5217\u5f0f\u7684\u503c\uff1a p_1 \\times p_2 = det[x_1 x_2 ; y_1 y_2] = x_1y_2-x_2y_1 p_1 \\times p_2 = det[x_1 x_2 ; y_1 y_2] = x_1y_2-x_2y_1 \u53c9\u79ef\u7684\u51e0\u4f55\u610f\u4e49\u662f \u7531\u70b9(0,0),p1,p2,p1+p2\u7ec4\u6210\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684*\u6709\u5411*\u9762\u79ef\u3002 \u7ed3\u8bba a = (p_1-p_0) \\times (p_2-p_0) a = (p_1-p_0) \\times (p_2-p_0) \u5982\u679ca>0,\u5219 p_0 \\longrightarrow p_1 p_0 \\longrightarrow p_1 \u4f4d\u4e8e p_0 \\longrightarrow p_2 p_0 \\longrightarrow p_2 \u7684\u987a\u65f6\u9488\u65b9\u5411\uff0c\u5982\u679ca<0,\u5219\u4f4d\u4e8e\u9006\u65f6\u9488\u65b9\u5411\u3002 2. \u7ebf\u6bb5\u76f8\u4ea4 \u00b6","title":"\u7b97\u6cd5\u4e13\u9898_\u8ba1\u7b97\u51e0\u4f55"},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_1","text":"\u70b9\u7684\u51f8\u7ec4\u5408 \u70b9 p_1=(x_1,y_1) p_1=(x_1,y_1) \u548c p_2=(x_2,y_2) p_2=(x_2,y_2) \u7684\u51f8\u7ec4\u5408\u5b9a\u4e49\u4e3a\uff1a \u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u4efb\u610f\u70b9 p_3 p_3 x_3 = \\alpha x_1 + (1-\\alpha) x_2 x_3 = \\alpha x_1 + (1-\\alpha) x_2 y_3 = \\alpha y_1 + (1-\\alpha) y_2 y_3 = \\alpha y_1 + (1-\\alpha) y_2 \u5176\u4e2d\uff0c 0 <= \\alpha <= 1 0 <= \\alpha <= 1 \u542b\u4e49\uff0c p_3 p_3 \u4f4d\u4e8e\u70b9 p_1 p_1 \u548c p_2 p_2 \u7ec4\u6210\u7684\u7ebf\u6bb5\u5185\uff0c\u5305\u542b\u8fd9\u4e24\u4e2a\u7aef\u70b9\u3002 \u6211\u4eec\u7528 p_1 p_2 p_1 p_2 \u8868\u793a\u7ebf\u6bb5\uff0c\u7528 p_1 \\longrightarrow p_2 p_1 \\longrightarrow p_2 \u8868\u793a\u5411\u91cf\u6216\u8005\u53eb\u505a\u6709\u5411\u7ebf\u6bb5\u3002 \u6211\u4eec\u5148\u6765\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a","title":"\u7ebf\u6bb5"},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5411\u7ebf\u6bb5 p_0 \\longrightarrow p_1 p_0 \\longrightarrow p_1 \u548c p_0 \\longrightarrow p_2 p_0 \\longrightarrow p_2 \uff0c\u5224\u65ad p_0 \\longrightarrow p_1 p_0 \\longrightarrow p_1 \u662f\u5426\u5728 p_0 \\longrightarrow p_2 p_0 \\longrightarrow p_2 \u7684\u987a\u65f6\u9488\u65b9\u5411\uff1f \u53c9\u79ef \u5148\u6765\u4e86\u89e3\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e24\u4e2a\u70b9\u7684\u53c9\u79ef\u5c31\u662f\u4e24\u4e2a\u70b9\u7684\u884c\u5217\u5f0f\u7684\u503c\uff1a p_1 \\times p_2 = det[x_1 x_2 ; y_1 y_2] = x_1y_2-x_2y_1 p_1 \\times p_2 = det[x_1 x_2 ; y_1 y_2] = x_1y_2-x_2y_1 \u53c9\u79ef\u7684\u51e0\u4f55\u610f\u4e49\u662f \u7531\u70b9(0,0),p1,p2,p1+p2\u7ec4\u6210\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684*\u6709\u5411*\u9762\u79ef\u3002 \u7ed3\u8bba a = (p_1-p_0) \\times (p_2-p_0) a = (p_1-p_0) \\times (p_2-p_0) \u5982\u679ca>0,\u5219 p_0 \\longrightarrow p_1 p_0 \\longrightarrow p_1 \u4f4d\u4e8e p_0 \\longrightarrow p_2 p_0 \\longrightarrow p_2 \u7684\u987a\u65f6\u9488\u65b9\u5411\uff0c\u5982\u679ca<0,\u5219\u4f4d\u4e8e\u9006\u65f6\u9488\u65b9\u5411\u3002","title":"1. \u6709\u5411\u7ebf\u6bb5\u7684\u65cb\u8f6c"},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#2","text":"","title":"2. \u7ebf\u6bb5\u76f8\u4ea4"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E6%B3%95/","text":"\u8d2a\u5fc3\u7b97\u6cd5 \u00b6","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E6%B3%95/#_1","text":"","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E6%90%9C%E7%B4%A2/","text":"\u9012\u5f52\u641c\u7d22 \u00b6 \u8bb0\u5f55\u4e00\u4e9b\u5178\u578b\u9898\u76ee\u3002 1. \u9012\u5f52\u641c\u7d22\u76f8\u5173\u7684\u4e60\u9898 \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u4e2d\u7b49 39. \u7ec4\u5408\u603b\u548c \u4e2d\u7b49 40. \u7ec4\u5408\u603b\u548c II \u4e2d\u7b49 131. \u5206\u5272\u56de\u6587\u4e32 \u4e2d\u7b49","title":"\u9012\u5f52\u641c\u7d22"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E6%90%9C%E7%B4%A2/#_1","text":"\u8bb0\u5f55\u4e00\u4e9b\u5178\u578b\u9898\u76ee\u3002","title":"\u9012\u5f52\u641c\u7d22"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E6%90%9C%E7%B4%A2/#1","text":"LeetCode\u9898\u76ee \u96be\u5ea6 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u4e2d\u7b49 39. \u7ec4\u5408\u603b\u548c \u4e2d\u7b49 40. \u7ec4\u5408\u603b\u548c II \u4e2d\u7b49 131. \u5206\u5272\u56de\u6587\u4e32 \u4e2d\u7b49","title":"1. \u9012\u5f52\u641c\u7d22\u76f8\u5173\u7684\u4e60\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Aho-Corasick%E7%AE%97%E6%B3%95/","text":"Aho-Corasick \u7b97\u6cd5 \u00b6 \u5f53\u6a21\u5f0f\u4e32\u662f\u591a\u4e2a\u7684\u65f6\u5019\uff0c\u4f7f\u7528Aho-Corasick\u7b97\u6cd5\u3002 \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/aho-corasick-algorithm-pattern-searching/?ref=rp","title":"Aho-Corasick \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Aho-Corasick%E7%AE%97%E6%B3%95/#aho-corasick","text":"\u5f53\u6a21\u5f0f\u4e32\u662f\u591a\u4e2a\u7684\u65f6\u5019\uff0c\u4f7f\u7528Aho-Corasick\u7b97\u6cd5\u3002 \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/aho-corasick-algorithm-pattern-searching/?ref=rp","title":"Aho-Corasick \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Boyer%20Moore%E7%AE%97%E6%B3%95/","text":"Boyer Moore \u00b6 Boyer Moore \u7b97\u6cd5\u4ece\u6a21\u5f0f\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\uff1b Boyer Moore \u7b97\u6cd5\u9884\u5904\u7406\u6a21\u5f0f\u4e32\uff0c \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219 \u548c \u597d\u540e\u7f00\u89c4\u5219\uff0c\u6bcf\u6b21\u9009\u53d6\u4e24\u4e2a\u89c4\u5219\u4e2d\u5411\u540e\u79fb\u52a8\u8ddd\u79bb\u6700\u5927\u7684\u90a3\u4e2a\u3002 \u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219 \u548c \u597d\u540e\u7f00\u89c4\u5219\u4efb\u610f\u4e00\u4e2a\u4e5f\u53ef\u4ee5\u5b8c\u6210\u7b97\u6cd5\uff0c\u53ea\u662f\u6548\u7387\u53ef\u80fd\u7565\u4f4e\u3002 1. \u574f\u5b57\u7b26\u89c4\u5219 \u00b6 \u8bbe\u6a21\u5f0f\u4e32P\uff0c \u8981\u641c\u7d22\u7684\u4e32\u4e3aS\uff0c \u5bf9\u5176S\u548cP\uff0c\u4eceP\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\uff0c\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u79f0\u4e3a\u574f\u5b57\u7b26(\u5728S\u4e2d)\u3002 \u5982\u679c\u574f\u5b57\u7b26\u5728P\u4e2d\uff0c \u79fb\u52a8P\u4f7f\u5f97P\u4e2d\u7684\u574f\u5b57\u7b26\u548cS\u4e2d\u7684\u574f\u5b57\u7b26\u5bf9\u5176\uff1b \u5982\u679c\u574f\u5b57\u7b26\u4e0d\u5728P\u4e2d\uff0c\u79fb\u52a8P\u5230\u574f\u5b57\u7b26\u7684\u4e0b\u4e00\u4f4d\u5f00\u59cb\u6bd4\u8f83\u3002(\u76f4\u63a5\u5411\u540e\u79fb\u52a8\u4e00\u4e2a|P|\u7684\u957f\u5ea6) MAX_OF_CHARS = 256 def badCharHeuristic ( string , size ): ''' \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219, \u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u7684\u8bbe\u7f6e\u4e3a -1 ''' badChar = [ - 1 ] * MAX_OF_CHARS for i in range ( size ): badChar [ ord ( string [ i ]) ] = i return badChar def search ( string , pattern ): ''' \u53ea\u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219\u7684Boyer Moore\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 ''' m = len ( pattern ) n = len ( string ) badChars = badCharHeuristic ( pattern , m ) # s is shift of the pattern with respect to text s = 0 while s <= n - m : # j \u6307\u5411 s \u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e j = m - 1 while j >= 0 and pattern [ j ] == string [ s + j ]: j -= 1 # \u5982\u679c j \u5c0f\u4e8e0\uff0c \u8868\u793a\u627e\u5230\u4e86\u4e00\u4e2a\u5339\u914d\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4e2a\u5339\u914d if j < 0 : print ( \"Pattern occur at shift = {} \" . format ( s )) # \u5982\u679c s + m \u5c0f\u4e8e n, \u76f4\u63a5\u5bf9\u5176S\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 if s + m < n : s += m - badChars [ ord ( string [ s + m ]) ] else : s += 1 else : # \u627e\u5230\u574f\u5b57\u7b26\uff0c\u76f4\u63a5\u79fb\u52a8\u5230\u574f\u5b57\u7b26\u540e\u9762 s += max ( 1 , j - badChars [ ord ( string [ s + j ]) ]) txt = \"ABAAABCD\" pat = \"ABC\" search ( txt , pat ) \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/ 2. \u597d\u540e\u7f00\u89c4\u5219 \u00b6 S\u548cP\u5bf9\u5176\u6bd4\u8f83\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4ece\u540e\u5411\u524d\u5339\u914d\u7684\u90e8\u5206\u53eb\u505a\u597d\u540e\u7f00\u3002\u4f8b\u5982 0123456789 is simple example \u5176\u4e2d mple \u662f\u5339\u914d\u7684\u540e\u7f00\uff0c\u53eb\u505a\u597d\u540e\u7f00\u3002 ple, le, e \u4e5f\u662f\u597d\u540e\u7f00\u3002 \u8bbe p \u8868\u793a\u5339\u914d\u7684\u6700\u5927\u7684\u597d\u540e\u7f00\u90e8\u5206\uff0c 1. \u5982\u679c p \u51fa\u73b0\u5728\u6a21\u5f0f\u4e32P\u4e2d\uff0c \u90a3\u4e48\u5c31\u5411\u540e\u79fb\u52a8\u5230\u5bf9\u5176 p 2. \u5982\u679c p \u6ca1\u6709\u51fa\u73b0\u5230\u6a21\u5f0f\u4e32P\u4e2d\uff0c \u67e5\u627e p \u7684\u540e\u7f00\u662f\u5426\u662fP\u7684\u524d\u7f00\uff0c\u4e00\u65e6\u627e\u5230\uff0c\u5bf9\u5176\u524d\u7f00\u548c\u540e\u7f00 3. \u5982\u679c p \u7684\u540e\u7f00\u4e5f\u4e0d\u662fP\u7684\u524d\u7f00\uff0c\u76f4\u63a5\u79fb\u52a8|P|\u957f\u5ea6\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b21\u6bd4\u8f83 \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a 0 1 2 3 4 5 6 7 8 A B A A B A B A C C A B A B AB \u662f\u5339\u914d\u7684\u597d\u540e\u7f00\uff0c\u51fa\u73b0\u5728P\u4e2d\u76844\u4f4d\u7f6e\uff0c\u5411\u524d\u67e5\u627e\u53ef\u4ee5\u53d1\u73b02\u4f4d\u7f6e\u4e5f\u51fa\u73b0\u4e86 AB , \u53ef\u4ee5\u76f4\u63a5\u628a\u4f4d\u7f6e2\u7684 AB \u4e0e\u4f4d\u7f6e4\u7684\u5bf9\u5176\u3002 0 1 2 3 4 5 6 7 8 A B A A B A B A C C A B A B \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a 0 1 2 3 4 5 6 7 8 A A B A B A B A C A B[B A B] BAB \u662f\u597d\u540e\u7f00\uff0c \u4f46\u662f\u5728P\u4e2d\u5411\u524d\u67e5\u627e\uff0c\u4e0d\u518d\u5305\u542b BAB , \u67e5\u627e BAB \u7684\u540e\u7f00 AB , \u53d1\u73b0 AB \u662f\u6a21\u5f0f\u4e32P\u7684\u524d\u7f00\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06P\u7684\u524d\u7f00 AB \u548c\u597d\u540e\u7f00\u7684\u540e\u7f00 AB \u5bf9\u9f50\u3002 0 1 2 3 4 5 6 7 8 A A B A B A B A C [A B]B A B \u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a 0 1 2 3 4 5 6 7 8 9 A A C A B A B A C D C B A[A B] AB \u662f\u597d\u540e\u7f00\uff0c\u4f46\u662fP\u4e2d\u5411\u524d\u5bfb\u627e\u6ca1\u6709\u627e\u5230 AB , AB \u7684\u540e\u7f00 B \u4e5f\u4e0d\u662fP\u7684\u524d\u7f00\uff0c\u6240\u4ee5\u8fd9\u662f\u60c5\u51b53\uff0c\u76f4\u63a5\u79fb\u52a8\u6574\u4e2aP\u5230\u540e\u9762\u3002 0 1 2 3 4 5 6 7 8 9 A A C A B A B A C D C B A A B # Python3 program for Boyer Moore Algorithm with # Good Suffix heuristic to find pattern in # given text string # preprocessing for strong good suffix rule def preprocess_strong_suffix ( shift , bpos , pat , m ): # m is the length of pattern i = m j = m + 1 bpos [ i ] = j while i > 0 : '''if character at position i-1 is not equivalent to character at j-1, then continue searching to right of the pattern for border ''' while j <= m and pat [ i - 1 ] != pat [ j - 1 ]: ''' the character preceding the occurrence of t in pattern P is different than the mismatching character in P, we stop skipping the occurrences and shift the pattern from i to j ''' if shift [ j ] == 0 : shift [ j ] = j - i # Update the position of next border j = bpos [ j ] ''' p[i-1] matched with p[j-1], border is found. store the beginning position of border ''' i -= 1 j -= 1 bpos [ i ] = j # Preprocessing for case 2 def preprocess_case2 ( shift , bpos , pat , m ): j = bpos [ 0 ] for i in range ( m + 1 ): ''' set the border position of the first character of the pattern to all indices in array shift having shift[i] = 0 ''' if shift [ i ] == 0 : shift [ i ] = j ''' suffix becomes shorter than bpos[0], use the position of next widest border as value of j ''' if i == j : j = bpos [ j ] '''Search for a pattern in given text using Boyer Moore algorithm with Good suffix rule ''' def search ( text , pat ): # s is shift of the pattern with respect to text s = 0 m = len ( pat ) n = len ( text ) bpos = [ 0 ] * ( m + 1 ) # initialize all occurrence of shift to 0 shift = [ 0 ] * ( m + 1 ) # do preprocessing preprocess_strong_suffix ( shift , bpos , pat , m ) preprocess_case2 ( shift , bpos , pat , m ) while s <= n - m : j = m - 1 ''' Keep reducing index j of pattern while characters of pattern and text are matching at this shift s''' while j >= 0 and pat [ j ] == text [ s + j ]: j -= 1 ''' If the pattern is present at the current shift, then index j will become -1 after the above loop ''' if j < 0 : print ( \"pattern occurs at shift = %d \" % s ) s += shift [ 0 ] else : '''pat[i] != pat[s+j] so shift the pattern shift[j+1] times ''' s += shift [ j + 1 ] # Driver Code if __name__ == \"__main__\" : text = \"ABAAAABAACD\" pat = \"ABA\" search ( text , pat ) # This code is contributed by # sanjeev2552 \u53c2\u8003\u6587\u732e: https://www.geeksforgeeks.org/boyer-moore-algorithm-good-suffix-heuristic/ http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html","title":"Boyer Moore"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Boyer%20Moore%E7%AE%97%E6%B3%95/#boyer-moore","text":"Boyer Moore \u7b97\u6cd5\u4ece\u6a21\u5f0f\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\uff1b Boyer Moore \u7b97\u6cd5\u9884\u5904\u7406\u6a21\u5f0f\u4e32\uff0c \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219 \u548c \u597d\u540e\u7f00\u89c4\u5219\uff0c\u6bcf\u6b21\u9009\u53d6\u4e24\u4e2a\u89c4\u5219\u4e2d\u5411\u540e\u79fb\u52a8\u8ddd\u79bb\u6700\u5927\u7684\u90a3\u4e2a\u3002 \u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219 \u548c \u597d\u540e\u7f00\u89c4\u5219\u4efb\u610f\u4e00\u4e2a\u4e5f\u53ef\u4ee5\u5b8c\u6210\u7b97\u6cd5\uff0c\u53ea\u662f\u6548\u7387\u53ef\u80fd\u7565\u4f4e\u3002","title":"Boyer Moore"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Boyer%20Moore%E7%AE%97%E6%B3%95/#1","text":"\u8bbe\u6a21\u5f0f\u4e32P\uff0c \u8981\u641c\u7d22\u7684\u4e32\u4e3aS\uff0c \u5bf9\u5176S\u548cP\uff0c\u4eceP\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\uff0c\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u79f0\u4e3a\u574f\u5b57\u7b26(\u5728S\u4e2d)\u3002 \u5982\u679c\u574f\u5b57\u7b26\u5728P\u4e2d\uff0c \u79fb\u52a8P\u4f7f\u5f97P\u4e2d\u7684\u574f\u5b57\u7b26\u548cS\u4e2d\u7684\u574f\u5b57\u7b26\u5bf9\u5176\uff1b \u5982\u679c\u574f\u5b57\u7b26\u4e0d\u5728P\u4e2d\uff0c\u79fb\u52a8P\u5230\u574f\u5b57\u7b26\u7684\u4e0b\u4e00\u4f4d\u5f00\u59cb\u6bd4\u8f83\u3002(\u76f4\u63a5\u5411\u540e\u79fb\u52a8\u4e00\u4e2a|P|\u7684\u957f\u5ea6) MAX_OF_CHARS = 256 def badCharHeuristic ( string , size ): ''' \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219, \u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u7684\u8bbe\u7f6e\u4e3a -1 ''' badChar = [ - 1 ] * MAX_OF_CHARS for i in range ( size ): badChar [ ord ( string [ i ]) ] = i return badChar def search ( string , pattern ): ''' \u53ea\u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219\u7684Boyer Moore\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 ''' m = len ( pattern ) n = len ( string ) badChars = badCharHeuristic ( pattern , m ) # s is shift of the pattern with respect to text s = 0 while s <= n - m : # j \u6307\u5411 s \u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e j = m - 1 while j >= 0 and pattern [ j ] == string [ s + j ]: j -= 1 # \u5982\u679c j \u5c0f\u4e8e0\uff0c \u8868\u793a\u627e\u5230\u4e86\u4e00\u4e2a\u5339\u914d\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4e2a\u5339\u914d if j < 0 : print ( \"Pattern occur at shift = {} \" . format ( s )) # \u5982\u679c s + m \u5c0f\u4e8e n, \u76f4\u63a5\u5bf9\u5176S\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 if s + m < n : s += m - badChars [ ord ( string [ s + m ]) ] else : s += 1 else : # \u627e\u5230\u574f\u5b57\u7b26\uff0c\u76f4\u63a5\u79fb\u52a8\u5230\u574f\u5b57\u7b26\u540e\u9762 s += max ( 1 , j - badChars [ ord ( string [ s + j ]) ]) txt = \"ABAAABCD\" pat = \"ABC\" search ( txt , pat ) \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/","title":"1. \u574f\u5b57\u7b26\u89c4\u5219"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Boyer%20Moore%E7%AE%97%E6%B3%95/#2","text":"S\u548cP\u5bf9\u5176\u6bd4\u8f83\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4ece\u540e\u5411\u524d\u5339\u914d\u7684\u90e8\u5206\u53eb\u505a\u597d\u540e\u7f00\u3002\u4f8b\u5982 0123456789 is simple example \u5176\u4e2d mple \u662f\u5339\u914d\u7684\u540e\u7f00\uff0c\u53eb\u505a\u597d\u540e\u7f00\u3002 ple, le, e \u4e5f\u662f\u597d\u540e\u7f00\u3002 \u8bbe p \u8868\u793a\u5339\u914d\u7684\u6700\u5927\u7684\u597d\u540e\u7f00\u90e8\u5206\uff0c 1. \u5982\u679c p \u51fa\u73b0\u5728\u6a21\u5f0f\u4e32P\u4e2d\uff0c \u90a3\u4e48\u5c31\u5411\u540e\u79fb\u52a8\u5230\u5bf9\u5176 p 2. \u5982\u679c p \u6ca1\u6709\u51fa\u73b0\u5230\u6a21\u5f0f\u4e32P\u4e2d\uff0c \u67e5\u627e p \u7684\u540e\u7f00\u662f\u5426\u662fP\u7684\u524d\u7f00\uff0c\u4e00\u65e6\u627e\u5230\uff0c\u5bf9\u5176\u524d\u7f00\u548c\u540e\u7f00 3. \u5982\u679c p \u7684\u540e\u7f00\u4e5f\u4e0d\u662fP\u7684\u524d\u7f00\uff0c\u76f4\u63a5\u79fb\u52a8|P|\u957f\u5ea6\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b21\u6bd4\u8f83 \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a 0 1 2 3 4 5 6 7 8 A B A A B A B A C C A B A B AB \u662f\u5339\u914d\u7684\u597d\u540e\u7f00\uff0c\u51fa\u73b0\u5728P\u4e2d\u76844\u4f4d\u7f6e\uff0c\u5411\u524d\u67e5\u627e\u53ef\u4ee5\u53d1\u73b02\u4f4d\u7f6e\u4e5f\u51fa\u73b0\u4e86 AB , \u53ef\u4ee5\u76f4\u63a5\u628a\u4f4d\u7f6e2\u7684 AB \u4e0e\u4f4d\u7f6e4\u7684\u5bf9\u5176\u3002 0 1 2 3 4 5 6 7 8 A B A A B A B A C C A B A B \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a 0 1 2 3 4 5 6 7 8 A A B A B A B A C A B[B A B] BAB \u662f\u597d\u540e\u7f00\uff0c \u4f46\u662f\u5728P\u4e2d\u5411\u524d\u67e5\u627e\uff0c\u4e0d\u518d\u5305\u542b BAB , \u67e5\u627e BAB \u7684\u540e\u7f00 AB , \u53d1\u73b0 AB \u662f\u6a21\u5f0f\u4e32P\u7684\u524d\u7f00\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06P\u7684\u524d\u7f00 AB \u548c\u597d\u540e\u7f00\u7684\u540e\u7f00 AB \u5bf9\u9f50\u3002 0 1 2 3 4 5 6 7 8 A A B A B A B A C [A B]B A B \u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a 0 1 2 3 4 5 6 7 8 9 A A C A B A B A C D C B A[A B] AB \u662f\u597d\u540e\u7f00\uff0c\u4f46\u662fP\u4e2d\u5411\u524d\u5bfb\u627e\u6ca1\u6709\u627e\u5230 AB , AB \u7684\u540e\u7f00 B \u4e5f\u4e0d\u662fP\u7684\u524d\u7f00\uff0c\u6240\u4ee5\u8fd9\u662f\u60c5\u51b53\uff0c\u76f4\u63a5\u79fb\u52a8\u6574\u4e2aP\u5230\u540e\u9762\u3002 0 1 2 3 4 5 6 7 8 9 A A C A B A B A C D C B A A B # Python3 program for Boyer Moore Algorithm with # Good Suffix heuristic to find pattern in # given text string # preprocessing for strong good suffix rule def preprocess_strong_suffix ( shift , bpos , pat , m ): # m is the length of pattern i = m j = m + 1 bpos [ i ] = j while i > 0 : '''if character at position i-1 is not equivalent to character at j-1, then continue searching to right of the pattern for border ''' while j <= m and pat [ i - 1 ] != pat [ j - 1 ]: ''' the character preceding the occurrence of t in pattern P is different than the mismatching character in P, we stop skipping the occurrences and shift the pattern from i to j ''' if shift [ j ] == 0 : shift [ j ] = j - i # Update the position of next border j = bpos [ j ] ''' p[i-1] matched with p[j-1], border is found. store the beginning position of border ''' i -= 1 j -= 1 bpos [ i ] = j # Preprocessing for case 2 def preprocess_case2 ( shift , bpos , pat , m ): j = bpos [ 0 ] for i in range ( m + 1 ): ''' set the border position of the first character of the pattern to all indices in array shift having shift[i] = 0 ''' if shift [ i ] == 0 : shift [ i ] = j ''' suffix becomes shorter than bpos[0], use the position of next widest border as value of j ''' if i == j : j = bpos [ j ] '''Search for a pattern in given text using Boyer Moore algorithm with Good suffix rule ''' def search ( text , pat ): # s is shift of the pattern with respect to text s = 0 m = len ( pat ) n = len ( text ) bpos = [ 0 ] * ( m + 1 ) # initialize all occurrence of shift to 0 shift = [ 0 ] * ( m + 1 ) # do preprocessing preprocess_strong_suffix ( shift , bpos , pat , m ) preprocess_case2 ( shift , bpos , pat , m ) while s <= n - m : j = m - 1 ''' Keep reducing index j of pattern while characters of pattern and text are matching at this shift s''' while j >= 0 and pat [ j ] == text [ s + j ]: j -= 1 ''' If the pattern is present at the current shift, then index j will become -1 after the above loop ''' if j < 0 : print ( \"pattern occurs at shift = %d \" % s ) s += shift [ 0 ] else : '''pat[i] != pat[s+j] so shift the pattern shift[j+1] times ''' s += shift [ j + 1 ] # Driver Code if __name__ == \"__main__\" : text = \"ABAAAABAACD\" pat = \"ABA\" search ( text , pat ) # This code is contributed by # sanjeev2552 \u53c2\u8003\u6587\u732e: https://www.geeksforgeeks.org/boyer-moore-algorithm-good-suffix-heuristic/ http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html","title":"2. \u597d\u540e\u7f00\u89c4\u5219"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/","text":"KMP \u7b97\u6cd5 \u00b6 \u8bbe\u6709\u5b57\u7b26\u4e32T\uff0c\u6a21\u5f0f\u4e32P\uff0c\u8981\u4eceT\u4e2d\u627e\u51faP\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u9010\u4e2a\u6bd4\u8f83T\u548cP\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5c31\u6bd4\u8f83T\u548cP\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\uff0c\u4e00\u65e6\u5339\u914d\u5931\u8d25\uff0cT\u540e\u79fb\u4e00\u4e2a\u5b57\u7b26\u91cd\u65b0\u5f00\u59cb\u4e0eP\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6bd4\u8f83\u3002\u4f46\u662f\u8fd9\u6837\u7684\u65b9\u6cd5\u5982\u679c\u9047\u5230\u7279\u522b\"\u5201\u94bb\"\u7684T\u548cP\u7684\u7ec4\u5408\uff0c\u5c31\u4f1a\u6d6a\u8d39\u5f88\u591a\u6bd4\u8f83\u7684\u65f6\u95f4\uff0c\u4f8b\u5982\uff0c\u6bcf\u6b21\u90fd\u662f\u6bd4\u8f83\u5230P\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u624d\u4e0d\u5339\u914d\u3002KMP\u7b97\u6cd5\u5c31\u662f\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6bd4\u8f83\uff0c\u4f7f\u5f97\u6bcf\u6b21\u6bd4\u8f83\u4e0d\u6210\u529f\u7684\u65f6\u5019\uff0cP\u53ef\u4ee5\u5411\u540e\u79fb\u52a8\u5c3d\u53ef\u80fd\u8fdc\u7684\u8ddd\u79bb\u3002 \u6bcf\u6b21\u5931\u8d25\u540e\u8981\u5411\u540e\u79fb\u52a8\u591a\u5c11\u5462\uff1f\u8fd9\u4e2a\u7531P\u7684next\u6570\u7ec4\u51b3\u5b9a\u3002next\u6570\u7ec4\u662f\u4e00\u4e2a\u4e0eP\u7b49\u957f\uff0c\u53ea\u4e0e\u6a21\u5f0f\u4e32P\u6709\u5173\u7cfb\uff0c\u800c\u4e0eT\u6ca1\u6709\u5173\u7cfb\u7684\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u3002\u5b83\u7684\u503c\u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u5b57\u7b26\u6bd4\u8f83\u5931\u8d25\u540e\uff0c\u6a21\u5f0f\u4e32\u5411\u540e\u79fb\u52a8\u7684\u8ddd\u79bb\u3002 next\u6570\u7ec4\u5982\u4f55\u6c42\u89e3\u5462\uff1f P\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684next\u6570\u7ec4\u7684\u503c\uff0c\u7b49\u4e8e\u4eceP\u5f00\u59cb\u5230\u5b83\u6240\u5bf9\u5e94\u7684\u524d\u7f00\u548c\u540e\u7f00\u7684\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0cP=\"ABCDABD\" \"A\"\u7684\u524d\u7f00\u548c\u540e\u7f00\u90fd\u662f0\uff0c\u5171\u6709\u7684\u957f\u5ea6\u4e5f\u662f0\uff1b \"AB\"\u7684\u524d\u7f00\u662f\"A\",\u540e\u7f00\u662f\"B\",\u5171\u6709\u7684\u957f\u5ea6\u662f0\uff1b \"ABC\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\u540e\u7f00\u662f\"C\",\"BC\",\u5171\u6709\u7684\u957f\u5ea6\u4e3a0\uff1b \"ABCD\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\"ABC\",\u540e\u7f00\u662f\"D\",\"CD\",\"BCD\",\u5171\u6709\u7684\u957f\u5ea6\u4e3a0\uff1b \"ABCDA\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\"ABC\",\"ABCD\",\u540e\u7f00\u662f\"A\",\"DA\",\"CDA\",\"BCDA\",\u4e8c\u8005\u90fd\u6709A\uff0c\u6240\u6709\u5171\u6709\u7684\u957f\u5ea6\u662f1. \"ABCDAB\" \u5171\u6709\u7684\u957f\u5ea6\u4e3a2 \"ABCDABD\" \u5171\u6709\u7684\u957f\u5ea6\u4e3a0. \u6240\u4ee5P\u7684next\u6570\u7ec4\u4e3a[0,0,0,0,1,2,0]. \u53ef\u4ee5\u770b\u5230\uff0c\u6c42\u89e3next\u6570\u7ec4\u7684\u8fc7\u7a0b\u8fd8\u662f\u5f88\u6e05\u6670\u7684\uff0c\u4f46\u662f\u8fd9\u4e2anext\u6570\u7ec4\u5e76\u4e0d\u662f\u771f\u6b63\u5728KMP\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684next\u6570\u7ec4\u3002\u4f46\u662fKMP\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684next\u6570\u7ec4\u53ef\u4ee5\u53ef\u5bb9\u6613\u7684\u7531\u8fd9\u4e2a\u6570\u7ec4\u751f\u6210\uff0c\u89c4\u5219\u662f\uff1a\u6240\u6709\u7684\u5143\u7d20\u53f3\u79fb\u4e00\u4f4d\u3002\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u4e22\u5f03\u4e0d\u8981\u4e86\uff0c\u6700\u5de6\u8fb9\u8865-1\uff0c\u8fd9\u6837\u65b0\u7684next\u6570\u7ec4\u4e3a[-1,0,0,0,0,1,2]. \u76f4\u5230next\u6570\u7ec4\u7684\u503c\uff0cKMP\u7b97\u6cd5\u5176\u5b9e\u5c31\u7b97\u5b9e\u73b0\u4e86\uff0c\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u5728\u6bcf\u6b21\u5339\u914d\u5931\u8d25\u7684\u65f6\u5019\uff0c\u6a21\u5f0f\u4e32\u5411\u53f3\u79fb\u52a8\u7684\u4f4d\u6570\u662f\uff1a \u5931\u914d\u5b57\u7b26\u6240\u5728\u7684\u4f4d\u7f6e-\u5931\u914d\u5b57\u7b26\u5bf9\u5e94\u7684next\u6570\u7ec4\u7684\u503c\u3002 \u6c42\u89e3next\u6570\u7ec4\u7684\u4ee3\u7801\uff1a /** * \u6c42\u89e3\u6a21\u5f0f\u4e32\u7684next\u6570\u7ec4 * @param p * @return */ vector < int > GetNext ( string p ) { int pLen = p . size (); vector < int > next ( pLen , 0 ); next [ 0 ] = - 1 ; int k = - 1 ; int j = 0 ; while ( j < pLen - 1 ) { //p[k]\u8868\u793a\u524d\u7f00\uff0cp[j]\u8868\u793a\u540e\u7f00 if ( k == - 1 || p [ j ] == p [ k ]) { ++ k ; ++ j ; next [ j ] = k ; } else { k = next [ k ]; } } return next ; } \u6b64\u65b9\u6cd5\u6c42\u89e3next\u6570\u7ec4\u5176\u5b9e\u5e76\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u8fd8\u6709\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u6bd4\u8f83\uff0c\u5177\u4f53\u7684\u5b9e\u4f8b\u53ef\u4ee5\u53c2\u8003 http://blog.csdn.net/v_july_v/article/details/7041827 , \u4f18\u5316\u540e\u7684next\u6570\u7ec4\u6c42\u89e3\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c11\u6bd4\u8f83\u7684\u6b21\u6570\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f1a\u66f4\u4e0d\u5bb9\u6613\u7406\u89e3\u3002 vector < int > OGetNext ( string p ) { int pLen = p . size (); vector < int > next ( pLen , 0 ); next [ 0 ] = - 1 ; int k = - 1 ; int j = 0 ; while ( j < pLen - 1 ) { //p[k]\u8868\u793a\u524d\u7f00\uff0cp[j]\u8868\u793a\u540e\u7f00 if ( k == - 1 || p [ j ] == p [ k ]) { ++ j ; ++ k ; //\u8f83\u4e4b\u524dnext\u6570\u7ec4\u6c42\u6cd5\uff0c\u6539\u52a8\u5728\u4e0b\u97624\u884c if ( p [ j ] != p [ k ]) next [ j ] = k ; //\u4e4b\u524d\u53ea\u6709\u8fd9\u4e00\u884c else //\u56e0\u4e3a\u4e0d\u80fd\u51fa\u73b0p[j] = p[ next[j ]]\uff0c\u6240\u4ee5\u5f53\u51fa\u73b0\u65f6\u9700\u8981\u7ee7\u7eed\u9012\u5f52\uff0ck = next[k] = next[next[k]] next [ j ] = next [ k ]; } else { k = next [ k ]; } } return next ; } \u4f7f\u7528next\u6570\u7ec4\u67e5\u627e\u6a21\u5f0f\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5e76\u8fd4\u56de\u7d22\u5f15\u7684\u51fd\u6570\uff0c\u4e0d\u5b58\u5728\u4f1a\u8fd4\u56de-1. int KmpSearch ( string & s , string & p ) { int i = 0 ; int j = 0 ; int sLen = s . size (); int pLen = p . size (); auto next = OGetNext ( p ); while ( i < sLen && j < pLen ) { //\u2460\u5982\u679cj = -1\uff0c\u6216\u8005\u5f53\u524d\u5b57\u7b26\u5339\u914d\u6210\u529f\uff08\u5373S[i] == P[j]\uff09\uff0c\u90fd\u4ee4i++\uff0cj++ if ( j == - 1 || s [ i ] == p [ j ]) { i ++ ; j ++ ; } else { //\u2461\u5982\u679cj != -1\uff0c\u4e14\u5f53\u524d\u5b57\u7b26\u5339\u914d\u5931\u8d25\uff08\u5373S[i] != P[j]\uff09\uff0c\u5219\u4ee4 i \u4e0d\u53d8\uff0cj = next[j] //next[j]\u5373\u4e3aj\u6240\u5bf9\u5e94\u7684next\u503c j = next [ j ]; } } if ( j == pLen ) return i - j ; else return - 1 ; } \u4f7f\u7528next\u6570\u7ec4\u6bd4\u8f83\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6a21\u5f0f\u4e32\u5728S\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u7684\u51fd\u6570\u3002 int KmpSearch ( string & s , string & p ) { int i = 0 ; int j = 0 ; int sLen = s . size (); int pLen = p . size (); auto next = OGetNext ( p ); int count = 0 ; while ( i < sLen ){ while ( i < sLen && j < pLen ) { //\u2460\u5982\u679cj = -1\uff0c\u6216\u8005\u5f53\u524d\u5b57\u7b26\u5339\u914d\u6210\u529f\uff08\u5373S[i] == P[j]\uff09\uff0c\u90fd\u4ee4i++\uff0cj++ if ( j == - 1 || s [ i ] == p [ j ]) { i ++ ; j ++ ; } else { //\u2461\u5982\u679cj != -1\uff0c\u4e14\u5f53\u524d\u5b57\u7b26\u5339\u914d\u5931\u8d25\uff08\u5373S[i] != P[j]\uff09\uff0c\u5219\u4ee4 i \u4e0d\u53d8\uff0cj = next[j] //next[j]\u5373\u4e3aj\u6240\u5bf9\u5e94\u7684next\u503c j = next [ j ]; } } if ( j == pLen ){ count ++ ; j = 0 ; } } return count ; }","title":"KMP \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/#kmp","text":"\u8bbe\u6709\u5b57\u7b26\u4e32T\uff0c\u6a21\u5f0f\u4e32P\uff0c\u8981\u4eceT\u4e2d\u627e\u51faP\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u9010\u4e2a\u6bd4\u8f83T\u548cP\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5c31\u6bd4\u8f83T\u548cP\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\uff0c\u4e00\u65e6\u5339\u914d\u5931\u8d25\uff0cT\u540e\u79fb\u4e00\u4e2a\u5b57\u7b26\u91cd\u65b0\u5f00\u59cb\u4e0eP\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6bd4\u8f83\u3002\u4f46\u662f\u8fd9\u6837\u7684\u65b9\u6cd5\u5982\u679c\u9047\u5230\u7279\u522b\"\u5201\u94bb\"\u7684T\u548cP\u7684\u7ec4\u5408\uff0c\u5c31\u4f1a\u6d6a\u8d39\u5f88\u591a\u6bd4\u8f83\u7684\u65f6\u95f4\uff0c\u4f8b\u5982\uff0c\u6bcf\u6b21\u90fd\u662f\u6bd4\u8f83\u5230P\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u624d\u4e0d\u5339\u914d\u3002KMP\u7b97\u6cd5\u5c31\u662f\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6bd4\u8f83\uff0c\u4f7f\u5f97\u6bcf\u6b21\u6bd4\u8f83\u4e0d\u6210\u529f\u7684\u65f6\u5019\uff0cP\u53ef\u4ee5\u5411\u540e\u79fb\u52a8\u5c3d\u53ef\u80fd\u8fdc\u7684\u8ddd\u79bb\u3002 \u6bcf\u6b21\u5931\u8d25\u540e\u8981\u5411\u540e\u79fb\u52a8\u591a\u5c11\u5462\uff1f\u8fd9\u4e2a\u7531P\u7684next\u6570\u7ec4\u51b3\u5b9a\u3002next\u6570\u7ec4\u662f\u4e00\u4e2a\u4e0eP\u7b49\u957f\uff0c\u53ea\u4e0e\u6a21\u5f0f\u4e32P\u6709\u5173\u7cfb\uff0c\u800c\u4e0eT\u6ca1\u6709\u5173\u7cfb\u7684\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u3002\u5b83\u7684\u503c\u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u5b57\u7b26\u6bd4\u8f83\u5931\u8d25\u540e\uff0c\u6a21\u5f0f\u4e32\u5411\u540e\u79fb\u52a8\u7684\u8ddd\u79bb\u3002 next\u6570\u7ec4\u5982\u4f55\u6c42\u89e3\u5462\uff1f P\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684next\u6570\u7ec4\u7684\u503c\uff0c\u7b49\u4e8e\u4eceP\u5f00\u59cb\u5230\u5b83\u6240\u5bf9\u5e94\u7684\u524d\u7f00\u548c\u540e\u7f00\u7684\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0cP=\"ABCDABD\" \"A\"\u7684\u524d\u7f00\u548c\u540e\u7f00\u90fd\u662f0\uff0c\u5171\u6709\u7684\u957f\u5ea6\u4e5f\u662f0\uff1b \"AB\"\u7684\u524d\u7f00\u662f\"A\",\u540e\u7f00\u662f\"B\",\u5171\u6709\u7684\u957f\u5ea6\u662f0\uff1b \"ABC\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\u540e\u7f00\u662f\"C\",\"BC\",\u5171\u6709\u7684\u957f\u5ea6\u4e3a0\uff1b \"ABCD\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\"ABC\",\u540e\u7f00\u662f\"D\",\"CD\",\"BCD\",\u5171\u6709\u7684\u957f\u5ea6\u4e3a0\uff1b \"ABCDA\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\"ABC\",\"ABCD\",\u540e\u7f00\u662f\"A\",\"DA\",\"CDA\",\"BCDA\",\u4e8c\u8005\u90fd\u6709A\uff0c\u6240\u6709\u5171\u6709\u7684\u957f\u5ea6\u662f1. \"ABCDAB\" \u5171\u6709\u7684\u957f\u5ea6\u4e3a2 \"ABCDABD\" \u5171\u6709\u7684\u957f\u5ea6\u4e3a0. \u6240\u4ee5P\u7684next\u6570\u7ec4\u4e3a[0,0,0,0,1,2,0]. \u53ef\u4ee5\u770b\u5230\uff0c\u6c42\u89e3next\u6570\u7ec4\u7684\u8fc7\u7a0b\u8fd8\u662f\u5f88\u6e05\u6670\u7684\uff0c\u4f46\u662f\u8fd9\u4e2anext\u6570\u7ec4\u5e76\u4e0d\u662f\u771f\u6b63\u5728KMP\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684next\u6570\u7ec4\u3002\u4f46\u662fKMP\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684next\u6570\u7ec4\u53ef\u4ee5\u53ef\u5bb9\u6613\u7684\u7531\u8fd9\u4e2a\u6570\u7ec4\u751f\u6210\uff0c\u89c4\u5219\u662f\uff1a\u6240\u6709\u7684\u5143\u7d20\u53f3\u79fb\u4e00\u4f4d\u3002\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u4e22\u5f03\u4e0d\u8981\u4e86\uff0c\u6700\u5de6\u8fb9\u8865-1\uff0c\u8fd9\u6837\u65b0\u7684next\u6570\u7ec4\u4e3a[-1,0,0,0,0,1,2]. \u76f4\u5230next\u6570\u7ec4\u7684\u503c\uff0cKMP\u7b97\u6cd5\u5176\u5b9e\u5c31\u7b97\u5b9e\u73b0\u4e86\uff0c\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u5728\u6bcf\u6b21\u5339\u914d\u5931\u8d25\u7684\u65f6\u5019\uff0c\u6a21\u5f0f\u4e32\u5411\u53f3\u79fb\u52a8\u7684\u4f4d\u6570\u662f\uff1a \u5931\u914d\u5b57\u7b26\u6240\u5728\u7684\u4f4d\u7f6e-\u5931\u914d\u5b57\u7b26\u5bf9\u5e94\u7684next\u6570\u7ec4\u7684\u503c\u3002 \u6c42\u89e3next\u6570\u7ec4\u7684\u4ee3\u7801\uff1a /** * \u6c42\u89e3\u6a21\u5f0f\u4e32\u7684next\u6570\u7ec4 * @param p * @return */ vector < int > GetNext ( string p ) { int pLen = p . size (); vector < int > next ( pLen , 0 ); next [ 0 ] = - 1 ; int k = - 1 ; int j = 0 ; while ( j < pLen - 1 ) { //p[k]\u8868\u793a\u524d\u7f00\uff0cp[j]\u8868\u793a\u540e\u7f00 if ( k == - 1 || p [ j ] == p [ k ]) { ++ k ; ++ j ; next [ j ] = k ; } else { k = next [ k ]; } } return next ; } \u6b64\u65b9\u6cd5\u6c42\u89e3next\u6570\u7ec4\u5176\u5b9e\u5e76\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u8fd8\u6709\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u6bd4\u8f83\uff0c\u5177\u4f53\u7684\u5b9e\u4f8b\u53ef\u4ee5\u53c2\u8003 http://blog.csdn.net/v_july_v/article/details/7041827 , \u4f18\u5316\u540e\u7684next\u6570\u7ec4\u6c42\u89e3\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c11\u6bd4\u8f83\u7684\u6b21\u6570\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f1a\u66f4\u4e0d\u5bb9\u6613\u7406\u89e3\u3002 vector < int > OGetNext ( string p ) { int pLen = p . size (); vector < int > next ( pLen , 0 ); next [ 0 ] = - 1 ; int k = - 1 ; int j = 0 ; while ( j < pLen - 1 ) { //p[k]\u8868\u793a\u524d\u7f00\uff0cp[j]\u8868\u793a\u540e\u7f00 if ( k == - 1 || p [ j ] == p [ k ]) { ++ j ; ++ k ; //\u8f83\u4e4b\u524dnext\u6570\u7ec4\u6c42\u6cd5\uff0c\u6539\u52a8\u5728\u4e0b\u97624\u884c if ( p [ j ] != p [ k ]) next [ j ] = k ; //\u4e4b\u524d\u53ea\u6709\u8fd9\u4e00\u884c else //\u56e0\u4e3a\u4e0d\u80fd\u51fa\u73b0p[j] = p[ next[j ]]\uff0c\u6240\u4ee5\u5f53\u51fa\u73b0\u65f6\u9700\u8981\u7ee7\u7eed\u9012\u5f52\uff0ck = next[k] = next[next[k]] next [ j ] = next [ k ]; } else { k = next [ k ]; } } return next ; } \u4f7f\u7528next\u6570\u7ec4\u67e5\u627e\u6a21\u5f0f\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5e76\u8fd4\u56de\u7d22\u5f15\u7684\u51fd\u6570\uff0c\u4e0d\u5b58\u5728\u4f1a\u8fd4\u56de-1. int KmpSearch ( string & s , string & p ) { int i = 0 ; int j = 0 ; int sLen = s . size (); int pLen = p . size (); auto next = OGetNext ( p ); while ( i < sLen && j < pLen ) { //\u2460\u5982\u679cj = -1\uff0c\u6216\u8005\u5f53\u524d\u5b57\u7b26\u5339\u914d\u6210\u529f\uff08\u5373S[i] == P[j]\uff09\uff0c\u90fd\u4ee4i++\uff0cj++ if ( j == - 1 || s [ i ] == p [ j ]) { i ++ ; j ++ ; } else { //\u2461\u5982\u679cj != -1\uff0c\u4e14\u5f53\u524d\u5b57\u7b26\u5339\u914d\u5931\u8d25\uff08\u5373S[i] != P[j]\uff09\uff0c\u5219\u4ee4 i \u4e0d\u53d8\uff0cj = next[j] //next[j]\u5373\u4e3aj\u6240\u5bf9\u5e94\u7684next\u503c j = next [ j ]; } } if ( j == pLen ) return i - j ; else return - 1 ; } \u4f7f\u7528next\u6570\u7ec4\u6bd4\u8f83\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6a21\u5f0f\u4e32\u5728S\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u7684\u51fd\u6570\u3002 int KmpSearch ( string & s , string & p ) { int i = 0 ; int j = 0 ; int sLen = s . size (); int pLen = p . size (); auto next = OGetNext ( p ); int count = 0 ; while ( i < sLen ){ while ( i < sLen && j < pLen ) { //\u2460\u5982\u679cj = -1\uff0c\u6216\u8005\u5f53\u524d\u5b57\u7b26\u5339\u914d\u6210\u529f\uff08\u5373S[i] == P[j]\uff09\uff0c\u90fd\u4ee4i++\uff0cj++ if ( j == - 1 || s [ i ] == p [ j ]) { i ++ ; j ++ ; } else { //\u2461\u5982\u679cj != -1\uff0c\u4e14\u5f53\u524d\u5b57\u7b26\u5339\u914d\u5931\u8d25\uff08\u5373S[i] != P[j]\uff09\uff0c\u5219\u4ee4 i \u4e0d\u53d8\uff0cj = next[j] //next[j]\u5373\u4e3aj\u6240\u5bf9\u5e94\u7684next\u503c j = next [ j ]; } } if ( j == pLen ){ count ++ ; j = 0 ; } } return count ; }","title":"KMP \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Rabin-Karp%E7%AE%97%E6%B3%95/","text":"Rabin-Karp \u7b97\u6cd5 \u00b6 Rabin Karp\u7b97\u6cd5\u6bd4\u8f83\u6a21\u5f0f\u4e32P \u548c \u5f85\u67e5\u627e\u4e32S \u4e2d\u6bcf\u4e2a\u4e0eP\u957f\u5ea6\u76f8\u540c\u7684\u5b57\u4e32\uff0c \u6bd4\u8f83\u7684\u65f6\u5019\u5148\u8ba1\u7b97\u5176\u54c8\u5e0c\u503c\uff0c\u5728\u6bd4\u8f83\u54c8\u5e0c\u503c\u662f\u5426\u4e00\u81f4\u3002 1. \u54c8\u5e0c\u51fd\u6570 \u00b6 \u56e0\u4e3a\u8981\u8ba1\u7b97\u5f88\u591a\u6b21\u54c8\u5e0c\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u4ece\u5934\u5f00\u59cb\u8ba1\u7b97\uff0c\u590d\u6742\u5ea6\u4f1a\u5f88\u9ad8\uff0c\u6211\u4eec\u5e0c\u671b\u54c8\u5e0c\u51fd\u6570\u53ef\u4ee5\u6839\u636e\u4e0a\u4e00\u6b21\u7684\u7ed3\u679c\u548c\u672c\u6b21\u65b0\u589e\u7684\u5b57\u7b26\u548c\u5220\u9664\u7684\u5b57\u7b26\u5728 O(1) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u5f97\u51fa\uff0c\u8fd9\u6837\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u5b57\u6bcd\uff0c\u54c8\u5e0c\u503c\u90fd\u53ef\u4ee5\u5728O(1) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u3002 \u8bbe d \u8868\u793a\u5b57\u7b26\u7684\u79cd\u7c7b\uff0c d = 128 \u6216\u8005 d = 256 \u90fd\u53ef\u4ee5\u3002 \u5982\u679c\u67d0\u4e2a\u5e94\u7528\u573a\u666f\u4e2d\u5b57\u6bcd\u53ea\u6709 abcdef , \u90a3\u4e48 d = 6 . p \u8868\u793a\u6a21\u5f0f\u4e32P\u8ba1\u7b97\u5f97\u5230\u7684\u54c8\u5e0c\u503c\uff0c \u521d\u59cb\u5316 p = 0 . \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6700\u7ec8\u8f6c\u6362\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u5bb9\u6613\u60f3\u5230\u7684\u529e\u6cd5\u5c31\u662f\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u6362\u6210\u5176\u5bf9\u5e94\u5927\u5c0f\u7684\u6570\u503c\uff0c\u7136\u540e\u504f\u79fb\u4e00\u4e2a\u503c\uff0c\u7d2f\u52a0\u3002 \u4f8b\u5982 abc \u8f6c\u6362\u6210\u6570\u5b57\u53ef\u4ee5\u662f a * 100 + b * 10 + c = 10779 , cba \u8f6c\u6210\u6570\u5b57\u53ef\u4ee5\u662f c * 100 + b * 10 + a = 10977 . \u8fd9\u6837\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u5bf9\u5e94\u552f\u4e00\u4e00\u4e2a\u6570\u503c\uff0c\u800c\u4e14\u6ed1\u52a8\u7684\u65f6\u5019\u4e0d\u7528\u91cd\u65b0\u8ba1\u7b97\uff0c\u53ea\u9700\u8981\u51cf\u53bb\u6ed1\u51fa\u7684\u5b57\u6bcd\uff0c\u52a0\u5165\u5212\u5165\u7684\u5b57\u6bcd\u5c31\u53ef\u4ee5\u3002 \u4f8b\u5982\uff0c bcd \u8f6c\u6362\u6210\u6570\u5b57\u662f (10779 - a * 100) * 10 + d = 10890 \u4e0e\u76f4\u63a5\u8ba1\u7b97 b*100 + c * 10 + d = 10890 \u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002 \u4e0a\u8ff0\u54c8\u5e0c\u65b9\u6cd5\u5b8c\u5168\u6ee1\u8db3\u8981\u6c42\uff0c\u4f46\u662f\u5f53\u5b57\u7b26\u4e32\u53d8\u957f\u4e4b\u540e\uff0c\u6574\u6570\u4f1a\u53d8\u5f97\u975e\u5e38\u5927\uff0c\u8d85\u8fc7\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u3002 \u6211\u4eec\u4f7f\u7528\u6a21\u8fd0\u7b97\u63a7\u5236\u6700\u7ec8\u5f97\u5230\u7684\u6574\u6570\u8303\u56f4\uff0c\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u5927\u7684\u7d20\u6570\u4f5c\u4e3a\u6a21\u3002\u8bbe\u6a21\u4e3a q = 101 . \u6211\u4eec\u4f7f\u7528 d \u4f5c\u4e3a\u57fa\u6570\u4ee3\u66ff\u4e0a\u9762\u63d0\u5230\u7684 10\uff0c\u56e0\u4e3a\u5b57\u6bcd\u7684\u79cd\u7c7b\u53ef\u80fd\u8fdc\u5927\u4e8e10\uff0c\u4f7f\u752810\u53ea\u662f\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\uff0c\u4f7f\u7528 d \u624d\u80fd\u5206\u9694\u5f00\u6bcf\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8ba1\u7b97\u6700\u7ec8\u54c8\u5e0c\u503c\u7684\u54c8\u5e0c\u51fd\u6570\u5c31\u662f\uff1a d = 0 for i in range ( len ( pattern )): p = ( d * p + pattern [ i ]) % q \u6ed1\u52a8\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u7c7b\u4f3c\u4e0a\u9762\u4ee510\u4e3a\u57fa\u6570\u4e3e\u4f8b\u7684\u65f6\u5019\uff0c\u5148\u51cf\u53bb\u6700\u9ad8\u4f4d\uff0c\u518d \u4e58\u4ee5 d , \u7136\u540e\u52a0\u4e0a\u6ed1\u5165\u7684\u6700\u4f4e\u4f4d\u3002 \u6700\u9ad8\u4f4d\u6570\u503c h = d ^ (M - 1) , \u5176\u4e2d M = len(pattern) . t = 0 for i in range ( len ( pattern )): t = ( d * t + text [ i ]) % q i = 0 # \u5411\u540e\u6ed1\u52a8\u4e00\u4e2a\u5b57\u7b26\uff0ctext[i] \u6ed1\u51fa\uff0c text[i + M] \u6ed1\u5165\uff0c \u65b0\u7684\u503c\u4e3a t = ( d * ( t - ord ( text [ i ]) * h ) + ord ( text [ i + m ]) ) % q \u56e0\u4e3a\u6700\u7ec8\u7684\u54c8\u5e0c\u503c\u662f\u53d6\u6a21\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u503c\u4e0d\u4e00\u6837\u7684\u65f6\u5019\u53ef\u4ee5\u4fdd\u8bc1\u539f\u5b57\u7b26\u4e32\u80af\u5b9a\u4e0d\u76f8\u7b49\uff0c\u4f46\u662f\u503c\u4e00\u6837\u7684\u65f6\u5019\u4e0d\u80fd\u4fdd\u8bc1\u539f\u5b57\u7b26\u4e32\u4e00\u5b9a\u76f8\u7b49\u3002 \u5f53\u9047\u5230\u54c8\u5e0c\u503c\u4e00\u6837\u7684\u4e24\u4e2a\u4e32\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u9010\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u770b\u662f\u5426\u76f8\u7b49\u3002 2. \u7b97\u6cd5\u5b9e\u73b0 \u00b6 # Following program is the python implementation of # Rabin Karp Algorithm given in CLRS book # d is the number of characters in the input alphabet d = 256 # pat -> pattern # txt -> text # q -> A prime number def search ( pat , txt , q ): M = len ( pat ) N = len ( txt ) i = 0 j = 0 p = 0 # hash value for pattern t = 0 # hash value for txt h = 1 # The value of h would be \"pow(d, M-1)%q\" for i in xrange ( M - 1 ): h = ( h * d ) % q # Calculate the hash value of pattern and first window # of text for i in xrange ( M ): p = ( d * p + ord ( pat [ i ])) % q t = ( d * t + ord ( txt [ i ])) % q # Slide the pattern over text one by one for i in xrange ( N - M + 1 ): # Check the hash values of current window of text and # pattern if the hash values match then only check # for characters on by one if p == t : # Check for characters one by one for j in xrange ( M ): if txt [ i + j ] != pat [ j ]: break j += 1 # if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1] if j == M : print \"Pattern found at index \" + str ( i ) # Calculate hash value for next window of text: Remove # leading digit, add trailing digit if i < N - M : t = ( d * ( t - ord ( txt [ i ]) * h ) + ord ( txt [ i + M ])) % q # We might get negative values of t, converting it to # positive if t < 0 : t = t + q # Driver program to test the above function txt = \"GEEKS FOR GEEKS\" pat = \"GEEK\" q = 101 # A prime number search ( pat , txt , q ) # This code is contributed by Bhavya Jain \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/?ref=rp","title":"Rabin-Karp \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Rabin-Karp%E7%AE%97%E6%B3%95/#rabin-karp","text":"Rabin Karp\u7b97\u6cd5\u6bd4\u8f83\u6a21\u5f0f\u4e32P \u548c \u5f85\u67e5\u627e\u4e32S \u4e2d\u6bcf\u4e2a\u4e0eP\u957f\u5ea6\u76f8\u540c\u7684\u5b57\u4e32\uff0c \u6bd4\u8f83\u7684\u65f6\u5019\u5148\u8ba1\u7b97\u5176\u54c8\u5e0c\u503c\uff0c\u5728\u6bd4\u8f83\u54c8\u5e0c\u503c\u662f\u5426\u4e00\u81f4\u3002","title":"Rabin-Karp \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Rabin-Karp%E7%AE%97%E6%B3%95/#1","text":"\u56e0\u4e3a\u8981\u8ba1\u7b97\u5f88\u591a\u6b21\u54c8\u5e0c\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u4ece\u5934\u5f00\u59cb\u8ba1\u7b97\uff0c\u590d\u6742\u5ea6\u4f1a\u5f88\u9ad8\uff0c\u6211\u4eec\u5e0c\u671b\u54c8\u5e0c\u51fd\u6570\u53ef\u4ee5\u6839\u636e\u4e0a\u4e00\u6b21\u7684\u7ed3\u679c\u548c\u672c\u6b21\u65b0\u589e\u7684\u5b57\u7b26\u548c\u5220\u9664\u7684\u5b57\u7b26\u5728 O(1) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u5f97\u51fa\uff0c\u8fd9\u6837\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u5b57\u6bcd\uff0c\u54c8\u5e0c\u503c\u90fd\u53ef\u4ee5\u5728O(1) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u3002 \u8bbe d \u8868\u793a\u5b57\u7b26\u7684\u79cd\u7c7b\uff0c d = 128 \u6216\u8005 d = 256 \u90fd\u53ef\u4ee5\u3002 \u5982\u679c\u67d0\u4e2a\u5e94\u7528\u573a\u666f\u4e2d\u5b57\u6bcd\u53ea\u6709 abcdef , \u90a3\u4e48 d = 6 . p \u8868\u793a\u6a21\u5f0f\u4e32P\u8ba1\u7b97\u5f97\u5230\u7684\u54c8\u5e0c\u503c\uff0c \u521d\u59cb\u5316 p = 0 . \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6700\u7ec8\u8f6c\u6362\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u5bb9\u6613\u60f3\u5230\u7684\u529e\u6cd5\u5c31\u662f\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u6362\u6210\u5176\u5bf9\u5e94\u5927\u5c0f\u7684\u6570\u503c\uff0c\u7136\u540e\u504f\u79fb\u4e00\u4e2a\u503c\uff0c\u7d2f\u52a0\u3002 \u4f8b\u5982 abc \u8f6c\u6362\u6210\u6570\u5b57\u53ef\u4ee5\u662f a * 100 + b * 10 + c = 10779 , cba \u8f6c\u6210\u6570\u5b57\u53ef\u4ee5\u662f c * 100 + b * 10 + a = 10977 . \u8fd9\u6837\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u5bf9\u5e94\u552f\u4e00\u4e00\u4e2a\u6570\u503c\uff0c\u800c\u4e14\u6ed1\u52a8\u7684\u65f6\u5019\u4e0d\u7528\u91cd\u65b0\u8ba1\u7b97\uff0c\u53ea\u9700\u8981\u51cf\u53bb\u6ed1\u51fa\u7684\u5b57\u6bcd\uff0c\u52a0\u5165\u5212\u5165\u7684\u5b57\u6bcd\u5c31\u53ef\u4ee5\u3002 \u4f8b\u5982\uff0c bcd \u8f6c\u6362\u6210\u6570\u5b57\u662f (10779 - a * 100) * 10 + d = 10890 \u4e0e\u76f4\u63a5\u8ba1\u7b97 b*100 + c * 10 + d = 10890 \u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002 \u4e0a\u8ff0\u54c8\u5e0c\u65b9\u6cd5\u5b8c\u5168\u6ee1\u8db3\u8981\u6c42\uff0c\u4f46\u662f\u5f53\u5b57\u7b26\u4e32\u53d8\u957f\u4e4b\u540e\uff0c\u6574\u6570\u4f1a\u53d8\u5f97\u975e\u5e38\u5927\uff0c\u8d85\u8fc7\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u3002 \u6211\u4eec\u4f7f\u7528\u6a21\u8fd0\u7b97\u63a7\u5236\u6700\u7ec8\u5f97\u5230\u7684\u6574\u6570\u8303\u56f4\uff0c\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u5927\u7684\u7d20\u6570\u4f5c\u4e3a\u6a21\u3002\u8bbe\u6a21\u4e3a q = 101 . \u6211\u4eec\u4f7f\u7528 d \u4f5c\u4e3a\u57fa\u6570\u4ee3\u66ff\u4e0a\u9762\u63d0\u5230\u7684 10\uff0c\u56e0\u4e3a\u5b57\u6bcd\u7684\u79cd\u7c7b\u53ef\u80fd\u8fdc\u5927\u4e8e10\uff0c\u4f7f\u752810\u53ea\u662f\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\uff0c\u4f7f\u7528 d \u624d\u80fd\u5206\u9694\u5f00\u6bcf\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8ba1\u7b97\u6700\u7ec8\u54c8\u5e0c\u503c\u7684\u54c8\u5e0c\u51fd\u6570\u5c31\u662f\uff1a d = 0 for i in range ( len ( pattern )): p = ( d * p + pattern [ i ]) % q \u6ed1\u52a8\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u7c7b\u4f3c\u4e0a\u9762\u4ee510\u4e3a\u57fa\u6570\u4e3e\u4f8b\u7684\u65f6\u5019\uff0c\u5148\u51cf\u53bb\u6700\u9ad8\u4f4d\uff0c\u518d \u4e58\u4ee5 d , \u7136\u540e\u52a0\u4e0a\u6ed1\u5165\u7684\u6700\u4f4e\u4f4d\u3002 \u6700\u9ad8\u4f4d\u6570\u503c h = d ^ (M - 1) , \u5176\u4e2d M = len(pattern) . t = 0 for i in range ( len ( pattern )): t = ( d * t + text [ i ]) % q i = 0 # \u5411\u540e\u6ed1\u52a8\u4e00\u4e2a\u5b57\u7b26\uff0ctext[i] \u6ed1\u51fa\uff0c text[i + M] \u6ed1\u5165\uff0c \u65b0\u7684\u503c\u4e3a t = ( d * ( t - ord ( text [ i ]) * h ) + ord ( text [ i + m ]) ) % q \u56e0\u4e3a\u6700\u7ec8\u7684\u54c8\u5e0c\u503c\u662f\u53d6\u6a21\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u503c\u4e0d\u4e00\u6837\u7684\u65f6\u5019\u53ef\u4ee5\u4fdd\u8bc1\u539f\u5b57\u7b26\u4e32\u80af\u5b9a\u4e0d\u76f8\u7b49\uff0c\u4f46\u662f\u503c\u4e00\u6837\u7684\u65f6\u5019\u4e0d\u80fd\u4fdd\u8bc1\u539f\u5b57\u7b26\u4e32\u4e00\u5b9a\u76f8\u7b49\u3002 \u5f53\u9047\u5230\u54c8\u5e0c\u503c\u4e00\u6837\u7684\u4e24\u4e2a\u4e32\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u9010\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u770b\u662f\u5426\u76f8\u7b49\u3002","title":"1. \u54c8\u5e0c\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Rabin-Karp%E7%AE%97%E6%B3%95/#2","text":"# Following program is the python implementation of # Rabin Karp Algorithm given in CLRS book # d is the number of characters in the input alphabet d = 256 # pat -> pattern # txt -> text # q -> A prime number def search ( pat , txt , q ): M = len ( pat ) N = len ( txt ) i = 0 j = 0 p = 0 # hash value for pattern t = 0 # hash value for txt h = 1 # The value of h would be \"pow(d, M-1)%q\" for i in xrange ( M - 1 ): h = ( h * d ) % q # Calculate the hash value of pattern and first window # of text for i in xrange ( M ): p = ( d * p + ord ( pat [ i ])) % q t = ( d * t + ord ( txt [ i ])) % q # Slide the pattern over text one by one for i in xrange ( N - M + 1 ): # Check the hash values of current window of text and # pattern if the hash values match then only check # for characters on by one if p == t : # Check for characters one by one for j in xrange ( M ): if txt [ i + j ] != pat [ j ]: break j += 1 # if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1] if j == M : print \"Pattern found at index \" + str ( i ) # Calculate hash value for next window of text: Remove # leading digit, add trailing digit if i < N - M : t = ( d * ( t - ord ( txt [ i ]) * h ) + ord ( txt [ i + M ])) % q # We might get negative values of t, converting it to # positive if t < 0 : t = t + q # Driver program to test the above function txt = \"GEEKS FOR GEEKS\" pat = \"GEEK\" q = 101 # A prime number search ( pat , txt , q ) # This code is contributed by Bhavya Jain \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/?ref=rp","title":"2. \u7b97\u6cd5\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/","text":"Z \u7b97\u6cd5 \u00b6 Z \u7b97\u6cd5\u4e5f\u662f\u4e00\u79cd\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\uff0c\u548cKMP\u7b97\u6cd5\u4e00\u6837\uff0c\u4e5f\u662f\u9884\u5904\u7406\u6c42\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u5229\u7528\u6c42\u51fa\u7684\u6570\u7ec4\u52a0\u5feb\u79fb\u52a8\u3002 Z \u7b97\u6cd5\u9700\u8981\u9884\u5904\u7406\u6c42\u51faZ\u6570\u7ec4 1. Z \u6570\u7ec4 \u00b6 Z \u6570\u7ec4\u4e2d\u7684\u5143\u7d20Z[i] \u8868\u793a\u4ece [i...n) \u7684\u5b50\u4e32\u4e2d\u662f [0...n) \u524d\u7f00\u7684\u957f\u5ea6\u3002 0 1 2 3 4 5 6 a a b a a c d <-- text x 1 0 2 1 0 0 <-- Z Array i = 1\u65f6\uff0c abaacd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f a , \u6240\u4ee5 Z[1] = 1 i = 2\u65f6\uff0c baacd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f , \u6240\u4ee5 Z[2] = 0 i = 3\u65f6\uff0c aacd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f aa , \u6240\u4ee5 Z[3] = 2 i = 4\u65f6\uff0c acd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f a , \u6240\u4ee5 Z[4] = 1 i = 5\u65f6\uff0c cd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f , \u6240\u4ee5 Z[5] = 0 i = 6\u65f6\uff0c d \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f , \u6240\u4ee5 Z[6] = 0 \u5176\u4ed6\u4f8b\u5b50\u5e2e\u52a9\u52a0\u6df1\u7406\u89e3\uff1a str = \"aaaaaa\" Z[] = {x, 5, 4, 3, 2, 1} str = \"aabaacd\" Z[] = {x, 1, 0, 2, 1, 0, 0} str = \"abababab\" Z[] = {x, 0, 6, 0, 4, 0, 2, 0} 2. \u5728\u641c\u7d22\u4e2d\u4f7f\u7528 Z \u6570\u7ec4 \u00b6 \u8bbe\u5f85\u641c\u7d22\u4e32\u4e3a T , \u6a21\u5f0f\u4e32\u4e3a P , $ \u4e3a\u5728 T \u548c P \u4e2d\u90fd\u6ca1\u6709\u51fa\u73b0\u7684\u7279\u6b8a\u5b57\u7b26\uff0c \u6784\u9020\u65b0\u7684\u5b57\u7b26\u4e32 PT = P$T , \u6c42\u89e3\u51fa PT \u7684 Z Array. P = \"aab\" T = \"baabaa\" 0 1 2 3 4 5 6 7 8 9 a a b $ b a a b a a <-- PT x 1 0 0 0 3 1 0 2 1 <-- Z array | | V 5 <---------- match index \u5f53\u6c42\u89e3Z Array\u65f6\uff0c \u9047\u5230\u957f\u5ea6\u7b49\u4e8e\u6a21\u5f0f\u4e32 P \u957f\u5ea6\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u7ed3\u679c\u3002 3. Z \u6570\u7ec4\u6c42\u89e3\u65b9\u6cd5 \u00b6 \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528\u4e24\u91cd\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u65f6 O(n^2) O(n^2) . def getZArray ( array ): n = len ( array ) zarray = [ 0 ] * n for i in range ( 1 , n ): s1 = 0 s2 = i same = 0 while s2 < n and array [ s1 ] == array [ s2 ]: s1 += 1 s2 += 1 same += 1 zarray [ i ] = same return zarray \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa Z Array, \u4ed4\u7ec6\u5206\u6790\u7b2c\u4e00\u79cd\u65b9\u6cd5\u5c31\u80fd\u53d1\u73b0\uff0c\u4ece\u524d\u5411\u540e\u8ba1\u7b97\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u8ba1\u7b97\u3002 \u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4[L, R] \u4f7f\u5f97 [L, R] \u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002 \u521d\u59cb\u5316 L = 0, R = 0 for i in range(1, n), 2.1 \u5982\u679c i > R, \u5229\u7528\u65b9\u6cd5\u4e00\u4e2d\u7684\u65b9\u6cd5\u8ba1\u7b97\u51fa Z[i], \u540c\u65f6\u8bbe\u7f6eL = i, R = L + Z[i] 2.2 \u5982\u679c i <= R, k = i - L, i \u53f3\u8fb9\u7684\u5143\u7d20\u4e2a\u6570\u4e3a R - i + 1, \u5982\u679c Z[k] < R - i + 1, \u8bf4\u660e Z[i] = Z[k], \u56e0\u4e3a[L, R]\u5df2\u7ecf\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002 [L...i] == [0...k] 2.3 \u5982\u679c Z[k] < R - i + 1\uff0c \u5229\u7528\u65b9\u6cd5\u4e00\u91cd\u65b0\u8ba1\u7b97Z[i], \u66f4\u65b0L\uff0c R\u3002 def getZarr ( string , z ): n = len ( string ) l , r , k = 0 , 0 , 0 for i in range ( 1 , n ): if i > r : l , r = i , i while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 else : k = i - l if z [ k ] < r - i + 1 : z [ i ] = z [ k ] else : l = i while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 return z 4. \u7b97\u6cd5\u5b9e\u73b0 \u00b6 # Python3 program that implements Z algorithm # for pattern searching # Fills Z array for given string str[] def getZarr ( string , z ): n = len ( string ) # [L,R] make a window which matches # with prefix of s l , r , k = 0 , 0 , 0 for i in range ( 1 , n ): # if i>R nothing matches so we will calculate. # Z[i] using naive way. if i > r : l , r = i , i # R-L = 0 in starting, so it will start # checking from 0'th index. For example, # for \"ababab\" and i = 1, the value of R # remains 0 and Z[i] becomes 0. For string # \"aaaaaa\" and i = 1, Z[i] and R become 5 while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 else : # k = i-L so k corresponds to number which # matches in [L,R] interval. k = i - l # if Z[k] is less than remaining interval # then Z[i] will be equal to Z[k]. # For example, str = \"ababab\", i = 3, R = 5 # and L = 2 if z [ k ] < r - i + 1 : z [ i ] = z [ k ] # For example str = \"aaaaaa\" and i = 2, # R is 5, L is 0 else : # else start from R and check manually l = i while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 # prints all occurrences of pattern # in text using Z algo def search ( text , pattern ): # Create concatenated string \"P$T\" concat = pattern + \"$\" + text l = len ( concat ) # Construct Z array z = [ 0 ] * l getZarr ( concat , z ) # now looping through Z array for matching condition for i in range ( l ): # if Z[i] (matched region) is equal to pattern # length we got the pattern if z [ i ] == len ( pattern ): print ( \"Pattern found at index\" , i - len ( pattern ) - 1 ) # Driver Code if __name__ == \"__main__\" : text = \"GEEKS FOR GEEKS\" pattern = \"GEEK\" search ( text , pattern ) # This code is conributed by # sanjeev2552 \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/?ref=rp","title":"Z \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#z","text":"Z \u7b97\u6cd5\u4e5f\u662f\u4e00\u79cd\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\uff0c\u548cKMP\u7b97\u6cd5\u4e00\u6837\uff0c\u4e5f\u662f\u9884\u5904\u7406\u6c42\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u5229\u7528\u6c42\u51fa\u7684\u6570\u7ec4\u52a0\u5feb\u79fb\u52a8\u3002 Z \u7b97\u6cd5\u9700\u8981\u9884\u5904\u7406\u6c42\u51faZ\u6570\u7ec4","title":"Z \u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#1-z","text":"Z \u6570\u7ec4\u4e2d\u7684\u5143\u7d20Z[i] \u8868\u793a\u4ece [i...n) \u7684\u5b50\u4e32\u4e2d\u662f [0...n) \u524d\u7f00\u7684\u957f\u5ea6\u3002 0 1 2 3 4 5 6 a a b a a c d <-- text x 1 0 2 1 0 0 <-- Z Array i = 1\u65f6\uff0c abaacd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f a , \u6240\u4ee5 Z[1] = 1 i = 2\u65f6\uff0c baacd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f , \u6240\u4ee5 Z[2] = 0 i = 3\u65f6\uff0c aacd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f aa , \u6240\u4ee5 Z[3] = 2 i = 4\u65f6\uff0c acd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f a , \u6240\u4ee5 Z[4] = 1 i = 5\u65f6\uff0c cd \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f , \u6240\u4ee5 Z[5] = 0 i = 6\u65f6\uff0c d \u662f aabaacd \u524d\u7f00\u7684\u957f\u5ea6\u662f , \u6240\u4ee5 Z[6] = 0 \u5176\u4ed6\u4f8b\u5b50\u5e2e\u52a9\u52a0\u6df1\u7406\u89e3\uff1a str = \"aaaaaa\" Z[] = {x, 5, 4, 3, 2, 1} str = \"aabaacd\" Z[] = {x, 1, 0, 2, 1, 0, 0} str = \"abababab\" Z[] = {x, 0, 6, 0, 4, 0, 2, 0}","title":"1. Z \u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#2-z","text":"\u8bbe\u5f85\u641c\u7d22\u4e32\u4e3a T , \u6a21\u5f0f\u4e32\u4e3a P , $ \u4e3a\u5728 T \u548c P \u4e2d\u90fd\u6ca1\u6709\u51fa\u73b0\u7684\u7279\u6b8a\u5b57\u7b26\uff0c \u6784\u9020\u65b0\u7684\u5b57\u7b26\u4e32 PT = P$T , \u6c42\u89e3\u51fa PT \u7684 Z Array. P = \"aab\" T = \"baabaa\" 0 1 2 3 4 5 6 7 8 9 a a b $ b a a b a a <-- PT x 1 0 0 0 3 1 0 2 1 <-- Z array | | V 5 <---------- match index \u5f53\u6c42\u89e3Z Array\u65f6\uff0c \u9047\u5230\u957f\u5ea6\u7b49\u4e8e\u6a21\u5f0f\u4e32 P \u957f\u5ea6\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u7ed3\u679c\u3002","title":"2. \u5728\u641c\u7d22\u4e2d\u4f7f\u7528 Z \u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#3-z","text":"\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528\u4e24\u91cd\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u65f6 O(n^2) O(n^2) . def getZArray ( array ): n = len ( array ) zarray = [ 0 ] * n for i in range ( 1 , n ): s1 = 0 s2 = i same = 0 while s2 < n and array [ s1 ] == array [ s2 ]: s1 += 1 s2 += 1 same += 1 zarray [ i ] = same return zarray \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa Z Array, \u4ed4\u7ec6\u5206\u6790\u7b2c\u4e00\u79cd\u65b9\u6cd5\u5c31\u80fd\u53d1\u73b0\uff0c\u4ece\u524d\u5411\u540e\u8ba1\u7b97\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u8ba1\u7b97\u3002 \u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4[L, R] \u4f7f\u5f97 [L, R] \u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002 \u521d\u59cb\u5316 L = 0, R = 0 for i in range(1, n), 2.1 \u5982\u679c i > R, \u5229\u7528\u65b9\u6cd5\u4e00\u4e2d\u7684\u65b9\u6cd5\u8ba1\u7b97\u51fa Z[i], \u540c\u65f6\u8bbe\u7f6eL = i, R = L + Z[i] 2.2 \u5982\u679c i <= R, k = i - L, i \u53f3\u8fb9\u7684\u5143\u7d20\u4e2a\u6570\u4e3a R - i + 1, \u5982\u679c Z[k] < R - i + 1, \u8bf4\u660e Z[i] = Z[k], \u56e0\u4e3a[L, R]\u5df2\u7ecf\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002 [L...i] == [0...k] 2.3 \u5982\u679c Z[k] < R - i + 1\uff0c \u5229\u7528\u65b9\u6cd5\u4e00\u91cd\u65b0\u8ba1\u7b97Z[i], \u66f4\u65b0L\uff0c R\u3002 def getZarr ( string , z ): n = len ( string ) l , r , k = 0 , 0 , 0 for i in range ( 1 , n ): if i > r : l , r = i , i while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 else : k = i - l if z [ k ] < r - i + 1 : z [ i ] = z [ k ] else : l = i while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 return z","title":"3. Z \u6570\u7ec4\u6c42\u89e3\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#4","text":"# Python3 program that implements Z algorithm # for pattern searching # Fills Z array for given string str[] def getZarr ( string , z ): n = len ( string ) # [L,R] make a window which matches # with prefix of s l , r , k = 0 , 0 , 0 for i in range ( 1 , n ): # if i>R nothing matches so we will calculate. # Z[i] using naive way. if i > r : l , r = i , i # R-L = 0 in starting, so it will start # checking from 0'th index. For example, # for \"ababab\" and i = 1, the value of R # remains 0 and Z[i] becomes 0. For string # \"aaaaaa\" and i = 1, Z[i] and R become 5 while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 else : # k = i-L so k corresponds to number which # matches in [L,R] interval. k = i - l # if Z[k] is less than remaining interval # then Z[i] will be equal to Z[k]. # For example, str = \"ababab\", i = 3, R = 5 # and L = 2 if z [ k ] < r - i + 1 : z [ i ] = z [ k ] # For example str = \"aaaaaa\" and i = 2, # R is 5, L is 0 else : # else start from R and check manually l = i while r < n and string [ r - l ] == string [ r ]: r += 1 z [ i ] = r - l r -= 1 # prints all occurrences of pattern # in text using Z algo def search ( text , pattern ): # Create concatenated string \"P$T\" concat = pattern + \"$\" + text l = len ( concat ) # Construct Z array z = [ 0 ] * l getZarr ( concat , z ) # now looping through Z array for matching condition for i in range ( l ): # if Z[i] (matched region) is equal to pattern # length we got the pattern if z [ i ] == len ( pattern ): print ( \"Pattern found at index\" , i - len ( pattern ) - 1 ) # Driver Code if __name__ == \"__main__\" : text = \"GEEKS FOR GEEKS\" pattern = \"GEEK\" search ( text , pattern ) # This code is conributed by # sanjeev2552 \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/?ref=rp","title":"4. \u7b97\u6cd5\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9C%B4%E7%B4%A0%E7%AE%97%E6%B3%95/","text":"\u6734\u7d20\u7b97\u6cd5 \u00b6 \u6734\u7d20\u7b97\u6cd5\u5c31\u662f\u9010\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u4e00\u65e6\u9047\u5230\u4e0d\u540c\u7684\u5b57\u7b26\uff0c\u5411\u540e\u6574\u4f53\u6ed1\u52a8\u4e00\u4e2a\u5b57\u7b26\uff0c\u518d\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\u3002 def find ( text , pattern ): n = len ( text ) m = len ( pattern ) for i in range ( n - m + 1 ): find = True for j in range ( m ): if pattern [ j ] != text [ i + j ]: find = False break if find : print ( \" {0} occurs at index {1} .\" . format ( pattern , i ))","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9C%B4%E7%B4%A0%E7%AE%97%E6%B3%95/#_1","text":"\u6734\u7d20\u7b97\u6cd5\u5c31\u662f\u9010\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u4e00\u65e6\u9047\u5230\u4e0d\u540c\u7684\u5b57\u7b26\uff0c\u5411\u540e\u6574\u4f53\u6ed1\u52a8\u4e00\u4e2a\u5b57\u7b26\uff0c\u518d\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\u3002 def find ( text , pattern ): n = len ( text ) m = len ( pattern ) for i in range ( n - m + 1 ): find = True for j in range ( m ): if pattern [ j ] != text [ i + j ]: find = False break if find : print ( \" {0} occurs at index {1} .\" . format ( pattern , i ))","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/","text":"\u6709\u9650\u81ea\u52a8\u673a \u00b6 \u6709\u9650\u81ea\u52a8\u673a\u53ef\u4ee5\u8868\u793a\u5bf9\u4efb\u610f\u8f93\u5165\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u6848\u3002 \u6784\u9020\u6a21\u5f0f\u4e32 P \u7684\u6709\u9650\u81ea\u52a8\u673a\u3002 \u5728\u5f85\u67e5\u627e\u4e32 T \u4e0a\u8fd0\u884c\u72b6\u6001\u673a\u3002 \u5982\u679c\u6709\u63a5\u53d7\u7684\u60c5\u51b5\uff0c\u4ee3\u8868\u627e\u5230\u4e00\u4e2a\u89e3\u3002 1. \u81ea\u52a8\u673a\u7684\u6784\u9020 \u00b6 1.1 \u6734\u7d20\u65b9\u6cd5 \u00b6 \u8bbe m = len(pattern) , \u6a21\u5f0f\u4e32 pattern \u7684\u72b6\u6001\u673a\u5171\u6709 m + 1 \u4e2a\u72b6\u6001\u3002 \u6a21\u5f0f\u4e32 pattern \u7684\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a 0 \u8868\u793a\u5f00\u59cb\u72b6\u6001\uff0c m \u8868\u793a\u63a5\u53d7\u72b6\u6001\uff0c 0 ~ m \u5171 m + 1\u4e2a\u72b6\u6001\uff0c \u5176\u4e2d\u7684\u95f4\u9694\u5206\u522b\u662f pattern[i]. \u4f8b\u5982 0 --> 1 \u7684\u7bad\u5934\u4e0a\u65b9\u5e94\u8be5\u662f pattern[0], \u8868\u793a\u72b6\u6001 0 \u9047\u5230\u8f93\u5165 pattern[0] \u7684\u65f6\u5019\u8f6c\u79fb\u5230\u72b6\u6001 1 , m-1 --> m \u7684\u7bad\u5934\u4e0a\u65b9\u5e94\u8be5\u662f pattern[m-1], \u8868\u793a\u72b6\u6001 m-1 \u9047\u5230\u8f93\u5165 pattern[m-1] \u7684\u662f\u5076\u8f6c\u79fb\u72b6\u6001\u5230 m . \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u72b6\u6001 k \u548c\u4efb\u610f\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26 x , \u6784\u9020\u5b57\u7b26\u4e32 s = pattern[0...k-1]x , \u6c42\u89e3s\u6700\u957f\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\uff0c \u65e2\u662f\u524d\u7f00\u4e5f\u662f\u540e\u7f00\u7684\u957f\u5ea6 comm_length \u5c31\u662f\u4e0b\u4e00\u4e2a\u5e94\u8be5\u8981\u8f6c\u79fb\u7684\u72b6\u6001\u3002 \u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m^3) * 256 O(m^3) * 256 . CHARS_MAX = 256 # \u6a21\u5f0f\u4e32\u548c\u67e5\u627e\u4e32\u4e2d\u5b57\u7b26\u7684\u79cd\u7c7b def get_next_state ( pattern , state , x ): \"\"\" state \u72b6\u6001\u9047\u5230\u5b57\u7b26 x \u4e4b\u540e\u5e94\u8be5\u8f6c\u79fb\u5230\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001 pattern: string, \u6a21\u5f0f\u4e32 state: int, \u72b6\u6001\u7f16\u53f7 x: int, \u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u4f8b\u5982'a'\u5bf9\u5e9497 \"\"\" m = len ( pattern ) # \u5bf9\u5e94\u60c5\u51b51\uff0c\u5982\u679c\u6b63\u597d\u662f\u6a21\u5f0f\u4e32\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f4\u63a5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001 if state < m and x == ord ( pattern [ state ]): return state + 1 # \u5bf9\u5e94\u60c5\u51b52 i = 0 for ns in range ( state , 0 , - 1 ): if ord ( pattern [ ns - 1 ]) == x : while ( i < ns - 1 ): if pattern [ i ] != pattern [ state - ns + 1 + i ]: break i += 1 if i == ns - 1 : return ns def computeTF ( pattern ): \"\"\" \u8f93\u51fapattern\u7684\u72b6\u6001\u673aTF \"\"\" m = len ( pattern ) TF = [[ 0 for i in range ( CHARS_MAX )] for _ in range ( m + 1 )] for state in range ( m + 1 ): for x in range ( CHARS_MAX ): z = get_next_state ( pattern , state , x ) TF [ state ][ x ] = z return TF 1.2 \u6548\u7387\u66f4\u9ad8\u7684\u65b9\u6cd5 \u00b6 \u5229\u7528KMP\u7b97\u6cd5\u4e2dnext\u6570\u7ec4\u4e2d\u5bfb\u627e\u516c\u5171\u524d\u7f00\u548c\u540e\u7f00\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\u6784\u9020\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m) * 256 O(m) * 256 . CHARS_MAX = 256 # \u6a21\u5f0f\u4e32\u548c\u67e5\u627e\u4e32\u4e2d\u5b57\u7b26\u7684\u79cd\u7c7b def computeTF ( pattern ): m = len ( pattern ) TF = [[ 0 for i in range ( CHARS_MAX )] for _ in range ( m + 1 )] # \u72b6\u60010\u521d\u59cb\u5316\u4e3a\u51680 for j in range ( CHARS_MAX ): TF [ 0 ][ i ] = 0 # \u72b6\u60010\u9047\u5230pattern[0]\u4e4b\u540e\u8f6c\u79fb\u5230\u72b6\u60011 TF [ 0 ][ ord ( pattern [ 0 ]) ] = 1 lps = 0 # \u8868\u793a\u516c\u5171\u524d\u540e\u7f00\u7684\u957f\u5ea6 for i in range ( 1 , m + 1 ): for j in range ( CHARS_MAX ): TF [ i ][ j ] = TF [ lps ][ j ] # \u5bf9\u5e94\u60c5\u51b51\uff0c \u76f4\u63a5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001 TF [ i ][ ord ( pattern [ i ]) ] = i + 1 # \u5bf9\u5e94\u60c5\u51b52\uff0c \u5904\u7406\u5176\u4ed6\u5b57\u7b26\u7684\u72b6\u6001\u8f6c\u79fb if ( i < m ): lps = TF [ lps ][ ord ( pattern [ i ]) ] return TF 2. \u7b97\u6cd5\u5b9e\u73b0 \u00b6 \u5bf9\u4e8e\u4efb\u610f\u7684 pattern , \u6211\u4eec\u90fd\u53ef\u4ee5\u6784\u9020\u5b83\u7684\u6709\u9650\u81ea\u52a8\u673a\uff0c\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u4e8c\u4f4d\u6570\u7ec4\uff0c \u884c\u4ee3\u8868\u72b6\u6001\uff0c \u5217\u4ee3\u8868\u8f93\u5165\u5b57\u7b26\u3002 \u641c\u7d22\u5f85\u67e5\u627e\u4e32 text \u7684\u65f6\u5019\uff0c \u4ece\u72b6\u60010\u5f00\u59cb\uff0c\u4f9d\u6b21\u8bfb\u5165 text[i] , \u5982\u679c\u67d0\u6b21\u8bfb\u5165\u8f6c\u79fb\u5230\u4e86\u63a5\u53d7\u72b6\u6001\uff0c\u8bf4\u660e\u5339\u914d\u5230\u4e00\u4e2a\u7ed3\u679c\uff0c\u8bb0\u5f55\u8f93\u51fa\u3002 # Python program for Finite Automata # Pattern searching Algorithm NO_OF_CHARS = 256 def getNextState ( pat , M , state , x ): ''' calculate the next state ''' # If the character c is same as next character # in pattern, then simply increment state if state < M and x == ord ( pat [ state ]): return state + 1 i = 0 # ns stores the result which is next state # ns finally contains the longest prefix # which is also suffix in \"pat[0..state-1]c\" # Start from the largest possible value and # stop when you find a prefix which is also suffix for ns in range ( state , 0 , - 1 ): if ord ( pat [ ns - 1 ]) == x : while ( i < ns - 1 ): if pat [ i ] != pat [ state - ns + 1 + i ]: break i += 1 if i == ns - 1 : return ns return 0 def computeTF ( pat , M ): ''' This function builds the TF table which represents Finite Automata for a given pattern ''' global NO_OF_CHARS TF = [[ 0 for i in range ( NO_OF_CHARS )] \\ for _ in range ( M + 1 )] for state in range ( M + 1 ): for x in range ( NO_OF_CHARS ): z = getNextState ( pat , M , state , x ) TF [ state ][ x ] = z return TF def search ( pat , txt ): ''' Prints all occurrences of pat in txt ''' global NO_OF_CHARS M = len ( pat ) N = len ( txt ) TF = computeTF ( pat , M ) # Process txt over FA. state = 0 for i in range ( N ): state = TF [ state ][ ord ( txt [ i ])] if state == M : print ( \"Pattern found at index: {} \" . \\ format ( i - M + 1 )) # Driver program to test above function def main (): txt = \"AABAACAADAABAAABAA\" pat = \"AABA\" search ( pat , txt ) if __name__ == '__main__' : main () # This code is contributed by Atul Kumar \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/","title":"\u6709\u9650\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#_1","text":"\u6709\u9650\u81ea\u52a8\u673a\u53ef\u4ee5\u8868\u793a\u5bf9\u4efb\u610f\u8f93\u5165\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u6848\u3002 \u6784\u9020\u6a21\u5f0f\u4e32 P \u7684\u6709\u9650\u81ea\u52a8\u673a\u3002 \u5728\u5f85\u67e5\u627e\u4e32 T \u4e0a\u8fd0\u884c\u72b6\u6001\u673a\u3002 \u5982\u679c\u6709\u63a5\u53d7\u7684\u60c5\u51b5\uff0c\u4ee3\u8868\u627e\u5230\u4e00\u4e2a\u89e3\u3002","title":"\u6709\u9650\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#1","text":"","title":"1. \u81ea\u52a8\u673a\u7684\u6784\u9020"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#11","text":"\u8bbe m = len(pattern) , \u6a21\u5f0f\u4e32 pattern \u7684\u72b6\u6001\u673a\u5171\u6709 m + 1 \u4e2a\u72b6\u6001\u3002 \u6a21\u5f0f\u4e32 pattern \u7684\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a 0 \u8868\u793a\u5f00\u59cb\u72b6\u6001\uff0c m \u8868\u793a\u63a5\u53d7\u72b6\u6001\uff0c 0 ~ m \u5171 m + 1\u4e2a\u72b6\u6001\uff0c \u5176\u4e2d\u7684\u95f4\u9694\u5206\u522b\u662f pattern[i]. \u4f8b\u5982 0 --> 1 \u7684\u7bad\u5934\u4e0a\u65b9\u5e94\u8be5\u662f pattern[0], \u8868\u793a\u72b6\u6001 0 \u9047\u5230\u8f93\u5165 pattern[0] \u7684\u65f6\u5019\u8f6c\u79fb\u5230\u72b6\u6001 1 , m-1 --> m \u7684\u7bad\u5934\u4e0a\u65b9\u5e94\u8be5\u662f pattern[m-1], \u8868\u793a\u72b6\u6001 m-1 \u9047\u5230\u8f93\u5165 pattern[m-1] \u7684\u662f\u5076\u8f6c\u79fb\u72b6\u6001\u5230 m . \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u72b6\u6001 k \u548c\u4efb\u610f\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26 x , \u6784\u9020\u5b57\u7b26\u4e32 s = pattern[0...k-1]x , \u6c42\u89e3s\u6700\u957f\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\uff0c \u65e2\u662f\u524d\u7f00\u4e5f\u662f\u540e\u7f00\u7684\u957f\u5ea6 comm_length \u5c31\u662f\u4e0b\u4e00\u4e2a\u5e94\u8be5\u8981\u8f6c\u79fb\u7684\u72b6\u6001\u3002 \u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m^3) * 256 O(m^3) * 256 . CHARS_MAX = 256 # \u6a21\u5f0f\u4e32\u548c\u67e5\u627e\u4e32\u4e2d\u5b57\u7b26\u7684\u79cd\u7c7b def get_next_state ( pattern , state , x ): \"\"\" state \u72b6\u6001\u9047\u5230\u5b57\u7b26 x \u4e4b\u540e\u5e94\u8be5\u8f6c\u79fb\u5230\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001 pattern: string, \u6a21\u5f0f\u4e32 state: int, \u72b6\u6001\u7f16\u53f7 x: int, \u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u4f8b\u5982'a'\u5bf9\u5e9497 \"\"\" m = len ( pattern ) # \u5bf9\u5e94\u60c5\u51b51\uff0c\u5982\u679c\u6b63\u597d\u662f\u6a21\u5f0f\u4e32\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f4\u63a5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001 if state < m and x == ord ( pattern [ state ]): return state + 1 # \u5bf9\u5e94\u60c5\u51b52 i = 0 for ns in range ( state , 0 , - 1 ): if ord ( pattern [ ns - 1 ]) == x : while ( i < ns - 1 ): if pattern [ i ] != pattern [ state - ns + 1 + i ]: break i += 1 if i == ns - 1 : return ns def computeTF ( pattern ): \"\"\" \u8f93\u51fapattern\u7684\u72b6\u6001\u673aTF \"\"\" m = len ( pattern ) TF = [[ 0 for i in range ( CHARS_MAX )] for _ in range ( m + 1 )] for state in range ( m + 1 ): for x in range ( CHARS_MAX ): z = get_next_state ( pattern , state , x ) TF [ state ][ x ] = z return TF","title":"1.1 \u6734\u7d20\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#12","text":"\u5229\u7528KMP\u7b97\u6cd5\u4e2dnext\u6570\u7ec4\u4e2d\u5bfb\u627e\u516c\u5171\u524d\u7f00\u548c\u540e\u7f00\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\u6784\u9020\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m) * 256 O(m) * 256 . CHARS_MAX = 256 # \u6a21\u5f0f\u4e32\u548c\u67e5\u627e\u4e32\u4e2d\u5b57\u7b26\u7684\u79cd\u7c7b def computeTF ( pattern ): m = len ( pattern ) TF = [[ 0 for i in range ( CHARS_MAX )] for _ in range ( m + 1 )] # \u72b6\u60010\u521d\u59cb\u5316\u4e3a\u51680 for j in range ( CHARS_MAX ): TF [ 0 ][ i ] = 0 # \u72b6\u60010\u9047\u5230pattern[0]\u4e4b\u540e\u8f6c\u79fb\u5230\u72b6\u60011 TF [ 0 ][ ord ( pattern [ 0 ]) ] = 1 lps = 0 # \u8868\u793a\u516c\u5171\u524d\u540e\u7f00\u7684\u957f\u5ea6 for i in range ( 1 , m + 1 ): for j in range ( CHARS_MAX ): TF [ i ][ j ] = TF [ lps ][ j ] # \u5bf9\u5e94\u60c5\u51b51\uff0c \u76f4\u63a5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001 TF [ i ][ ord ( pattern [ i ]) ] = i + 1 # \u5bf9\u5e94\u60c5\u51b52\uff0c \u5904\u7406\u5176\u4ed6\u5b57\u7b26\u7684\u72b6\u6001\u8f6c\u79fb if ( i < m ): lps = TF [ lps ][ ord ( pattern [ i ]) ] return TF","title":"1.2 \u6548\u7387\u66f4\u9ad8\u7684\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#2","text":"\u5bf9\u4e8e\u4efb\u610f\u7684 pattern , \u6211\u4eec\u90fd\u53ef\u4ee5\u6784\u9020\u5b83\u7684\u6709\u9650\u81ea\u52a8\u673a\uff0c\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u4e8c\u4f4d\u6570\u7ec4\uff0c \u884c\u4ee3\u8868\u72b6\u6001\uff0c \u5217\u4ee3\u8868\u8f93\u5165\u5b57\u7b26\u3002 \u641c\u7d22\u5f85\u67e5\u627e\u4e32 text \u7684\u65f6\u5019\uff0c \u4ece\u72b6\u60010\u5f00\u59cb\uff0c\u4f9d\u6b21\u8bfb\u5165 text[i] , \u5982\u679c\u67d0\u6b21\u8bfb\u5165\u8f6c\u79fb\u5230\u4e86\u63a5\u53d7\u72b6\u6001\uff0c\u8bf4\u660e\u5339\u914d\u5230\u4e00\u4e2a\u7ed3\u679c\uff0c\u8bb0\u5f55\u8f93\u51fa\u3002 # Python program for Finite Automata # Pattern searching Algorithm NO_OF_CHARS = 256 def getNextState ( pat , M , state , x ): ''' calculate the next state ''' # If the character c is same as next character # in pattern, then simply increment state if state < M and x == ord ( pat [ state ]): return state + 1 i = 0 # ns stores the result which is next state # ns finally contains the longest prefix # which is also suffix in \"pat[0..state-1]c\" # Start from the largest possible value and # stop when you find a prefix which is also suffix for ns in range ( state , 0 , - 1 ): if ord ( pat [ ns - 1 ]) == x : while ( i < ns - 1 ): if pat [ i ] != pat [ state - ns + 1 + i ]: break i += 1 if i == ns - 1 : return ns return 0 def computeTF ( pat , M ): ''' This function builds the TF table which represents Finite Automata for a given pattern ''' global NO_OF_CHARS TF = [[ 0 for i in range ( NO_OF_CHARS )] \\ for _ in range ( M + 1 )] for state in range ( M + 1 ): for x in range ( NO_OF_CHARS ): z = getNextState ( pat , M , state , x ) TF [ state ][ x ] = z return TF def search ( pat , txt ): ''' Prints all occurrences of pat in txt ''' global NO_OF_CHARS M = len ( pat ) N = len ( txt ) TF = computeTF ( pat , M ) # Process txt over FA. state = 0 for i in range ( N ): state = TF [ state ][ ord ( txt [ i ])] if state == M : print ( \"Pattern found at index: {} \" . \\ format ( i - M + 1 )) # Driver program to test above function def main (): txt = \"AABAACAADAABAAABAA\" pat = \"AABA\" search ( pat , txt ) if __name__ == '__main__' : main () # This code is contributed by Atul Kumar \u53c2\u8003\u6587\u732e\uff1a https://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/","title":"2. \u7b97\u6cd5\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/","text":"","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","text":"\u5f52\u5e76\u6392\u5e8f \u00b6 \u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5c06\u539f\u6765\u7684\u6570\u7ec4\u4e00\u76f4\u4e8c\u5206\uff0c\u76f4\u5230\u6bcf\u7ec4\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c \u4e00\u4e2a\u5143\u7d20\u80af\u5b9a\u662f\u6709\u5e8f\u7684\uff0c \u5269\u4e0b\u7684\u5c31\u662f\u5982\u4f55\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0\u5f52\u5e76\u7684\u64cd\u4f5c\u3002 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c \u548c\u5408\u5e762\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c \u6216\u8005\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\u662f\u4e00\u6837\u7684\uff0c \u9700\u8981 O(n) \u7684\u590d\u6742\u5ea6\u3002 \u4e8c\u5206\u9700\u8981 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f nlogn. \u5f52\u5e76\u6392\u5e8f\u662f\u5206\u6cbb\u6cd5\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\u3002\u5f52\u5e76\u6392\u5e8f\u8981\u5904\u7406\u597d\u4e24\u4ef6\u4e8b\uff0c\u5212\u5206\u548c\u5408\u5e76\u3002\u5212\u5206\u5c31\u662f\u5c06\u5f85\u6392\u5e8f\u5e8f\u5217\u5212\u5206\u6210\u5b50\u5e8f\u5217\u3002\u5408\u5e76\u5c31\u662f\u5982\u4f55\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u3002 \u5f52\u5e76\u7684\u6392\u5e8f\u7684\u601d\u60f3\u662f\uff1a\u9996\u5148\u628a\u539f\u6765\u5e8f\u5217\u5212\u5206\u6210n\u4e2a\u5b50\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5b50\u5e8f\u5217\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u6709\u5e8f\u7684\u3002\u7136\u540e\u5206\u522b\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5408\u5e76\u4e4b\u540e\u7684\u5e8f\u5217\u4fdd\u6301\u6709\u5e8f\u3002\u8fd9\u6837\uff0c\u4e00\u8d9f\u5f52\u5e76\u4e4b\u540e\u5b50\u5e8f\u5217\u51cf\u5c11\u4e8c\u5206\u4e4b\u4e00\uff0c\u76f4\u5230\u6700\u540e\u5f52\u5e76\u4e3a\u4e00\u4e2a\u5e8f\u5217\u4e3a\u6b62\u3002 1. \u5b9e\u73b0\u4ee3\u7801 \u00b6 1.1 C \u5b9e\u73b0 \u00b6 // \u4e24\u4e2a\u6307\u9488\u9010\u4e2a\u6bd4\u8f83\u5408\u5e76\u4e24\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4 void merge ( int * arr , int begin , int mid , int end ) { int i = begin , j = mid + 1 ; int count = end - start + 1 ; int index = 0 ; int * tmp_arr = ( int * ) malloc ( sizeof ( int ) * ( end - begin + 1 )); while ( index < count ) { if ( i <= mid && j <= end && arr [ i ] >= arr [ j ]) { tmp_arr [ index ++ ] = arr [ j ++ ]; } else if ( i <= mid && j <= end && arr [ i ] < arr [ j ]) { tmp_arr [ index ++ ] = arr [ i ++ ]; } } index = 0 ; for ( int i = begin ; i <= end ; i ++ ) { arr [ i ] = tmp_arr [ index ++ ]; } free ( tmp_arr ); return ; } void merge_sort ( int * arr , int begin , int end ) { if ( begin >= end ) { return ; } int mid = ( begin + end ) / 2 ; merge_sort ( arr , begin , mid ); merge_sort ( arr , mid + 1 , end ); merge ( arr , begin , mid , end ); return ; } 1.2 C++ \u5b9e\u73b0 \u00b6 void print ( vector < int > v ){ for ( auto a : v ){ cout << a << \" \" ; } cout << \" | \" ; } //\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4,\u8fd4\u56de\u65b0\u7684\u6709\u5e8f\u7684\u6570\u7ec4 vector < int > merge ( vector < int > & v1 , vector < int > & v2 ){ vector < int > re ; size_t i = 0 , j = 0 ; while ( i < v1 . size () && j < v2 . size ()){ if ( v1 [ i ] <= v2 [ j ]){ re . push_back ( v1 [ i ]); i ++ ; } else { re . push_back ( v2 [ j ]); j ++ ; } } //\u628a\u5269\u4e0b\u7684\u653e\u5728\u6700\u540e for ( size_t a = i ; a < v1 . size (); a ++ ){ re . push_back ( v1 [ a ]); } for ( size_t a = j ; a < v2 . size (); a ++ ){ re . push_back ( v2 [ a ]); } return re ; } //\u5f52\u5e76\u6392\u5e8f\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > mergeSort2 ( vector < int > & v ){ vector < vector < int >> group ; // \u4e00\u5f00\u59cb\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u5355\u72ec\u4e3a\u4e00\u7ec4\uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u7684\u5408\u5e76\u76f8\u90bb\u7684\u7ec4\uff0c\u76f4\u5230\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u7ec4\u3002 for ( int i = 0 ; i < v . size (); i ++ ) { group . push_back ({ v [ i ]}); } int group_end = group . size (); // \u6307\u793a\u7ed3\u679c\uff0c\u6bcf\u6b21\u5f52\u5e76\uff0c\u90fd\u662f\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u7ec4\u6570\u636e\uff0c\u6240\u4ee5group\u7684\u5143\u7d20\u4e2a\u6570\u6bcf\u6b21\u90fd\u51cf\u5c11\u4e00\u534a\uff0c\u4e3a\u4e86\u51cf\u5c11\u5f00\u9500\uff0c //\u6211\u4eec\u6bcf\u6b21\u5408\u5e76\u4e4b\u540e\u7684\u6570\u7ec4\u8fd8\u662f\u653e\u5728\u539f\u6765\u7684\u6570\u7ec4\u4e2d\uff0c\u7528group\u6307\u793a\u6570\u7ec4\u7684\u7ed3\u675f\u3002 //\u5f53group_end = 1\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5230\u4e00\u8d77\u4e86 while ( group_end > 1 ){ for ( size_t b = 0 ; b < group_end ; b ++ ){ print ( group [ b ]); } cout << endl ; int j = 0 ; while ( j + 1 < group . size ()){ group [ j / 2 ] = merge ( group [ j ], group [ j + 1 ]); j = j + 2 ; } // \u4e2a\u6570\u662f\u5947\u6570\u7684\u60c5\u51b5 if ( j == group_end - 1 ){ group [ ceil ( group_end / 2.0 ) - 1 ] = group [ group_end - 1 ]; } group_end = ceil ( group_end / 2.0 ); } print ( group [ 0 ]); return group [ 0 ]; } int main () { vector < int > v = { 49 , 38 , 65 , 97 , 76 , 13 , 27 }; auto a = mergeSort2 ( v ); return 0 ; } \u8fd0\u884c\u7ed3\u679c: 49 | 38 | 65 | 97 | 76 | 13 | 27 | 38 49 | 65 97 | 13 76 | 27 | 38 49 65 97 | 13 27 76 | 13 27 38 49 65 76 97 | \u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0\u65b9\u6cd5 \uff1a // \u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > mergeSort ( vector < int > & v , int start , int end ){ if ( start >= end ){ return { v [ start ]}; } int mid = ( start + end ) / 2 ; auto v1 = mergeSort ( v , start , mid ); // \u9012\u5f52\u5de6\u534a\u90e8\u5206\u7684\u6392\u5e8f auto v2 = mergeSort ( v , mid + 1 , end ); // \u9012\u5f52\u53f3\u534a\u90e8\u5206\u7684\u6392\u5e8f return merge ( v1 , v2 ); } 2. \u5e94\u7528 \u00b6 2.1 \u7edf\u8ba1\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9 \u00b6 \u5f52\u5e76\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\uff08\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u65f6\u5019\u662f\u7a33\u5b9a\u7684\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6765\u6c42\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u8fd9\u6837\u7684\u95ee\u9898\u3002 \u5f52\u5e76\u6392\u5e8f\u662f\u5c06\u6570\u5217a[l,h]\u5206\u6210\u4e24\u534aa[l,mid]\u548ca[mid+1,h]\u5206\u522b\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c\u7136\u540e\u518d\u5c06\u8fd9\u4e24\u534a\u5408\u5e76\u8d77\u6765\u3002 \u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff08\u8bbe l<=i<=mid\uff0cmid+1<=j<=h \uff09\uff0c\u5f53a[i]<=a[j]\u65f6\uff0c\u5e76\u4e0d\u4ea7\u751f\u9006\u5e8f\u6570\uff1b\u5f53a[i]>a[j]\u65f6\uff0c\u5728 \u524d\u534a\u90e8\u5206\u4e2d\u6bd4a[i]\u5927\u7684\u6570\u90fd\u6bd4a[j]\u5927\uff0c\u5c06a[j]\u653e\u5728a[i]\u524d\u9762\u7684\u8bdd\uff0c\u9006\u5e8f\u6570\u8981\u52a0\u4e0a mid-i+1 \u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5728\u5f52\u5e76 \u6392\u5e8f\u4e2d\u7684\u5408\u5e76\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u6570. //\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4,\u8fd4\u56de\u65b0\u7684\u6709\u5e8f\u7684\u6570\u7ec4 vector < int > merge ( vector < int > & v1 , vector < int > & v2 , int & cc ){ vector < int > re ; size_t i = 0 , j = 0 ; while ( i < v1 . size () && j < v2 . size ()){ if ( v1 [ i ] <= v2 [ j ]){ re . push_back ( v1 [ i ]); i ++ ; } else { re . push_back ( v2 [ j ]); cc = cc + v1 . size () - i ; //\u589e\u52a0\u7edf\u8ba1\u9006\u5e8f\u5bf9\u7684\u529f\u80fd\uff0c\u4ee5\u4f20\u9012\u5f15\u7528\u7684\u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\uff0c\u6ce8\u610f\u4f20\u5165\u7684\u53c2\u6570\u7684\u521d\u59cb\u503c\u8981\u4e3a0\uff1b j ++ ; } } //\u628a\u5269\u4e0b\u7684\u653e\u5728\u6700\u540e for ( size_t a = i ; a < v1 . size (); a ++ ){ re . push_back ( v1 [ a ]); } for ( size_t a = j ; a < v2 . size (); a ++ ){ re . push_back ( v2 [ a ]); } return re ; } //\u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > mergeSort ( vector < int > & v , int start , int end , int & cc ){ if ( start >= end ){ return { v [ start ]}; } int mid = ( start + end ) / 2 ; auto v1 = mergeSort ( v , start , mid , cc ); // \u9012\u5f52\u5de6\u534a\u90e8\u5206\u7684\u6392\u5e8f auto v2 = mergeSort ( v , mid + 1 , end , cc ); // \u9012\u5f52\u53f3\u534a\u90e8\u5206\u7684\u6392\u5e8f return merge ( v1 , v2 , cc ); } //\u4f7f\u7528\u7684\u4f7f\u7528\u5b9a\u4e49int cc = 0; \u4f20\u5165\u51fd\u6570\u5373\u53ef\u3002 \u7edf\u8ba1\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u4e0d\u8fc7\u5c31\u590d\u6742\u5ea6\u800c\u8a00\uff0c\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u5df2\u7ecf\u8db3\u591f\u4e86\u3002 \u53e6\u5916\u4e00\u79cd\u5f52\u5e76\u6392\u5e8f\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5c3d\u91cf\u5c11\u7684\u5360\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002 void merge ( vector < int > & v , int s1 , int e1 , int s2 , int e2 ){ vector < int > tmp ; int ss1 = s1 , ss2 = s2 ; while ( s1 <= e1 && s2 <= e2 ){ if ( v [ s1 ] < v [ s2 ]){ tmp . push_back ( v [ s1 ]); s1 ++ ; } if ( v [ s1 ] >= v [ s2 ]){ tmp . push_back ( v [ s2 ]); s2 ++ ; } } if ( s1 <= e1 ){ tmp . insert ( tmp . end (), v . begin () + s1 , v . begin () + e1 + 1 ); } if ( s2 <= e2 ){ tmp . insert ( tmp . end (), v . begin () + s2 , v . begin () + e2 + 1 ); } int t = 0 ; for ( int i = ss1 ; i <= e1 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } for ( int i = ss2 ; i <= e2 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } tmp . clear (); return ; } void mergeSort ( vector < int > & v , int start , int end ){ if ( start >= end ) return ; int mid = ( start + end ) / 2 ; mergeSort ( v , start , mid ); mergeSort ( v , mid + 1 , end ); merge ( v , start , mid , mid + 1 , end ); } \u7edf\u8ba1\u9006\u5e8f\u5bf9 \u5728\u5f52\u5e76\u6392\u5e8f\u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u662f\u7edf\u8ba1\u9006\u5e8f\u5bf9\u7684\u6700\u597d\u65f6\u673a\u3002\u5047\u8bbe\u4e24\u4e2a\u5f85\u5408\u5e76\u7684\u5e8f\u5217\u4e3a v1 , v2 , \u6709\u4e24\u4e2a\u6307\u9488 s1 , s2 \u5206\u522b\u6307\u5411 v1 , v2 ,\u5f53 v1[s1] > v2[s2] \u7684\u65f6\u5019\uff0c (v1.size() - s1) , \u4e5f\u5c31\u662f\u4ece s1 \u5230 v1 \u7684\u7ed3\u5c3e\u7684\u6240\u6709\u5143\u7d20\u90fd\u4f1a\u548c v[s2] \u7ec4\u6210\u9006\u5e8f\u5bf9\u3002 void merge ( vector < int > & v , int s1 , int e1 , int s2 , int e2 , int & cc ){ vector < int > tmp ; int ss1 = s1 , ss2 = s2 ; while ( s1 <= e1 && s2 <= e2 ){ if ( v [ s1 ] <= v [ s2 ]){ tmp . push_back ( v [ s1 ]); s1 ++ ; } if ( v [ s1 ] > v [ s2 ]){ tmp . push_back ( v [ s2 ]); s2 ++ ; cc += e1 - s1 + 1 ; // \u8bb0\u5f55\u9006\u5e8f\u5bf9\u7684\u6570\u91cf } } if ( s1 <= e1 ){ tmp . insert ( tmp . end (), v . begin () + s1 , v . begin () + e1 + 1 ); } if ( s2 <= e2 ){ tmp . insert ( tmp . end (), v . begin () + s2 , v . begin () + e2 + 1 ); } int t = 0 ; for ( int i = ss1 ; i <= e1 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } for ( int i = ss2 ; i <= e2 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } tmp . clear (); return ; } void mergeSort ( vector < int > & v , int start , int end , int & cc ){ if ( start >= end ) return ; int mid = ( start + end ) / 2 ; mergeSort ( v , start , mid , cc ); mergeSort ( v , mid + 1 , end , cc ); merge ( v , start , mid , mid + 1 , end , cc ); } 3. \u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u56f0\u96be","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_1","text":"\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5c06\u539f\u6765\u7684\u6570\u7ec4\u4e00\u76f4\u4e8c\u5206\uff0c\u76f4\u5230\u6bcf\u7ec4\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c \u4e00\u4e2a\u5143\u7d20\u80af\u5b9a\u662f\u6709\u5e8f\u7684\uff0c \u5269\u4e0b\u7684\u5c31\u662f\u5982\u4f55\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0\u5f52\u5e76\u7684\u64cd\u4f5c\u3002 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c \u548c\u5408\u5e762\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c \u6216\u8005\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\u662f\u4e00\u6837\u7684\uff0c \u9700\u8981 O(n) \u7684\u590d\u6742\u5ea6\u3002 \u4e8c\u5206\u9700\u8981 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f nlogn. \u5f52\u5e76\u6392\u5e8f\u662f\u5206\u6cbb\u6cd5\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\u3002\u5f52\u5e76\u6392\u5e8f\u8981\u5904\u7406\u597d\u4e24\u4ef6\u4e8b\uff0c\u5212\u5206\u548c\u5408\u5e76\u3002\u5212\u5206\u5c31\u662f\u5c06\u5f85\u6392\u5e8f\u5e8f\u5217\u5212\u5206\u6210\u5b50\u5e8f\u5217\u3002\u5408\u5e76\u5c31\u662f\u5982\u4f55\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u3002 \u5f52\u5e76\u7684\u6392\u5e8f\u7684\u601d\u60f3\u662f\uff1a\u9996\u5148\u628a\u539f\u6765\u5e8f\u5217\u5212\u5206\u6210n\u4e2a\u5b50\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5b50\u5e8f\u5217\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u6709\u5e8f\u7684\u3002\u7136\u540e\u5206\u522b\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5408\u5e76\u4e4b\u540e\u7684\u5e8f\u5217\u4fdd\u6301\u6709\u5e8f\u3002\u8fd9\u6837\uff0c\u4e00\u8d9f\u5f52\u5e76\u4e4b\u540e\u5b50\u5e8f\u5217\u51cf\u5c11\u4e8c\u5206\u4e4b\u4e00\uff0c\u76f4\u5230\u6700\u540e\u5f52\u5e76\u4e3a\u4e00\u4e2a\u5e8f\u5217\u4e3a\u6b62\u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#1","text":"","title":"1. \u5b9e\u73b0\u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#11-c","text":"// \u4e24\u4e2a\u6307\u9488\u9010\u4e2a\u6bd4\u8f83\u5408\u5e76\u4e24\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4 void merge ( int * arr , int begin , int mid , int end ) { int i = begin , j = mid + 1 ; int count = end - start + 1 ; int index = 0 ; int * tmp_arr = ( int * ) malloc ( sizeof ( int ) * ( end - begin + 1 )); while ( index < count ) { if ( i <= mid && j <= end && arr [ i ] >= arr [ j ]) { tmp_arr [ index ++ ] = arr [ j ++ ]; } else if ( i <= mid && j <= end && arr [ i ] < arr [ j ]) { tmp_arr [ index ++ ] = arr [ i ++ ]; } } index = 0 ; for ( int i = begin ; i <= end ; i ++ ) { arr [ i ] = tmp_arr [ index ++ ]; } free ( tmp_arr ); return ; } void merge_sort ( int * arr , int begin , int end ) { if ( begin >= end ) { return ; } int mid = ( begin + end ) / 2 ; merge_sort ( arr , begin , mid ); merge_sort ( arr , mid + 1 , end ); merge ( arr , begin , mid , end ); return ; }","title":"1.1 C \u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#12-c","text":"void print ( vector < int > v ){ for ( auto a : v ){ cout << a << \" \" ; } cout << \" | \" ; } //\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4,\u8fd4\u56de\u65b0\u7684\u6709\u5e8f\u7684\u6570\u7ec4 vector < int > merge ( vector < int > & v1 , vector < int > & v2 ){ vector < int > re ; size_t i = 0 , j = 0 ; while ( i < v1 . size () && j < v2 . size ()){ if ( v1 [ i ] <= v2 [ j ]){ re . push_back ( v1 [ i ]); i ++ ; } else { re . push_back ( v2 [ j ]); j ++ ; } } //\u628a\u5269\u4e0b\u7684\u653e\u5728\u6700\u540e for ( size_t a = i ; a < v1 . size (); a ++ ){ re . push_back ( v1 [ a ]); } for ( size_t a = j ; a < v2 . size (); a ++ ){ re . push_back ( v2 [ a ]); } return re ; } //\u5f52\u5e76\u6392\u5e8f\u7684\u975e\u9012\u5f52\u5b9e\u73b0 vector < int > mergeSort2 ( vector < int > & v ){ vector < vector < int >> group ; // \u4e00\u5f00\u59cb\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u5355\u72ec\u4e3a\u4e00\u7ec4\uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u7684\u5408\u5e76\u76f8\u90bb\u7684\u7ec4\uff0c\u76f4\u5230\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u7ec4\u3002 for ( int i = 0 ; i < v . size (); i ++ ) { group . push_back ({ v [ i ]}); } int group_end = group . size (); // \u6307\u793a\u7ed3\u679c\uff0c\u6bcf\u6b21\u5f52\u5e76\uff0c\u90fd\u662f\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u7ec4\u6570\u636e\uff0c\u6240\u4ee5group\u7684\u5143\u7d20\u4e2a\u6570\u6bcf\u6b21\u90fd\u51cf\u5c11\u4e00\u534a\uff0c\u4e3a\u4e86\u51cf\u5c11\u5f00\u9500\uff0c //\u6211\u4eec\u6bcf\u6b21\u5408\u5e76\u4e4b\u540e\u7684\u6570\u7ec4\u8fd8\u662f\u653e\u5728\u539f\u6765\u7684\u6570\u7ec4\u4e2d\uff0c\u7528group\u6307\u793a\u6570\u7ec4\u7684\u7ed3\u675f\u3002 //\u5f53group_end = 1\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5230\u4e00\u8d77\u4e86 while ( group_end > 1 ){ for ( size_t b = 0 ; b < group_end ; b ++ ){ print ( group [ b ]); } cout << endl ; int j = 0 ; while ( j + 1 < group . size ()){ group [ j / 2 ] = merge ( group [ j ], group [ j + 1 ]); j = j + 2 ; } // \u4e2a\u6570\u662f\u5947\u6570\u7684\u60c5\u51b5 if ( j == group_end - 1 ){ group [ ceil ( group_end / 2.0 ) - 1 ] = group [ group_end - 1 ]; } group_end = ceil ( group_end / 2.0 ); } print ( group [ 0 ]); return group [ 0 ]; } int main () { vector < int > v = { 49 , 38 , 65 , 97 , 76 , 13 , 27 }; auto a = mergeSort2 ( v ); return 0 ; } \u8fd0\u884c\u7ed3\u679c: 49 | 38 | 65 | 97 | 76 | 13 | 27 | 38 49 | 65 97 | 13 76 | 27 | 38 49 65 97 | 13 27 76 | 13 27 38 49 65 76 97 | \u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0\u65b9\u6cd5 \uff1a // \u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > mergeSort ( vector < int > & v , int start , int end ){ if ( start >= end ){ return { v [ start ]}; } int mid = ( start + end ) / 2 ; auto v1 = mergeSort ( v , start , mid ); // \u9012\u5f52\u5de6\u534a\u90e8\u5206\u7684\u6392\u5e8f auto v2 = mergeSort ( v , mid + 1 , end ); // \u9012\u5f52\u53f3\u534a\u90e8\u5206\u7684\u6392\u5e8f return merge ( v1 , v2 ); }","title":"1.2 C++ \u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#2","text":"","title":"2. \u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#21","text":"\u5f52\u5e76\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\uff08\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u65f6\u5019\u662f\u7a33\u5b9a\u7684\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6765\u6c42\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u8fd9\u6837\u7684\u95ee\u9898\u3002 \u5f52\u5e76\u6392\u5e8f\u662f\u5c06\u6570\u5217a[l,h]\u5206\u6210\u4e24\u534aa[l,mid]\u548ca[mid+1,h]\u5206\u522b\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c\u7136\u540e\u518d\u5c06\u8fd9\u4e24\u534a\u5408\u5e76\u8d77\u6765\u3002 \u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff08\u8bbe l<=i<=mid\uff0cmid+1<=j<=h \uff09\uff0c\u5f53a[i]<=a[j]\u65f6\uff0c\u5e76\u4e0d\u4ea7\u751f\u9006\u5e8f\u6570\uff1b\u5f53a[i]>a[j]\u65f6\uff0c\u5728 \u524d\u534a\u90e8\u5206\u4e2d\u6bd4a[i]\u5927\u7684\u6570\u90fd\u6bd4a[j]\u5927\uff0c\u5c06a[j]\u653e\u5728a[i]\u524d\u9762\u7684\u8bdd\uff0c\u9006\u5e8f\u6570\u8981\u52a0\u4e0a mid-i+1 \u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5728\u5f52\u5e76 \u6392\u5e8f\u4e2d\u7684\u5408\u5e76\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u6570. //\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4,\u8fd4\u56de\u65b0\u7684\u6709\u5e8f\u7684\u6570\u7ec4 vector < int > merge ( vector < int > & v1 , vector < int > & v2 , int & cc ){ vector < int > re ; size_t i = 0 , j = 0 ; while ( i < v1 . size () && j < v2 . size ()){ if ( v1 [ i ] <= v2 [ j ]){ re . push_back ( v1 [ i ]); i ++ ; } else { re . push_back ( v2 [ j ]); cc = cc + v1 . size () - i ; //\u589e\u52a0\u7edf\u8ba1\u9006\u5e8f\u5bf9\u7684\u529f\u80fd\uff0c\u4ee5\u4f20\u9012\u5f15\u7528\u7684\u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\uff0c\u6ce8\u610f\u4f20\u5165\u7684\u53c2\u6570\u7684\u521d\u59cb\u503c\u8981\u4e3a0\uff1b j ++ ; } } //\u628a\u5269\u4e0b\u7684\u653e\u5728\u6700\u540e for ( size_t a = i ; a < v1 . size (); a ++ ){ re . push_back ( v1 [ a ]); } for ( size_t a = j ; a < v2 . size (); a ++ ){ re . push_back ( v2 [ a ]); } return re ; } //\u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0 vector < int > mergeSort ( vector < int > & v , int start , int end , int & cc ){ if ( start >= end ){ return { v [ start ]}; } int mid = ( start + end ) / 2 ; auto v1 = mergeSort ( v , start , mid , cc ); // \u9012\u5f52\u5de6\u534a\u90e8\u5206\u7684\u6392\u5e8f auto v2 = mergeSort ( v , mid + 1 , end , cc ); // \u9012\u5f52\u53f3\u534a\u90e8\u5206\u7684\u6392\u5e8f return merge ( v1 , v2 , cc ); } //\u4f7f\u7528\u7684\u4f7f\u7528\u5b9a\u4e49int cc = 0; \u4f20\u5165\u51fd\u6570\u5373\u53ef\u3002 \u7edf\u8ba1\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u4e0d\u8fc7\u5c31\u590d\u6742\u5ea6\u800c\u8a00\uff0c\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u5df2\u7ecf\u8db3\u591f\u4e86\u3002 \u53e6\u5916\u4e00\u79cd\u5f52\u5e76\u6392\u5e8f\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5c3d\u91cf\u5c11\u7684\u5360\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002 void merge ( vector < int > & v , int s1 , int e1 , int s2 , int e2 ){ vector < int > tmp ; int ss1 = s1 , ss2 = s2 ; while ( s1 <= e1 && s2 <= e2 ){ if ( v [ s1 ] < v [ s2 ]){ tmp . push_back ( v [ s1 ]); s1 ++ ; } if ( v [ s1 ] >= v [ s2 ]){ tmp . push_back ( v [ s2 ]); s2 ++ ; } } if ( s1 <= e1 ){ tmp . insert ( tmp . end (), v . begin () + s1 , v . begin () + e1 + 1 ); } if ( s2 <= e2 ){ tmp . insert ( tmp . end (), v . begin () + s2 , v . begin () + e2 + 1 ); } int t = 0 ; for ( int i = ss1 ; i <= e1 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } for ( int i = ss2 ; i <= e2 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } tmp . clear (); return ; } void mergeSort ( vector < int > & v , int start , int end ){ if ( start >= end ) return ; int mid = ( start + end ) / 2 ; mergeSort ( v , start , mid ); mergeSort ( v , mid + 1 , end ); merge ( v , start , mid , mid + 1 , end ); } \u7edf\u8ba1\u9006\u5e8f\u5bf9 \u5728\u5f52\u5e76\u6392\u5e8f\u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u662f\u7edf\u8ba1\u9006\u5e8f\u5bf9\u7684\u6700\u597d\u65f6\u673a\u3002\u5047\u8bbe\u4e24\u4e2a\u5f85\u5408\u5e76\u7684\u5e8f\u5217\u4e3a v1 , v2 , \u6709\u4e24\u4e2a\u6307\u9488 s1 , s2 \u5206\u522b\u6307\u5411 v1 , v2 ,\u5f53 v1[s1] > v2[s2] \u7684\u65f6\u5019\uff0c (v1.size() - s1) , \u4e5f\u5c31\u662f\u4ece s1 \u5230 v1 \u7684\u7ed3\u5c3e\u7684\u6240\u6709\u5143\u7d20\u90fd\u4f1a\u548c v[s2] \u7ec4\u6210\u9006\u5e8f\u5bf9\u3002 void merge ( vector < int > & v , int s1 , int e1 , int s2 , int e2 , int & cc ){ vector < int > tmp ; int ss1 = s1 , ss2 = s2 ; while ( s1 <= e1 && s2 <= e2 ){ if ( v [ s1 ] <= v [ s2 ]){ tmp . push_back ( v [ s1 ]); s1 ++ ; } if ( v [ s1 ] > v [ s2 ]){ tmp . push_back ( v [ s2 ]); s2 ++ ; cc += e1 - s1 + 1 ; // \u8bb0\u5f55\u9006\u5e8f\u5bf9\u7684\u6570\u91cf } } if ( s1 <= e1 ){ tmp . insert ( tmp . end (), v . begin () + s1 , v . begin () + e1 + 1 ); } if ( s2 <= e2 ){ tmp . insert ( tmp . end (), v . begin () + s2 , v . begin () + e2 + 1 ); } int t = 0 ; for ( int i = ss1 ; i <= e1 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } for ( int i = ss2 ; i <= e2 ; i ++ ){ v [ i ] = tmp [ t ]; t ++ ; } tmp . clear (); return ; } void mergeSort ( vector < int > & v , int start , int end , int & cc ){ if ( start >= end ) return ; int mid = ( start + end ) / 2 ; mergeSort ( v , start , mid , cc ); mergeSort ( v , mid + 1 , end , cc ); merge ( v , start , mid , mid + 1 , end , cc ); }","title":"2.1 \u7edf\u8ba1\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#3","text":"LeetCode\u9898\u76ee \u96be\u5ea6 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u56f0\u96be","title":"3. \u76f8\u5173\u9898\u76ee"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83/","text":"\u6392\u5e8f\u7b97\u6cd5\u6bd4\u8f83 \u00b6 \u6392\u5e8f\u7b97\u6cd5 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \u8f85\u52a9\u5185\u5b58 \u662f\u5426\u7a33\u5b9a \u76f4\u63a5\u63d2\u5165\u6392\u5e8f n^2 n^2 O(1) \u662f \u6298\u534a\u63d2\u5165\u6392\u5e8f n^2 n^2 O(1) \u662f \u5e0c\u5c14\u6392\u5e8f NA NA NA \u5426 \u5192\u6ce1\u6392\u5e8f n^2 n^2 O(1) \u662f \u7b80\u5355\u9009\u62e9\u6392\u5e8f n^2 n^2 O(1) \u5426 \u5feb\u901f\u6392\u5e8f nlogn n^2 O(1) \u5426 \u5806\u6392\u5e8f nlogn nlogn O(1) \u5426 \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f nlogn nlogn O(n) \u662f \u57fa\u6570\u6392\u5e8f d*(n + R) d * (n + R) O(R) \u662f \u6876\u6392\u5e8f NA NA NA NA","title":"\u6392\u5e8f\u7b97\u6cd5\u6bd4\u8f83"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83/#_1","text":"\u6392\u5e8f\u7b97\u6cd5 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \u8f85\u52a9\u5185\u5b58 \u662f\u5426\u7a33\u5b9a \u76f4\u63a5\u63d2\u5165\u6392\u5e8f n^2 n^2 O(1) \u662f \u6298\u534a\u63d2\u5165\u6392\u5e8f n^2 n^2 O(1) \u662f \u5e0c\u5c14\u6392\u5e8f NA NA NA \u5426 \u5192\u6ce1\u6392\u5e8f n^2 n^2 O(1) \u662f \u7b80\u5355\u9009\u62e9\u6392\u5e8f n^2 n^2 O(1) \u5426 \u5feb\u901f\u6392\u5e8f nlogn n^2 O(1) \u5426 \u5806\u6392\u5e8f nlogn nlogn O(1) \u5426 \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f nlogn nlogn O(n) \u662f \u57fa\u6570\u6392\u5e8f d*(n + R) d * (n + R) O(R) \u662f \u6876\u6392\u5e8f NA NA NA NA","title":"\u6392\u5e8f\u7b97\u6cd5\u6bd4\u8f83"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%A1%B6%E6%8E%92%E5%BA%8F/","text":"\u6876\u6392\u5e8f \u00b6 1. \u76f8\u5173\u9898\u76ee \u00b6 LeetCode\u9898\u76ee \u96be\u5ea6 128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 \u56f0\u96be","title":"\u6876\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%A1%B6%E6%8E%92%E5%BA%8F/#_1","text":"","title":"\u6876\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%A1%B6%E6%8E%92%E5%BA%8F/#1","text":"LeetCode\u9898\u76ee \u96be\u5ea6 128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 \u56f0\u96be","title":"1. \u76f8\u5173\u9898\u76ee"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/","text":"C++ \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6 \u00b6 C++\u6709\u5173\u7684\u6982\u5ff5\u548c\u5e38\u7528\u7684\u4ee3\u7801\u3002\u4e3b\u8981\u5305\u62ec\u5185\u5b58\u6a21\u578b(\u5806\u5185\u5b58\uff0c\u6808\u5185\u5b58)\uff0c\u865a\u51fd\u6570\uff0c\u865a\u8868\uff0cconst \u7684\u7528\u6cd5\uff0cinclude\uff0csizeof, \u6784\u9020\u51fd\u6570\u7b49\u5185\u5bb9\u3002 1. \u57fa\u7840\u6982\u5ff5 \u00b6 1.1 include (\u6587\u4ef6\u5305\u542b) \u00b6 include <> \u548c include \"\" \u6709\u4ec0\u4e48\u533a\u522b\uff1f <> \u548c \"\" \u7684\u533a\u522b\u662f\u7cfb\u7edf\u5728\u641c\u7d22\u5934\u6587\u4ef6\u7684\u65f6\u5019\u987a\u5e8f\u4e0d\u540c\uff0c <> \u5728\u641c\u7d22\u7684\u65f6\u5019\u9996\u5148\u4ece\u7cfb\u7edf\u76ee\u5f55\u5f00\u59cb\u641c\u7d22\uff0c\u7136\u540e\u641c\u7d22path\u73af\u5883\u53d8\u91cf\u4e0b\u9762\uff0c\u4e0d\u641c\u7d22\u5f53\u524d\u7684\u76ee\u5f55\uff1b \"\" \u9996\u5148\u641c\u7d22\u5f53\u524d\u76ee\u5f55\uff0c\u7136\u540e\u641c\u7d22\u7cfb\u7edf\u548cpath\u76ee\u5f55\uff0c\u6240\u4ee5\u81ea\u5df1\u5199\u7684\u6587\u4ef6\u7528\u53cc\u5f15\u53f7\uff0c\u7cfb\u7edf\u81ea\u5e26\u7684\u5e93\u7528 <> ,\u4e3b\u8981\u662f\u4e3a\u4e86\u641c\u7d22\u5feb\u3002 \u5982\u4f55\u907f\u514d\u5934\u6587\u4ef6\u88ab\u91cd\u590d\u5305\u542b \u6309\u7167\u5982\u4e0b\u7684\u683c\u5f0f\u4e66\u5199\u5934\u6587\u4ef6\uff1a #ifndef _HEADERNAME_H #define _HEADERNAME_H ... //(\u5934\u6587\u4ef6\u5185\u5bb9) #endif \u8fd9\u6837\u5934\u6587\u4ef6\u5728\u7b2c\u4e00\u6b21\u88ab\u5305\u542b\u7684\u65f6\u5019\uff0c_HEADERNAME_H \u6ca1\u6709\u88ab\u5b9a\u4e49\uff0c\u6267\u884c\u5b9a\u4e49_HEADERNAME_H\u7684\u52a8\u4f5c\u5e76\u5305\u542b\u5934\u6587\u4ef6\u7684\u5185\u5bb9\uff0c \u7b2c\u4e8c\u6b21\u5305\u542b\u7684\u65f6\u5019\uff0c_HEADERNAME_H \u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u5c31\u4e0d\u4f1a\u5305\u542b\u540e\u9762\u7684\u5185\u5bb9\uff1b _HEADERNAME_H \u662f\u81ea\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u5934\u6587\u4ef6\u8d77\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u540d\u79f0\uff0c\u8fd9\u6837\u624d\u80fd\u8fbe\u5230\u6548\u679c\u3002 1.2 \u5e38\u91cf(const) \u00b6 \u5e38\u91cf\u7684\u5b9a\u4e49\u65b9\u5f0f\u548c\u5f02\u540c\uff1f \u6709\u4e24\u79cd\u5b9a\u4e49\u65b9\u5f0f\uff1a define PI 3.14 \u548c const double PI = 3.14 . define \u5b9a\u4e49\u7684\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u4e4b\u524d\u7684\u9884\u5904\u7406\u9636\u6bb5\u6267\u884c\u7684\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u5c31\u662f\u628a\u4ee3\u7801\u4e2d\u6240\u6709\u51fa\u73b0 PI \u7684\u5730\u65b9\u66ff\u6362\u6210 3.14 ,\u4e0d\u6267\u884c\u8bed\u6cd5\u548c\u7c7b\u578b\u7684\u68c0\u67e5\u3002 const \u5b9a\u4e49\u7684\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u5904\u7406\u7684\uff0c\u6709\u7c7b\u578b\u7684\u68c0\u67e5\u548c\u8bed\u6cd5\u7684\u68c0\u67e5\uff0c\u66f4\u5b89\u5168\u3002 \u5982\u679c\u4f7f\u7528 define \u5b9a\u4e49\u590d\u6742\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u62ec\u53f7\u7684\u4f7f\u7528\u3002 \u9876\u5c42const\u548c\u5e95\u5c42const const \u65e2\u53ef\u4ee5\u4fee\u9970\u666e\u901a\u7684\u53d8\u91cf(\u6574\u5f62\uff0c\u5b57\u7b26\u4e32\u7b49)\u4e5f\u53ef\u4ee5\u4fee\u9970\u6307\u9488\uff0c\u5047\u8bbe\u4e00\u4e2a\u6307\u9488 p \u6307\u5411\u4e00\u4e2a\u53d8\u91cf a , \u5982\u679c\u6307\u9488\u662f\u5e38\u91cf( p \u4e2d\u5b58\u50a8\u7684\u5730\u5740\u4e0d\u80fd\u6539\u53d8) \u53eb\u505a\u9876\u5c42const, \u5982\u679c a \u662f\u5e38\u91cf( a \u4e2d\u5b58\u50a8\u7684\u6570\u503c\u4e0d\u80fd\u6539\u53d8)\uff0c\u53eb\u505a\u5e95\u5c42const. \u9876\u5c42const\u7684\u5b9a\u4e49\uff1a int *const p = &a; p \u7684\u503c\u4e0d\u80fd\u6539\u53d8\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7p\u6539\u53d8\u5b83\u6307\u5411\u7684a\u7684\u503c\uff1b \u5e95\u5c42const\u7684\u5b9a\u4e49\uff1a const int *p = &a; p \u7684\u503c\u53ef\u4ee5\u6539\u53d8\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7p\u6539\u53d8\u5b83\u6307\u5411\u7684a\u7684\u503c\u3002 \u65e2\u662f\u9876\u5c42\u4e5f\u662f\u5e95\u5c42\uff1a const int *const p = &a; p\u7684\u503c\u4e0d\u80fd\u6539\u53d8\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7p\u6539\u53d8a\u7684\u503c\uff1b \u5e38\u91cf\u8868\u8fbe\u5f0f \u503c\u4e0d\u4f1a\u6539\u53d8\u5e76\u4e14\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u53ef\u4ee5\u786e\u5b9a\u503c\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 constexpr \u58f0\u660e\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u4f1a\u81ea\u5df1\u5224\u65ad\u8868\u8fbe\u5f0f\u662f\u5426\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u4f1a\u62a5\u9519\u3002 constexpr int m = 20 + 90; constexpr \u8fd8\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u91cf\u51fd\u6570\uff0c\u8981\u4fdd\u8bc1\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u80fd\u5f97\u5230\u7ed3\u679c\u3002 constexpr int getIntSize(){return 4;} \u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u786e\u5b9a\u5176\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u8be5\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u521d\u59cb\u5316\u5e38\u91cf\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u52a0\u4e86constexpr\u7684\u51fd\u6570\u5c31\u4e00\u5b9a\u8fd4\u56de\u5e38\u91cf\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u975e\u5e38\u91cf\uff0c\u5982\u679c\u7528\u8fd4\u56de\u975e\u5e38\u91cf\u7684 constexpr \u51fd\u6570\u521d\u59cb\u5316\u5e38\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002 1.3 \u865a\u51fd\u6570 \u00b6 \u5bf9\u4e8e\u975e \u865a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff0c\u4f8b\u5982\u51fd\u6570\u7684\u91cd\u8f7d\uff0c\u901a\u8fc7\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u4e2a\u6570\u5c31\u53ef\u4ee5\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff1b \u5bf9\u4e8e\u865a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u76f4\u5230\u8fd0\u884c\u7684\u65f6\u5019\u624d\u80fd\u786e\u5b9a\u5e94\u8be5\u8c03\u7528\u54ea\u4e00\u4e2a\u51fd\u6570\u3002 \u5f53\u4f7f\u7528\u57fa\u7c7b\u7684\u5f15\u7528\u8c03\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u662f\u65e0\u6cd5\u786e\u5b9a\u5230\u5e95\u8c03\u7528\u54ea\u4e00\u4e2a\u51fd\u6570\u7684\uff0c\u9700\u8981\u7b49\u5230\u8fd0\u884c\u65f6\uff0c\u4e86\u89e3\u57fa\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u5177\u4f53\u7ed1\u5b9a\u5230\u4e86\u54ea\u4e00\u4e2a\u5b50\u7c7b\u4e0a\uff0c\u624d\u80fd\u786e\u5b9a\u4e0b\u6765\uff08\u8c03\u7528\u8be5\u5b50\u7c7b\u81ea\u5df1\u5b9e\u73b0\u7684\u51fd\u6570\u7248\u672c). \u865a\u51fd\u6570 \u4e0d\u4ee3\u8868 \u4e0d\u88ab\u5b9e\u73b0\uff0c \u7eaf\u865a\u51fd\u6570\u624d\u662f\u4e0d\u88ab\u5b9e\u73b0\u7684\u51fd\u6570\uff1b \u865a\u51fd\u6570\u7684\u76ee\u7684\u662f\u5141\u8bb8\u7528\u57fa\u7c7b\u7684\u6307\u9488\u8c03\u7528\u5b50\u7c7b\u7684\u8fd9\u4e2a\u51fd\u6570\uff1b\uff08\u5728\u57fa\u7c7b\u4e2d\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\uff0c\u5b50\u7c7b\u4e2d\u4e0d\u7528\u5e26virtual\uff09 \u7eaf\u865a\u51fd\u6570\u7684\u76ee\u7684\u662f\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u89c4\u5b9a\u6240\u6709\u7ee7\u627f\u8be5\u7c7b\u7684\u7684\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\uff1b \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u662f\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u5b9e\u4f8b\u5316\uff0c\u4e0d\u80fd\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u3002 \u865a\u6790\u6784\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5728\u9500\u6bc1\u5bf9\u8c61\u7684\u65f6\u5019\u9996\u5148\u9500\u6bc1\u57fa\u7c7b\u6307\u9488\u6307\u5411\u7684\u5b50\u7c7b\u5bf9\u8c61\u7684\u5b9e\u4f8b\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u5b50\u7c7b\u4e0d\u5b9a\u4e49\u7a0b\u865a\u6790\u6784\u51fd\u6570\uff0c\u5219\u4e0d\u4f1a\u6267\u884c\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u5bb9\u6613\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u3002 1.4 \u5806\u5185\u5b58\u548c\u6808\u5185\u5b58 \u00b6 http://www.cnblogs.com/yyxt/archive/2015/02/02/4268304.html char a[] = \"1234\"; \u662f\u5b58\u50a8\u5728\u6808\u4e0a\u7684\uff1b char *a = \"1234\"; \u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\uff1b \u6808\u5185\u5b58\u8bbf\u95ee\u7684\u901f\u5ea6\u5feb\u4e8e\u5806\u5185\u5b58\uff0c\u56e0\u4e3a\u5806\u5185\u5b58\u7684\u6307\u9488\u4e5f\u662f\u5b58\u653e\u5728\u6808\u4e0a\u7684\uff0c\u9700\u8981\u5148\u8bbf\u95ee\u6808\uff0c\u7136\u540e\u53bb\u5806\u4e0a\u8bbf\u95ee\uff0c\u5bf9\u7684\u5730\u5740\u4e5f\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u8fd9\u5bfc\u81f4\u8bbf\u95ee\u7684\u901f\u5ea6\u4e0b\u964d\u3002 new malloc new \u548c malloc \u5f00\u8f9f\u7684\u5185\u5b58\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\uff0c\u9700\u8981\u81ea\u5df1\u53bb\u91ca\u653e\u5185\u5b58\uff0c\u5426\u5219\u53ea\u6709\u5728\u7a0b\u5e8f\u7ed3\u675f\u4e4b\u540e\u624d\u6709\u53ef\u80fd\u88ab\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536\u3002 delete \u548c free \u662f\u7528\u6765\u91ca\u653e\u5185\u5b58\u7684\uff0cdelete \u6216\u8c03\u7528\u88ab\u91ca\u653e\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u5b89\u5168\u7684\u91ca\u653e\u5185\u5b58\uff0c free \u76f4\u63a5\u91ca\u653e\u3002 1.5 \u9759\u6001\u94fe\u63a5\u548c\u52a8\u6001\u8fde\u63a5 \u00b6 \u6e90\u6587\u4ef6\u2192\u9884\u7f16\u8bd1\u2192\u7f16\u8bd1\u2192\u6c47\u7f16\u2192 \u94fe\u63a5 \u2192\u53ef\u6267\u884c\u7a0b\u5e8f \u5982\u679c\u5728\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u5c06\u6e90\u6587\u4ef6\u4e2d\u7528\u5230\u7684\u5e93\u51fd\u6570\u4e0e\u6c47\u7f16\u751f\u6210\u7684\u6587\u4ef6\u5408\u5e76\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4e4b\u540e\u7684\u7a0b\u5e8f\u4ec5\u9700\u8981\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5373\u53ef\u8fd0\u884c\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u53eb\u505a\u9759\u6001\u94fe\u63a5\uff1b \u7f3a\u70b9\u662f\u6587\u4ef6\u53ef\u80fd\u592a\u5927\uff0c\u6bd5\u7adf\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u4e5f\u4f1a\u5305\u542b\u5f88\u591a\u7684\u5934\u6587\u4ef6\u3002 \u5982\u679c\u5728\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u4e0d\u628a\u6e90\u6587\u4ef6\u4e2d\u7528\u5230\u7684\u5e93\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u800c\u662f\u5355\u72ec\u7f16\u8bd1\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u7528\u5230\u7684\u5730\u65b9\u5728\u53bb\u5bfb\u627e\u8be5\u5e93\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a\u52a8\u6001\u94fe\u63a5\uff0c\u52a8\u6001\u8fde\u63a5\u53ef\u4ee5\u6709\u6548\u7684\u907f\u514d\u91cd\u590d\uff0c\u4f46\u662f\u53ef\u79fb\u690d\u6027\u5c31\u53d7\u5230\u9650\u5236\uff0c\u7ecf\u5e38\u9047\u5230\u7684\u8fd0\u884c\u67d0\u4e2a\u7a0b\u5e8f\u7684\u65f6\u5019XX\u627e\u4e0d\u5230\u7684\u9519\u8bef\u5c31\u662f\u52a8\u6001\u94fe\u63a5\u5e93\u9700\u8981\u7684\u6587\u4ef6\u4e22\u5931\u540e\u8005\u6ca1\u6709\u5728\u6b63\u786e\u7684\u8def\u5f84\u4e0a\u5bfc\u81f4\u7684\u3002 \u53c2\u8003\u6587\u7ae0\uff1a http://www.cnblogs.com/52php/p/5681711.html 2. \u57fa\u672c\u64cd\u4f5c \u00b6 2.1 \u5b57\u7b26\u4e32\u57fa\u672c\u64cd\u4f5c \u00b6 #include <string> // \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 s . push_back ( 'a' ); // \u672b\u5c3e\u8ffd\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32 s . append ( \"aaa\" ); // \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26 //\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\u4e32 //\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u5b57\u7b26 //\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u5b57\u7b26\u4e32 2.2 \u81ea\u5b9a\u4e49set\u7684\u6bd4\u8f83\u51fd\u6570 \u00b6 \u5b58\u5165set\u7684\u5143\u7d20\u9ed8\u8ba4\u662f\u6709\u5e8f\u7684\uff0c\u4f46\u662f\u9ed8\u8ba4\u7684\u6bd4\u8f83\u53ef\u80fd\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\uff0c\u8fd9\u4e2a\u65f6\u5019 \u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u6bd4\u8f83\u7684\u51fd\u6570\u3002 set\u7684\u6392\u5e8f\u662f\u4f7f\u7528\u7ea2\u9ed1\u6811\u7684\u7ed3\u6784\uff0c\u63d2\u5165\u5220\u9664\u548c\u53d6\u51fa\u6700\u5c0f\u7684 \u5143\u7d20\u90fd\u6bd4\u8f83\u9ad8\u6548\u3002 struct NumBit { int num ; NumBit ( int n ) : num ( n ) {} bool operator < ( const struct NumBit & right ) const //\u91cd\u8f7d<\u8fd0\u7b97\u7b26 { vector < int > vtmp1 ; int n = this -> num ; int b = 0 ; while ( n ){ b = n % 10 ; vtmp1 . insert ( vtmp1 . begin (), b ); n /= 10 ; } vector < int > vtmp2 ; int n2 = right . num ; int b2 = 0 ; while ( n2 ){ b2 = n2 % 10 ; vtmp2 . insert ( vtmp2 . begin (), b2 ); n2 /= 10 ; } int i = 0 ; int j = 0 ; int ilen = vtmp1 . size (); int jlen = vtmp2 . size (); while ( i < ilen || j < jlen ){ if ( i < ilen && j < jlen && vtmp1 [ i ] > vtmp2 [ j ]){ return false ; } else if ( i < ilen && j < jlen && vtmp1 [ i ] < vtmp2 [ j ]){ return true ; } else if ( i < ilen && j < jlen && vtmp1 [ i ] == vtmp2 [ j ]){ i ++ ; j ++ ; } else if ( i == ilen ){ if ( vtmp2 [ j ] > vtmp2 [ 0 ]) return true ; else if ( vtmp2 [ j ] < vtmp2 [ 0 ]) return false ; else if ( j == jlen ){ return false ; } else { j ++ ; } } else if ( j == jlen ){ if ( vtmp1 [ i ] > vtmp1 [ 0 ]) return false ; else if ( vtmp1 [ i ] < vtmp1 [ 0 ]) return true ; else if ( i == ilen ){ return true ; } else { i ++ ; } } else { break ; } } return false ; } }; \u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u4f5c\u4e3aset\u7684\u7c7b\u578b multiset < NumBit > s ; // 2.3 \u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411 \u00b6 \u6709\u7684\u7b97\u6cd5\u9898\u662f\u4ece\u63a5\u6536\u7684\u662f\u4ece\u63a7\u5236\u53f0\u7684\u8f93\u5165\uff0c\u800c\u4e14\u8f93\u5165\u8fd8\u5f88\u591a\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6bcf\u6b21\u8c03\u8bd5\u90fd\u4ece\u63a7\u5236\u53f0\u4e00\u6b21\u4e00\u6b21\u7684\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8981\u8f93\u5165\u7684\u6570\u636e\u4fdd\u5b58\u5728\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u8f93\u5165\u91cd\u5b9a\u5411 freopen \u628a\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230\u8be5\u6587\u4ef6\u3002\u4ee5\u8f93\u5165\u4e00\u4e2am\u884cn\u5217\u7684\u77e9\u9635\u6765\u8bf4\uff0c\u9996\u5148\u628a\u8f93\u5165\u6570\u636e\u5b58\u50a8\u5728\u6587\u672c\u6587\u4ef6 d:/A.in \u4e2d\u3002 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u7136\u540e\u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a freopen ( \"d: \\\\ A.in\" , \"r\" , stdin ); // \u8f93\u5165\u91cd\u5b9a\u5411 int m , n ; cin >> m >> n ; vector < vector < int >> v ( m , vector < int > ( n )); //\u8bfb\u53d6\u6570\u636e for ( int i = 0 ; i < m ; i ++ ){ for ( int j = 0 ; j < n ; j ++ ){ cin >> v [ i ][ j ]; } } //\u8f93\u51fa\u8bfb\u53d6\u7684\u6570\u636e\u95e8\u8fd9\u91cc\u8f93\u51fa\u5230\u63a7\u5236\u53f0 for ( int i = 0 ; i < m ; i ++ ){ for ( int j = 0 ; j < n ; j ++ ){ cout << v [ i ][ j ] << \" \" ; } cout << endl ; } \u540c\u6837\uff0c\u8f93\u51fa\u4e5f\u53ef\u4ee5\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u5f53\u6709\u5927\u91cf\u7684\u8f93\u51fa\u6216\u8005\u9700\u8981\u4fdd\u5b58\u8f93\u51fa\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u65b9\u6cd5\u3002\u53ea\u9700\u8981\u5728\u8f93\u51fa\u4e4b\u524d\u52a0\u4e0a\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8f93\u51fa\u5c31\u4f1a\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd0\u884c\u7a0b\u5e8f\uff0c\u63a7\u5236\u53f0\u5c31\u770b\u4e0d\u5230\u8f93\u51fa\u4e86\u3002 freopen ( \"d: \\\\ A.out\" , \"w\" , stdout ); 2.4 \u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa \u00b6 C++\u5b9a\u4e49\u4e86\u4e00\u4e9b\u64cd\u7eb5\u7b26\u6765\u63a7\u5236\u8f93\u51fa\u6d41\u7684\u72b6\u6001\uff0cendl\u5c31\u662f\u4e00\u4e2a\u5e38\u7528\u7684\u64cd\u7eb5\u7b26\u3002 \u63a7\u5236\u5e03\u5c14\u503c\u7684\u683c\u5f0f boolalpha \u4f7f\u5f97\u5e03\u5c14\u503c\u8f93\u51fa true or false ; noboolalpha \u4f7f\u5f97\u8f93\u51fa\u53d8\u56de\u9ed8\u8ba4\u7684 0 or 1 . cout << \"default: \" << true << \" \" << false << endl ; cout << boolalpha << \"boolalpha: \" << true << \" \" << false << noboolalpha << endl ; \u63a7\u5236\u6574\u6570\u7684\u8f93\u51fa\u8fdb\u5236 \u516b\u8fdb\u5236\uff1a oct \u5341\u516d\u8fdb\u5236\uff1a hex \u5341\u8fdb\u5236\uff1a dec \u63a7\u5236\u56fa\u5b9a\u5c0f\u6570\u70b9\u4f4d\u6570 #include <iomanip> cout . precision ( 6 ); cout . setf ( ios :: fixed ); 2.5 \u8bfb\u53d6\u6570\u91cf\u4e0d\u5b9a\u7684\u82e5\u5e72\u4e2a\u6574\u6570 \u00b6 #include <iostream> #include <vector> #include <sstream> using namespace std ; /** * \u8bfb\u53d6\u4e00\u884c\u6574\u6570\uff0c\u8fd4\u56de\u6570\u7ec4 * @param s * @return */ vector < int > getInt ( string & s ) { getline ( cin , s ); istringstream iss ( s ); vector < int > v ; int num ; while ( iss >> num ){ v . push_back ( num ); } return v ; } 2.6 \u6570\u636e\u7684\u8868\u793a\u8303\u56f4 \u00b6 \u4ee5\u4e0b\u5185\u5bb9\u6765\u6e90\u4e8e C++ Premier \u7b2c\u4e94\u7248 \u6574\u578b \u5305\u62ec\u6574\u6570\uff0c\u5b57\u7b26\u578b\uff0c\u548c\u5e03\u5c14\u7c7b\u578b\uff1b\u8fd9\u7c7b\u6570\u636e\u5728\u8ba1\u7b97\u673a\u7684\u5185\u90e8\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u4f4d0\u548c1\u76f4\u63a5\u4fdd\u5b58\u7684\u3002 // \u83b7\u5f97\u6574\u5f62\u7c7b\u578b\u7684\u8868\u793a\u8303\u56f4\uff0c climits cout << \"char: \" << CHAR_MIN << \" to \" << CHAR_MAX << endl ; cout << \"unsinged char: \" << 0 << \" to \" << UCHAR_MAX << endl ; cout << \"int8: \" << INT8_MIN << \" to \" << INT8_MAX << endl ; cout << \"unsinged int8: \" << 0 << \" to \" << UINT8_MAX << endl ; cout << \"int16: \" << INT16_MIN << \" to \" << INT16_MAX << endl ; cout << \"unsigned int16: \" << 0 << \" to \" << UINT16_MAX << endl ; cout << \"int32: \" << INT32_MIN << \" to \" << INT32_MAX << endl ; cout << \"unsigned int32: \" << 0 << \" to \" << UINT32_MAX << endl ; cout << \"int64: \" << INT64_MIN << \" to \" << INT64_MAX << endl ; cout << \"unsigned int64: \" << 0 << \" to \" << UINT64_MAX << endl ; cout << endl ; \u6d6e\u70b9\u578b \u5728\u8ba1\u7b97\u673a\u5185\u90e8\uff0c\u8fd9\u79cd\u7c7b\u578b\u662f\u628a\u4fdd\u5b58\u6570\u636e\u7684\u7a7a\u95f4\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5b58\u50a8\u5c0f\u6570\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5b58\u50a8\u6307\u6570\u90e8\u5206\uff0c\u6570\u7684\u5b9e\u9645\u5927\u5c0f\u662f\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u6765\u7684\u3002 \u6d6e\u70b9\u7c7b\u578b\u7531\u56db\u90e8\u5206\u7ec4\u6210\uff1a - sign : \u7b26\u53f7\uff0c\u6b63 \u6216 \u8d1f - base(radix) : \u57fa\u6570(2,8,10,16) - significand : \u5c3e\u6570 - exponent \uff1a \u6307\u6570 \u6d6e\u70b9\u7c7b\u578b\u7684\u5927\u5c0f\u53ef\u4ee5\u901a\u8fc7\u5305\u542b cfloat \u67e5\u770b\u3002 //\u83b7\u5f97\u6d6e\u70b9\u7c7b\u578b\u7684\u8868\u793a\u8303\u56f4 cfloat cout << \"float range: \" << FLT_MIN << \" to \" << FLT_MAX << endl ; cout << \"float significand: \" << FLT_MANT_DIG << endl ; cout << \"float exponent: \" << FLT_MIN_EXP << \" to \" << FLT_MAX_EXP << endl ; cout << \"double range: \" << DBL_MIN << \" to \" << DBL_MAX << endl ; cout << \"double significant: \" << DBL_MANT_DIG << endl ; cout << \"double exponent: \" << DBL_MIN_EXP << \" to \" << DBL_MAX_EXP << endl ; cout << \"long double range: \" << LDBL_MIN << \" to \" << LDBL_MAX << endl ; cout << \"long double significant: \" << LDBL_MANT_DIG << endl ; cout << \"long double exponent\" << LDBL_MIN_EXP << \" to \" << LDBL_MAX_EXP << endl ; cout << \"base: \" << FLT_RADIX << endl ; cout << endl ; \u83b7\u5f97\u7c7b\u578b\u6240\u5360\u7528\u7684\u5b57\u8282\u6570\u76ee // \u83b7\u5f97\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u5360\u7684\u5b57\u8282\u6570 cout << \"bool: \" << sizeof ( bool ) << endl ; cout << \"char: \" << sizeof ( char ) << endl ; cout << \"short: \" << sizeof ( short ) << endl ; cout << \"int: \" << sizeof ( int ) << endl ; cout << \"long: \" << sizeof ( long ) << endl ; cout << \"long long : \" << sizeof ( long long ) << endl ; cout << \"float: \" << sizeof ( float ) << endl ; cout << \"long double: \" << sizeof ( long double ) << endl ; cout << endl ; \u7c7b\u578b\u7684\u4f7f\u7528\u51c6\u5219 \u660e\u786e\u77e5\u9053\u4e0d\u53ef\u80fd\u4e3a\u8d1f\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u6570\u3002 \u6574\u6570\u8fd0\u7b97\u4e00\u822c\u4f7f\u7528 int , \u9700\u8981\u5927\u6570\u7684\u65f6\u5019\u8003\u8651 long long .\u9700\u8981\u5c0f\u6574\u6570\u7684\u65f6\u5019\u8003\u8651 signed char or unsigned char \u6d6e\u70b9\u8fd0\u7b97\u7528 double 2.7 \u6682\u505c\u548c\u8ba1\u65f6 \u00b6 \u6682\u505c \u5982\u679c\u60f3\u8981\u8ba9\u7a0b\u5e8f\u6682\u505c\u51e0\u79d2\u7ee7\u7eed\u6267\u884c\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a # include <windows.h> Sleep ( 2000 ); // \u6682\u505c2s, \u53c2\u6570\u7684\u5355\u4f4d\u662f\u6beb\u79d2 \u8ba1\u7b97\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u95f4 \u6709\u7684\u65f6\u5019\u53ef\u80fd\u8981\u770b\u67d0\u6bb5\u7a0b\u5e8f\u8fd0\u884c\u9700\u8981\u591a\u5c11\u65f6\u95f4\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a \u79d2\u7ea7\u8ba1\u65f6 #include <ctime> auto start_time = time ( nullptr ); //Sleep(3000); // ... \u4ee3\u7801\u5757 auto end_time = time ( nullptr ); cout << end_time - start_time << endl ; // \u8f93\u51fa\u7684\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u79d2\u6570\u3002 \u6beb\u79d2\u7ea7\u8ba1\u65f6 // \u83b7\u53d6\u6beb\u79d2\u7ea7\u522b\u7684\u65f6\u95f4\u5dee auto start_time = clock (); //Sleep(3000); auto end_time = clock (); cout << end_time - start_time << endl ; 3. \u6570\u636e\u7ed3\u6784 \u00b6 3.1 \u6808 \u00b6 3.2 \u961f\u5217 \u00b6 3.3 \u5806 \u00b6 \u5b9a\u4e49\u5c0f\u9876\u5806\uff1a priority_queue<ListNode*,vector<ListNode*>,bigger> minHeap; \u5806\u4e2d\u6dfb\u52a0\u5143\u7d20\uff1a minHeap.push() \u5806\u9876\u5143\u7d20: minHeap.top() //\u4e0d\u4f1a\u5220\u9664\u5806\u9876\u5143\u7d20 \u5806\u4e2d\u5220\u9664\u5143\u7d20\uff1a minHeap.pop() //\u53ea\u5220\u9664\uff0c\u4e0d\u8fd4\u56de \u5806\u662f\u5426\u4e3a\u7a7a\uff1a minHeap.empty() \u5efa\u7acb\u6700\u5927\u5806 #include <iostream> #include <vector> #include <queue> using namespace std ; // v \u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4 make_heap ( v . begin (), v . end ()); // \u6216\u8005\u4f7f\u7528 make_heap ( v . begin (), v . end (), less < int > ()); \u5efa\u7acb\u6700\u5c0f\u5806 make_heap ( v . begin (), v . end (), greater < int > ()); make_heap()\u65b9\u6cd5\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5176\u5b9e\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u7684\u5b9e\u4f8b\uff0c\u8868\u793a\u4f60\u600e\u6837\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\u3002\u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0 less \u65b9\u6cd5\u3002 // \u5927\u6839\u5806 bool mless ( const int & a , const int & b ){ return a <= b ; } make_heap ( v . begin (), v . end (), mless ); //\u5c0f\u6839\u5806 bool mgreater ( const int & a , const int & b ){ return a >= b ; } make_heap ( v . begin (), v . end (), mgreater ); \u5f53\u5806\u4e2d\u5b58\u653e\u7684\u6570\u636e\u4e0d\u662f\u7b80\u5355\u7684\u6570\u5b57\uff0c\u800c\u662f\u590d\u6742\u7684\u7ed3\u6784\u4f53\u6216\u8005\u7c7b\u6570\u636e\u7684\u65f6\u5019\uff0c\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5c31\u5341\u5206\u6709\u7528\u4e86\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4f9d\u636e\u7c7b\u4e2d\u54ea\u4e2a\u5b57\u6bb5\u751f\u6210\u5806\u3002 \u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff1a struct bigger { bool operator ()( ListNode * l1 , ListNode * l2 ) { return l1 -> val > l2 -> val ; } }; // \u5f39\u51fa\u5927\u6839\u5806\u7684\u9876\u90e8\u5143\u7d20\uff0c\u91cd\u6392\u5806\uff0c\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u9876\u90e8\u5143\u7d20\u6ca1\u6709\u5220\u9664\uff0c\u653e\u5728\u4e86\u6570\u7ec4\u7684\u6700\u540e pop_heap ( v . begin (), v . end (), less < int > ()) // \u5f39\u51fa\u5c0f\u6839\u5806\u7684\u9876\u90e8\u5143\u7d20 pop_heap ( v . begin (), v . end (), greater < int > ()) // \u628a[v.begin(), v.end()-2] \u4f5c\u4e3a\u5927\u6839\u5806\uff0cv.end()-1, \u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u63d2\u5165\u5143\u7d20\u63d2\u5165\u5230\u5927\u6839\u5806\u4e2d\uff0c\u91cd\u65b0\u8c03\u6574\u597d\u987a\u5e8f push_heap ( v . begin (), v . end (), less < int > ()) // \u63d2\u5165\u5c0f\u6839\u5806 push_heap ( v . begin (), v . end (), less < int > ()) \u4f18\u5148\u961f\u5217 priority_queue<Type, Container, Functional> \u5b9e\u73b0\u4e86\u4f18\u5148\u961f\u5217\u7684\u7ed3\u6784\u548c\u76f8\u5e94\u7684\u64cd\u4f5c\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u4ed6\u6765\u5b9e\u73b0\u5927\u6839\u5806\uff0c\u5c0f\u6839\u5806\uff0c\u4f18\u5148\u961f\u5217\u7b49\u6570\u636e\u7ed3\u6784\u3002 \u5927\u6839\u5806 priority_queue < int > q ; // \u6216\u8005\u4f7f\u7528\u5b8c\u6574\u7684\u58f0\u660e\u5f62\u5f0f priority_queue < int , vector < int > less < int > () > q ; // \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u5927\u9876\u5806 vector < int > v = { 5 , 4 , 10 , 14 , 7 , 9 , 3 , 2 , 8 , 30 }; for ( int i = 0 ; i < v . size (); ++ i ) { q . push ( v [ i ]); } // \u5f39\u51fa\u6700\u5927\u5143\u7d20 q . pop () \u5c0f\u6839\u5806 priority_queue < int , vector < int > , greater < int > > q ; // \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u5c0f\u9876\u5806 vector < int > v = { 5 , 4 , 10 , 14 , 7 , 9 , 3 , 2 , 8 , 30 }; for ( int i = 0 ; i < v . size (); ++ i ) { q . push ( v [ i ]); } // \u5f39\u51fa\u6700\u5927\u5143\u7d20 q . pop () 3.4 \u54c8\u5e0c\u8868 \u00b6 3.5 \u6392\u5e8f \u00b6","title":"C++ \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#c","text":"C++\u6709\u5173\u7684\u6982\u5ff5\u548c\u5e38\u7528\u7684\u4ee3\u7801\u3002\u4e3b\u8981\u5305\u62ec\u5185\u5b58\u6a21\u578b(\u5806\u5185\u5b58\uff0c\u6808\u5185\u5b58)\uff0c\u865a\u51fd\u6570\uff0c\u865a\u8868\uff0cconst \u7684\u7528\u6cd5\uff0cinclude\uff0csizeof, \u6784\u9020\u51fd\u6570\u7b49\u5185\u5bb9\u3002","title":"C++ \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#1","text":"","title":"1. \u57fa\u7840\u6982\u5ff5"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#11-include","text":"include <> \u548c include \"\" \u6709\u4ec0\u4e48\u533a\u522b\uff1f <> \u548c \"\" \u7684\u533a\u522b\u662f\u7cfb\u7edf\u5728\u641c\u7d22\u5934\u6587\u4ef6\u7684\u65f6\u5019\u987a\u5e8f\u4e0d\u540c\uff0c <> \u5728\u641c\u7d22\u7684\u65f6\u5019\u9996\u5148\u4ece\u7cfb\u7edf\u76ee\u5f55\u5f00\u59cb\u641c\u7d22\uff0c\u7136\u540e\u641c\u7d22path\u73af\u5883\u53d8\u91cf\u4e0b\u9762\uff0c\u4e0d\u641c\u7d22\u5f53\u524d\u7684\u76ee\u5f55\uff1b \"\" \u9996\u5148\u641c\u7d22\u5f53\u524d\u76ee\u5f55\uff0c\u7136\u540e\u641c\u7d22\u7cfb\u7edf\u548cpath\u76ee\u5f55\uff0c\u6240\u4ee5\u81ea\u5df1\u5199\u7684\u6587\u4ef6\u7528\u53cc\u5f15\u53f7\uff0c\u7cfb\u7edf\u81ea\u5e26\u7684\u5e93\u7528 <> ,\u4e3b\u8981\u662f\u4e3a\u4e86\u641c\u7d22\u5feb\u3002 \u5982\u4f55\u907f\u514d\u5934\u6587\u4ef6\u88ab\u91cd\u590d\u5305\u542b \u6309\u7167\u5982\u4e0b\u7684\u683c\u5f0f\u4e66\u5199\u5934\u6587\u4ef6\uff1a #ifndef _HEADERNAME_H #define _HEADERNAME_H ... //(\u5934\u6587\u4ef6\u5185\u5bb9) #endif \u8fd9\u6837\u5934\u6587\u4ef6\u5728\u7b2c\u4e00\u6b21\u88ab\u5305\u542b\u7684\u65f6\u5019\uff0c_HEADERNAME_H \u6ca1\u6709\u88ab\u5b9a\u4e49\uff0c\u6267\u884c\u5b9a\u4e49_HEADERNAME_H\u7684\u52a8\u4f5c\u5e76\u5305\u542b\u5934\u6587\u4ef6\u7684\u5185\u5bb9\uff0c \u7b2c\u4e8c\u6b21\u5305\u542b\u7684\u65f6\u5019\uff0c_HEADERNAME_H \u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u5c31\u4e0d\u4f1a\u5305\u542b\u540e\u9762\u7684\u5185\u5bb9\uff1b _HEADERNAME_H \u662f\u81ea\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u5934\u6587\u4ef6\u8d77\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u540d\u79f0\uff0c\u8fd9\u6837\u624d\u80fd\u8fbe\u5230\u6548\u679c\u3002","title":"1.1 include (\u6587\u4ef6\u5305\u542b)"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#12-const","text":"\u5e38\u91cf\u7684\u5b9a\u4e49\u65b9\u5f0f\u548c\u5f02\u540c\uff1f \u6709\u4e24\u79cd\u5b9a\u4e49\u65b9\u5f0f\uff1a define PI 3.14 \u548c const double PI = 3.14 . define \u5b9a\u4e49\u7684\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u4e4b\u524d\u7684\u9884\u5904\u7406\u9636\u6bb5\u6267\u884c\u7684\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u5c31\u662f\u628a\u4ee3\u7801\u4e2d\u6240\u6709\u51fa\u73b0 PI \u7684\u5730\u65b9\u66ff\u6362\u6210 3.14 ,\u4e0d\u6267\u884c\u8bed\u6cd5\u548c\u7c7b\u578b\u7684\u68c0\u67e5\u3002 const \u5b9a\u4e49\u7684\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u5904\u7406\u7684\uff0c\u6709\u7c7b\u578b\u7684\u68c0\u67e5\u548c\u8bed\u6cd5\u7684\u68c0\u67e5\uff0c\u66f4\u5b89\u5168\u3002 \u5982\u679c\u4f7f\u7528 define \u5b9a\u4e49\u590d\u6742\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u62ec\u53f7\u7684\u4f7f\u7528\u3002 \u9876\u5c42const\u548c\u5e95\u5c42const const \u65e2\u53ef\u4ee5\u4fee\u9970\u666e\u901a\u7684\u53d8\u91cf(\u6574\u5f62\uff0c\u5b57\u7b26\u4e32\u7b49)\u4e5f\u53ef\u4ee5\u4fee\u9970\u6307\u9488\uff0c\u5047\u8bbe\u4e00\u4e2a\u6307\u9488 p \u6307\u5411\u4e00\u4e2a\u53d8\u91cf a , \u5982\u679c\u6307\u9488\u662f\u5e38\u91cf( p \u4e2d\u5b58\u50a8\u7684\u5730\u5740\u4e0d\u80fd\u6539\u53d8) \u53eb\u505a\u9876\u5c42const, \u5982\u679c a \u662f\u5e38\u91cf( a \u4e2d\u5b58\u50a8\u7684\u6570\u503c\u4e0d\u80fd\u6539\u53d8)\uff0c\u53eb\u505a\u5e95\u5c42const. \u9876\u5c42const\u7684\u5b9a\u4e49\uff1a int *const p = &a; p \u7684\u503c\u4e0d\u80fd\u6539\u53d8\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7p\u6539\u53d8\u5b83\u6307\u5411\u7684a\u7684\u503c\uff1b \u5e95\u5c42const\u7684\u5b9a\u4e49\uff1a const int *p = &a; p \u7684\u503c\u53ef\u4ee5\u6539\u53d8\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7p\u6539\u53d8\u5b83\u6307\u5411\u7684a\u7684\u503c\u3002 \u65e2\u662f\u9876\u5c42\u4e5f\u662f\u5e95\u5c42\uff1a const int *const p = &a; p\u7684\u503c\u4e0d\u80fd\u6539\u53d8\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7p\u6539\u53d8a\u7684\u503c\uff1b \u5e38\u91cf\u8868\u8fbe\u5f0f \u503c\u4e0d\u4f1a\u6539\u53d8\u5e76\u4e14\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u53ef\u4ee5\u786e\u5b9a\u503c\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 constexpr \u58f0\u660e\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u4f1a\u81ea\u5df1\u5224\u65ad\u8868\u8fbe\u5f0f\u662f\u5426\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u4f1a\u62a5\u9519\u3002 constexpr int m = 20 + 90; constexpr \u8fd8\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u91cf\u51fd\u6570\uff0c\u8981\u4fdd\u8bc1\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u80fd\u5f97\u5230\u7ed3\u679c\u3002 constexpr int getIntSize(){return 4;} \u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u786e\u5b9a\u5176\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u8be5\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u521d\u59cb\u5316\u5e38\u91cf\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u52a0\u4e86constexpr\u7684\u51fd\u6570\u5c31\u4e00\u5b9a\u8fd4\u56de\u5e38\u91cf\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u975e\u5e38\u91cf\uff0c\u5982\u679c\u7528\u8fd4\u56de\u975e\u5e38\u91cf\u7684 constexpr \u51fd\u6570\u521d\u59cb\u5316\u5e38\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002","title":"1.2 \u5e38\u91cf(const)"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#13","text":"\u5bf9\u4e8e\u975e \u865a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff0c\u4f8b\u5982\u51fd\u6570\u7684\u91cd\u8f7d\uff0c\u901a\u8fc7\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u4e2a\u6570\u5c31\u53ef\u4ee5\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff1b \u5bf9\u4e8e\u865a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u76f4\u5230\u8fd0\u884c\u7684\u65f6\u5019\u624d\u80fd\u786e\u5b9a\u5e94\u8be5\u8c03\u7528\u54ea\u4e00\u4e2a\u51fd\u6570\u3002 \u5f53\u4f7f\u7528\u57fa\u7c7b\u7684\u5f15\u7528\u8c03\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u662f\u65e0\u6cd5\u786e\u5b9a\u5230\u5e95\u8c03\u7528\u54ea\u4e00\u4e2a\u51fd\u6570\u7684\uff0c\u9700\u8981\u7b49\u5230\u8fd0\u884c\u65f6\uff0c\u4e86\u89e3\u57fa\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u5177\u4f53\u7ed1\u5b9a\u5230\u4e86\u54ea\u4e00\u4e2a\u5b50\u7c7b\u4e0a\uff0c\u624d\u80fd\u786e\u5b9a\u4e0b\u6765\uff08\u8c03\u7528\u8be5\u5b50\u7c7b\u81ea\u5df1\u5b9e\u73b0\u7684\u51fd\u6570\u7248\u672c). \u865a\u51fd\u6570 \u4e0d\u4ee3\u8868 \u4e0d\u88ab\u5b9e\u73b0\uff0c \u7eaf\u865a\u51fd\u6570\u624d\u662f\u4e0d\u88ab\u5b9e\u73b0\u7684\u51fd\u6570\uff1b \u865a\u51fd\u6570\u7684\u76ee\u7684\u662f\u5141\u8bb8\u7528\u57fa\u7c7b\u7684\u6307\u9488\u8c03\u7528\u5b50\u7c7b\u7684\u8fd9\u4e2a\u51fd\u6570\uff1b\uff08\u5728\u57fa\u7c7b\u4e2d\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\uff0c\u5b50\u7c7b\u4e2d\u4e0d\u7528\u5e26virtual\uff09 \u7eaf\u865a\u51fd\u6570\u7684\u76ee\u7684\u662f\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u89c4\u5b9a\u6240\u6709\u7ee7\u627f\u8be5\u7c7b\u7684\u7684\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\uff1b \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u662f\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u5b9e\u4f8b\u5316\uff0c\u4e0d\u80fd\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u3002 \u865a\u6790\u6784\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5728\u9500\u6bc1\u5bf9\u8c61\u7684\u65f6\u5019\u9996\u5148\u9500\u6bc1\u57fa\u7c7b\u6307\u9488\u6307\u5411\u7684\u5b50\u7c7b\u5bf9\u8c61\u7684\u5b9e\u4f8b\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u5b50\u7c7b\u4e0d\u5b9a\u4e49\u7a0b\u865a\u6790\u6784\u51fd\u6570\uff0c\u5219\u4e0d\u4f1a\u6267\u884c\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u5bb9\u6613\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u3002","title":"1.3 \u865a\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#14","text":"http://www.cnblogs.com/yyxt/archive/2015/02/02/4268304.html char a[] = \"1234\"; \u662f\u5b58\u50a8\u5728\u6808\u4e0a\u7684\uff1b char *a = \"1234\"; \u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\uff1b \u6808\u5185\u5b58\u8bbf\u95ee\u7684\u901f\u5ea6\u5feb\u4e8e\u5806\u5185\u5b58\uff0c\u56e0\u4e3a\u5806\u5185\u5b58\u7684\u6307\u9488\u4e5f\u662f\u5b58\u653e\u5728\u6808\u4e0a\u7684\uff0c\u9700\u8981\u5148\u8bbf\u95ee\u6808\uff0c\u7136\u540e\u53bb\u5806\u4e0a\u8bbf\u95ee\uff0c\u5bf9\u7684\u5730\u5740\u4e5f\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u8fd9\u5bfc\u81f4\u8bbf\u95ee\u7684\u901f\u5ea6\u4e0b\u964d\u3002 new malloc new \u548c malloc \u5f00\u8f9f\u7684\u5185\u5b58\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\uff0c\u9700\u8981\u81ea\u5df1\u53bb\u91ca\u653e\u5185\u5b58\uff0c\u5426\u5219\u53ea\u6709\u5728\u7a0b\u5e8f\u7ed3\u675f\u4e4b\u540e\u624d\u6709\u53ef\u80fd\u88ab\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536\u3002 delete \u548c free \u662f\u7528\u6765\u91ca\u653e\u5185\u5b58\u7684\uff0cdelete \u6216\u8c03\u7528\u88ab\u91ca\u653e\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u5b89\u5168\u7684\u91ca\u653e\u5185\u5b58\uff0c free \u76f4\u63a5\u91ca\u653e\u3002","title":"1.4 \u5806\u5185\u5b58\u548c\u6808\u5185\u5b58"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#15","text":"\u6e90\u6587\u4ef6\u2192\u9884\u7f16\u8bd1\u2192\u7f16\u8bd1\u2192\u6c47\u7f16\u2192 \u94fe\u63a5 \u2192\u53ef\u6267\u884c\u7a0b\u5e8f \u5982\u679c\u5728\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u5c06\u6e90\u6587\u4ef6\u4e2d\u7528\u5230\u7684\u5e93\u51fd\u6570\u4e0e\u6c47\u7f16\u751f\u6210\u7684\u6587\u4ef6\u5408\u5e76\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4e4b\u540e\u7684\u7a0b\u5e8f\u4ec5\u9700\u8981\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5373\u53ef\u8fd0\u884c\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u53eb\u505a\u9759\u6001\u94fe\u63a5\uff1b \u7f3a\u70b9\u662f\u6587\u4ef6\u53ef\u80fd\u592a\u5927\uff0c\u6bd5\u7adf\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u4e5f\u4f1a\u5305\u542b\u5f88\u591a\u7684\u5934\u6587\u4ef6\u3002 \u5982\u679c\u5728\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u4e0d\u628a\u6e90\u6587\u4ef6\u4e2d\u7528\u5230\u7684\u5e93\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u800c\u662f\u5355\u72ec\u7f16\u8bd1\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u7528\u5230\u7684\u5730\u65b9\u5728\u53bb\u5bfb\u627e\u8be5\u5e93\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a\u52a8\u6001\u94fe\u63a5\uff0c\u52a8\u6001\u8fde\u63a5\u53ef\u4ee5\u6709\u6548\u7684\u907f\u514d\u91cd\u590d\uff0c\u4f46\u662f\u53ef\u79fb\u690d\u6027\u5c31\u53d7\u5230\u9650\u5236\uff0c\u7ecf\u5e38\u9047\u5230\u7684\u8fd0\u884c\u67d0\u4e2a\u7a0b\u5e8f\u7684\u65f6\u5019XX\u627e\u4e0d\u5230\u7684\u9519\u8bef\u5c31\u662f\u52a8\u6001\u94fe\u63a5\u5e93\u9700\u8981\u7684\u6587\u4ef6\u4e22\u5931\u540e\u8005\u6ca1\u6709\u5728\u6b63\u786e\u7684\u8def\u5f84\u4e0a\u5bfc\u81f4\u7684\u3002 \u53c2\u8003\u6587\u7ae0\uff1a http://www.cnblogs.com/52php/p/5681711.html","title":"1.5 \u9759\u6001\u94fe\u63a5\u548c\u52a8\u6001\u8fde\u63a5"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#2","text":"","title":"2. \u57fa\u672c\u64cd\u4f5c"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#21","text":"#include <string> // \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 s . push_back ( 'a' ); // \u672b\u5c3e\u8ffd\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32 s . append ( \"aaa\" ); // \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26 //\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\u4e32 //\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u5b57\u7b26 //\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u5b57\u7b26\u4e32","title":"2.1 \u5b57\u7b26\u4e32\u57fa\u672c\u64cd\u4f5c"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#22-set","text":"\u5b58\u5165set\u7684\u5143\u7d20\u9ed8\u8ba4\u662f\u6709\u5e8f\u7684\uff0c\u4f46\u662f\u9ed8\u8ba4\u7684\u6bd4\u8f83\u53ef\u80fd\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\uff0c\u8fd9\u4e2a\u65f6\u5019 \u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u6bd4\u8f83\u7684\u51fd\u6570\u3002 set\u7684\u6392\u5e8f\u662f\u4f7f\u7528\u7ea2\u9ed1\u6811\u7684\u7ed3\u6784\uff0c\u63d2\u5165\u5220\u9664\u548c\u53d6\u51fa\u6700\u5c0f\u7684 \u5143\u7d20\u90fd\u6bd4\u8f83\u9ad8\u6548\u3002 struct NumBit { int num ; NumBit ( int n ) : num ( n ) {} bool operator < ( const struct NumBit & right ) const //\u91cd\u8f7d<\u8fd0\u7b97\u7b26 { vector < int > vtmp1 ; int n = this -> num ; int b = 0 ; while ( n ){ b = n % 10 ; vtmp1 . insert ( vtmp1 . begin (), b ); n /= 10 ; } vector < int > vtmp2 ; int n2 = right . num ; int b2 = 0 ; while ( n2 ){ b2 = n2 % 10 ; vtmp2 . insert ( vtmp2 . begin (), b2 ); n2 /= 10 ; } int i = 0 ; int j = 0 ; int ilen = vtmp1 . size (); int jlen = vtmp2 . size (); while ( i < ilen || j < jlen ){ if ( i < ilen && j < jlen && vtmp1 [ i ] > vtmp2 [ j ]){ return false ; } else if ( i < ilen && j < jlen && vtmp1 [ i ] < vtmp2 [ j ]){ return true ; } else if ( i < ilen && j < jlen && vtmp1 [ i ] == vtmp2 [ j ]){ i ++ ; j ++ ; } else if ( i == ilen ){ if ( vtmp2 [ j ] > vtmp2 [ 0 ]) return true ; else if ( vtmp2 [ j ] < vtmp2 [ 0 ]) return false ; else if ( j == jlen ){ return false ; } else { j ++ ; } } else if ( j == jlen ){ if ( vtmp1 [ i ] > vtmp1 [ 0 ]) return false ; else if ( vtmp1 [ i ] < vtmp1 [ 0 ]) return true ; else if ( i == ilen ){ return true ; } else { i ++ ; } } else { break ; } } return false ; } }; \u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u4f5c\u4e3aset\u7684\u7c7b\u578b multiset < NumBit > s ; //","title":"2.2 \u81ea\u5b9a\u4e49set\u7684\u6bd4\u8f83\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#23","text":"\u6709\u7684\u7b97\u6cd5\u9898\u662f\u4ece\u63a5\u6536\u7684\u662f\u4ece\u63a7\u5236\u53f0\u7684\u8f93\u5165\uff0c\u800c\u4e14\u8f93\u5165\u8fd8\u5f88\u591a\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6bcf\u6b21\u8c03\u8bd5\u90fd\u4ece\u63a7\u5236\u53f0\u4e00\u6b21\u4e00\u6b21\u7684\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8981\u8f93\u5165\u7684\u6570\u636e\u4fdd\u5b58\u5728\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u8f93\u5165\u91cd\u5b9a\u5411 freopen \u628a\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230\u8be5\u6587\u4ef6\u3002\u4ee5\u8f93\u5165\u4e00\u4e2am\u884cn\u5217\u7684\u77e9\u9635\u6765\u8bf4\uff0c\u9996\u5148\u628a\u8f93\u5165\u6570\u636e\u5b58\u50a8\u5728\u6587\u672c\u6587\u4ef6 d:/A.in \u4e2d\u3002 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u7136\u540e\u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a freopen ( \"d: \\\\ A.in\" , \"r\" , stdin ); // \u8f93\u5165\u91cd\u5b9a\u5411 int m , n ; cin >> m >> n ; vector < vector < int >> v ( m , vector < int > ( n )); //\u8bfb\u53d6\u6570\u636e for ( int i = 0 ; i < m ; i ++ ){ for ( int j = 0 ; j < n ; j ++ ){ cin >> v [ i ][ j ]; } } //\u8f93\u51fa\u8bfb\u53d6\u7684\u6570\u636e\u95e8\u8fd9\u91cc\u8f93\u51fa\u5230\u63a7\u5236\u53f0 for ( int i = 0 ; i < m ; i ++ ){ for ( int j = 0 ; j < n ; j ++ ){ cout << v [ i ][ j ] << \" \" ; } cout << endl ; } \u540c\u6837\uff0c\u8f93\u51fa\u4e5f\u53ef\u4ee5\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u5f53\u6709\u5927\u91cf\u7684\u8f93\u51fa\u6216\u8005\u9700\u8981\u4fdd\u5b58\u8f93\u51fa\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u65b9\u6cd5\u3002\u53ea\u9700\u8981\u5728\u8f93\u51fa\u4e4b\u524d\u52a0\u4e0a\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8f93\u51fa\u5c31\u4f1a\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd0\u884c\u7a0b\u5e8f\uff0c\u63a7\u5236\u53f0\u5c31\u770b\u4e0d\u5230\u8f93\u51fa\u4e86\u3002 freopen ( \"d: \\\\ A.out\" , \"w\" , stdout );","title":"2.3 \u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#24","text":"C++\u5b9a\u4e49\u4e86\u4e00\u4e9b\u64cd\u7eb5\u7b26\u6765\u63a7\u5236\u8f93\u51fa\u6d41\u7684\u72b6\u6001\uff0cendl\u5c31\u662f\u4e00\u4e2a\u5e38\u7528\u7684\u64cd\u7eb5\u7b26\u3002 \u63a7\u5236\u5e03\u5c14\u503c\u7684\u683c\u5f0f boolalpha \u4f7f\u5f97\u5e03\u5c14\u503c\u8f93\u51fa true or false ; noboolalpha \u4f7f\u5f97\u8f93\u51fa\u53d8\u56de\u9ed8\u8ba4\u7684 0 or 1 . cout << \"default: \" << true << \" \" << false << endl ; cout << boolalpha << \"boolalpha: \" << true << \" \" << false << noboolalpha << endl ; \u63a7\u5236\u6574\u6570\u7684\u8f93\u51fa\u8fdb\u5236 \u516b\u8fdb\u5236\uff1a oct \u5341\u516d\u8fdb\u5236\uff1a hex \u5341\u8fdb\u5236\uff1a dec \u63a7\u5236\u56fa\u5b9a\u5c0f\u6570\u70b9\u4f4d\u6570 #include <iomanip> cout . precision ( 6 ); cout . setf ( ios :: fixed );","title":"2.4 \u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#25","text":"#include <iostream> #include <vector> #include <sstream> using namespace std ; /** * \u8bfb\u53d6\u4e00\u884c\u6574\u6570\uff0c\u8fd4\u56de\u6570\u7ec4 * @param s * @return */ vector < int > getInt ( string & s ) { getline ( cin , s ); istringstream iss ( s ); vector < int > v ; int num ; while ( iss >> num ){ v . push_back ( num ); } return v ; }","title":"2.5 \u8bfb\u53d6\u6570\u91cf\u4e0d\u5b9a\u7684\u82e5\u5e72\u4e2a\u6574\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#26","text":"\u4ee5\u4e0b\u5185\u5bb9\u6765\u6e90\u4e8e C++ Premier \u7b2c\u4e94\u7248 \u6574\u578b \u5305\u62ec\u6574\u6570\uff0c\u5b57\u7b26\u578b\uff0c\u548c\u5e03\u5c14\u7c7b\u578b\uff1b\u8fd9\u7c7b\u6570\u636e\u5728\u8ba1\u7b97\u673a\u7684\u5185\u90e8\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u4f4d0\u548c1\u76f4\u63a5\u4fdd\u5b58\u7684\u3002 // \u83b7\u5f97\u6574\u5f62\u7c7b\u578b\u7684\u8868\u793a\u8303\u56f4\uff0c climits cout << \"char: \" << CHAR_MIN << \" to \" << CHAR_MAX << endl ; cout << \"unsinged char: \" << 0 << \" to \" << UCHAR_MAX << endl ; cout << \"int8: \" << INT8_MIN << \" to \" << INT8_MAX << endl ; cout << \"unsinged int8: \" << 0 << \" to \" << UINT8_MAX << endl ; cout << \"int16: \" << INT16_MIN << \" to \" << INT16_MAX << endl ; cout << \"unsigned int16: \" << 0 << \" to \" << UINT16_MAX << endl ; cout << \"int32: \" << INT32_MIN << \" to \" << INT32_MAX << endl ; cout << \"unsigned int32: \" << 0 << \" to \" << UINT32_MAX << endl ; cout << \"int64: \" << INT64_MIN << \" to \" << INT64_MAX << endl ; cout << \"unsigned int64: \" << 0 << \" to \" << UINT64_MAX << endl ; cout << endl ; \u6d6e\u70b9\u578b \u5728\u8ba1\u7b97\u673a\u5185\u90e8\uff0c\u8fd9\u79cd\u7c7b\u578b\u662f\u628a\u4fdd\u5b58\u6570\u636e\u7684\u7a7a\u95f4\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5b58\u50a8\u5c0f\u6570\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5b58\u50a8\u6307\u6570\u90e8\u5206\uff0c\u6570\u7684\u5b9e\u9645\u5927\u5c0f\u662f\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u6765\u7684\u3002 \u6d6e\u70b9\u7c7b\u578b\u7531\u56db\u90e8\u5206\u7ec4\u6210\uff1a - sign : \u7b26\u53f7\uff0c\u6b63 \u6216 \u8d1f - base(radix) : \u57fa\u6570(2,8,10,16) - significand : \u5c3e\u6570 - exponent \uff1a \u6307\u6570 \u6d6e\u70b9\u7c7b\u578b\u7684\u5927\u5c0f\u53ef\u4ee5\u901a\u8fc7\u5305\u542b cfloat \u67e5\u770b\u3002 //\u83b7\u5f97\u6d6e\u70b9\u7c7b\u578b\u7684\u8868\u793a\u8303\u56f4 cfloat cout << \"float range: \" << FLT_MIN << \" to \" << FLT_MAX << endl ; cout << \"float significand: \" << FLT_MANT_DIG << endl ; cout << \"float exponent: \" << FLT_MIN_EXP << \" to \" << FLT_MAX_EXP << endl ; cout << \"double range: \" << DBL_MIN << \" to \" << DBL_MAX << endl ; cout << \"double significant: \" << DBL_MANT_DIG << endl ; cout << \"double exponent: \" << DBL_MIN_EXP << \" to \" << DBL_MAX_EXP << endl ; cout << \"long double range: \" << LDBL_MIN << \" to \" << LDBL_MAX << endl ; cout << \"long double significant: \" << LDBL_MANT_DIG << endl ; cout << \"long double exponent\" << LDBL_MIN_EXP << \" to \" << LDBL_MAX_EXP << endl ; cout << \"base: \" << FLT_RADIX << endl ; cout << endl ; \u83b7\u5f97\u7c7b\u578b\u6240\u5360\u7528\u7684\u5b57\u8282\u6570\u76ee // \u83b7\u5f97\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u5360\u7684\u5b57\u8282\u6570 cout << \"bool: \" << sizeof ( bool ) << endl ; cout << \"char: \" << sizeof ( char ) << endl ; cout << \"short: \" << sizeof ( short ) << endl ; cout << \"int: \" << sizeof ( int ) << endl ; cout << \"long: \" << sizeof ( long ) << endl ; cout << \"long long : \" << sizeof ( long long ) << endl ; cout << \"float: \" << sizeof ( float ) << endl ; cout << \"long double: \" << sizeof ( long double ) << endl ; cout << endl ; \u7c7b\u578b\u7684\u4f7f\u7528\u51c6\u5219 \u660e\u786e\u77e5\u9053\u4e0d\u53ef\u80fd\u4e3a\u8d1f\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u6570\u3002 \u6574\u6570\u8fd0\u7b97\u4e00\u822c\u4f7f\u7528 int , \u9700\u8981\u5927\u6570\u7684\u65f6\u5019\u8003\u8651 long long .\u9700\u8981\u5c0f\u6574\u6570\u7684\u65f6\u5019\u8003\u8651 signed char or unsigned char \u6d6e\u70b9\u8fd0\u7b97\u7528 double","title":"2.6 \u6570\u636e\u7684\u8868\u793a\u8303\u56f4"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#27","text":"\u6682\u505c \u5982\u679c\u60f3\u8981\u8ba9\u7a0b\u5e8f\u6682\u505c\u51e0\u79d2\u7ee7\u7eed\u6267\u884c\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a # include <windows.h> Sleep ( 2000 ); // \u6682\u505c2s, \u53c2\u6570\u7684\u5355\u4f4d\u662f\u6beb\u79d2 \u8ba1\u7b97\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u95f4 \u6709\u7684\u65f6\u5019\u53ef\u80fd\u8981\u770b\u67d0\u6bb5\u7a0b\u5e8f\u8fd0\u884c\u9700\u8981\u591a\u5c11\u65f6\u95f4\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a \u79d2\u7ea7\u8ba1\u65f6 #include <ctime> auto start_time = time ( nullptr ); //Sleep(3000); // ... \u4ee3\u7801\u5757 auto end_time = time ( nullptr ); cout << end_time - start_time << endl ; // \u8f93\u51fa\u7684\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u79d2\u6570\u3002 \u6beb\u79d2\u7ea7\u8ba1\u65f6 // \u83b7\u53d6\u6beb\u79d2\u7ea7\u522b\u7684\u65f6\u95f4\u5dee auto start_time = clock (); //Sleep(3000); auto end_time = clock (); cout << end_time - start_time << endl ;","title":"2.7 \u6682\u505c\u548c\u8ba1\u65f6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#3","text":"","title":"3. \u6570\u636e\u7ed3\u6784"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#31","text":"","title":"3.1 \u6808"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#32","text":"","title":"3.2 \u961f\u5217"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#33","text":"\u5b9a\u4e49\u5c0f\u9876\u5806\uff1a priority_queue<ListNode*,vector<ListNode*>,bigger> minHeap; \u5806\u4e2d\u6dfb\u52a0\u5143\u7d20\uff1a minHeap.push() \u5806\u9876\u5143\u7d20: minHeap.top() //\u4e0d\u4f1a\u5220\u9664\u5806\u9876\u5143\u7d20 \u5806\u4e2d\u5220\u9664\u5143\u7d20\uff1a minHeap.pop() //\u53ea\u5220\u9664\uff0c\u4e0d\u8fd4\u56de \u5806\u662f\u5426\u4e3a\u7a7a\uff1a minHeap.empty() \u5efa\u7acb\u6700\u5927\u5806 #include <iostream> #include <vector> #include <queue> using namespace std ; // v \u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4 make_heap ( v . begin (), v . end ()); // \u6216\u8005\u4f7f\u7528 make_heap ( v . begin (), v . end (), less < int > ()); \u5efa\u7acb\u6700\u5c0f\u5806 make_heap ( v . begin (), v . end (), greater < int > ()); make_heap()\u65b9\u6cd5\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5176\u5b9e\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u7684\u5b9e\u4f8b\uff0c\u8868\u793a\u4f60\u600e\u6837\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\u3002\u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0 less \u65b9\u6cd5\u3002 // \u5927\u6839\u5806 bool mless ( const int & a , const int & b ){ return a <= b ; } make_heap ( v . begin (), v . end (), mless ); //\u5c0f\u6839\u5806 bool mgreater ( const int & a , const int & b ){ return a >= b ; } make_heap ( v . begin (), v . end (), mgreater ); \u5f53\u5806\u4e2d\u5b58\u653e\u7684\u6570\u636e\u4e0d\u662f\u7b80\u5355\u7684\u6570\u5b57\uff0c\u800c\u662f\u590d\u6742\u7684\u7ed3\u6784\u4f53\u6216\u8005\u7c7b\u6570\u636e\u7684\u65f6\u5019\uff0c\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5c31\u5341\u5206\u6709\u7528\u4e86\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4f9d\u636e\u7c7b\u4e2d\u54ea\u4e2a\u5b57\u6bb5\u751f\u6210\u5806\u3002 \u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff1a struct bigger { bool operator ()( ListNode * l1 , ListNode * l2 ) { return l1 -> val > l2 -> val ; } }; // \u5f39\u51fa\u5927\u6839\u5806\u7684\u9876\u90e8\u5143\u7d20\uff0c\u91cd\u6392\u5806\uff0c\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u9876\u90e8\u5143\u7d20\u6ca1\u6709\u5220\u9664\uff0c\u653e\u5728\u4e86\u6570\u7ec4\u7684\u6700\u540e pop_heap ( v . begin (), v . end (), less < int > ()) // \u5f39\u51fa\u5c0f\u6839\u5806\u7684\u9876\u90e8\u5143\u7d20 pop_heap ( v . begin (), v . end (), greater < int > ()) // \u628a[v.begin(), v.end()-2] \u4f5c\u4e3a\u5927\u6839\u5806\uff0cv.end()-1, \u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u63d2\u5165\u5143\u7d20\u63d2\u5165\u5230\u5927\u6839\u5806\u4e2d\uff0c\u91cd\u65b0\u8c03\u6574\u597d\u987a\u5e8f push_heap ( v . begin (), v . end (), less < int > ()) // \u63d2\u5165\u5c0f\u6839\u5806 push_heap ( v . begin (), v . end (), less < int > ()) \u4f18\u5148\u961f\u5217 priority_queue<Type, Container, Functional> \u5b9e\u73b0\u4e86\u4f18\u5148\u961f\u5217\u7684\u7ed3\u6784\u548c\u76f8\u5e94\u7684\u64cd\u4f5c\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u4ed6\u6765\u5b9e\u73b0\u5927\u6839\u5806\uff0c\u5c0f\u6839\u5806\uff0c\u4f18\u5148\u961f\u5217\u7b49\u6570\u636e\u7ed3\u6784\u3002 \u5927\u6839\u5806 priority_queue < int > q ; // \u6216\u8005\u4f7f\u7528\u5b8c\u6574\u7684\u58f0\u660e\u5f62\u5f0f priority_queue < int , vector < int > less < int > () > q ; // \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u5927\u9876\u5806 vector < int > v = { 5 , 4 , 10 , 14 , 7 , 9 , 3 , 2 , 8 , 30 }; for ( int i = 0 ; i < v . size (); ++ i ) { q . push ( v [ i ]); } // \u5f39\u51fa\u6700\u5927\u5143\u7d20 q . pop () \u5c0f\u6839\u5806 priority_queue < int , vector < int > , greater < int > > q ; // \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u5c0f\u9876\u5806 vector < int > v = { 5 , 4 , 10 , 14 , 7 , 9 , 3 , 2 , 8 , 30 }; for ( int i = 0 ; i < v . size (); ++ i ) { q . push ( v [ i ]); } // \u5f39\u51fa\u6700\u5927\u5143\u7d20 q . pop ()","title":"3.3 \u5806"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#34","text":"","title":"3.4 \u54c8\u5e0c\u8868"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#35","text":"","title":"3.5 \u6392\u5e8f"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/","text":"C \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6 \u00b6 \u8bb0\u5f55\u7528C\u8bed\u8a00\u5237 leetcode \u9898\u5fc5\u987b\u8981\u4e86\u89e3\u7684C\u8bed\u8a00\u76f8\u5173\u529f\u80fd 1. include \u00b6 // bool, true, false #include <stdbool.h> // UT_hash_handle, HASH_XXX #include <uthash.h> 2. \u56db\u820d\u4e94\u5165 \u00b6 // \u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570 float number = 1.2768 ; number = ( int )( 100 * number + 0.5 ) / 100.0 printf ( \"%.2f\" , number ); 3. \u8f93\u5165\u8f93\u51fa \u00b6 3.1 \u8bfb\u53d6 \u00b6 char c = getchar(); : \u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 gets(string); : \u8bfb\u53d6\u4e00\u884c\u5b57\u7b26 \u8bfb\u53d6\u82e5\u5e72\u884c\uff1a \u5f53\u6ca1\u6709\u6307\u5b9a\u8f93\u5165\u662f\u591a\u5c11\u884c\uff0c \u4ee5\u7ed3\u675f\u5feb\u6377\u952e\u7ed3\u675f\u8f93\u5165\u7684\u65f6\u5019\uff0c\u6309\u7167\u4e0b\u9762\u65b9\u5f0f\u8bfb\u53d6 while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%d \" , n ); } 3.2 \u91cd\u5b9a\u5411 \u00b6 freopen ( \"input.txt\" , stdin ); // \u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 freopen ( \"output.txt\" , stdout ); // \u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 fclose ( stdin ); fclose ( stdout ); 4. \u6570\u636e\u7ed3\u6784 \u00b6 4.1 \u54c8\u5e0c\u8868(uthash) \u00b6 C \u8bed\u8a00\u7f3a\u4e4f\u5185\u7f6e\u6570\u636e\u7ed3\u6784\u7684\u652f\u6301\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u4f18\u79c0\u7684\u54c8\u5e0c\u5e93 uthash, \u5b83\u662f\u7528\u5b8f\u5b9e\u73b0\u7684\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u53ea\u9700\u8981\u5305\u542b\u8fd9\u4e2a\u6587\u4ef6\u5373\u53ef\u3002 4.1.1 \u6574\u6570\u4e3akey \u00b6 HASH_FIND_INT ( HashMap , & number , currMap ); // \u5224\u65ad\u662f\u5426\u5b58\u5728 if ( currMap == NULL ) { currMap = new_map_element ; HASH_ADD_INT ( HashMap , key_name , currMap ); // \u52a0\u5165\u54c8\u5e0c\u8868 } 4.1.2 \u5b57\u7b26\u4e32\u4e3akey \u00b6 HASH_FIND_STR ( HashMap , & number , currMap ); // \u5224\u65ad\u662f\u5426\u5b58\u5728 if ( currMap == NULL ) { currMap = new_map_element ; HASH_ADD_STR ( HashMap , key_name , currMap ); // \u52a0\u5165\u54c8\u5e0c\u8868 } 4.1.3 \u5355\u5b57\u7b26\u4e3akey \u00b6 HASH_FIND ( hh , HashMap , & c , sizeof ( char ), currMap ); // \u5224\u65ad\u662f\u5426\u5b58\u5728 if ( currMap == NULL ) { currMap = new_map_element ; HASH_ADD ( hh , HashMap , key_name , sizeof ( char ), currMap ); // \u52a0\u5165\u54c8\u5e0c\u8868 } 4.1.4 \u5b57\u7b26\u6307\u9488\u4e3akey \u00b6 4.1.5 \u5927\u5c0f \u00b6 size = HASH_COUNT ( HashMap ); 4.1.6 \u904d\u5386\u548c\u5220\u9664 \u00b6 HASH_ITER ( hh , HashMap , currMap , tmpMap ) { free ( currMao ); HASH_DEL ( currMap ); } 4.1.7 \u6392\u5e8f \u00b6 HASH_SORT ( HashMap , compare_function ); int compare_fucntion ( HashMap * a , HashMap * b ) { return a -> value - b -> value ; } 4.1.8 \u4e8c\u7ef4\u54c8\u5e0c\u8868 \u00b6 dic['A']['B'] = 1, \u5b9e\u73b0\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u627e\u5230\u3002 \u7528\u5355\u4e2a\u5b57\u6bcd\u8868\u793a\u884c\u53f7\u548c\u5217\u53f7\u7684\u4e8c\u7ef4\u77e9\u9635 typedef struct B { char col ; int value ; UT_hash_handle hh ; } B ; typedef struct A { char row ; B * cols ; UT_hash_handle hh ; } A ; A * matrix = NULL ; A * currMatrix = NULL ; B * cols = NULL ; B * currCols = NULL ; HASH_FIND ( hh , matrix , & c , sizeof ( char ), currMatrix ); if ( currMatrix == NULL ) { currMatrix -> row = row ; currMatrix -> cols = NULL ; HASH_ADD ( hh , matrix , row , currMatrix ); } else { HASH_FIND ( hh , currMatrix -> cols , & c , currCols ); if ( currCols == NULL ) { currCols = new_element ; HASH_ADD ( hh , currMatrix -> cols , col , currCols ); } }","title":"C \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#c","text":"\u8bb0\u5f55\u7528C\u8bed\u8a00\u5237 leetcode \u9898\u5fc5\u987b\u8981\u4e86\u89e3\u7684C\u8bed\u8a00\u76f8\u5173\u529f\u80fd","title":"C \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#1-include","text":"// bool, true, false #include <stdbool.h> // UT_hash_handle, HASH_XXX #include <uthash.h>","title":"1. include"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#2","text":"// \u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570 float number = 1.2768 ; number = ( int )( 100 * number + 0.5 ) / 100.0 printf ( \"%.2f\" , number );","title":"2. \u56db\u820d\u4e94\u5165"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#3","text":"","title":"3. \u8f93\u5165\u8f93\u51fa"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#31","text":"char c = getchar(); : \u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26 gets(string); : \u8bfb\u53d6\u4e00\u884c\u5b57\u7b26 \u8bfb\u53d6\u82e5\u5e72\u884c\uff1a \u5f53\u6ca1\u6709\u6307\u5b9a\u8f93\u5165\u662f\u591a\u5c11\u884c\uff0c \u4ee5\u7ed3\u675f\u5feb\u6377\u952e\u7ed3\u675f\u8f93\u5165\u7684\u65f6\u5019\uff0c\u6309\u7167\u4e0b\u9762\u65b9\u5f0f\u8bfb\u53d6 while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%d \" , n ); }","title":"3.1 \u8bfb\u53d6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#32","text":"freopen ( \"input.txt\" , stdin ); // \u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 freopen ( \"output.txt\" , stdout ); // \u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6 fclose ( stdin ); fclose ( stdout );","title":"3.2 \u91cd\u5b9a\u5411"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#4","text":"","title":"4. \u6570\u636e\u7ed3\u6784"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#41-uthash","text":"C \u8bed\u8a00\u7f3a\u4e4f\u5185\u7f6e\u6570\u636e\u7ed3\u6784\u7684\u652f\u6301\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u4f18\u79c0\u7684\u54c8\u5e0c\u5e93 uthash, \u5b83\u662f\u7528\u5b8f\u5b9e\u73b0\u7684\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u53ea\u9700\u8981\u5305\u542b\u8fd9\u4e2a\u6587\u4ef6\u5373\u53ef\u3002","title":"4.1 \u54c8\u5e0c\u8868(uthash)"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#411-key","text":"HASH_FIND_INT ( HashMap , & number , currMap ); // \u5224\u65ad\u662f\u5426\u5b58\u5728 if ( currMap == NULL ) { currMap = new_map_element ; HASH_ADD_INT ( HashMap , key_name , currMap ); // \u52a0\u5165\u54c8\u5e0c\u8868 }","title":"4.1.1 \u6574\u6570\u4e3akey"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#412-key","text":"HASH_FIND_STR ( HashMap , & number , currMap ); // \u5224\u65ad\u662f\u5426\u5b58\u5728 if ( currMap == NULL ) { currMap = new_map_element ; HASH_ADD_STR ( HashMap , key_name , currMap ); // \u52a0\u5165\u54c8\u5e0c\u8868 }","title":"4.1.2 \u5b57\u7b26\u4e32\u4e3akey"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#413-key","text":"HASH_FIND ( hh , HashMap , & c , sizeof ( char ), currMap ); // \u5224\u65ad\u662f\u5426\u5b58\u5728 if ( currMap == NULL ) { currMap = new_map_element ; HASH_ADD ( hh , HashMap , key_name , sizeof ( char ), currMap ); // \u52a0\u5165\u54c8\u5e0c\u8868 }","title":"4.1.3 \u5355\u5b57\u7b26\u4e3akey"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#414-key","text":"","title":"4.1.4 \u5b57\u7b26\u6307\u9488\u4e3akey"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#415","text":"size = HASH_COUNT ( HashMap );","title":"4.1.5 \u5927\u5c0f"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#416","text":"HASH_ITER ( hh , HashMap , currMap , tmpMap ) { free ( currMao ); HASH_DEL ( currMap ); }","title":"4.1.6 \u904d\u5386\u548c\u5220\u9664"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#417","text":"HASH_SORT ( HashMap , compare_function ); int compare_fucntion ( HashMap * a , HashMap * b ) { return a -> value - b -> value ; }","title":"4.1.7 \u6392\u5e8f"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#418","text":"dic['A']['B'] = 1, \u5b9e\u73b0\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u627e\u5230\u3002 \u7528\u5355\u4e2a\u5b57\u6bcd\u8868\u793a\u884c\u53f7\u548c\u5217\u53f7\u7684\u4e8c\u7ef4\u77e9\u9635 typedef struct B { char col ; int value ; UT_hash_handle hh ; } B ; typedef struct A { char row ; B * cols ; UT_hash_handle hh ; } A ; A * matrix = NULL ; A * currMatrix = NULL ; B * cols = NULL ; B * currCols = NULL ; HASH_FIND ( hh , matrix , & c , sizeof ( char ), currMatrix ); if ( currMatrix == NULL ) { currMatrix -> row = row ; currMatrix -> cols = NULL ; HASH_ADD ( hh , matrix , row , currMatrix ); } else { HASH_FIND ( hh , currMatrix -> cols , & c , currCols ); if ( currCols == NULL ) { currCols = new_element ; HASH_ADD ( hh , currMatrix -> cols , col , currCols ); } }","title":"4.1.8 \u4e8c\u7ef4\u54c8\u5e0c\u8868"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/","text":"leetcode \u5e38\u7528\u51fd\u6570 \u00b6 1. \u5224\u65adx\u662f\u5426\u662f\u7d20\u6570 \u00b6 // \u5224\u65adx\u662f\u5426\u662f\u7d20\u6570 bool isPrime ( int x ){ int xx = ( int ) sqrt (( double ) x ); for ( int i = 2 ; i <= xx ; i ++ ){ if ( x % i == 0 ) return false ; } return true ; } 2. \u627e\u51fan\u4ee5\u5185\uff0c2\uff0c3\uff0c5\u6574\u9664\u7684\u6240\u6709\u6570\u5b57 \u00b6 // \u8fd4\u56de\u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u7d22\u5f15 int minThree ( vector < int > v , int & index ){ if ( v . size () != 3 ) return - 1 ; int minValue = v [ 0 ]; index = 0 ; if ( minValue > v [ 1 ]){ minValue = v [ 1 ]; index = 1 ; } if ( minValue > v [ 2 ]){ minValue = v [ 2 ]; index = 2 ; } return minValue ; } // \u627e\u51fan\u4ee5\u5185\u6240\u6709\u80fd\u88ab2\uff0c3\uff0c5\u5176\u4e2d\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u6574\u9664\u7684\u6570\u5b57 vector < int > getNumbers ( int x ){ vector < int > results = { 1 }; vector < int > index235 = { 1 , 1 , 1 }; int index = 0 ; int minValue = minThree ({ 2 * index235 [ 0 ], 3 * index235 [ 1 ], 5 * index235 [ 2 ]}, index ); while ( minValue <= x ){ if ( minValue != results [ results . size () - 1 ]){ results . push_back ( minValue ); } index235 [ index ] ++ ; minValue = minThree ({ 2 * index235 [ 0 ], 3 * index235 [ 1 ], 5 * index235 [ 2 ]}, index ); } return results ; } 3. \u627e\u51fa\u7b2c1500\u4e2a\u53ea\u5305\u542b2\u62163\u62165\u4e3a\u56e0\u5b50\u7684\u6570\u5b57(\u4ece1\u5f00\u59cb) \u00b6 // \u8fd4\u56de\u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u7d22\u5f15 int minThree ( vector < int > v , int & index ){ if ( v . size () != 3 ) return - 1 ; int minValue = v [ 0 ]; index = 0 ; if ( minValue > v [ 1 ]){ minValue = v [ 1 ]; index = 1 ; } if ( minValue > v [ 2 ]){ minValue = v [ 2 ]; index = 2 ; } return minValue ; } // \u627e\u5230\u7b2cK\u4e2a\u6570\u5b57\uff08\u4ece1\u5f00\u59cb\uff09 int getNumbers ( int k ){ vector < int > index235 = { 1 , 1 , 1 }; int index = 0 ; int tmp = 1 ; int count = 1 ; int minValue = 1 ; while ( count < k ){ minValue = minThree ({ 2 * index235 [ 0 ], 3 * index235 [ 1 ], 5 * index235 [ 2 ]}, index ); if ( minValue != tmp ){ count ++ ; tmp = minValue ; } index235 [ index ] ++ ; } return minValue ; } 4. \u5c0f\u4e8e\u7b49\u4e8en\u7684\u6240\u6709\u7d20\u6570 \u00b6 // \u627e\u51fax\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570 vector < int > getPrimes ( int x ){ vector < int > Primes ; // \u521d\u59cb\u5316 0 - x \u90fd\u662f\u7d20\u6570 vector < bool > isPrime ( x + 1 , true ); isPrime [ 0 ] = false ; // 0 \u4e0d\u662f\u7d20\u6570 isPrime [ 1 ] = false ; // 1 \u4e0d\u662f\u7d20\u6570 for ( int i = 2 ; i <= x ; i ++ ){ // \u5982\u679ci\u662f\u7d20\u6570\uff0c\u628a\u6240\u6709i\u7684\u500d\u6570\u8bbe\u7f6e\u6210\u4e0d\u662f\u7d20\u6570 if ( isPrime [ i ]){ Primes . push_back ( i ); for ( int j = i * 2 ; j <= x ; j = j + i ){ isPrime [ j ] = false ; } } } return Primes ; } 5. \u6700\u5927\u516c\u7ea6\u6570 \u00b6 // \u6700\u5927\u516c\u7ea6\u6570 int getY ( int x , int y ){ int tmp = 0 ; while ( y ){ tmp = y ; y = x % y ; x = tmp ; } return x ; } 6. \u6574\u6570\u8f6c\u6362\u6210\u5b57\u7b26\u4e32 \u00b6 #include <sstream> #include <string> string Int_to_String ( int n ) { ostringstream stream ; stream << n ; //n\u4e3aint\u7c7b\u578b return stream . str (); } 7. \u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236\u4e4b\u540e\u6570\u4f4d\u4e4b\u548c \u00b6 // 10\u8fdb\u5236\u6570\u5b57 \u8f6c\u6362\u6210K\u8fdb\u5236\u4e4b\u540e\u5404\u4e2a\u6570\u4f4d\u7684\u6570\u5b57\u4e4b\u548c int getSum ( int n , int k ){ int sum = 0 ; while ( n ){ sum += n % k ; n = n / k ; } return sum ; } 8. \u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236 \u00b6 deque < int > Kin ( int n , int k ){ deque < int > result ; while ( n / k != 0 ){ result . push_front ( n % k ); n = n / k ; } result . push_front ( n ); return result ; } 9. K\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210\u5341\u8fdb\u5236 \u00b6 /** * \u5c06K\u8fdb\u5236\u7684deque\u8f6c\u6362\u621010\u8fdb\u5236 * @param v * @return */ int Kinverse ( deque < int > v , int k ){ int s = 0 ; int i = 0 ; while ( ! v . empty ()){ s += v . back () * std :: pow ( float ( k ), i ); ++ i ; } return s ; } 10. \u5feb\u901f\u5e42\u548c\u77e9\u9635\u5feb\u901f\u5e42 \u00b6 \u6574\u6570\u7684\u5feb\u901f\u5e42 \u6c42 a^b a^b \u4e00\u822c\u7684\u505a\u6cd5\u662f\u7528\u4e00\u4e2a\u5faa\u73af\uff0c\u5c06a\u7d2f\u4e58b\u6b21\uff0c\u8fd9\u6837\u9700\u8981\u505ab\u6b21\u4e58\u6cd5\u3002\u5feb\u901f\u5e42\u7684\u601d\u60f3\u662f\u5229\u7528\u4e86 a^(b1+b2) = a^b1 + a^b2 a^(b1+b2) = a^b1 + a^b2 \u7684\u601d\u60f3\uff0c\u628ab\u8868\u793a\u6210\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u62c6\u5206\u5f00\uff0c\u5206\u522b\u6c42\u5e42\uff0c\u518d\u6c42\u548c\u3002\u4e3e\u4f8b\u6765\u8bf4\uff1a \u5047\u8bbe\u8981\u6c42 5^{12} 5^{12} ,\u4f20\u7edf\u7684\u65b9\u6cd5\u662f12\u4e2a5\u76f8\u4e58\uff0c\u8981\u505a12\u6b21\u4e58\u6cd5\u8fd0\u7b97\u3002\u5feb\u901f\u5e42\u7684\u601d\u60f3\u662f\u628a12\u8868\u793a\u6210\u4e8c\u8fdb\u5236\uff0c 1100 = 2^2+2^3 2^2+2^3 , $$ 5^{12} = 5 {(2 2+2^3)} = 5 {2 2} * 5 {2 3} $$ 2\u7684\u5e42\u7684\u8ba1\u7b97\u53ef\u4ee5\u7531\u5341\u5206\u8fc5\u901f\u7684\u79fb\u4f4d\u8ba1\u7b97\u5f97\u5230\uff0c\u6240\u6709\u539f\u6765\u9700\u898112\u4e2a\u4e58\u6cd5\u8fd0\u7b97\u624d\u80fd\u89e3\u51b3\u7684\u8ba1\u7b97\u95ee\u9898\uff0c\u73b0\u5728\u7f16\u7a0b\u4e86\u53ea\u9700\u8981\u4e09\u6b21\u8ba1\u7b97\u8282\u80fd\u89e3\u51b3\u3002 int quickPow ( int a , int b ){ int ans = 1 , base = a ; while ( b != 0 ){ if ( b & 1 != 0 ) \u3000\u3000 ans *= base ; base *= base ; b >>= 1 ; \u3000 } return ans ; } \u6309\u7167\u4e0a\u9762\u7684\u4ee3\u7801\u8ba1\u7b97\u51fa\u6765\u7684\u5b9e\u9645\u4e0a\u662f 5^{2^2} * 5^{2^3} 5^{2^2} * 5^{2^3} , \u56e0\u4e3a\u6211\u4eec\u7528\u7684\u662f\u53f3\u79fb\uff0c\u6bcf\u6b21\u90fd\u53ea\u5224\u65ad\u672b\u5c3e\u7684\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u662f1\uff0c\u5c31\u4e58\u5165\u5f53\u524d\u7684\u7ed3\u679c\u3002\u6bcf\u6b21\u5faa\u73af\uff08\u4e0d\u7ba1\u662f\u4e0d\u662f1\uff09\uff0cbase\u90fd\u8981\u7ffb\u500d\uff0c\u56e0\u4e3a\u662f\u4e8c\u8fdb\u5236\uff0c\u6bcf\u79fb\u52a8\u4e00\u4f4d\u5c31\u610f\u5473\u7740\u4e58\u4ee52. \u53e6\u5916\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u662f\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u6570\u636e\u7684\u8303\u56f4\uff0c\u5982\u679cint\u7684\u8303\u56f4\u4e0d\u591f\uff0c\u53ef\u4ee5\u4f7f\u7528long long\u7c7b\u578b\u3002 \u77e9\u9635\u7684\u5feb\u901f\u5e42 \u77e9\u9635\u4e58\u6cd5 \u4e00\u4e2a m*n m*n \u7684\u77e9\u9635 \u4e58\u4ee5 \u4e00\u4e2a n*p n*p \u7684\u77e9\u9635\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a m*p m*p \u7684\u77e9\u9635\u3002\u77e9\u9635\u76f8\u4e58\u7684\u89c4\u5219\u662f\uff1a\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u4e58\u4ee5\u7b2c\u4e8c\u4e2a\u77e9\u9635\u7684\u6bcf\u4e00\u5217\uff0c\u5bf9\u5e94\u7684\u5143\u7d20\u76f8\u4e58\u518d\u76f8\u52a0\uff0c\u4f5c\u4e3a\u65b0\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002\u6734\u7d20\u7684\u77e9\u9635\u4e58\u6cd5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a typedef vector < vector < int >> matrix ; matrix MatricMul ( matrix A , matrix B ){ int m = A . size (); int n1 = A [ 0 ]. size (); int n2 = B . size (); int p = B [ 0 ]. size (); if ( n1 != n2 ) { cout << \"no cheng of the two matrix.\" << endl ; return matrix ();} int n = n1 = n2 ; matrix C ( m , vector < int > ( p , 0 )); for ( int i = 0 ; i < m ; i ++ ){ for ( int j = 0 ; j < p ; j ++ ){ for ( int k = 0 ; k < n ; k ++ ){ C [ i ][ j ] += A [ i ][ k ] * B [ k ][ j ]; } } } return C ; } int main (){ matrix A = {{ 1 , 2 , 3 },{ 4 , 5 , 6 }}; matrix B = {{ 1 , 2 },{ 3 , 4 },{ 5 , 6 }}; matrix C = MatricMul ( A , B ); return 0 ; } - A^n A^n \u5feb\u901f\u6c42\u77e9\u9635\u7684n\u6b21\u5e42\uff0c\u6ce8\u610f\u8fd9\u91ccA\u53ea\u80fd\u662f\u65b9\u9635 \u77e9\u9635\u7684\u5feb\u901f\u5e42\u548c\u6574\u6570\u7684\u5feb\u901f\u5e42\u662f\u4e00\u6837\u7684\uff0c\u5c31\u662f\u91cd\u8f7d\u4e00\u4e0b*\u8fd9\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4f7f\u5f97\u4e24\u4fa7\u662f\u77e9\u9635\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u7684\u662f\u77e9\u9635\u4e58\u6cd5\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u77e9\u9635\u4e58\u6cd5\u51fd\u6570 MatricMul : matrix quickPowMatrix ( matrix A , int n ){ matrix base = A ; // \u521d\u59cb\u5316\u6210\u5355\u4f4d\u77e9\u9635 int len = A . size (); matrix ans ( len , vector < int > ( len , 0 )); for ( int i = 0 ; i < A . size (); i ++ ){ ans [ i ][ i ] = 1 ; } while ( n != 0 ){ if ( n & 1 != 0 ) ans = MatricMul ( ans , base ); base = MatricMul ( base , base ); n >>= 1 ; } return ans ; } \u5feb\u901f\u5e42\u901a\u5e38\u7528\u6765\u6c42\u5f88\u5927\u7684\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019\u867d\u7136\u5c31\u7b97\u901f\u5ea6\u5728\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4\u5185\uff0c\u4f46\u662f\u6570\u636e\u7684\u8303\u56f4\u65e9\u5df2\u7ecf\u8d85\u8fc7\u4e86\u80fd\u591f\u8868\u793a\u8303\u56f4\uff0c\u901a\u5e38\u7684\u65b9\u6cd5\u5c31\u662fmod\u6bcf\u4e2a\u5927\u6570\uff0c\u5f97\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684\u7ed3\u679c\u3002 \u4e3a\u4e86\u51cf\u5c11\u8ba1\u7b97\u7684\u5f00\u9500\uff08\u8ba1\u7b97\u5c0f\u6570\u7684\u4e58\u6cd5\u8981\u6bd4\u8ba1\u7b97\u5927\u6570\u7684\u4e58\u6cd5\u5f00\u9500\u5c0f\uff09\uff0c\u901a\u5e38\u5229\u7528\u6a21\u8fd0\u7b97\u7684\u6cd5\u5219\uff1a (a+b) mod c = (a mod c + b mod c) mod c ; (a+b) mod c = (a mod c + b mod c) mod c ; (a*b) mod c = (a mod c * b mod c) mod c ; (a*b) mod c = (a mod c * b mod c) mod c ; \u4e0a\u9762\u7684\u4ee3\u7801\u6bcf\u4e00\u6b21\u8ba1\u7b97\u4e4b\u540e\u5c31\u53d6\u6a21\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u8303\u56f4\u4e0d\u6ea2\u51fa\uff0c\u8fd8\u80fd\u4fdd\u8bc1\u6bd4\u8f83\u5feb\u7684\u8ba1\u7b97\u901f\u5ea6\u3002 \u4f7f\u7528C++\u7684\u6a21\u7248\u6280\u672f\u7f16\u5199\u901a\u7528\u7684\u5feb\u901f\u5e42\u6a21\u7248 #include <bits/stdc++.h> using namespace std ; typedef long long LL ; template < class T , int MAXN , T MOD =- 1 > class Matrix { public : T m [ MAXN ][ MAXN ]; Matrix (){} // \u5982\u679cMOD\u4e0d\u662f-1\uff0c\u628anum\u53d6\u6a21 void init ( T num [ MAXN ][ MAXN ]){ for ( int i = 0 ; i < MAXN ; i ++ ) { for ( int j = 0 ; j < MAXN ; j ++ ) { m [ i ][ j ] = num [ i ][ j ]; if ( MOD !=- 1 ) m [ i ][ j ] %= MOD ; } } } //\u77e9\u9635\u4e58\u6cd5\u7684\u5b9e\u73b0 friend Matrix operator * ( const Matrix & m1 , const Matrix & m2 ) { int i , j , k ; Matrix ret ; memset ( ret . m , 0 , sizeof ( ret . m )); for ( i = 0 ; i < MAXN ; i ++ ) { for ( j = 0 ; j < MAXN ; j ++ ) if ( m1 . m [ i ][ j ] ) { for ( k = 0 ; k < MAXN ; k ++ ){ ret . m [ i ][ k ] += m1 . m [ i ][ j ] * m2 . m [ j ][ k ]; if ( MOD !=- 1 ) ret . m [ i ][ k ] %= MOD ; } } } return ret ; } // \u77e9\u9635\u52a0\u6cd5\u7684\u5b9e\u73b0 friend Matrix operator + ( const Matrix & m1 , const Matrix & m2 ) { int i , j ; Matrix ret ; for ( i = 0 ; i < MAXN ; i ++ ) { for ( j = 0 ; j < MAXN ; j ++ ) { ret . m [ i ][ j ] = 0 ; ret . m [ i ][ j ] = m1 . m [ i ][ j ] + m2 . m [ i ][ j ]; if ( MOD !=- 1 ) ret . m [ i ][ j ] %= MOD ; } } return ret ; } //\u77e9\u9635\u5feb\u901f\u5e42\u7684\u5b9e\u73b0 friend Matrix operator ^ ( const Matrix & _M , LL nx ){ Matrix ret , M ( _M ); //ret \u521d\u59cb\u5316\u6210\u5355\u4f4d\u77e9\u9635 for ( int i = 0 ; i < MAXN ; i ++ ){ for ( int j = 0 ; j < MAXN ; j ++ ){ if ( i == j ) ret . m [ i ][ j ] = 1 ; else ret . m [ i ][ j ] = 0 ; } } while ( nx ){ if ( nx & 1 ) ret = ret * M ; nx = nx >> 1 ; M = M * M ; } return ret ; } }; int main (){ int C [ 2 ][ 2 ] = {{ 1 , 2 },{ 3 , 4 }}; Matrix < int , 2 , 1000 > mm ; mm . init ( C ); auto add = mm + mm ; auto cheng = mm * mm ; auto mi = mm ^ 2 ; return 0 ; } 11. \u5305\u542b\u4e00\u5207\u7684\u5934\u6587\u4ef6 \u00b6 #include <bits/stdc++.h> \u4e00\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u6240\u6709\u5e38\u7528\u7684\u5934\u6587\u4ef6\uff0c\u4f60\u6240\u6709\u4f7f\u7528\u7684\u51fd\u6570\u4e0d\u518d\u9700\u8981\u5f15\u5165\u76f8\u5e94\u7684\u5934\u6587\u4ef6\u3002\u8be5\u5934\u6587\u4ef6\u5728ACM\u7ade\u8d5b\u4e2d\u7ecf\u5e38\u88ab\u4f7f\u7528\uff0c\u53ef\u4ee5\u51cf\u5c11\u4f60\u5305\u542b\u9700\u8981\u7684\u5934\u6587\u4ef6\u9700\u8981\u7684\u65f6\u95f4\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u5934\u6587\u4ef6\u5e76\u4e0d\u662f\u6807\u51c6\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u80fd\u6709\u7684\u7f16\u8bd1\u5668\u4e0d\u652f\u6301\u5b83\u3002 12. \u8fd4\u56de\u4e00\u4e2a\u65e0\u5e8f\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\u7684\u4e0b\u6807\uff0c\u4e0d\u52a8\u539f\u6765\u7684\u6570\u7ec4 \u00b6 \u4f8b\u5982 a = [3,5,2,4,1] , \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u5e94\u8be5\u662f[1,2,3,4,5], \u539f\u6765\u5728a\u4e2d\u7684\u4e0b\u6807\u662f[4,2,0,3,1],\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u8f93\u5165a\uff0c\u8fd4\u56de[4,2,0,3,1] #include <iostream> #include <algorithm> using namespace std ; vector < int > getOrderIndex ( vector < int > & a ){ vector < int > order ( a . size (), 0 ); for ( int i = 0 ; i < a . size (); i ++ ){ order [ i ] = i ; } sort ( order . begin (), order . begin () + a . size (), [ a ]( const int & x , const int & y ) -> bool { return a [ x ] < a [ y ];}); return order ; } order\u4e2d\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u3002 13. \u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \u00b6 /** * \u7528\u7a7a\u683c\u5206\u5272\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 * @param s * @return */ vector < int > string2int ( string & s ){ istringstream in ( s ); vector < int > v ; int num ; while ( in >> num ){ v . push_back ( num ); } return v ; } 14. \u8f93\u5165\u6302 \u00b6 \u5f53\u7eaf\u6570\u5b57\u7684\u8f93\u5165\u89c4\u6a21\u8d85\u8fc7 10^6 10^6 \u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u8f93\u5165\u6302\uff0c\u6bd4\u7cfb\u7edf\u81ea\u5e26\u7684cin\u5feb\u5f88\u591a\u3002 inline void q_read ( int & num ) { char ch ; int f = 1 ; while ( true ) { ch = getchar (); if ( ch == '-' ) f = - 1 ; if ( isdigit ( ch )) { num = ch - '0' ; break ; } } while ( ch = getchar (), isdigit ( ch )) num = num * 10 + ch - '0' ; num *= f ; } \u8fd8\u53ef\u4ee5\u5728\u5f00\u59cb\u7684\u65f6\u5019\u52a0\u5165 ios::sync_with_stdio(false); , \u5b83\u7684\u4f5c\u7528\u662f\u53bb\u6389cin\u989d\u5916\u7684\u68c0\u67e5\u5f00\u9500\uff0c\u8fbe\u5230\u548cscanf\u76f8\u4f3c\u7684\u8f93\u5165\u6548\u7387\uff1b","title":"leetcode \u5e38\u7528\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#leetcode","text":"","title":"leetcode \u5e38\u7528\u51fd\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#1-x","text":"// \u5224\u65adx\u662f\u5426\u662f\u7d20\u6570 bool isPrime ( int x ){ int xx = ( int ) sqrt (( double ) x ); for ( int i = 2 ; i <= xx ; i ++ ){ if ( x % i == 0 ) return false ; } return true ; }","title":"1. \u5224\u65adx\u662f\u5426\u662f\u7d20\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#2-n235","text":"// \u8fd4\u56de\u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u7d22\u5f15 int minThree ( vector < int > v , int & index ){ if ( v . size () != 3 ) return - 1 ; int minValue = v [ 0 ]; index = 0 ; if ( minValue > v [ 1 ]){ minValue = v [ 1 ]; index = 1 ; } if ( minValue > v [ 2 ]){ minValue = v [ 2 ]; index = 2 ; } return minValue ; } // \u627e\u51fan\u4ee5\u5185\u6240\u6709\u80fd\u88ab2\uff0c3\uff0c5\u5176\u4e2d\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u6574\u9664\u7684\u6570\u5b57 vector < int > getNumbers ( int x ){ vector < int > results = { 1 }; vector < int > index235 = { 1 , 1 , 1 }; int index = 0 ; int minValue = minThree ({ 2 * index235 [ 0 ], 3 * index235 [ 1 ], 5 * index235 [ 2 ]}, index ); while ( minValue <= x ){ if ( minValue != results [ results . size () - 1 ]){ results . push_back ( minValue ); } index235 [ index ] ++ ; minValue = minThree ({ 2 * index235 [ 0 ], 3 * index235 [ 1 ], 5 * index235 [ 2 ]}, index ); } return results ; }","title":"2. \u627e\u51fan\u4ee5\u5185\uff0c2\uff0c3\uff0c5\u6574\u9664\u7684\u6240\u6709\u6570\u5b57"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#3-15002351","text":"// \u8fd4\u56de\u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u7d22\u5f15 int minThree ( vector < int > v , int & index ){ if ( v . size () != 3 ) return - 1 ; int minValue = v [ 0 ]; index = 0 ; if ( minValue > v [ 1 ]){ minValue = v [ 1 ]; index = 1 ; } if ( minValue > v [ 2 ]){ minValue = v [ 2 ]; index = 2 ; } return minValue ; } // \u627e\u5230\u7b2cK\u4e2a\u6570\u5b57\uff08\u4ece1\u5f00\u59cb\uff09 int getNumbers ( int k ){ vector < int > index235 = { 1 , 1 , 1 }; int index = 0 ; int tmp = 1 ; int count = 1 ; int minValue = 1 ; while ( count < k ){ minValue = minThree ({ 2 * index235 [ 0 ], 3 * index235 [ 1 ], 5 * index235 [ 2 ]}, index ); if ( minValue != tmp ){ count ++ ; tmp = minValue ; } index235 [ index ] ++ ; } return minValue ; }","title":"3. \u627e\u51fa\u7b2c1500\u4e2a\u53ea\u5305\u542b2\u62163\u62165\u4e3a\u56e0\u5b50\u7684\u6570\u5b57(\u4ece1\u5f00\u59cb)"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#4-n","text":"// \u627e\u51fax\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570 vector < int > getPrimes ( int x ){ vector < int > Primes ; // \u521d\u59cb\u5316 0 - x \u90fd\u662f\u7d20\u6570 vector < bool > isPrime ( x + 1 , true ); isPrime [ 0 ] = false ; // 0 \u4e0d\u662f\u7d20\u6570 isPrime [ 1 ] = false ; // 1 \u4e0d\u662f\u7d20\u6570 for ( int i = 2 ; i <= x ; i ++ ){ // \u5982\u679ci\u662f\u7d20\u6570\uff0c\u628a\u6240\u6709i\u7684\u500d\u6570\u8bbe\u7f6e\u6210\u4e0d\u662f\u7d20\u6570 if ( isPrime [ i ]){ Primes . push_back ( i ); for ( int j = i * 2 ; j <= x ; j = j + i ){ isPrime [ j ] = false ; } } } return Primes ; }","title":"4. \u5c0f\u4e8e\u7b49\u4e8en\u7684\u6240\u6709\u7d20\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#5","text":"// \u6700\u5927\u516c\u7ea6\u6570 int getY ( int x , int y ){ int tmp = 0 ; while ( y ){ tmp = y ; y = x % y ; x = tmp ; } return x ; }","title":"5. \u6700\u5927\u516c\u7ea6\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#6","text":"#include <sstream> #include <string> string Int_to_String ( int n ) { ostringstream stream ; stream << n ; //n\u4e3aint\u7c7b\u578b return stream . str (); }","title":"6. \u6574\u6570\u8f6c\u6362\u6210\u5b57\u7b26\u4e32"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#7-k","text":"// 10\u8fdb\u5236\u6570\u5b57 \u8f6c\u6362\u6210K\u8fdb\u5236\u4e4b\u540e\u5404\u4e2a\u6570\u4f4d\u7684\u6570\u5b57\u4e4b\u548c int getSum ( int n , int k ){ int sum = 0 ; while ( n ){ sum += n % k ; n = n / k ; } return sum ; }","title":"7. \u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236\u4e4b\u540e\u6570\u4f4d\u4e4b\u548c"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#8-k","text":"deque < int > Kin ( int n , int k ){ deque < int > result ; while ( n / k != 0 ){ result . push_front ( n % k ); n = n / k ; } result . push_front ( n ); return result ; }","title":"8. \u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#9-k","text":"/** * \u5c06K\u8fdb\u5236\u7684deque\u8f6c\u6362\u621010\u8fdb\u5236 * @param v * @return */ int Kinverse ( deque < int > v , int k ){ int s = 0 ; int i = 0 ; while ( ! v . empty ()){ s += v . back () * std :: pow ( float ( k ), i ); ++ i ; } return s ; }","title":"9. K\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210\u5341\u8fdb\u5236"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#10","text":"\u6574\u6570\u7684\u5feb\u901f\u5e42 \u6c42 a^b a^b \u4e00\u822c\u7684\u505a\u6cd5\u662f\u7528\u4e00\u4e2a\u5faa\u73af\uff0c\u5c06a\u7d2f\u4e58b\u6b21\uff0c\u8fd9\u6837\u9700\u8981\u505ab\u6b21\u4e58\u6cd5\u3002\u5feb\u901f\u5e42\u7684\u601d\u60f3\u662f\u5229\u7528\u4e86 a^(b1+b2) = a^b1 + a^b2 a^(b1+b2) = a^b1 + a^b2 \u7684\u601d\u60f3\uff0c\u628ab\u8868\u793a\u6210\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u62c6\u5206\u5f00\uff0c\u5206\u522b\u6c42\u5e42\uff0c\u518d\u6c42\u548c\u3002\u4e3e\u4f8b\u6765\u8bf4\uff1a \u5047\u8bbe\u8981\u6c42 5^{12} 5^{12} ,\u4f20\u7edf\u7684\u65b9\u6cd5\u662f12\u4e2a5\u76f8\u4e58\uff0c\u8981\u505a12\u6b21\u4e58\u6cd5\u8fd0\u7b97\u3002\u5feb\u901f\u5e42\u7684\u601d\u60f3\u662f\u628a12\u8868\u793a\u6210\u4e8c\u8fdb\u5236\uff0c 1100 = 2^2+2^3 2^2+2^3 , $$ 5^{12} = 5 {(2 2+2^3)} = 5 {2 2} * 5 {2 3} $$ 2\u7684\u5e42\u7684\u8ba1\u7b97\u53ef\u4ee5\u7531\u5341\u5206\u8fc5\u901f\u7684\u79fb\u4f4d\u8ba1\u7b97\u5f97\u5230\uff0c\u6240\u6709\u539f\u6765\u9700\u898112\u4e2a\u4e58\u6cd5\u8fd0\u7b97\u624d\u80fd\u89e3\u51b3\u7684\u8ba1\u7b97\u95ee\u9898\uff0c\u73b0\u5728\u7f16\u7a0b\u4e86\u53ea\u9700\u8981\u4e09\u6b21\u8ba1\u7b97\u8282\u80fd\u89e3\u51b3\u3002 int quickPow ( int a , int b ){ int ans = 1 , base = a ; while ( b != 0 ){ if ( b & 1 != 0 ) \u3000\u3000 ans *= base ; base *= base ; b >>= 1 ; \u3000 } return ans ; } \u6309\u7167\u4e0a\u9762\u7684\u4ee3\u7801\u8ba1\u7b97\u51fa\u6765\u7684\u5b9e\u9645\u4e0a\u662f 5^{2^2} * 5^{2^3} 5^{2^2} * 5^{2^3} , \u56e0\u4e3a\u6211\u4eec\u7528\u7684\u662f\u53f3\u79fb\uff0c\u6bcf\u6b21\u90fd\u53ea\u5224\u65ad\u672b\u5c3e\u7684\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u662f1\uff0c\u5c31\u4e58\u5165\u5f53\u524d\u7684\u7ed3\u679c\u3002\u6bcf\u6b21\u5faa\u73af\uff08\u4e0d\u7ba1\u662f\u4e0d\u662f1\uff09\uff0cbase\u90fd\u8981\u7ffb\u500d\uff0c\u56e0\u4e3a\u662f\u4e8c\u8fdb\u5236\uff0c\u6bcf\u79fb\u52a8\u4e00\u4f4d\u5c31\u610f\u5473\u7740\u4e58\u4ee52. \u53e6\u5916\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u662f\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u6570\u636e\u7684\u8303\u56f4\uff0c\u5982\u679cint\u7684\u8303\u56f4\u4e0d\u591f\uff0c\u53ef\u4ee5\u4f7f\u7528long long\u7c7b\u578b\u3002 \u77e9\u9635\u7684\u5feb\u901f\u5e42 \u77e9\u9635\u4e58\u6cd5 \u4e00\u4e2a m*n m*n \u7684\u77e9\u9635 \u4e58\u4ee5 \u4e00\u4e2a n*p n*p \u7684\u77e9\u9635\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a m*p m*p \u7684\u77e9\u9635\u3002\u77e9\u9635\u76f8\u4e58\u7684\u89c4\u5219\u662f\uff1a\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u4e58\u4ee5\u7b2c\u4e8c\u4e2a\u77e9\u9635\u7684\u6bcf\u4e00\u5217\uff0c\u5bf9\u5e94\u7684\u5143\u7d20\u76f8\u4e58\u518d\u76f8\u52a0\uff0c\u4f5c\u4e3a\u65b0\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002\u6734\u7d20\u7684\u77e9\u9635\u4e58\u6cd5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a typedef vector < vector < int >> matrix ; matrix MatricMul ( matrix A , matrix B ){ int m = A . size (); int n1 = A [ 0 ]. size (); int n2 = B . size (); int p = B [ 0 ]. size (); if ( n1 != n2 ) { cout << \"no cheng of the two matrix.\" << endl ; return matrix ();} int n = n1 = n2 ; matrix C ( m , vector < int > ( p , 0 )); for ( int i = 0 ; i < m ; i ++ ){ for ( int j = 0 ; j < p ; j ++ ){ for ( int k = 0 ; k < n ; k ++ ){ C [ i ][ j ] += A [ i ][ k ] * B [ k ][ j ]; } } } return C ; } int main (){ matrix A = {{ 1 , 2 , 3 },{ 4 , 5 , 6 }}; matrix B = {{ 1 , 2 },{ 3 , 4 },{ 5 , 6 }}; matrix C = MatricMul ( A , B ); return 0 ; } - A^n A^n \u5feb\u901f\u6c42\u77e9\u9635\u7684n\u6b21\u5e42\uff0c\u6ce8\u610f\u8fd9\u91ccA\u53ea\u80fd\u662f\u65b9\u9635 \u77e9\u9635\u7684\u5feb\u901f\u5e42\u548c\u6574\u6570\u7684\u5feb\u901f\u5e42\u662f\u4e00\u6837\u7684\uff0c\u5c31\u662f\u91cd\u8f7d\u4e00\u4e0b*\u8fd9\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4f7f\u5f97\u4e24\u4fa7\u662f\u77e9\u9635\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u7684\u662f\u77e9\u9635\u4e58\u6cd5\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u77e9\u9635\u4e58\u6cd5\u51fd\u6570 MatricMul : matrix quickPowMatrix ( matrix A , int n ){ matrix base = A ; // \u521d\u59cb\u5316\u6210\u5355\u4f4d\u77e9\u9635 int len = A . size (); matrix ans ( len , vector < int > ( len , 0 )); for ( int i = 0 ; i < A . size (); i ++ ){ ans [ i ][ i ] = 1 ; } while ( n != 0 ){ if ( n & 1 != 0 ) ans = MatricMul ( ans , base ); base = MatricMul ( base , base ); n >>= 1 ; } return ans ; } \u5feb\u901f\u5e42\u901a\u5e38\u7528\u6765\u6c42\u5f88\u5927\u7684\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019\u867d\u7136\u5c31\u7b97\u901f\u5ea6\u5728\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4\u5185\uff0c\u4f46\u662f\u6570\u636e\u7684\u8303\u56f4\u65e9\u5df2\u7ecf\u8d85\u8fc7\u4e86\u80fd\u591f\u8868\u793a\u8303\u56f4\uff0c\u901a\u5e38\u7684\u65b9\u6cd5\u5c31\u662fmod\u6bcf\u4e2a\u5927\u6570\uff0c\u5f97\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684\u7ed3\u679c\u3002 \u4e3a\u4e86\u51cf\u5c11\u8ba1\u7b97\u7684\u5f00\u9500\uff08\u8ba1\u7b97\u5c0f\u6570\u7684\u4e58\u6cd5\u8981\u6bd4\u8ba1\u7b97\u5927\u6570\u7684\u4e58\u6cd5\u5f00\u9500\u5c0f\uff09\uff0c\u901a\u5e38\u5229\u7528\u6a21\u8fd0\u7b97\u7684\u6cd5\u5219\uff1a (a+b) mod c = (a mod c + b mod c) mod c ; (a+b) mod c = (a mod c + b mod c) mod c ; (a*b) mod c = (a mod c * b mod c) mod c ; (a*b) mod c = (a mod c * b mod c) mod c ; \u4e0a\u9762\u7684\u4ee3\u7801\u6bcf\u4e00\u6b21\u8ba1\u7b97\u4e4b\u540e\u5c31\u53d6\u6a21\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u8303\u56f4\u4e0d\u6ea2\u51fa\uff0c\u8fd8\u80fd\u4fdd\u8bc1\u6bd4\u8f83\u5feb\u7684\u8ba1\u7b97\u901f\u5ea6\u3002 \u4f7f\u7528C++\u7684\u6a21\u7248\u6280\u672f\u7f16\u5199\u901a\u7528\u7684\u5feb\u901f\u5e42\u6a21\u7248 #include <bits/stdc++.h> using namespace std ; typedef long long LL ; template < class T , int MAXN , T MOD =- 1 > class Matrix { public : T m [ MAXN ][ MAXN ]; Matrix (){} // \u5982\u679cMOD\u4e0d\u662f-1\uff0c\u628anum\u53d6\u6a21 void init ( T num [ MAXN ][ MAXN ]){ for ( int i = 0 ; i < MAXN ; i ++ ) { for ( int j = 0 ; j < MAXN ; j ++ ) { m [ i ][ j ] = num [ i ][ j ]; if ( MOD !=- 1 ) m [ i ][ j ] %= MOD ; } } } //\u77e9\u9635\u4e58\u6cd5\u7684\u5b9e\u73b0 friend Matrix operator * ( const Matrix & m1 , const Matrix & m2 ) { int i , j , k ; Matrix ret ; memset ( ret . m , 0 , sizeof ( ret . m )); for ( i = 0 ; i < MAXN ; i ++ ) { for ( j = 0 ; j < MAXN ; j ++ ) if ( m1 . m [ i ][ j ] ) { for ( k = 0 ; k < MAXN ; k ++ ){ ret . m [ i ][ k ] += m1 . m [ i ][ j ] * m2 . m [ j ][ k ]; if ( MOD !=- 1 ) ret . m [ i ][ k ] %= MOD ; } } } return ret ; } // \u77e9\u9635\u52a0\u6cd5\u7684\u5b9e\u73b0 friend Matrix operator + ( const Matrix & m1 , const Matrix & m2 ) { int i , j ; Matrix ret ; for ( i = 0 ; i < MAXN ; i ++ ) { for ( j = 0 ; j < MAXN ; j ++ ) { ret . m [ i ][ j ] = 0 ; ret . m [ i ][ j ] = m1 . m [ i ][ j ] + m2 . m [ i ][ j ]; if ( MOD !=- 1 ) ret . m [ i ][ j ] %= MOD ; } } return ret ; } //\u77e9\u9635\u5feb\u901f\u5e42\u7684\u5b9e\u73b0 friend Matrix operator ^ ( const Matrix & _M , LL nx ){ Matrix ret , M ( _M ); //ret \u521d\u59cb\u5316\u6210\u5355\u4f4d\u77e9\u9635 for ( int i = 0 ; i < MAXN ; i ++ ){ for ( int j = 0 ; j < MAXN ; j ++ ){ if ( i == j ) ret . m [ i ][ j ] = 1 ; else ret . m [ i ][ j ] = 0 ; } } while ( nx ){ if ( nx & 1 ) ret = ret * M ; nx = nx >> 1 ; M = M * M ; } return ret ; } }; int main (){ int C [ 2 ][ 2 ] = {{ 1 , 2 },{ 3 , 4 }}; Matrix < int , 2 , 1000 > mm ; mm . init ( C ); auto add = mm + mm ; auto cheng = mm * mm ; auto mi = mm ^ 2 ; return 0 ; }","title":"10. \u5feb\u901f\u5e42\u548c\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#11","text":"#include <bits/stdc++.h> \u4e00\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u6240\u6709\u5e38\u7528\u7684\u5934\u6587\u4ef6\uff0c\u4f60\u6240\u6709\u4f7f\u7528\u7684\u51fd\u6570\u4e0d\u518d\u9700\u8981\u5f15\u5165\u76f8\u5e94\u7684\u5934\u6587\u4ef6\u3002\u8be5\u5934\u6587\u4ef6\u5728ACM\u7ade\u8d5b\u4e2d\u7ecf\u5e38\u88ab\u4f7f\u7528\uff0c\u53ef\u4ee5\u51cf\u5c11\u4f60\u5305\u542b\u9700\u8981\u7684\u5934\u6587\u4ef6\u9700\u8981\u7684\u65f6\u95f4\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u5934\u6587\u4ef6\u5e76\u4e0d\u662f\u6807\u51c6\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u80fd\u6709\u7684\u7f16\u8bd1\u5668\u4e0d\u652f\u6301\u5b83\u3002","title":"11. \u5305\u542b\u4e00\u5207\u7684\u5934\u6587\u4ef6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#12","text":"\u4f8b\u5982 a = [3,5,2,4,1] , \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u5e94\u8be5\u662f[1,2,3,4,5], \u539f\u6765\u5728a\u4e2d\u7684\u4e0b\u6807\u662f[4,2,0,3,1],\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u8f93\u5165a\uff0c\u8fd4\u56de[4,2,0,3,1] #include <iostream> #include <algorithm> using namespace std ; vector < int > getOrderIndex ( vector < int > & a ){ vector < int > order ( a . size (), 0 ); for ( int i = 0 ; i < a . size (); i ++ ){ order [ i ] = i ; } sort ( order . begin (), order . begin () + a . size (), [ a ]( const int & x , const int & y ) -> bool { return a [ x ] < a [ y ];}); return order ; } order\u4e2d\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u3002","title":"12. \u8fd4\u56de\u4e00\u4e2a\u65e0\u5e8f\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\u7684\u4e0b\u6807\uff0c\u4e0d\u52a8\u539f\u6765\u7684\u6570\u7ec4"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#13","text":"/** * \u7528\u7a7a\u683c\u5206\u5272\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 * @param s * @return */ vector < int > string2int ( string & s ){ istringstream in ( s ); vector < int > v ; int num ; while ( in >> num ){ v . push_back ( num ); } return v ; }","title":"13. \u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#14","text":"\u5f53\u7eaf\u6570\u5b57\u7684\u8f93\u5165\u89c4\u6a21\u8d85\u8fc7 10^6 10^6 \u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u8f93\u5165\u6302\uff0c\u6bd4\u7cfb\u7edf\u81ea\u5e26\u7684cin\u5feb\u5f88\u591a\u3002 inline void q_read ( int & num ) { char ch ; int f = 1 ; while ( true ) { ch = getchar (); if ( ch == '-' ) f = - 1 ; if ( isdigit ( ch )) { num = ch - '0' ; break ; } } while ( ch = getchar (), isdigit ( ch )) num = num * 10 + ch - '0' ; num *= f ; } \u8fd8\u53ef\u4ee5\u5728\u5f00\u59cb\u7684\u65f6\u5019\u52a0\u5165 ios::sync_with_stdio(false); , \u5b83\u7684\u4f5c\u7528\u662f\u53bb\u6389cin\u989d\u5916\u7684\u68c0\u67e5\u5f00\u9500\uff0c\u8fbe\u5230\u548cscanf\u76f8\u4f3c\u7684\u8f93\u5165\u6548\u7387\uff1b","title":"14. \u8f93\u5165\u6302"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/","text":"Python \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6 \u00b6 \u8bb0\u5f55\u7528 python \u5237 leetcode \u5fc5\u987b\u4e86\u89e3\u7684\u7279\u6027\uff0c\u4e3b\u8981\u662f\u6570\u636e\u7ed3\u6784\u7684\u8868\u793a\u3002 1. \u57fa\u7840\u77e5\u8bc6 \u00b6 1.1 import \u00b6 \u8bb0\u5f55\u5404\u79cd\u9700\u8981\u5305\u542b\u7684\u5e93 # \u540e\u7f6e\u8fd4\u56de\u7c7b\u578b List from typing import List 1.2 string \u00b6 import regex as re string = \"abcd\" string . ltrsip () string . rstrip () string . strip () # \u53bb\u6389\u884c\u9996\uff0c \u884c\u5c3e\uff0c \u884c\u9996\u548c\u884c\u5c3e\u7684\u7a7a\u683c\uff0c\u53ef\u4f20\u5165\u5176\u4ed6\u5b57\u7b26 # \u67e5\u627e\u66ff\u6362 string . find ( \"substring\" ) # \u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \u6216\u8005 -1 [ m . start () for m in re . finditer ( \"test\" , \"test test test\" )] # \u8fd4\u56detest\u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e [ m . start () for m in re . finditer ( \"(?=tt)\" , \"tttttt\" )] # \u8fd4\u56de\u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u91cd\u53e0\u5339\u914d string . count ( \"substring\" ) # \u51fa\u73b0\u7684\u6b21\u6570 string . replace ( \"astring\" , \"bstring\" ) # a \u66ff\u6362\u6210 b string [: start + 1 ] + new_string + string [ end :] # [start, end]\u4e4b\u95f4\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210new_string # \u5206\u5272\u62fc\u63a5 string . split ( \"seperator\" , count ) # \u6309\u7167seperator\u5206\u5272string, \u6700\u591a\u5206\u5272count\u6b21 \"seperator\" . join ( list [ str ]) # \u4f7f\u7528seperator\u62fc\u63a5list\u4e2d\u7684\u6bcf\u4e2astr # \u5927\u5199\u5c0f\u5199 string . isupper () string . islower () string . upper () string . lower () stirng . title () # \u9996\u5b57\u6bcd\u5927\u5199 # \u8f93\u51fa\u62fc\u63a5 \" %s , %s \" % ( string1 , string2 ) \" {0} , {1} \" . format ( string1 , string2 ) 1.3 list \u00b6 # create list1 = [] list2 = [ 0 ] * n list3 = [ 0 for i in range ( n )] list4 = [[ 0 ] * m for i in range ( n )] # n\u884cm\u5217 # \u63d2\u5165\u5220\u9664 list1 . append ( element ) list1 . extend ( list2 ) list1 . insert ( index , element ) element = list1 . pop () element = list1 . pop ( index ) del list1 [ index ] list1 . remove ( element ) new_list = list ( set ( a ) - set ( b )) # \u5220\u9664a\u4e2d\u5728b\u4e2d\u51fa\u73b0\u8fc7\u7684\u503c # \u904d\u5386 for elemnt in list1 : print ( element ) for i in range ( len ( list1 )): print ( list1 [ i ]) for i , element in enumerate ( list1 ): print ( element ) for element in reversed ( list1 ): # \u5012\u5e8f\u8f93\u51fa print ( element ) # \u4ee5\u4e0a\u904d\u5386\u90fd\u4e0d\u80fd\u4fee\u6539\u503c\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u6cd5 i = 0 while i < len ( list1 ): print ( list1 [ i ]) i += 1 1.4 dict \u00b6 # \u521b\u5efa dic = {} dic = { key1 : value1 , key2 : value2 } # \u589e\u5220\u6539\u67e5 if key not in dic : dic [ key ] = value if key in dic : del dic [ key ] value = dic . pop ( key , default_value ) # \u904d\u5386 for key in dic : print ( key , dic [ key ]) for key , value in dic . iterms (): print ( key , value ) for key in dic . keys (): print ( key ) for value in dic . values (): print ( value ) # \u6709\u5e8f\u5b57\u5178 from collection import OrderedDict odic = OrderedDict () odic [ key1 ] = 1 odic [ key2 ] = 2 odic [ key3 ] = 3 first_element = odic . popitem ( last = False ) # \u5f97\u5230key1 list ( odic . items ())[ index ] # \u6839\u636e\u7d22\u5f15\u83b7\u53d6\u5b57\u5178\u4e2d\u7684\u5143\u7d20 1.5 set \u00b6 \u5185\u90e8\u4f7f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0 set1 = set ([ 1 , 1 , 2 , 3 ]) set2 = { 1 , 2 , 3 } set1 . add ( element ) set3 = set1 . union ( set2 ) # set1 + set2 set3 = set1 . intersecton ( set2 ) # set1 & set2 set3 = set1 . difference ( set2 ) # set1 - set2 set1 . clear () if key in set1 : print ( key ) # \u56fa\u5b9a\u5927\u5c0f\u7684set fix_set = frozenset ([ 1 , 2 , 3 ]) 1.6 \u9664\u6cd5\u8fd0\u7b97 \u00b6 c = int ( a / b ) # \u5b9e\u73b0\u4e0eC\u8bed\u8a00\u4e00\u81f4\u7684\u6574\u6570\u9664\u6cd5 1.7 \u8def\u5f84\u64cd\u4f5c \u00b6 os . path . isfile ( path ) # \u662f\u5426\u662f\u6587\u4ef6 os . path . isdir ( path ) # \u662f\u5426\u662f\u76ee\u5f55 os . path . basename ( path ) # \u8fd4\u56de\u6587\u4ef6\u540d os . path . dirname ( path ) # \u8fd4\u56de\u6587\u4ef6\u6240\u5728\u6587\u4ef6\u5939 os . path . abspath ( __file__ ) # \u8fd4\u56de\u5f53\u524d\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 os . path . exists ( path ) # \u8def\u5f84\u662f\u5426\u5b58\u5728 os . path . join ( path , dirname ) # \u62fc\u63a5\u8def\u5f84 os . path . splittext ( path ) # \u5206\u5272\u6210\u8def\u5f84 + \u6587\u4ef6\u6269\u5c55\u540d os . listdir ( path ) # \u5217\u51fa\u8def\u5f84\u4e0b\u6587\u4ef6\u548c\u6587\u4ef6\u5939 os . chdir ( path ) # \u6539\u53d8\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4f4dpath os . mkdir ( path ) # \u65b0\u5efa\u8def\u5f84\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u62a5\u9519 os . remove ( path ) # \u5220\u9664\u6587\u4ef6\uff0cpath\u662f\u6587\u4ef6\u5939\u4f1a\u62a5\u9519 os . removedirs ( path ) # \u9012\u5f52\u5220\u9664\u7a7a\u76ee\u5f55\uff0c\u5982\u679c\u4efb\u610f\u76ee\u5f55\u975e\u7a7a\u4f1a\u62a5\u9519 os . rmdir ( path ) # \u5220\u9664path\u76ee\u5f55\uff0c\u5982\u679cpath\u975e\u7a7a\u4f1a\u62a5\u9519 os . rename ( olename , newname ) # \u91cd\u547d\u540d\u6587\u4ef6 # \u904d\u5386\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\u8fdb\u5165\u5b50\u6587\u4ef6\u5939 # curdir:\u5f53\u524d\u6587\u4ef6\u5939 dirs:\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\u5939\uff0c files:\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6 # True: \u4ece\u9876\u5c42\u5f00\u59cb\u8f93\u51fa False: \u4ece\u5e95\u5c42\u5f00\u59cb\u8f93\u51fa file_list = [] for curdir , dirs , files in os . walk ( root_path , True ): for file in files : file_list . append ( os . path . join ( curdir , file )) # \u83b7\u5f97\u6700\u65b0\u751f\u6210\u7684\u6587\u4ef6 lists = os . listdir ( root_path ) lists . sort ( key = lambda fn : os . path . getmtime ( root_path + '/' + fn )) # lists[-1] \u5c31\u662f\u6700\u65b0\u7684\u6587\u4ef6 # \u590d\u5236\u6587\u4ef6\u5939 src_path \u590d\u5236\u5230 dst_path import shutil if os . path . exist ( dst_path ): shutil . rmtree ( dst_path ) os . mkdir ( dst_path ) shutil . copytree ( src_path ) 1.8 \u4e2d\u6587\u7f16\u7801 \u00b6 # utf8 --> gb2312 import codecs with open ( file , 'r' , 'utf-8' ) as fd : text = fd . read () with open ( file , 'w' , 'gb2312' ) as fd : fd . write ( text ) unicode ( string ) . encode ( \"gb2312\" ) u \"\u4e2d\u6587\" . encode ( \"gb2312\" ) # \u8f6c\u6362\u7f16\u7801 1.9 \u8f93\u51fa \u00b6 # print\u4e0d\u5e26\u6362\u884c print (), # \u663e\u793a\u4e8c\u8fdb\u5236 num = 0b1011 print ( b ( num )) # \u5e26\u989c\u8272\u7684\u6253\u5370 print ( \" \\033 [1;35m This color is pick. \\033 [0m\" ) 1.10 \u8c03\u7528\u7cfb\u7edfshell \u00b6 import os ret = os . system ( cmd ) # ret >> 8 == 0 \u8bf4\u660e\u6267\u884c\u6210\u529f\uff0c \u4e0d\u4f1a\u518d\u6807\u51c6\u8f93\u51fa\u6253\u5370\u5185\u5bb9 output = os . popen ( cmd ) # \u547d\u4ee4\u8f93\u51fa\u4f1a\u8fd4\u56de\u5230output\u548c\u6807\u51c6\u8f93\u51fa\u4e2d # \u5c4f\u853d\u6267\u884c\u7684\u547d\u4ee4\u518d\u6807\u51c6\u8f93\u51fa\u4e2d\u7684\u8f93\u51fa import subprocess null_dev = open ( os . devnull , 'w' ) p = subprocess . Popen ( cmd , stdout = null_dev , stderr = null_dev ) ret = subprocess . Popen . poll ( p ) if ret == None : # \u547d\u4ee4\u672a\u6267\u884c\u5b8c\u6210 if ret == number : # \u547d\u4ee4\u6267\u884c\u5b8c 2. \u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 import re regex_pattern = \"\" pattern = re . compile ( regex_pattern ) matchObj = re . match ( regex_pattern , string ) # \u4ecestring\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u5339\u914d\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u4e0d\u5339\u914d\uff0c\u8fd4\u56deNone matchObj2 = re . search ( regex_pattern , string ) # \u4ecestring\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u6a21\u5f0f\uff0c\u5339\u914d\u5230\u4e0d\u7ee7\u7eed\u5411\u4e0b\u67e5\u627e matchOnj3 = pattern . search ( string , pos = '' , endpos = '' ) # \u4ecestring\u7684pos\u5f00\u59cb\u5230endpos\u7ed3\u675f\uff0c\u67e5\u627e\u5339\u914d\u7684\u6a21\u5f0f\u4e00\u6b21 lists = re . findall ( regex_pattern , string ) # \u4ecestring\u4e2d\u67e5\u627e\u5339\u914d\u7684\u6a21\u5f0f\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7684\u9009\u9879\u4e3a\u4e00\u4e2alist new_string = re . sub ( regex_pattern , replace_pattern , string ) # \u6b63\u5219\u67e5\u627e\u66ff\u6362\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684\u65b0\u4e32 ( new_stirng , count ) = re . subn ( regex_pattern , replace_pattern , string ) # \u591a\u8fd4\u56de\u4e00\u4e2a\u66ff\u6362\u6b21\u6570 matchObj == None # \u672a\u5339\u914d\u5230 matchObj . group ( n ) #\u5339\u914d\u5230\u7684\u5185\u5bb9, \u9ed8\u8ba4\u662f0\uff0c\u6574\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5230\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5927\u4e8e0\uff0c\u5c31\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2dn\u7ec4\u5339\u914d\u5230\u7684\u5185\u5bb9 matchObj . start ( n ), matchObj . end ( n ) # \u7b2cn\u7ec4\u5339\u914d\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u7d22\u5f15 ## \u6b63\u5219\u8bed\u6cd5 ( pattern ) # \u5206\u7ec4\u4e14\u6355\u83b7\uff0c \u4f7f\u7528`\\n`\u5f15\u7528 ( ? : pattern ) # \u5206\u7ec4\u4e0d\u6355\u83b7 ( ? P < name > pattern ) # \u5206\u7ec4\u6355\u83b7\u5e76\u547d\u540d\uff0c\u4f7f\u7528`\\g<name>` \u5f15\u7528 ( ? = pattern ) # \u5339\u914d\u540e\u9762\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4f46\u662f\u4e0d\u6d88\u8d39(\u5339\u914d\u5230\u7684\u5185\u5bb9\u91cc\u9762\u6ca1\u6709pattern\u5339\u914d\u5230\u7684\u90e8\u5206) ( ?! pattern ) # \u5339\u914d\u540e\u9762\u4e0d\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39 ( ? <= pattern ) # \u5339\u914d\u524d\u9762\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39 ( ? < ! pattern ) # \u5339\u914d\u524d\u9762\u4e0d\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39 3. \u65f6\u95f4\u548c\u65e5\u671f \u00b6 import time import datetime now = datetime . datetime . now () # \u5f53\u524d\u65f6\u95f4 start = time . clock () end = time . clock () # end - start \u662f\u7ecf\u8fc7\u7684\u65f6\u95f4 4. JSON \u00b6 import json Obj = json . loads ( json_text , object_paris_hook = OrderDict ) # \u6587\u672c\u8f6c\u6210\u7ed3\u6784 json_text = json . dumps ( Obj ) # \u7ed3\u6784\u8f6c\u6362\u6210\u6587\u672c 5. SQLITE \u00b6 import sqlite3 form sqlite3 import Error conn = create_connection ( db_file ) # \u4eceDB\u6587\u4ef6\u6253\u5f00\u6570\u636e\u5e93 current = conn . cursor () current . execute ( \"select * from table_name\" ) rows = current . fetchall () # \u83b7\u5f97\u6267\u884cSQL\u8bed\u53e5\u7684\u7ed3\u679c 6. \u6570\u636e\u7ed3\u6784 \u00b6 6.1 \u5806 \u00b6 6.1.1 heapq \u00b6 import heapq heap = heapq . heapify ([ 1 , 2 , 3 , 4 , 5 , 6 ]) # \u521b\u5efa\u5806 heapq . heappush ( heap , element ) top = heapq . heappop ( heap ) list1 = heapq . nlargest ( k , heap , key = func ) # \u8fd4\u56de\u524dK\u5927 list2 = heapq . nsmallest ( k , heap , key = func ) # \u8fd4\u56de\u524dK\u5c0f 6.1.2 queue \u00b6 \u5f15\u5165\u5305\uff1a from queue import PriorityQueue \u5b9a\u4e49\uff1a minHeap = PriorityQueue() # \u9ed8\u8ba4\u5efa\u7acb\u5c0f\u9876\u5806 \u5224\u7a7a: minHeap.empty() \u6dfb\u52a0\u5143\u7d20\uff1a minHeap.put((key,value)) \u4e0d\u80fd\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u4f20\u5165\u5143\u7ec4\uff0c\u6839\u636ekey\u7684\u503c\u5efa\u7acb\u5c0f\u9876\u5806 \u5806\u9876\u5143\u7d20\uff1a minHeap.get() \u53d6\u5f97\u5e76\u5220\u9664\uff0c\u4e0eC++\u4e2d\u7684top()\u4e0d\u540c \u6ce8\u610f \uff1a\u4f20\u5165\u5143\u7ec4\u7684\u65f6\u5019\u5982\u679ckey\u76f8\u540c, \u4f1a\u8fdb\u4e00\u6b65\u6bd4\u8f83value, \u5982\u679cvalue\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u800c\u4e14\u6ca1\u6709\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff0c\u4f1a\u62a5\u9519\uff0c\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u3002 \u5927\u90e8\u5206\u4f7f\u7528\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u5143\u7ec4 (key, data) \u63a7\u5236\u5806\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c \u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u5728\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u578b\u4e0a\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u3002 7. \u5e38\u7528\u5e93 \u00b6 7.1 diff \u00b6 import difflib # \u83b7\u53d6string1, string2\u7684\u76f8\u4f3c\u5ea6\uff0c1\u8bf4\u660e\u5b8c\u5168\u76f8\u540c deltas = difflib . SequenceMatcher ( None , string1 , string2 ) . quick_ratio () # \u6bd4\u8f83\u76ee\u5f55\u548c\u6587\u4ef6 import filecmp 7.2 \u5e8f\u5217\u5316 \u00b6 import pickle pickle . dump ( Obj , file_path ) # \u7ed3\u6784\u5b58\u5165\u6587\u4ef6 Obj = pickle . load ( file_path ) # \u4ece\u6587\u4ef6\u6062\u590d\u7ed3\u6784 7.3 \u8f93\u5165 \u00b6 # \u5904\u7406\u8f93\u5165\u9009\u9879 import getopt # cli import click 8. Python \u5e93 \u00b6 8.1 numpy \u00b6 import numpy as np a1 = np . array ([ 1 , 2 , 3 ]) a2 = np . array ([( 1 , 2 , 3 ), ( 4 , 5 , 6 )]) a3 = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) np . zeros (( n , m , k )) # n \u884c m \u5217 k \u5c42 np . ones (( n , m , k )) np . empty (( n , m , k )) # \u4e0d\u521d\u59cb\u5316\uff0c\u4f7f\u7528\u5185\u5b58\u539f\u6765\u7684\u503c np . arrange ([ start , end , step ]) # \u521b\u5efa\u8303\u56f4[start, end], \u6b65\u957f\u662fstep\u7684\u4e00\u7ef4\u6570\u7ec4 np . linespace ([ start , end , count ]) # \u521b\u5efa\u8303\u56f4\u4ece[start, end], \u603b\u6570\u91cf\u4e3acount\u7684\u4e00\u7ef4\u6570\u7ec4 8.2 pandas \u00b6 \u53ef\u4ee5\u7406\u89e3\u4e3a\u7535\u5b50\u8868\u683c, \u63d0\u4f9b\u4e86\u7c7b\u4f3cSQL\u8bed\u53e5\u7684\u5f3a\u5927\u64cd\u4f5c\u80fd\u529b\u3002 import pandas as pd #Series \u4e00\u7ef4\u6570\u636e s = pd . Series ( data = 5 , index = [ 'a' , 'b' , 'c' ]) # \u521b\u5efa\u4e00\u7ef4\u5e26\u540d\u5b57\u7684\u6570\u7ec4 [5,5,5] \u5217\u540d\u79f0\u4e3a a, b, c s = pd . Series ( data = [ 1 , 2 , 3 ], index = [ 'a' , 'b' , 'c' ]) #\u521b\u5efa\u4e00\u7ef4\u5e26\u540d\u5b57\u7684\u6570\u7ec4 [1, 2, 3] \u5217\u540d\u79f0\u4e3a a, b, c s = pd . Series ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) # key \u4f5c\u4e3a\u5217\u540d\u79f0\uff0c \u503c\u4f5c\u4e3a\u5217\u7684\u503c s = pd . Series ( data = dict , index = []) # key \u5982\u679c\u5728index\u4e2d\uff0c\u52a0\u5165\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u52a0\u5165\u8bbe\u7f6e\u503c\u4e3aNan # DataFrame \u4e8c\u4f4d\u6570\u636e df = pd . DataFrame () # \u7a7a df = read_csv ( file , names = []) # \u4eceCSV\u6587\u4ef6\u521b\u5efa\uff0c names\u4e3a\u6bcf\u4e00\u5217\u7684\u540d\u79f0 df = DataFrame ( data , index = [], columns = []) # data\u662f\u4e8c\u7ef4\u6570\u636e\uff0c index\u4e3a\u884c\u547d\u540d\uff0c columns\u4e3a\u5217\u547d\u540d df [ 'col_name' ], df [[ 'col1_name' , 'col2_name' ]] # \u9009\u62e9\u67d0\u4e9b\u5217 df . loc [ 'row_name' ], df . iloc [ row_index ], df [ row_begin_index : row_end_index ], df [ bool_vector ] # \u9009\u62e9\u67d0\u4e9b\u5217 del df [ 'row_name' ], del df . loc [ 'row_name' ] # \u5220\u9664\u67d0\u4e9b\u884c\uff0c \u5220\u9664\u67d0\u4e9b\u5217 groups = df . groupby ( 'col_name' ) # \u6309\u7167\u5217 col_name \u5206\u7ec4 df . sort_values ( 'col_name' ) # \u6309\u7167\u67d0\u4e00\u5217\u6392\u5e8f rows_unique = pd . unique ( df [ 'col_name' ]) # \u83b7\u5f97\u67d0\u5217\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c new_df = df [ df [ 'col_name' ] == 'value' ] # \u8fc7\u6ee4\u51fa\u5217\u503c\u4e3avalue\u7684\u6240\u6709\u884c # \u904d\u5386\u6bcf\u4e00\u884c for row_num , row_content in df . iterrows (): print ( row_num , row_content ) 8.3 graphviz \u00b6 \u4e00\u4e2a\u7528\u6765\u7ed8\u5236 .dot \u683c\u5f0f\u6587\u4ef6\u7684Python\u5305\u3002 # pip install graphviz from graphviz import Graph , Digraph # \u652f\u6301\u7684\u8f93\u51fa\u683c\u5f0f pdf, svg, png dot = Digraph ( comment = \"desciption\" , filename = 'filename' , format = 'pdf' ) dot . attr ( 'node' , shape = 'box' ) # \u4e3anode\u8bbe\u7f6e\u5f62\u72b6 dot . attr ( rankdir = 'LR' , size = '10,10' ) # \u8bbe\u7f6e\u56fe\u5f62\u5e03\u5c40\u4e3a\u4ece\u5de6\u5230\u53f3\uff0c10X10 dot . node ( 'name1' , 'description1' ) dot . node ( 'name1' , 'description1' ) dot . node ( 'name1' , 'description1' ) # \u8bbe\u7f6e\u8282\u70b9\u540d\u79f0 dot . edge ( 'name1' , 'name2' ) # \u8bbe\u7f6e\u8fb9 print ( dot . source ) # \u8f93\u51fa\u751f\u6210\u7684.dot\u683c\u5f0f\u6587\u4ef6 dot . view () # \u67e5\u770b\u751f\u6210\u7684\u56fe\u7247 9. \u53d1\u5e03Pyton\u5e93 \u00b6 Pypi \u662f\u4e00\u4e2a\u53d1\u5e03\u7684\u5e73\u53f0\uff0c \u53d1\u5e03\u81ea\u5df1\u5199\u7684Python\u5e93\u4e4b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528pip install name \u5b89\u88c5\uff0c\u8fd8\u53ef\u4ee5\u5728pypi\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u81ea\u5df1\u7684\u5e93\u7684\u8bf4\u660e\u3002 \u6ce8\u518c\u8d26\u53f7\u5e76\u767b\u9646 https://pypi.org \u51c6\u5907\u6587\u4ef6 \u53bb\u4efb\u610f\u4e00\u4e2a\u5df2\u7ecf\u53d1\u5e03\u7684\u5305\u7684 github \u5305\u4e3b\u9875\u4e0a\uff0c \u628a\u5bf9\u5e94\u7684\u6587\u4ef6\u62f7\u8d1d\u4e0b\u6765\u4fee\u6539\u6210\u81ea\u5df1\u7684\u5185\u5bb9\u3002 setup.py\uff0c README.md\uff0c LICENSE \u4e09\u8005\u662f\u5fc5\u987b\u7684\u3002 \u6253\u5305 \u5728 setup.py \u540c\u7ea7\u4e0b\u6267\u884c python setup.py bdist_wheel --universal \u4e0a\u4f20 twine upload dist/* , \u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e4b\u540e\u4e0a\u4f20\u6210\u529f\u3002 \u53ef\u4ee5\u6253\u5f00\u7ed9\u51fa\u7684\u9875\u9762\u770b\u770b\u6548\u679c\u3002 https://pypi.org/project/mkdocs-render-otherfile-plugin/ \u5b89\u88c5\u9a8c\u8bc1 pip install package-name","title":"Python \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#python","text":"\u8bb0\u5f55\u7528 python \u5237 leetcode \u5fc5\u987b\u4e86\u89e3\u7684\u7279\u6027\uff0c\u4e3b\u8981\u662f\u6570\u636e\u7ed3\u6784\u7684\u8868\u793a\u3002","title":"Python \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#1","text":"","title":"1. \u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#11-import","text":"\u8bb0\u5f55\u5404\u79cd\u9700\u8981\u5305\u542b\u7684\u5e93 # \u540e\u7f6e\u8fd4\u56de\u7c7b\u578b List from typing import List","title":"1.1 import"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#12-string","text":"import regex as re string = \"abcd\" string . ltrsip () string . rstrip () string . strip () # \u53bb\u6389\u884c\u9996\uff0c \u884c\u5c3e\uff0c \u884c\u9996\u548c\u884c\u5c3e\u7684\u7a7a\u683c\uff0c\u53ef\u4f20\u5165\u5176\u4ed6\u5b57\u7b26 # \u67e5\u627e\u66ff\u6362 string . find ( \"substring\" ) # \u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \u6216\u8005 -1 [ m . start () for m in re . finditer ( \"test\" , \"test test test\" )] # \u8fd4\u56detest\u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e [ m . start () for m in re . finditer ( \"(?=tt)\" , \"tttttt\" )] # \u8fd4\u56de\u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u91cd\u53e0\u5339\u914d string . count ( \"substring\" ) # \u51fa\u73b0\u7684\u6b21\u6570 string . replace ( \"astring\" , \"bstring\" ) # a \u66ff\u6362\u6210 b string [: start + 1 ] + new_string + string [ end :] # [start, end]\u4e4b\u95f4\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210new_string # \u5206\u5272\u62fc\u63a5 string . split ( \"seperator\" , count ) # \u6309\u7167seperator\u5206\u5272string, \u6700\u591a\u5206\u5272count\u6b21 \"seperator\" . join ( list [ str ]) # \u4f7f\u7528seperator\u62fc\u63a5list\u4e2d\u7684\u6bcf\u4e2astr # \u5927\u5199\u5c0f\u5199 string . isupper () string . islower () string . upper () string . lower () stirng . title () # \u9996\u5b57\u6bcd\u5927\u5199 # \u8f93\u51fa\u62fc\u63a5 \" %s , %s \" % ( string1 , string2 ) \" {0} , {1} \" . format ( string1 , string2 )","title":"1.2 string"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#13-list","text":"# create list1 = [] list2 = [ 0 ] * n list3 = [ 0 for i in range ( n )] list4 = [[ 0 ] * m for i in range ( n )] # n\u884cm\u5217 # \u63d2\u5165\u5220\u9664 list1 . append ( element ) list1 . extend ( list2 ) list1 . insert ( index , element ) element = list1 . pop () element = list1 . pop ( index ) del list1 [ index ] list1 . remove ( element ) new_list = list ( set ( a ) - set ( b )) # \u5220\u9664a\u4e2d\u5728b\u4e2d\u51fa\u73b0\u8fc7\u7684\u503c # \u904d\u5386 for elemnt in list1 : print ( element ) for i in range ( len ( list1 )): print ( list1 [ i ]) for i , element in enumerate ( list1 ): print ( element ) for element in reversed ( list1 ): # \u5012\u5e8f\u8f93\u51fa print ( element ) # \u4ee5\u4e0a\u904d\u5386\u90fd\u4e0d\u80fd\u4fee\u6539\u503c\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u6cd5 i = 0 while i < len ( list1 ): print ( list1 [ i ]) i += 1","title":"1.3 list"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#14-dict","text":"# \u521b\u5efa dic = {} dic = { key1 : value1 , key2 : value2 } # \u589e\u5220\u6539\u67e5 if key not in dic : dic [ key ] = value if key in dic : del dic [ key ] value = dic . pop ( key , default_value ) # \u904d\u5386 for key in dic : print ( key , dic [ key ]) for key , value in dic . iterms (): print ( key , value ) for key in dic . keys (): print ( key ) for value in dic . values (): print ( value ) # \u6709\u5e8f\u5b57\u5178 from collection import OrderedDict odic = OrderedDict () odic [ key1 ] = 1 odic [ key2 ] = 2 odic [ key3 ] = 3 first_element = odic . popitem ( last = False ) # \u5f97\u5230key1 list ( odic . items ())[ index ] # \u6839\u636e\u7d22\u5f15\u83b7\u53d6\u5b57\u5178\u4e2d\u7684\u5143\u7d20","title":"1.4 dict"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#15-set","text":"\u5185\u90e8\u4f7f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0 set1 = set ([ 1 , 1 , 2 , 3 ]) set2 = { 1 , 2 , 3 } set1 . add ( element ) set3 = set1 . union ( set2 ) # set1 + set2 set3 = set1 . intersecton ( set2 ) # set1 & set2 set3 = set1 . difference ( set2 ) # set1 - set2 set1 . clear () if key in set1 : print ( key ) # \u56fa\u5b9a\u5927\u5c0f\u7684set fix_set = frozenset ([ 1 , 2 , 3 ])","title":"1.5 set"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#16","text":"c = int ( a / b ) # \u5b9e\u73b0\u4e0eC\u8bed\u8a00\u4e00\u81f4\u7684\u6574\u6570\u9664\u6cd5","title":"1.6 \u9664\u6cd5\u8fd0\u7b97"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#17","text":"os . path . isfile ( path ) # \u662f\u5426\u662f\u6587\u4ef6 os . path . isdir ( path ) # \u662f\u5426\u662f\u76ee\u5f55 os . path . basename ( path ) # \u8fd4\u56de\u6587\u4ef6\u540d os . path . dirname ( path ) # \u8fd4\u56de\u6587\u4ef6\u6240\u5728\u6587\u4ef6\u5939 os . path . abspath ( __file__ ) # \u8fd4\u56de\u5f53\u524d\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 os . path . exists ( path ) # \u8def\u5f84\u662f\u5426\u5b58\u5728 os . path . join ( path , dirname ) # \u62fc\u63a5\u8def\u5f84 os . path . splittext ( path ) # \u5206\u5272\u6210\u8def\u5f84 + \u6587\u4ef6\u6269\u5c55\u540d os . listdir ( path ) # \u5217\u51fa\u8def\u5f84\u4e0b\u6587\u4ef6\u548c\u6587\u4ef6\u5939 os . chdir ( path ) # \u6539\u53d8\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4f4dpath os . mkdir ( path ) # \u65b0\u5efa\u8def\u5f84\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u62a5\u9519 os . remove ( path ) # \u5220\u9664\u6587\u4ef6\uff0cpath\u662f\u6587\u4ef6\u5939\u4f1a\u62a5\u9519 os . removedirs ( path ) # \u9012\u5f52\u5220\u9664\u7a7a\u76ee\u5f55\uff0c\u5982\u679c\u4efb\u610f\u76ee\u5f55\u975e\u7a7a\u4f1a\u62a5\u9519 os . rmdir ( path ) # \u5220\u9664path\u76ee\u5f55\uff0c\u5982\u679cpath\u975e\u7a7a\u4f1a\u62a5\u9519 os . rename ( olename , newname ) # \u91cd\u547d\u540d\u6587\u4ef6 # \u904d\u5386\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\u8fdb\u5165\u5b50\u6587\u4ef6\u5939 # curdir:\u5f53\u524d\u6587\u4ef6\u5939 dirs:\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\u5939\uff0c files:\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6 # True: \u4ece\u9876\u5c42\u5f00\u59cb\u8f93\u51fa False: \u4ece\u5e95\u5c42\u5f00\u59cb\u8f93\u51fa file_list = [] for curdir , dirs , files in os . walk ( root_path , True ): for file in files : file_list . append ( os . path . join ( curdir , file )) # \u83b7\u5f97\u6700\u65b0\u751f\u6210\u7684\u6587\u4ef6 lists = os . listdir ( root_path ) lists . sort ( key = lambda fn : os . path . getmtime ( root_path + '/' + fn )) # lists[-1] \u5c31\u662f\u6700\u65b0\u7684\u6587\u4ef6 # \u590d\u5236\u6587\u4ef6\u5939 src_path \u590d\u5236\u5230 dst_path import shutil if os . path . exist ( dst_path ): shutil . rmtree ( dst_path ) os . mkdir ( dst_path ) shutil . copytree ( src_path )","title":"1.7 \u8def\u5f84\u64cd\u4f5c"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#18","text":"# utf8 --> gb2312 import codecs with open ( file , 'r' , 'utf-8' ) as fd : text = fd . read () with open ( file , 'w' , 'gb2312' ) as fd : fd . write ( text ) unicode ( string ) . encode ( \"gb2312\" ) u \"\u4e2d\u6587\" . encode ( \"gb2312\" ) # \u8f6c\u6362\u7f16\u7801","title":"1.8 \u4e2d\u6587\u7f16\u7801"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#19","text":"# print\u4e0d\u5e26\u6362\u884c print (), # \u663e\u793a\u4e8c\u8fdb\u5236 num = 0b1011 print ( b ( num )) # \u5e26\u989c\u8272\u7684\u6253\u5370 print ( \" \\033 [1;35m This color is pick. \\033 [0m\" )","title":"1.9 \u8f93\u51fa"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#110-shell","text":"import os ret = os . system ( cmd ) # ret >> 8 == 0 \u8bf4\u660e\u6267\u884c\u6210\u529f\uff0c \u4e0d\u4f1a\u518d\u6807\u51c6\u8f93\u51fa\u6253\u5370\u5185\u5bb9 output = os . popen ( cmd ) # \u547d\u4ee4\u8f93\u51fa\u4f1a\u8fd4\u56de\u5230output\u548c\u6807\u51c6\u8f93\u51fa\u4e2d # \u5c4f\u853d\u6267\u884c\u7684\u547d\u4ee4\u518d\u6807\u51c6\u8f93\u51fa\u4e2d\u7684\u8f93\u51fa import subprocess null_dev = open ( os . devnull , 'w' ) p = subprocess . Popen ( cmd , stdout = null_dev , stderr = null_dev ) ret = subprocess . Popen . poll ( p ) if ret == None : # \u547d\u4ee4\u672a\u6267\u884c\u5b8c\u6210 if ret == number : # \u547d\u4ee4\u6267\u884c\u5b8c","title":"1.10 \u8c03\u7528\u7cfb\u7edfshell"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#2","text":"import re regex_pattern = \"\" pattern = re . compile ( regex_pattern ) matchObj = re . match ( regex_pattern , string ) # \u4ecestring\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u5339\u914d\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u4e0d\u5339\u914d\uff0c\u8fd4\u56deNone matchObj2 = re . search ( regex_pattern , string ) # \u4ecestring\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u6a21\u5f0f\uff0c\u5339\u914d\u5230\u4e0d\u7ee7\u7eed\u5411\u4e0b\u67e5\u627e matchOnj3 = pattern . search ( string , pos = '' , endpos = '' ) # \u4ecestring\u7684pos\u5f00\u59cb\u5230endpos\u7ed3\u675f\uff0c\u67e5\u627e\u5339\u914d\u7684\u6a21\u5f0f\u4e00\u6b21 lists = re . findall ( regex_pattern , string ) # \u4ecestring\u4e2d\u67e5\u627e\u5339\u914d\u7684\u6a21\u5f0f\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7684\u9009\u9879\u4e3a\u4e00\u4e2alist new_string = re . sub ( regex_pattern , replace_pattern , string ) # \u6b63\u5219\u67e5\u627e\u66ff\u6362\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684\u65b0\u4e32 ( new_stirng , count ) = re . subn ( regex_pattern , replace_pattern , string ) # \u591a\u8fd4\u56de\u4e00\u4e2a\u66ff\u6362\u6b21\u6570 matchObj == None # \u672a\u5339\u914d\u5230 matchObj . group ( n ) #\u5339\u914d\u5230\u7684\u5185\u5bb9, \u9ed8\u8ba4\u662f0\uff0c\u6574\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5230\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5927\u4e8e0\uff0c\u5c31\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2dn\u7ec4\u5339\u914d\u5230\u7684\u5185\u5bb9 matchObj . start ( n ), matchObj . end ( n ) # \u7b2cn\u7ec4\u5339\u914d\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u7d22\u5f15 ## \u6b63\u5219\u8bed\u6cd5 ( pattern ) # \u5206\u7ec4\u4e14\u6355\u83b7\uff0c \u4f7f\u7528`\\n`\u5f15\u7528 ( ? : pattern ) # \u5206\u7ec4\u4e0d\u6355\u83b7 ( ? P < name > pattern ) # \u5206\u7ec4\u6355\u83b7\u5e76\u547d\u540d\uff0c\u4f7f\u7528`\\g<name>` \u5f15\u7528 ( ? = pattern ) # \u5339\u914d\u540e\u9762\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4f46\u662f\u4e0d\u6d88\u8d39(\u5339\u914d\u5230\u7684\u5185\u5bb9\u91cc\u9762\u6ca1\u6709pattern\u5339\u914d\u5230\u7684\u90e8\u5206) ( ?! pattern ) # \u5339\u914d\u540e\u9762\u4e0d\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39 ( ? <= pattern ) # \u5339\u914d\u524d\u9762\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39 ( ? < ! pattern ) # \u5339\u914d\u524d\u9762\u4e0d\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39","title":"2. \u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#3","text":"import time import datetime now = datetime . datetime . now () # \u5f53\u524d\u65f6\u95f4 start = time . clock () end = time . clock () # end - start \u662f\u7ecf\u8fc7\u7684\u65f6\u95f4","title":"3. \u65f6\u95f4\u548c\u65e5\u671f"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#4-json","text":"import json Obj = json . loads ( json_text , object_paris_hook = OrderDict ) # \u6587\u672c\u8f6c\u6210\u7ed3\u6784 json_text = json . dumps ( Obj ) # \u7ed3\u6784\u8f6c\u6362\u6210\u6587\u672c","title":"4. JSON"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#5-sqlite","text":"import sqlite3 form sqlite3 import Error conn = create_connection ( db_file ) # \u4eceDB\u6587\u4ef6\u6253\u5f00\u6570\u636e\u5e93 current = conn . cursor () current . execute ( \"select * from table_name\" ) rows = current . fetchall () # \u83b7\u5f97\u6267\u884cSQL\u8bed\u53e5\u7684\u7ed3\u679c","title":"5. SQLITE"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#6","text":"","title":"6. \u6570\u636e\u7ed3\u6784"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#61","text":"","title":"6.1 \u5806"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#611-heapq","text":"import heapq heap = heapq . heapify ([ 1 , 2 , 3 , 4 , 5 , 6 ]) # \u521b\u5efa\u5806 heapq . heappush ( heap , element ) top = heapq . heappop ( heap ) list1 = heapq . nlargest ( k , heap , key = func ) # \u8fd4\u56de\u524dK\u5927 list2 = heapq . nsmallest ( k , heap , key = func ) # \u8fd4\u56de\u524dK\u5c0f","title":"6.1.1 heapq"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#612-queue","text":"\u5f15\u5165\u5305\uff1a from queue import PriorityQueue \u5b9a\u4e49\uff1a minHeap = PriorityQueue() # \u9ed8\u8ba4\u5efa\u7acb\u5c0f\u9876\u5806 \u5224\u7a7a: minHeap.empty() \u6dfb\u52a0\u5143\u7d20\uff1a minHeap.put((key,value)) \u4e0d\u80fd\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u4f20\u5165\u5143\u7ec4\uff0c\u6839\u636ekey\u7684\u503c\u5efa\u7acb\u5c0f\u9876\u5806 \u5806\u9876\u5143\u7d20\uff1a minHeap.get() \u53d6\u5f97\u5e76\u5220\u9664\uff0c\u4e0eC++\u4e2d\u7684top()\u4e0d\u540c \u6ce8\u610f \uff1a\u4f20\u5165\u5143\u7ec4\u7684\u65f6\u5019\u5982\u679ckey\u76f8\u540c, \u4f1a\u8fdb\u4e00\u6b65\u6bd4\u8f83value, \u5982\u679cvalue\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u800c\u4e14\u6ca1\u6709\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff0c\u4f1a\u62a5\u9519\uff0c\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u3002 \u5927\u90e8\u5206\u4f7f\u7528\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u5143\u7ec4 (key, data) \u63a7\u5236\u5806\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c \u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u5728\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u578b\u4e0a\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u3002","title":"6.1.2 queue"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#7","text":"","title":"7. \u5e38\u7528\u5e93"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#71-diff","text":"import difflib # \u83b7\u53d6string1, string2\u7684\u76f8\u4f3c\u5ea6\uff0c1\u8bf4\u660e\u5b8c\u5168\u76f8\u540c deltas = difflib . SequenceMatcher ( None , string1 , string2 ) . quick_ratio () # \u6bd4\u8f83\u76ee\u5f55\u548c\u6587\u4ef6 import filecmp","title":"7.1 diff"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#72","text":"import pickle pickle . dump ( Obj , file_path ) # \u7ed3\u6784\u5b58\u5165\u6587\u4ef6 Obj = pickle . load ( file_path ) # \u4ece\u6587\u4ef6\u6062\u590d\u7ed3\u6784","title":"7.2 \u5e8f\u5217\u5316"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#73","text":"# \u5904\u7406\u8f93\u5165\u9009\u9879 import getopt # cli import click","title":"7.3 \u8f93\u5165"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#8-python","text":"","title":"8. Python \u5e93"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#81-numpy","text":"import numpy as np a1 = np . array ([ 1 , 2 , 3 ]) a2 = np . array ([( 1 , 2 , 3 ), ( 4 , 5 , 6 )]) a3 = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) np . zeros (( n , m , k )) # n \u884c m \u5217 k \u5c42 np . ones (( n , m , k )) np . empty (( n , m , k )) # \u4e0d\u521d\u59cb\u5316\uff0c\u4f7f\u7528\u5185\u5b58\u539f\u6765\u7684\u503c np . arrange ([ start , end , step ]) # \u521b\u5efa\u8303\u56f4[start, end], \u6b65\u957f\u662fstep\u7684\u4e00\u7ef4\u6570\u7ec4 np . linespace ([ start , end , count ]) # \u521b\u5efa\u8303\u56f4\u4ece[start, end], \u603b\u6570\u91cf\u4e3acount\u7684\u4e00\u7ef4\u6570\u7ec4","title":"8.1 numpy"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#82-pandas","text":"\u53ef\u4ee5\u7406\u89e3\u4e3a\u7535\u5b50\u8868\u683c, \u63d0\u4f9b\u4e86\u7c7b\u4f3cSQL\u8bed\u53e5\u7684\u5f3a\u5927\u64cd\u4f5c\u80fd\u529b\u3002 import pandas as pd #Series \u4e00\u7ef4\u6570\u636e s = pd . Series ( data = 5 , index = [ 'a' , 'b' , 'c' ]) # \u521b\u5efa\u4e00\u7ef4\u5e26\u540d\u5b57\u7684\u6570\u7ec4 [5,5,5] \u5217\u540d\u79f0\u4e3a a, b, c s = pd . Series ( data = [ 1 , 2 , 3 ], index = [ 'a' , 'b' , 'c' ]) #\u521b\u5efa\u4e00\u7ef4\u5e26\u540d\u5b57\u7684\u6570\u7ec4 [1, 2, 3] \u5217\u540d\u79f0\u4e3a a, b, c s = pd . Series ({ \"a\" : 1 , \"b\" : 2 , \"c\" : 3 }) # key \u4f5c\u4e3a\u5217\u540d\u79f0\uff0c \u503c\u4f5c\u4e3a\u5217\u7684\u503c s = pd . Series ( data = dict , index = []) # key \u5982\u679c\u5728index\u4e2d\uff0c\u52a0\u5165\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u52a0\u5165\u8bbe\u7f6e\u503c\u4e3aNan # DataFrame \u4e8c\u4f4d\u6570\u636e df = pd . DataFrame () # \u7a7a df = read_csv ( file , names = []) # \u4eceCSV\u6587\u4ef6\u521b\u5efa\uff0c names\u4e3a\u6bcf\u4e00\u5217\u7684\u540d\u79f0 df = DataFrame ( data , index = [], columns = []) # data\u662f\u4e8c\u7ef4\u6570\u636e\uff0c index\u4e3a\u884c\u547d\u540d\uff0c columns\u4e3a\u5217\u547d\u540d df [ 'col_name' ], df [[ 'col1_name' , 'col2_name' ]] # \u9009\u62e9\u67d0\u4e9b\u5217 df . loc [ 'row_name' ], df . iloc [ row_index ], df [ row_begin_index : row_end_index ], df [ bool_vector ] # \u9009\u62e9\u67d0\u4e9b\u5217 del df [ 'row_name' ], del df . loc [ 'row_name' ] # \u5220\u9664\u67d0\u4e9b\u884c\uff0c \u5220\u9664\u67d0\u4e9b\u5217 groups = df . groupby ( 'col_name' ) # \u6309\u7167\u5217 col_name \u5206\u7ec4 df . sort_values ( 'col_name' ) # \u6309\u7167\u67d0\u4e00\u5217\u6392\u5e8f rows_unique = pd . unique ( df [ 'col_name' ]) # \u83b7\u5f97\u67d0\u5217\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c new_df = df [ df [ 'col_name' ] == 'value' ] # \u8fc7\u6ee4\u51fa\u5217\u503c\u4e3avalue\u7684\u6240\u6709\u884c # \u904d\u5386\u6bcf\u4e00\u884c for row_num , row_content in df . iterrows (): print ( row_num , row_content )","title":"8.2 pandas"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#83-graphviz","text":"\u4e00\u4e2a\u7528\u6765\u7ed8\u5236 .dot \u683c\u5f0f\u6587\u4ef6\u7684Python\u5305\u3002 # pip install graphviz from graphviz import Graph , Digraph # \u652f\u6301\u7684\u8f93\u51fa\u683c\u5f0f pdf, svg, png dot = Digraph ( comment = \"desciption\" , filename = 'filename' , format = 'pdf' ) dot . attr ( 'node' , shape = 'box' ) # \u4e3anode\u8bbe\u7f6e\u5f62\u72b6 dot . attr ( rankdir = 'LR' , size = '10,10' ) # \u8bbe\u7f6e\u56fe\u5f62\u5e03\u5c40\u4e3a\u4ece\u5de6\u5230\u53f3\uff0c10X10 dot . node ( 'name1' , 'description1' ) dot . node ( 'name1' , 'description1' ) dot . node ( 'name1' , 'description1' ) # \u8bbe\u7f6e\u8282\u70b9\u540d\u79f0 dot . edge ( 'name1' , 'name2' ) # \u8bbe\u7f6e\u8fb9 print ( dot . source ) # \u8f93\u51fa\u751f\u6210\u7684.dot\u683c\u5f0f\u6587\u4ef6 dot . view () # \u67e5\u770b\u751f\u6210\u7684\u56fe\u7247","title":"8.3 graphviz"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#9-pyton","text":"Pypi \u662f\u4e00\u4e2a\u53d1\u5e03\u7684\u5e73\u53f0\uff0c \u53d1\u5e03\u81ea\u5df1\u5199\u7684Python\u5e93\u4e4b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528pip install name \u5b89\u88c5\uff0c\u8fd8\u53ef\u4ee5\u5728pypi\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u81ea\u5df1\u7684\u5e93\u7684\u8bf4\u660e\u3002 \u6ce8\u518c\u8d26\u53f7\u5e76\u767b\u9646 https://pypi.org \u51c6\u5907\u6587\u4ef6 \u53bb\u4efb\u610f\u4e00\u4e2a\u5df2\u7ecf\u53d1\u5e03\u7684\u5305\u7684 github \u5305\u4e3b\u9875\u4e0a\uff0c \u628a\u5bf9\u5e94\u7684\u6587\u4ef6\u62f7\u8d1d\u4e0b\u6765\u4fee\u6539\u6210\u81ea\u5df1\u7684\u5185\u5bb9\u3002 setup.py\uff0c README.md\uff0c LICENSE \u4e09\u8005\u662f\u5fc5\u987b\u7684\u3002 \u6253\u5305 \u5728 setup.py \u540c\u7ea7\u4e0b\u6267\u884c python setup.py bdist_wheel --universal \u4e0a\u4f20 twine upload dist/* , \u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e4b\u540e\u4e0a\u4f20\u6210\u529f\u3002 \u53ef\u4ee5\u6253\u5f00\u7ed9\u51fa\u7684\u9875\u9762\u770b\u770b\u6548\u679c\u3002 https://pypi.org/project/mkdocs-render-otherfile-plugin/ \u5b89\u88c5\u9a8c\u8bc1 pip install package-name","title":"9. \u53d1\u5e03Pyton\u5e93"}]}